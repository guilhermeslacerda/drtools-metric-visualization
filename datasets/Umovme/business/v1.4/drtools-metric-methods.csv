"method","loc","cyclo","calls","nbd","param"
"me.umov.business.application.model.dto.SaveTaskDTO.toModel(TaskModel taskModel)",90,14,54,2,1
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfiguration.processRule()",32,14,35,2,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.equals(Object obj)",27,14,5,1,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverter.setRecurrenceConfiguration(SaveTaskScheduleGroupRequest request, RecurrenceConfigurationInterface entity)",22,12,35,1,2
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.equals(Object obj)",22,11,4,1,1
"me.umov.business.domain.model.builder.TaskLoader.loadAssociation(TaskModel model)",34,9,48,3,1
"me.umov.business.domain.itinerary.Itinerary.setWeekdays(List<Integer> weekdays)",34,9,15,2,1
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.equals(Object obj)",19,9,3,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withDaysOfWeek(Integer... daysOfWeek)",18,9,7,1,1
"me.umov.business.domain.workcycle.WorkCycleService.applyWorkCycleOperation(List<TaskActivityModel> taskActivities, List<TaskActivityModel> executedActivities, WorkCycleOperation operation)",40,8,32,2,3
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociated.processRule()",23,8,26,2,0
"me.umov.business.domain.itinerary.Itinerary.getWeekDays()",19,8,14,2,0
"me.umov.business.domain.task.TaskModel.sendNotificationCasesOnEditSchedule(TaskModel old)",14,8,8,2,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverter.childItineraryRecurrenceConfigurations(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",25,8,25,1,2
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.buildTeams(SaveTaskScheduleGroupRequest request)",22,7,22,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.buildTeams(SaveTaskScheduleGroupRequest request)",22,7,22,4,1
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.buildTaskSchedule(SaveTaskScheduleGroupRequest request)",17,7,12,4,1
"me.umov.business.application.service.IntegrationService.buildEntity(IntegrationModel<Long> entity, IntegrationRepository<T> repository)",20,7,17,2,2
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.buildActivities(SaveTaskScheduleGroupRequest request)",17,6,15,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.buildActivities(SaveTaskScheduleGroupRequest request)",17,6,15,4,1
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.loadTaskType(SaveTaskScheduleGroupRequest request)",15,6,11,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.loadTaskType(SaveTaskScheduleGroupRequest request)",15,6,11,4,1
"me.umov.business.domain.task.TaskServiceTest.shouldCopyTaskWithAllValues()",48,6,73,2,0
"me.umov.business.domain.task.TaskModel.getDateInterval()",23,6,6,2,0
"me.umov.business.application.model.notification.TaskNotification.getAgentIdList(List<AgentModel> agents)",9,6,6,2,1
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImpl.buildQuery(TaskModel taskModel)",18,6,22,1,1
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactory.get(RelationshipDTO relationshipDTO)",17,6,9,1,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverter.loadTaskType(SaveTaskScheduleGroupRequest request)",15,6,11,1,1
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",14,6,10,0,3
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",14,6,8,0,3
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.buildAgents(SaveTaskScheduleGroupRequest request)",15,5,14,4,1
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.buildLocals(SaveTaskScheduleGroupRequest request)",15,5,14,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.buildAgents(SaveTaskScheduleGroupRequest request)",15,5,14,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.buildLocals(SaveTaskScheduleGroupRequest request)",15,5,14,4,1
"me.umov.business.application.service.notification.TaskNotificationService.sendNotificationTo(TaskModel task)",14,5,8,3,1
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivities.isSatisfiedBy(ItinerarySchedule candidate)",13,5,11,3,1
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourney.processRule()",20,5,15,2,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.processRequiredFieldConfiguration(TaskConfigModel fieldConfiguration)",16,5,10,2,1
"me.umov.business.domain.itinerary.Itinerary.getRecurrenceConfiguration()",15,5,11,2,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHour.isSatisfiedBy(ItinerarySchedule itinerarySchedule)",13,5,7,2,1
"me.umov.business.domain.itinerary.Itinerary.cronExpression()",11,5,3,2,0
"me.umov.business.application.service.RecurrenceService.shouldSkipWeekDayAndWeekInMonthlyRepetition(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate)",10,5,9,2,2
"me.umov.business.application.model.dto.SaveTaskDTO.setSituationToInFieldWhenInPreparationAndFlagOn()",4,5,3,2,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getRecurrenceConfiguration()",15,5,9,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDate.processRule()",12,5,10,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.cronExpression()",11,5,3,1,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverter.setDefaultValues(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskScheduleBase)",9,5,11,1,2
"me.umov.business.domain.recurrence.RecurrenceConfiguration.hashCode()",9,5,4,1,0
"me.umov.business.application.repository.custom.ActivityRepositoryImpl.findDefaultActivitiesFor(Long clientId, List<String> origin, Long teamId, Long agentId, Long serviceLocalId, Long taskTypeId)",21,5,11,0,6
"me.umov.business.taskschedule.application.dto.RelationshipDTO.isRelationship(IntegrationModel<Long> integrationModel)",8,5,8,0,1
"me.umov.business.domain.task.TaskService.generateRecurrentTasks(TaskModel taskModel)",17,4,20,3,1
"me.umov.business.domain.task.TaskService.updateWorkCycleExecution(TaskDailyResume taskDailyResume)",15,4,20,3,1
"me.umov.business.application.service.RecurrenceService.processRecurrences(Recurrent recurrent, RecurrenceConfiguration recurrenceConfiguration)",24,4,15,2,2
"me.umov.business.application.service.CustomFieldValueService.loadEntityCustomFieldsConfig(BaseClientModel<Long> model)",18,4,22,2,1
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFields.processRule()",15,4,22,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFields.processRule()",15,4,22,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFields.processRule()",15,4,21,2,0
"me.umov.business.application.service.RecurrenceService.hasFiveOccurrencesOfTheDayWeekMonth(LocalDate processingDate, int weekDay)",14,4,8,2,2
"me.umov.business.application.service.RecurrenceService.shouldSkipWeekdayForRepeatEveryRule(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> intervals, Recurrent recurrent)",13,4,8,2,4
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfig.processRequiredFieldConfiguration(TaskConfigModel fieldConfiguration)",13,4,8,2,1
"me.umov.business.domain.itinerary.Itinerary.getDateInterval()",13,4,4,2,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombination.isSatisfiedBy(ItinerarySchedule itinerarySchedule)",12,4,5,2,1
"me.umov.business.domain.itinerary.specification.ShouldLoadAllServiceLocals.isSatisfiedBy(ItinerarySchedule candidate)",11,4,9,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithTeams.isSatisfiedBy(ItinerarySchedule candidate)",10,4,7,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithoutAgents.isSatisfiedBy(ItinerarySchedule candidate)",10,4,7,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeTeamsRelationWithAgents.isSatisfiedBy(ItinerarySchedule candidate)",10,4,7,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateTeamsByRelation.isSatisfiedBy(ItinerarySchedule candidate)",10,4,7,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateAutomaticActivityLoadConfig.isSatisfiedBy(ItinerarySchedule candidate)",10,4,6,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateItineraryActivitiesOriginWithoutActivities.isSatisfiedBy(ItinerarySchedule candidate)",10,4,6,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateMultipleActivitiesOrigin.isSatisfiedBy(ItinerarySchedule candidate)",10,4,6,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeams.isSatisfiedBy(ItinerarySchedule candidate)",10,4,5,2,1
"me.umov.business.domain.itinerary.Itinerary.getActivityOriginList()",8,4,6,2,0
"me.umov.business.domain.task.TaskModel.getActivityOriginList()",8,4,6,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.changedAgent(TaskModel taskModel)",6,4,6,2,1
"me.umov.business.domain.task.TaskModel.isAbleToSendNotification(TaskModel old)",6,4,2,2,1
"me.umov.business.domain.itinerary.ItinerarySchedule.getDateInterval()",13,4,4,1,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocal.processRule()",11,4,6,1,0
"me.umov.business.domain.generic.specification.ShouldHaveValidId.isSatisfiedBy(T candidate)",10,4,9,1,1
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.hashCode()",8,4,3,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.hashCode()",8,4,3,1,0
"me.umov.business.application.authorization.JWTService.getAccesToken(Claim accesToken)",7,4,4,1,1
"me.umov.business.infrastructure.jpa.LocalTimeConverter.convertToEntityAttribute(String dbData)",12,4,4,0,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactory.get(SaveTaskScheduleGroupRequest request)",11,4,4,0,1
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getId()",5,4,2,0,0
"me.umov.business.domain.task.TaskService.copy(TaskModel t)",67,3,97,3,1
"me.umov.business.application.observer.NotificationAfterSaveTask.process(TaskSavedEvent event)",15,3,14,3,1
"me.umov.business.domain.task.TaskService.prioritize(List<Long> tasksIds)",15,3,5,3,1
"me.umov.business.domain.task.TaskService.assignAgentsTasks(AssignAgentsTasksDTO assignAgentsTasks)",13,3,11,3,1
"me.umov.business.domain.task.TaskService.updateTaskWorkCycles(TaskModel task)",11,3,9,3,1
"me.umov.business.application.controller.TaskController.computeDailyResume(@RequestBody List<TaskDailyResume> taskDailyResumes)",20,3,16,2,1
"me.umov.business.domain.itinerary.Itinerary.replaceAgentItineraries(List<AgentRelationship> agents)",18,3,14,2,1
"me.umov.business.domain.itinerary.Itinerary.replaceTeamItineraries(List<TeamRelationship> teams)",18,3,14,2,1
"me.umov.business.application.service.RecurrenceService.shouldSkipWeekdayInWeeklyRepetition(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> intervals, Recurrent recurrent)",15,3,17,2,4
"me.umov.business.domain.itinerary.Itinerary.setRecurrenceConfiguration(RecurrenceConfiguration recurrenceConfiguration)",14,3,23,2,1
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.processRule()",12,3,3,2,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllAgents.isSatisfiedBy(ItinerarySchedule candidate)",11,3,8,2,1
"me.umov.business.domain.itinerary.specification.ShouldLoadAllTeams.isSatisfiedBy(ItinerarySchedule candidate)",11,3,8,2,1
"me.umov.business.domain.itinerary.specification.ShouldValidateAgentRelationEqualsAllAgents.isSatisfiedBy(ItinerarySchedule candidate)",10,3,5,2,1
"me.umov.business.application.service.RecurrenceService.shouldSkipWeekdayForConfiguration(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate)",10,3,4,2,2
"me.umov.business.domain.itinerary.Itinerary.shouldDisableCron()",5,3,2,2,0
"me.umov.business.domain.task.TaskModel.isCanceled()",4,3,3,2,0
"me.umov.business.domain.task.TaskModel.isInPreparation()",4,3,3,2,0
"me.umov.business.domain.task.TaskModel.isPendingToDispatch()",4,3,3,2,0
"me.umov.business.domain.task.TaskModel.isRetrievedFromField()",4,3,3,2,0
"me.umov.business.anticorruption.itinerary.WorkCycleScheduleConverterImpl.convertFrom(SaveWorkCycleScheduleRequest request)",41,3,44,1,1
"me.umov.business.application.model.WorkJourneyModel.isDateIntervalInsideOfJourney(DateInterval dateInterval)",15,3,9,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setRecurrenceConfiguration(RecurrenceConfiguration recurrenceConfiguration)",11,3,19,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getId(RelationshipDTO dto)",11,3,11,1,1
"me.umov.business.application.observer.ItineraryCronSchedulerObserver.process(ItinerarySaved event)",10,3,5,1,1
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserver.process(ItineraryScheduleSaved event)",10,3,5,1,1
"me.umov.business.utils.specification.domain.AndSpecification.isSatisfiedBy(T candidate)",9,3,8,1,1
"me.umov.business.utils.specification.domain.OrSpecification.isSatisfiedBy(T candidate)",9,3,8,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidAgent.processRule()",9,3,3,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidTeam.processRule()",9,3,3,1,0
"me.umov.business.application.service.DistributionTask.theyAreOnTheSameTeam(List<TaskModel> listTask)",7,3,5,1,1
"me.umov.business.application.interceptor.JWTAuthorizationInterceptor.shouldValidateJWTToken(Object handler)",7,3,2,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validateCancelledSituationToNextSituations(ArrayList<RuleMessage> messages)",6,3,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validateInFieldSituationToNextSituations(ArrayList<RuleMessage> messages)",6,3,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validatePendingSituationToNextSituations(ArrayList<RuleMessage> messages)",6,3,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validatePreparationSituationToNextSituations(ArrayList<RuleMessage> messages)",6,3,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validateReturnedSituationToNextSituations(ArrayList<RuleMessage> messages)",6,3,3,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.shouldDisableCron()",5,3,2,1,0
"me.umov.business.application.repository.custom.AgentRepositoyCustom.getQuery(List<String> ignoreTaskType)",32,3,5,0,1
"me.umov.business.application.model.dto.CustomFieldValueDTO.toCustomFieldValueModel()",9,3,4,0,0
"me.umov.business.application.repository.custom.AgentRepositoyCustom.findIdleAgentsByTeam(Long clientId, Long teamId, List<String> ignoreTaskType)",8,3,7,0,3
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.identity()",8,3,5,0,0
"me.umov.business.domain.task.TaskDailyResume.getArrayNonconformities()",7,3,10,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.rootIdentifier()",7,3,3,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.nodeIdentifier()",7,3,1,0,0
"me.umov.business.application.service.DistributionIdleAgent.getAgentAvailable(TaskModel taskModel, RuleRequestDTO dto)",6,3,7,0,2
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryInitialDateGreaterThanToday.isSatisfiedBy(ItinerarySchedule candidate)",6,3,6,0,1
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryScheduleInitialDateGreaterThanToday.isSatisfiedBy(ItinerarySchedule candidate)",6,3,6,0,1
"me.umov.business.domain.task.TaskDailyResume.getId()",5,3,2,0,0
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.convertFrom(SaveTaskScheduleGroupRequest request)",42,2,51,4,1
"me.umov.business.domain.task.TaskService.assignTaskWorkCycles(TaskModel task)",14,2,12,3,1
"me.umov.business.domain.task.TaskService.applyAuditValues(TaskModel task)",7,2,9,3,1
"me.umov.business.domain.model.builder.TaskLoader.applyDefaultValues(TaskModel task)",6,2,5,3,1
"me.umov.business.application.model.dto.SaveTaskDTO.addOrRemoveTaskItemsFrom(TaskModel taskModel)",15,2,32,2,1
"me.umov.business.application.service.CustomFieldValueService.removeMultipleListValues(BaseClientModel<Long> clientModel, List<CustomFieldValueModel> customFields)",12,2,26,2,2
"me.umov.business.application.service.CustomFieldValueService.saveAll(BaseClientModel<Long> clientModel, List<CustomFieldValueModel> customFields)",11,2,7,2,2
"me.umov.business.domain.workcycle.WorkCycleService.assignWorkCycle(TaskModel task, List<TaskActivityModel> taskActivities)",10,2,5,2,2
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfig.processRule()",10,2,3,2,0
"me.umov.business.application.service.RecurrenceService.shouldProcess(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, Integer recurrenceCount)",8,2,8,2,3
"me.umov.business.application.service.CustomFieldValueService.removeWithoutValue(BaseClientModel<Long> clientModel, List<CustomFieldValueModel> customFields)",7,2,10,2,2
"me.umov.business.application.service.RecurrenceService.generateRecurrenceDates(Recurrent recurrent)",7,2,4,2,1
"me.umov.business.domain.itinerary.Itinerary.setActivityOriginList(List<ItineraryActivityOrigin> activityOriginList)",7,2,4,2,1
"me.umov.business.domain.task.TaskModel.setActivityOriginList(List<ActivityOrigin> activityOriginList)",7,2,4,2,1
"me.umov.business.application.controller.agent.AgentController.byId(@PathVariable Long id)",7,2,2,2,1
"me.umov.business.domain.itinerary.Itinerary.addAgent(ItineraryAgent itineraryAgent)",6,2,1,2,1
"me.umov.business.utils.specification.domain.BaseValidator.checkResults(List<SpecificationResult> results)",5,2,12,2,1
"me.umov.business.application.service.RecurrenceService.shouldSkipDayInMonthlyRepetition(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate)",5,2,3,2,2
"me.umov.business.application.service.RecurrenceService.getDayOfWeek(LocalDate date)",5,2,2,2,1
"me.umov.business.application.service.RecurrenceService.deserialize(String recurrenceConfigurationJSON)",5,2,1,2,1
"me.umov.business.domain.itinerary.Itinerary.addItineraryActivity(ItineraryActivity itineraryActivity)",5,2,1,2,1
"me.umov.business.domain.itinerary.Itinerary.addTeam(ItineraryTeam itineraryTeam)",5,2,1,2,1
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.shouldProcessField(String taskFieldName)",5,2,1,2,1
"me.umov.business.domain.task.TaskModel.isForTeamExecution()",4,2,5,2,0
"me.umov.business.domain.task.TaskModel.getTeamId()",4,2,3,2,0
"me.umov.business.domain.task.TaskModel.setTeamExecution(TeamExecution teamExecution)",4,2,1,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.getOperation()",3,2,1,2,0
"me.umov.business.domain.task.TaskModel.getActivityOriginCode()",3,2,1,2,0
"me.umov.business.domain.task.TaskModel.getAgentId()",3,2,1,2,0
"me.umov.business.domain.task.TaskModel.getServiceLocalId()",3,2,1,2,0
"me.umov.business.domain.task.TaskModel.getTaskTypeId()",3,2,1,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.toCustomFieldsModels()",2,2,4,2,0
"me.umov.business.application.model.notification.TaskNotification.setStatus(TaskNotificationStatus status)",2,2,1,2,1
"me.umov.business.application.model.notification.TaskNotification.setType(TaskNotificationType type)",2,2,1,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.getSendSituationToInField()",2,2,0,2,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.processRule()",19,2,10,1,0
"me.umov.business.infrastructure.serialization.HibernateProxyTypeAdapter.write(JsonWriter out, HibernateProxy value)",15,2,7,1,2
"me.umov.business.application.model.ServiceLocalModel.setAddress(Address address)",13,2,11,1,1
"me.umov.business.infrastructure.servicelocal.ServiceLocalDAOImpl.findAll(List<Long> ids)",12,2,10,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHour.processRule()",12,2,9,1,0
"me.umov.business.domain.itinerary.ItineraryService.detachActivity(Long workCycleId, Long activityId)",11,2,11,1,2
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImpl.buildSql(boolean hasFinalDate)",11,2,7,1,1
"me.umov.business.domain.event.DomainEventRegistry.findElegibleListeners(DomainEvent event)",10,2,11,1,1
"me.umov.business.domain.itinerary.ItineraryService.attachActivity(Long workCycleId, Long activityId)",10,2,9,1,2
"me.umov.business.domain.itinerary.ItineraryService.attachServiceLocal(Long workCycleId, Long serviceLocalId)",10,2,9,1,2
"me.umov.business.domain.itinerary.ItineraryService.detachServiceLocal(Long workCycleId, Long serviceLocalId)",10,2,8,1,2
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDate.processRule()",10,2,6,1,0
"me.umov.business.application.service.DistributionTask.redistribution(List<TaskModel> listTask, RuleRequestDTO dto)",9,2,9,1,2
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.ensureClientProjectExistance(String projectName)",9,2,5,1,1
"me.umov.business.domain.servicelocal.Address.resolveGeoCoordinate()",9,2,4,1,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelected.processRule()",9,2,3,1,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolio.processRule()",9,2,3,1,0
"me.umov.business.infrastructure.activity.ActivityDAOImpl.findAll(List<Long> ids)",9,2,2,1,1
"me.umov.business.infrastructure.agent.AgentDAOImpl.findAll(List<Long> ids)",9,2,2,1,1
"me.umov.business.infrastructure.team.TeamDAOImpl.findAll(List<Long> ids)",9,2,2,1,1
"me.umov.business.domain.rule.task.ShouldHaveTaskModel.processRule()",9,2,2,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskType.processRule()",9,2,2,1,0
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.addRelationship(RelationshipDTO dto, Itinerary itinerary)",8,2,6,1,2
"me.umov.business.domain.itinerary.ItineraryService.findItinerarySchedule(Long workCycleId)",8,2,3,1,1
"me.umov.business.domain.model.builder.BaseLoader.loadModelForOperation(IOperationDTO<TModel> dto)",7,2,6,1,1
"me.umov.business.application.service.DistributionTask.saveTask(List<TaskModel> listTask, AgentModel agentModel)",7,2,4,1,2
"me.umov.business.application.interceptor.JWTAuthorizationInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)",7,2,3,1,3
"me.umov.business.domain.generic.specification.ShouldHaveUniqueDescription.isSatisfiedBy(T candidate)",7,2,3,1,1
"me.umov.business.application.model.WorkJourneyDayModel.isInsideOfInterval(LocalTime time, LocalTime initialTime, LocalTime finalTime)",6,2,4,1,3
"me.umov.business.application.model.fixture.TaskModelFixture.withAgentId(Long agentId)",6,2,4,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withTeamId(Long teamId)",6,2,4,1,1
"me.umov.business.domain.itinerary.specification.ShouldHaveStartDateLessThanEndDate.isSatisfiedBy(ItinerarySchedule itinerarySchedule)",6,2,3,1,1
"me.umov.business.domain.client.Client.getIdiomId()",6,2,2,1,0
"me.umov.business.application.authorization.JWTService.extractJwtFromRequestAuthorizationHeader(String authorizationHeader)",6,2,1,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.remove(RelationshipDTO dto, Itinerary itinerary)",5,2,7,1,2
"me.umov.business.application.observer.TaskSavedObserver.assignTaskWorkCycles(TaskSavedEvent event)",5,2,5,1,1
"me.umov.business.application.service.DistributionTask.verifyByTask(List<TaskModel> listTask)",5,2,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.validateNewTaskToNextSituations(ArrayList<RuleMessage> messages)",5,2,3,1,1
"me.umov.business.application.model.Interval.Interval(String interval)",5,2,1,1,1
"me.umov.business.application.model.Interval.validateInterval(String interval)",5,2,1,1,1
"me.umov.business.application.service.idiom.IdiomWrapper.scheduleSendNotificationMessage(String parameter)",5,2,1,1,1
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolio.validateLocalAgentPortfolio(List<RuleMessage> validationMessages)",4,2,5,1,1
"me.umov.business.domain.client.Client.getIdiom()",4,2,1,1,0
"me.umov.business.domain.event.DomainEventRegistry.checkEvent(DomainEvent event)",4,2,0,1,1
"me.umov.business.application.service.DistributionTask.hasTask(List<TaskModel> listTask)",3,2,2,1,1
"me.umov.business.application.authorization.JWTService.getAgentId(Claim agentId)",2,2,1,1,1
"me.umov.business.domain.itinerary.ItineraryCronService.createCronFor(Itinerary itinerary)",12,2,12,0,1
"me.umov.business.domain.itinerary.ItineraryScheduleCronService.createCronFor(ItinerarySchedule itinerarySchedule)",12,2,12,0,1
"me.umov.business.application.interceptor.CORSInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)",12,2,7,0,3
"me.umov.business.application.service.BaseService.processValidationRules(List<BusinessRule> validationRules)",8,2,10,0,1
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDate.processRule()",8,2,3,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeam.processRule()",8,2,3,0,0
"me.umov.business.utils.specification.rule.EntityConstraintValidator.validateConstraints(T entity)",7,2,10,0,1
"me.umov.business.domain.itinerary.ItineraryCronService.disableCronFor(Itinerary itinerary)",7,2,6,0,1
"me.umov.business.domain.itinerary.ItineraryScheduleCronService.disableCronFor(ItinerarySchedule itinerarySchedule)",7,2,6,0,1
"me.umov.business.utils.specification.domain.SpecificationResult.notSatisfied(List<String>... messages)",7,2,6,0,1
"me.umov.business.domain.rule.task.ShouldInitiateToday.processRule()",7,2,5,0,0
"me.umov.business.domain.rule.task.ShouldBeActive.processRule()",7,2,4,0,0
"me.umov.business.domain.rule.task.ShouldBeInPreparation.processRule()",7,2,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeam.processRule()",7,2,3,0,0
"me.umov.business.domain.rule.task.ShouldNotHaveAgent.processRule()",6,2,3,0,0
"me.umov.business.application.controller.TaskTypeController.byId(@PathVariable Long id)",6,2,2,0,1
"me.umov.business.infrastructure.serialization.HttpStatusSerializationAdapter.serialize(HttpStatus src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapter.serialize(LocalDate src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapter.serialize(LocalDateTime src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapter.serialize(LocalTime src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.business.infrastructure.jpa.LocalTimeConverter.convertToDatabaseColumn(LocalTime attribute)",6,2,1,0,1
"me.umov.business.utils.specification.rule.ValidationRules.ValidationRules(List<BusinessRule> validationRules)",6,2,0,0,1
"me.umov.business.domain.client.SystemParameters.isOnlyOneAgentTeam()",5,2,4,0,0
"me.umov.business.application.service.FactoryDistributionTask.get(ActionType actionType)",5,2,2,0,1
"me.umov.business.domain.recurrence.DateInterval.from(LocalDateTime initialDatetime, Duration duration)",5,2,1,0,2
"me.umov.business.infrastructure.jpa.AbsenceActionConverter.convertToDatabaseColumn(AbsenceAction attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ActivityCycleConverter.convertToDatabaseColumn(ActivityCycle attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ActivityExecutionModeConverter.convertToDatabaseColumn(ActivityExecutionMode attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ActivityOriginConverter.convertToDatabaseColumn(ActivityOrigin attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.AgentPorfolioValidationConverter.convertToDatabaseColumn(AgentPortfolioValidation attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.BooleanStatusConverter.convertToDatabaseColumn(BooleanStatus attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.CustomFieldSubTypeConverter.convertToDatabaseColumn(CustomFieldSubType attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.CustomFieldTypeConverter.convertToDatabaseColumn(CustomFieldType attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ExportSituationConverter.convertToDatabaseColumn(ExportSituation attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.FieldConfigOriginConverter.convertToDatabaseColumn(FieldConfigOrigin attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.FrequencyControlTypeConverter.convertToDatabaseColumn(FrequencyControlType attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ItineraryAgentRelationConverter.convertToDatabaseColumn(ItineraryAgentRelation attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.RecurrenceEndTypeConverter.convertToDatabaseColumn(RecurrenceEndType attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.RecurrenceRepeatModeConverter.convertToDatabaseColumn(RecurrenceRepeatMode attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.ScheduleTypeConverter.convertToDatabaseColumn(ScheduleType attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.TaskScheduleActivityOriginConverter.convertToDatabaseColumn(ItineraryActivityOrigin attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.TeamExecutionConverter.convertToDatabaseColumn(TeamExecution attribute)",5,2,1,0,1
"me.umov.business.infrastructure.jpa.WorkdayTaskCreationValidationConverter.convertToDatabaseColumn(WorkdayTaskCreationValidation attribute)",5,2,1,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTeamExecution()",5,2,0,0,0
"me.umov.business.application.service.ActivityService.defaultActivitiesPerOrigin(List<ActivityOrigin> activityOrigins, Long teamId, Long agentId, Long serviceLocalId, Long taskTypeId)",4,2,8,0,5
"me.umov.business.application.exception.BusinessValidationException.getMessages()",4,2,6,0,0
"me.umov.business.application.exception.DeleteException.getMessages()",4,2,6,0,0
"me.umov.business.utils.specification.domain.SpecificationException.getMessages()",4,2,6,0,0
"me.umov.business.domain.task.TaskFieldNameResolver.resolve(String key)",4,2,2,0,1
"me.umov.business.domain.recurrence.DateInterval.getDuration()",4,2,2,0,0
"me.umov.business.anticorruption.activityHistory.ActivityHistoryConverterImpl.verify(Long activityHistoryId)",4,2,1,0,1
"me.umov.business.application.service.idiom.IdiomEntryService.getIdiomMessage(Client client, String key)",3,2,2,0,2
"me.umov.business.application.model.TeamModel.getFirstAgent()",3,2,2,0,0
"me.umov.business.application.service.BaseService.detachAll(List<TBusinessModel> models)",3,2,1,0,1
"me.umov.business.utils.specification.rule.ValidationRules.verify(List<RuleMessage> validationMessages)",3,2,1,0,1
"me.umov.business.application.model.TeamAgentModel.getAgentId()",3,2,1,0,0
"me.umov.business.application.model.TeamModel.hasOneAndOnlyAgent()",3,2,1,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.resolveGeoCoordinate()",3,2,1,0,0
"me.umov.business.domain.task.TaskActivityModel.getActivityId()",3,2,1,0,0
"me.umov.business.domain.task.TaskItemModel.getItemId()",3,2,1,0,0
"me.umov.business.infrastructure.queue.MessageDTO.verify(Long id)",3,2,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.initIgnoreTaskType()",3,2,0,0,0
"me.umov.business.domain.model.builder.CustomFieldValueLoader.loadFrom(List<CustomFieldValueDTO> customFieldsDTO)",2,2,4,0,1
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getTimeWithoutExecution()",2,2,1,0,0
"me.umov.business.application.model.dto.TaskItemDTO.getItemId()",2,2,1,0,0
"me.umov.business.domain.client.SystemParameters.isDateTaskBlocked()",2,2,1,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.getActivityId()",2,2,1,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getAgentId()",2,2,1,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getServiceLocalId()",2,2,1,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.getTeamId()",2,2,1,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getDescription()",2,2,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getFinalHour()",2,2,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getInitialHour()",2,2,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getTraveledDistance()",2,2,0,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.childItineraryRecurrenceConfigurations(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",14,1,24,4,2
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.convertFrom(SaveTaskScheduleGroupRequest request)",7,1,4,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.setDefaultValues(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",5,1,8,4,2
"me.umov.business.taskschedule.anticorruption.TaskScheduleGroupConverterImpl.convertFrom(IdDTO idDTO)",2,1,3,4,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.getRepository()",2,1,0,4,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.getUserData()",2,1,0,4,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.setSpecificValues(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",0,1,0,4,2
"me.umov.business.taskschedule.anticorruption.taskSchedule.AbstractTaskScheduleGroupConverter.buildTaskSchedule(SaveTaskScheduleGroupRequest request)",0,1,0,4,1
"me.umov.business.domain.task.TaskService.save(SaveTaskDTO dto)",14,1,8,3,1
"me.umov.business.domain.task.TaskService.computeDailyResume(TaskDailyResume taskDailyResume)",11,1,16,3,1
"me.umov.business.application.service.notification.TaskNotificationService.sendSaveScheduleNotification(TaskModel task)",10,1,9,3,1
"me.umov.business.application.observer.NotificationAfterSaveTask.createRule(TaskModel taskModel, Event event)",9,1,12,3,2
"me.umov.business.domain.task.TaskService.cancel(CancelTaskDTO dto)",9,1,6,3,1
"me.umov.business.domain.task.TaskService.isTaskBeingCancelledOrInactivated(TaskModel task)",7,1,8,3,1
"me.umov.business.domain.task.TaskService.saveTaskAndCustomFields(TaskModel task)",7,1,4,3,1
"me.umov.business.domain.model.builder.TaskLoader.load(TaskModel model, IOperationDTO<TaskModel> dto)",6,1,4,3,2
"me.umov.business.domain.model.builder.TaskLoader.loadCustomField(TaskModel model, ICustomFields dto)",4,1,3,3,2
"me.umov.business.domain.model.builder.TaskLoader.getOperationValidationBuilder(Operation operation)",3,1,0,3,1
"me.umov.business.application.observer.NotificationAfterSaveTask.getEventNotificationWhenSavingTask(TaskModel taskModel)",2,1,3,3,1
"me.umov.business.domain.task.TaskService.findByGroupAndSituationIdAndClientId(String group, Long clientId)",2,1,1,3,2
"me.umov.business.domain.task.TaskService.existTaskOnDateIntervalByAgent(TaskModel taskModel)",2,1,1,3,1
"me.umov.business.domain.task.TaskServiceTest.shouldSaveAssignAgentsToTasks()",30,1,36,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldGenerateRecurrenceTasks()",26,1,63,2,0
"me.umov.business.domain.itinerary.Itinerary.replaceServiceLocalItineraries(List<ItineraryServiceLocalRelationship> serviceLocals)",17,1,18,2,1
"me.umov.business.domain.task.TaskServiceTest.shouldNotUpdateWorkCycleStateWhenClientDontUseFrequencyControl()",16,1,29,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldUpdateWorkCycleStateWithTaskExecutedOperationForAllComputedActivities()",15,1,28,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldCallMethodsWhenInsertWithCustomFields()",14,1,34,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldNotCallGenerateRecurrentTasksOnSave()",14,1,32,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldChangeTasksPriority()",14,1,26,2,0
"me.umov.business.domain.itinerary.Itinerary.replaceActivityItineraries(List<ActivityRelationship> activities)",14,1,13,2,1
"me.umov.business.domain.task.TaskServiceTest.shouldNotAssignWorkCycleToTaskActivitiesWhenClientDontUseFrequencyControl()",13,1,24,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldCancelTask()",13,1,23,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldAssignWorkCycleToTaskActivities()",13,1,21,2,0
"me.umov.business.application.controller.agent.AgentController.computeJourneySchedules(@RequestBody List<AgentJourneyHoursDTO> agentJourneyHours)",13,1,12,2,1
"me.umov.business.application.model.notification.TaskNotification.TaskNotification(Long clientId, List<AgentModel> agents, String message)",13,1,4,2,3
"me.umov.business.domain.task.TaskServiceTest.shouldCallMethodsWhenInsertWithoutCustomFields()",12,1,26,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldUpdateWorkCycleOnCancelTaskWhenClientUseFrequencyControl()",12,1,20,2,0
"me.umov.business.application.service.CustomFieldValueService.copyAll(List<CustomFieldValueModel> customFields)",11,1,12,2,1
"me.umov.business.application.controller.TaskController.saveBatch(@RequestBody List<SaveTaskDTO> dtos)",11,1,11,2,1
"me.umov.business.application.model.notification.TaskNotification.toString()",11,1,0,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldDispatchBeforeTaskSavedDomainEvent()",10,1,20,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldDispatchTaskSavedDomainEvent()",10,1,20,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldApplyAuditTaskModelValuesOnInsert()",9,1,15,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldApplyAuditTaskModelValuesOnUpdate()",9,1,14,2,0
"me.umov.business.application.controller.TaskController.distributionTask(@RequestBody RuleRequestDTO dto)",9,1,7,2,1
"me.umov.business.application.service.CustomFieldValueService.buildSaveModelCustomFieldsRules(BaseClientModel<Long> model, List<CustomFieldValueModel> customFields)",9,1,4,2,2
"me.umov.business.application.controller.TaskController.prioritize(@Valid @RequestBody PrioritizeTasksDTO dto)",9,1,4,2,1
"me.umov.business.application.controller.TaskController.assignAgentsTasks(@Valid @RequestBody AssignAgentsTasksDTO dto)",9,1,3,2,1
"me.umov.business.utils.specification.domain.BaseValidator.runValidations(T entity, List<ISpecification<T>> specifications)",8,1,8,2,2
"me.umov.business.domain.itinerary.Itinerary.inactivateAllDays()",8,1,7,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldCallRepositoryToComputeTaskResumeData()",7,1,17,2,0
"me.umov.business.domain.task.TaskServiceTest.shouldQueryTaskById()",7,1,13,2,0
"me.umov.business.application.service.CustomFieldValueService.removeAllValuesInValoredLists(BaseClientModel<Long> clientModel, List<CustomFieldValueModel> customFields)",6,1,14,2,2
"me.umov.business.domain.task.TaskServiceTest.setup()",6,1,7,2,0
"me.umov.business.domain.workcycle.WorkCycleService.generateWorkCycles(Long serviceLocalId, List<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",6,1,2,2,5
"me.umov.business.domain.workcycle.WorkCycleService.findWorkCycle(TaskModel task, TaskActivityModel taskActivity)",5,1,6,2,2
"me.umov.business.application.service.CustomFieldValueService.applyModelValues(BaseClientModel<Long> clientModel, List<CustomFieldValueModel> customFields)",5,1,5,2,2
"me.umov.business.application.controller.TaskController.buildResultProcessRule(Exception exception)",5,1,2,2,1
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfig.shouldProcessRule()",5,1,1,2,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfig.getRequiredAndActiveAgentField()",4,1,10,2,0
"me.umov.business.application.service.CustomFieldValueService.saveWithValue(List<CustomFieldValueModel> customFields)",4,1,8,2,1
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.filterRequiredFields()",4,1,8,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.initTaskModel()",4,1,2,2,0
"me.umov.business.domain.task.TaskModel.getTaskSituation()",4,1,1,2,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfig.ShouldHaveAgentByRequiredTaskConfig(TaskModel taskModel, List<TaskConfigModel> taskFieldsConfigurations)",4,1,0,2,2
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.ShouldHaveRequiredTaskConfigFields(TaskModel taskModel, List<TaskConfigModel> taskFieldsConfigurations)",4,1,0,2,2
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourney.ShouldHaveScheduleInsideOfAgentJourney(TaskModel taskModel, AgentModel agent)",4,1,0,2,2
"me.umov.business.application.controller.TaskController.taskSituations()",3,1,7,2,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourney.shouldProcessRule()",3,1,3,2,0
"me.umov.business.utils.specification.domain.BaseValidator.validate(T entity, List<ISpecification<T>> specifications)",3,1,2,2,2
"me.umov.business.application.controller.TaskController.cancel(@RequestBody CancelTaskDTO dto)",3,1,2,2,1
"me.umov.business.application.controller.TaskController.save(@RequestBody SaveTaskDTO dto)",3,1,2,2,1
"me.umov.business.domain.workcycle.WorkCycleService.updateWorkCyclesState(List<Long> workCycleIds)",3,1,2,2,1
"me.umov.business.domain.itinerary.Itinerary.hasServiceLocals()",3,1,1,2,0
"me.umov.business.domain.itinerary.Itinerary.hasTaskType()",3,1,1,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFields.shouldProcessRule()",3,1,1,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFields.shouldProcessRule()",3,1,1,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFields.shouldProcessRule()",3,1,1,2,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociated.shouldProcessRule()",3,1,1,2,0
"me.umov.business.domain.task.TaskModel.hasDateInterval()",3,1,1,2,0
"me.umov.business.domain.task.TaskModel.hasRecurrenceConfiguration()",3,1,1,2,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFields.ShouldHaveRequiredCustomFields(List<CustomFieldValueModel> customFields, List<CommonCustomFieldConfig> fieldsConfigurations)",3,1,0,2,2
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFields.ShouldHaveValidGeocoordinateCustomFields(List<CustomFieldValueModel> customFields, List<CommonCustomFieldConfig> fieldsConfigurations)",3,1,0,2,2
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFields.ShouldHaveValidMultimidiaURLCustomFields(List<CustomFieldValueModel> customFields, List<CommonCustomFieldConfig> fieldsConfigurations)",3,1,0,2,2
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociated.ShouldHaveValidActivitiesAssociated(TaskModel task, List<ActivityModel> defaultActivitiesPerOrigin)",3,1,0,2,2
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfiguration.ShouldHaveValidRecurrenceConfiguration(LocalDate initialDate, RecurrenceConfiguration recurrenceConfiguration)",3,1,0,2,2
"me.umov.business.application.model.notification.TaskNotification.setClientId(Long clientId)",3,1,0,2,1
"me.umov.business.application.model.notification.TaskNotification.setId(Long id)",3,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setClientId(Long clientId)",3,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setId(Long id)",3,1,0,2,1
"me.umov.business.domain.task.TaskModel.setId(Long id)",3,1,0,2,1
"me.umov.business.application.model.notification.TaskNotification.getClientId()",3,1,0,2,0
"me.umov.business.application.model.notification.TaskNotification.getId()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getClientId()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getId()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.hasActivities()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.hasAgents()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.hasCron()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.isNew()",3,1,0,2,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFields.shouldProcessRule()",3,1,0,2,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfiguration.shouldProcessRule()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.getId()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasAgent()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasServiceLocal()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasTaskActivities()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasTaskItems()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasTaskType()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasTeam()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.hasTeamExecution()",3,1,0,2,0
"me.umov.business.domain.task.TaskModel.isNew()",3,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.activitiesIds()",2,1,4,2,0
"me.umov.business.domain.itinerary.Itinerary.agentsIds()",2,1,4,2,0
"me.umov.business.domain.itinerary.Itinerary.serviceLocalsIds()",2,1,4,2,0
"me.umov.business.domain.itinerary.Itinerary.teamsIds()",2,1,4,2,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfiguration.isRepeatUnitDailyOrWeekly()",2,1,4,2,0
"me.umov.business.domain.itinerary.Itinerary.isItineraryActivitiesOrigin()",2,1,3,2,0
"me.umov.business.domain.task.TaskModel.canNotSendNotificationSituations()",2,1,3,2,0
"me.umov.business.domain.task.TaskModel.isAbleToSendNotification()",2,1,3,2,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfiguration.isEndType(RecurrenceEndType date)",2,1,2,2,1
"me.umov.business.domain.itinerary.Itinerary.isToSomeTeams()",2,1,2,2,0
"me.umov.business.domain.itinerary.Itinerary.addServiceLocal(ItineraryServiceLocal itineraryServiceLocal)",2,1,1,2,1
"me.umov.business.domain.task.TaskModel.mustSetToDoNotExecuteForTeam(TeamExecution teamExecution)",2,1,1,2,1
"me.umov.business.domain.task.TaskModel.setTaskSituation(TaskSituation taskSituation)",2,1,1,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.isNewTask()",2,1,1,2,0
"me.umov.business.application.model.notification.TaskNotification.getType()",2,1,1,2,0
"me.umov.business.domain.itinerary.Itinerary.hasNoTeamExecution()",2,1,1,2,0
"me.umov.business.domain.task.TaskModel.isActive()",2,1,1,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.setActive(BooleanStatus active)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setActivityOrigin(ActivityOrigin activityOrigin)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setActivityOriginList(List<ActivityOrigin> activityOriginList)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setAgentId(Long agentId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setClientId(Long clientId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setCreatedByModule(String createdByModule)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setCustomField1(String customField1)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setCustomField2(String customField2)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setCustomField3(String customField3)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setCustomFields(List<CustomFieldValueDTO> customFields)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setFinalDate(LocalDate finalDate)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setFinalHour(LocalTime finalHour)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setId(Long id)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setInitialDate(LocalDate initialDate)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setInitialHour(LocalTime initialHour)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setObservation(String observation)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setOriginTaskId(Long originTaskId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setPriority(Long priority)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setRecreateAfterDone(BooleanStatus recreateAfterDone)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setRecurrenceConfiguration(String recurrenceConfiguration)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setSendNotification(BooleanStatus sendNotification)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setSendSituationToInField(Boolean sendSituationToInField)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setServiceLocalId(Long serviceLocalId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setSituationId(Long situationId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setSkipAgentJourneyValidation(BooleanStatus skipAgentJourneyValidation)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setTaskActivities(List<TaskActivityDTO> taskActivities)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setTaskItems(List<TaskItemDTO> taskItems)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setTaskTypeId(Long taskTypeId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setTeamExecutionId(String teamExecutionId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setTeamId(Long teamId)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setToleranceAfterEnd(Long toleranceAfterEnd)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setToleranceAfterStart(Long toleranceAfterStart)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setToleranceBeforeEnd(Long toleranceBeforeEnd)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setToleranceBeforeStart(Long toleranceBeforeStart)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.setWaitTimeOnField(Long waitTimeOnField)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActive(BooleanStatus active)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnFriday(BooleanStatus activeOnFriday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnMonday(BooleanStatus activeOnMonday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnSaturday(BooleanStatus activeOnSaturday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnSunday(BooleanStatus activeOnSunday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnThursday(BooleanStatus activeOnThursday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnTuesday(BooleanStatus activeOnTuesday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActiveOnWednesday(BooleanStatus activeOnWednesday)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActivityItineraries(List<ItineraryActivity> activityItineraries)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActivityOrigin(ItineraryActivityOrigin activityOrigin)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setActivityRelation(Character activityRelation)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setAgentItineraries(List<ItineraryAgent> agentItineraries)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setAgentRelation(ItineraryAgentRelation agentRelation)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setCronId(String cronId)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setDescription(String description)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setDisplayOrder(Long displayOrder)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setFinalDate(LocalDate finalDate)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setInitialDate(LocalDate initialDate)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setItinerarySchedule(ItinerarySchedule itinerarySchedule)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setLastTaskDate(LocalDate lastTaskDate)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setMonthDay(Long monthDay)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setNextInitialDateToProcess(LocalDate nextInitialDateToProcess)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setOcurrencesLimit(Long ocurrencesLimit)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setRecurrenceEndType(RecurrenceEndType recurrenceEndType)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setScheduleType(ScheduleType scheduleType)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setServiceLocalItineraries(List<ItineraryServiceLocal> serviceLocalItineraries)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setTaskType(TaskTypeModel taskType)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setTeamExecution(TeamExecution teamExecution)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setTeamItineraries(List<ItineraryTeam> teamItineraries)",2,1,0,2,1
"me.umov.business.domain.itinerary.Itinerary.setWeeklyRepetition(Long weeklyRepetition)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.TaskModel(Long id)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.changedAgent(boolean changedAgent)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setAccessToken(String accessToken)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setActive(BooleanStatus active)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setActivityOrigin(ActivityOrigin activityOrigin)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setAgent(AgentModel agent)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setClientId(Long clientId)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCreatedByAgent(Long createdByAgent)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCreatedByModule(String createdByModule)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCustomField1(String customField1)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCustomField2(String customField2)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCustomField3(String customField3)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setCustomFieldValueModels(List<CustomFieldValueModel> customFieldValueModels)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setExportSituation(ExportSituation exportSituation)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setFinalDate(LocalDate finalDate)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setFinalHour(LocalTime finalHour)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setGroup(String group)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setInconformity(String inconformity)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setInitialDate(LocalDate initialDate)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setInitialHour(LocalTime initialHour)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setLastUpdatedByAgent(Long lastUpdatedByAgent)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setLastUpdatedByModule(String lastUpdatedByModule)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setObservation(String observation)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setOriginTaskId(Long originTaskId)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setPriority(Long priority)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setRecreateAfterDone(BooleanStatus recreateAfterDone)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setRecurrenceConfiguration(String recurrenceConfiguration)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setSendNotification(BooleanStatus sendNotification)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setServiceLocal(ServiceLocalModel serviceLocalModel)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setSituationId(Long situationId)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setSkipAgentJourneyValidation(boolean skipAgentJourneyValidation)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setTaskActivities(List<TaskActivityModel> taskActivities)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setTaskItems(List<TaskItemModel> taskItems)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setTaskType(TaskTypeModel taskType)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setTeam(TeamModel team)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setToleranceAfterEnd(Long toleranceAfterEnd)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setToleranceAfterStart(Long toleranceAfterStart)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setToleranceBeforeEnd(Long toleranceBeforeEnd)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setToleranceBeforeStart(Long toleranceBeforeStart)",2,1,0,2,1
"me.umov.business.domain.task.TaskModel.setWaitTimeOnField(Long waitTimeOnField)",2,1,0,2,1
"me.umov.business.application.model.dto.SaveTaskDTO.getActive()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getActivityOrigin()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getActivityOriginList()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getAgentId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getAlternativeIdentifier()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getClientId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getCreatedByModule()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getCustomField1()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getCustomField2()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getCustomField3()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getCustomFields()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getFinalDate()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getFinalHour()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getInitialDate()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getInitialHour()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getObservation()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getOriginTaskId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getPriority()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getRecreateAfterDone()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getRecurrenceConfiguration()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getSendNotification()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getServiceLocalId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getSituationId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getSkipAgentJourneyValidation()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getTaskActivities()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getTaskItems()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getTaskTypeId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getTeamExecutionId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getTeamId()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getToleranceAfterEnd()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getToleranceAfterStart()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getToleranceBeforeEnd()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getToleranceBeforeStart()",2,1,0,2,0
"me.umov.business.application.model.dto.SaveTaskDTO.getWaitTimeOnField()",2,1,0,2,0
"me.umov.business.application.model.notification.TaskNotification.getMessage()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActive()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnFriday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnMonday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnSaturday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnSunday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnThursday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnTuesday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActiveOnWednesday()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActivityItineraries()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActivityOrigin()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getActivityRelation()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getAgentItineraries()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getAgentRelation()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getAlternativeIdentifier()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getCronId()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getDescription()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getDisplayOrder()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getFinalDate()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getInitialDate()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getItinerarySchedule()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getLastTaskDate()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getMonthDay()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getNextInitialDateToProcess()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getOcurrencesLimit()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getRecurrenceEndType()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getRepeatMode()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getScheduleType()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getServiceLocalItineraries()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getTaskType()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getTeamExecution()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getTeamItineraries()",2,1,0,2,0
"me.umov.business.domain.itinerary.Itinerary.getWeeklyRepetition()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.TaskModel()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getAccessToken()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getActive()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getActivityOrigin()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getAgent()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getAlternativeIdentifier()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getChangeAgent()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getClientId()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCreatedByAgent()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCreatedByModule()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCustomField1()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCustomField2()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCustomField3()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getCustomFieldValueModels()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getExportSituation()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getFinalDate()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getFinalHour()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getGroup()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getInconformity()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getInitialDate()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getInitialHour()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getLastUpdatedByAgent()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getLastUpdatedByModule()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getObservation()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getOriginTaskId()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getPriority()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getRecreateAfterDone()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getRecurrenceConfiguration()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getSendNotification()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getServiceLocal()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getSituationId()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getSkipAgentJourneyValidation()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getTaskActivities()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getTaskItems()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getTaskType()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getTeam()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getTeamExecution()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getToleranceAfterEnd()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getToleranceAfterStart()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getToleranceBeforeEnd()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getToleranceBeforeStart()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.getWaitTimeOnField()",2,1,0,2,0
"me.umov.business.domain.task.TaskModel.situationIsPendingOrOnTheField()",2,1,0,2,0
"me.umov.business.application.model.notification.TaskNotification.TaskNotification()",1,1,0,2,0
"me.umov.business.domain.rule.builders.TaskSaveRulesTest.shouldRegisterAllSaveTaskBusinessRules()",20,1,38,1,0
"me.umov.business.infrastructure.serialization.GsonConfigurationTest.shouldRegisterTypeAdapters()",20,1,33,1,0
"me.umov.business.domain.generic.specification.ShouldHaveUniqueDescription.isDescriptionAlreadyInUse(T entity)",16,1,19,1,1
"me.umov.business.application.controller.workcycle.WorkCycleController.createWorkCycles(@RequestBody @Valid @NotEmpty @NotNull List<CreateWorkCycleRequest> requestList)",14,1,17,1,1
"me.umov.business.application.authorization.JWTService.validateAndBuildRequestUser(String authorizationHeader)",14,1,9,1,1
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationService.saveResource(SaveTaskScheduleGroupRequest request)",13,1,9,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleMethodArgumentNotValidException(final MethodArgumentNotValidException exception)",12,1,10,1,1
"me.umov.business.domain.servicelocal.Address.Address(@Size(max=50) String streetType, @Size(max=100) String street, @Size(max=8) Long streetNumber, @Size(max=50) String streetComplement, @Size(max=50) String neighborhood, @Size(max=50) String city, @Size(max=50) String state, @Size(max=50) String country, @Size(max=10) String zipCode)",12,1,1,1,9
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationService.addRelationship(RelationshipDTO relationshipDTO)",11,1,12,1,1
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationService.deleteRelationship(RelationshipDTO relationshipDTO)",11,1,12,1,1
"me.umov.business.domain.model.builder.BaseLoader.loadForOperation(IOperationDTO<TModel> dto)",11,1,7,1,1
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.createOrUpdateCron(Long clientId, Long entityId, CrontabExpression cronExpression, String queueData)",11,1,6,1,4
"me.umov.business.infrastructure.servicelocal.ServiceLocalDAOImpl.updateAddress(ServiceLocal serviceLocal)",9,1,6,1,1
"me.umov.business.taskschedule.application.controller.CronController.createCron(@RequestBody IdDTO idDTO)",9,1,6,1,1
"me.umov.business.taskschedule.application.controller.CronController.disableCron(@RequestBody IdDTO idDTO)",9,1,6,1,1
"me.umov.business.application.model.fixture.BaseReflectionFixture.createModel()",9,1,6,1,0
"me.umov.business.application.service.DistributionTask.execute(List<TaskModel> listTask, RuleRequestDTO dto)",8,1,7,1,2
"me.umov.business.application.model.fixture.WorkJourneyModelFixture.withDaysWith08To12Workday(List<DayOfWeek> days)",8,1,7,1,1
"me.umov.business.application.model.fixture.BaseReflectionFixture.setFieldValue(String fieldName, Object value)",8,1,4,1,2
"me.umov.business.domain.event.DomainEventRegistry.publish(DomainEvent event)",8,1,4,1,1
"me.umov.business.infrastructure.queue.ProducerQueueAWS.send(MessageDTO message)",8,1,4,1,1
"me.umov.business.domain.itinerary.ItineraryService.saveItinerarySchedule(ItinerarySchedule itinerarySchedule)",8,1,3,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.getItineraryServiceLocals()",7,1,9,1,0
"me.umov.business.application.controller.workcycle.WorkCycleController.save(@RequestBody @Valid SaveWorkCycleScheduleRequest request)",7,1,4,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.add(RelationshipDTO dto)",6,1,3,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.remove(RelationshipDTO dto)",6,1,3,1,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverter.convertFrom(SaveTaskScheduleGroupRequest request)",6,1,3,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.RecurrenceConfiguration(RecurrenceRepeatMode repeatMode, RecurrenceRepeatConfiguration repeatEvery, RecurrenceEndsConfiguration ends, List<Integer> weekdays)",6,1,0,1,4
"me.umov.business.application.controller.workcycle.WorkCycleController.replaceServiceLocal(@RequestBody ReplaceWorkCycleServiceLocalRequest request)",5,1,8,1,1
"me.umov.business.domain.servicelocal.Address.isGeocodable()",5,1,8,1,0
"me.umov.business.application.service.DistributionTask.buildResultProcessRule(RuleState reprocess, String message)",5,1,2,1,2
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getFilter(RelationshipDTO dto)",5,1,2,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.RecurrenceConfiguration(RecurrenceRepeatMode repeatMode, RecurrenceRepeatConfiguration repeatEvery, RecurrenceEndsConfiguration ends)",5,1,0,1,3
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.RecurrenceEndsConfiguration(RecurrenceEndType type, LocalDate date, Long ocurrences)",5,1,0,1,3
"me.umov.business.application.authorization.JWTService.decode(String jwtToken)",4,1,6,1,1
"me.umov.business.application.controller.workcycle.WorkCycleController.attachActivity(@RequestBody WorkCycleRelationRequest request)",4,1,5,1,1
"me.umov.business.application.controller.workcycle.WorkCycleController.attachServiceLocal(@RequestBody WorkCycleServiceLocalRequest request)",4,1,5,1,1
"me.umov.business.application.controller.workcycle.WorkCycleController.detachActivity(@RequestBody WorkCycleRelationRequest request)",4,1,5,1,1
"me.umov.business.application.controller.workcycle.WorkCycleController.detachServiceLocal(@RequestBody WorkCycleServiceLocalRequest request)",4,1,5,1,1
"me.umov.business.infrastructure.serialization.GsonConfigurationTest.containsRegisteredAdapterToClass(Class<?> clazz)",4,1,5,1,1
"me.umov.business.application.service.idiom.IdiomWrapper.getMessage(IdiomKey idiomKey, String... parameters)",4,1,4,1,2
"me.umov.business.domain.rule.builders.TaskSaveRulesTest.containsBusinessRuleInList(List<BusinessRule> rules, Class<?> clazz)",4,1,4,1,2
"me.umov.business.application.model.fixture.TaskModelFixture.withFinalDateTime(LocalDateTime finalDateTime)",4,1,4,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withInitialDateTime(LocalDateTime initialDateTime)",4,1,4,1,1
"me.umov.business.domain.generic.specification.ShouldHaveUniqueDescription.getEntityDescription(T entity)",4,1,4,1,1
"me.umov.business.domain.model.builder.BaseLoader.validateOperation(TModel model, Operation operation)",4,1,3,1,2
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImpl.existTaskOnDateIntervalByAgent(TaskModel taskModel)",4,1,3,1,1
"me.umov.business.application.service.DistributionTask.verify(List<TaskModel> listTask)",4,1,3,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleMethodArgumentTypeMismatchException(final Exception exception)",4,1,2,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleMethodNotSupportedException(final HttpRequestMethodNotSupportedException exception)",4,1,2,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleMissingServletRequestParameterException(final Exception exception)",4,1,2,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleSpecificationException(final SpecificationException exception)",4,1,2,1,1
"me.umov.business.domain.itinerary.ItineraryService.saveTaskScheduleGroup(ItinerarySchedule itinerarySchedule)",4,1,2,1,1
"me.umov.business.domain.itinerary.ItineraryService.saveWorkCycleSchedule(ItinerarySchedule itinerarySchedule)",4,1,2,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDate.shouldProcessRule()",4,1,2,1,0
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleBadRequestException(final BadRequestException exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleBusinessValidationException(final BusinessValidationException exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleDeleteException(final DeleteException exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleGeneralException(final Exception exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleHttpMessageNotReadableException(final Exception exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleNotFoundException(final ResourceNotFoundException exception)",4,1,1,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.handleUnauthorizedException(final UnauthorizedRequestException exception)",4,1,1,1,1
"me.umov.business.application.model.WorkJourneyDayModel.WorkJourneyDayModel(DayOfWeek weekday, LocalTime initialHour1, LocalTime finalHour1)",4,1,0,1,3
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.RecurrenceRepeatConfiguration(Long value, RecurrenceTimeUnit unit, RecurrenceRepeatType type)",4,1,0,1,3
"me.umov.business.domain.rule.task.ShouldHaveValidAgent.ShouldHaveValidAgent(TaskModel taskModel, AgentModel loadedAgent)",4,1,0,1,2
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDate.ShouldHaveValidInitialDate(IDateInterval dateInterval, Long entityId)",4,1,0,1,2
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.ShouldHaveValidSituationLifeCicle(TaskModel taskModel, TaskService taskService)",4,1,0,1,2
"me.umov.business.domain.rule.task.ShouldHaveValidTaskType.ShouldHaveValidTaskType(TaskModel taskModel, TaskTypeModel loadedTaskType)",4,1,0,1,2
"me.umov.business.domain.rule.task.ShouldHaveValidTeam.ShouldHaveValidTeam(TaskModel taskModel, TeamModel loadedTeam)",4,1,0,1,2
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolio.ShouldValidateAgentPortfolio(AgentModel loadedAgent, ServiceLocalModel loadedServiceLocal)",4,1,0,1,2
"me.umov.business.infrastructure.queue.ProducerQueueAWS.ProducerQueueAWS(AmazonSQS amazonSQS, SendMessageRequest sendMessageRequest)",4,1,0,1,2
"me.umov.business.application.model.WorkJourneyModel.findWorkJourneyDay(LocalDateTime date)",3,1,8,1,1
"me.umov.business.application.handler.GeneralRestExceptionHandler.logError(final Exception exception)",3,1,4,1,1
"me.umov.business.application.model.WorkJourneyDayModel.isInsideOfAnyInterval(LocalTime time)",3,1,3,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withActivities(List<ItineraryActivity> activities)",3,1,2,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withAgents(List<ItineraryAgent> agents)",3,1,2,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withServiceLocals(List<ItineraryServiceLocal> serviceLocals)",3,1,2,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.disableSendMessage()",3,1,2,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.enableSendMessage()",3,1,2,1,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelected.shouldProcessRule()",3,1,2,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHour.shouldProcessRule()",3,1,2,1,0
"me.umov.business.infrastructure.serialization.GsonConfigurationTest.shouldCreateGson()",3,1,2,1,0
"me.umov.business.application.model.fixture.ItineraryFixture.withActive(BooleanStatus active)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withAgentRelation(ItineraryAgentRelation agentRelation)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withClientId(Long clientId)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withCronId(String cronId)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withDescription(String description)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withFinalDate(LocalDate finalDate)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withId(Long id)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withInitialDate(LocalDate initialDate)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withMonthDay(Long monthDay)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withOcurrencesLimit(Long ocurrencesLimit)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withRecurrenceEndType(RecurrenceEndType recurrenceEndType)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withRepeatMode(RecurrenceRepeatMode repeatMode)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withTaskScheduleActivityOrigin(ItineraryActivityOrigin taskScheduleActivityOrigin)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withTaskType(TaskTypeModel taskType)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.withWeeklyRepetition(Long weeklyRepetition)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withActive(BooleanStatus active)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withActivities(List<TaskActivityModel> activities)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withActivityOrigin(ActivityOrigin activityOrigin)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withActivityOriginList(List<ActivityOrigin> activityOriginList)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withAgent(AgentModel agent)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withAlternativeIdentifier(String alternativeIdentifier)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withClientId(Long clientId)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCreatedByAgent(Long createdByAgent)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCreatedByModule(String createdByModule)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCustomField1(String customField1)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCustomField2(String customField2)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCustomField3(String customField3)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withCustomFields(List<CustomFieldValueModel> customFields)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withFinalDate(LocalDate finalDate)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withFinalHour(LocalTime finalHour)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withGroup(String group)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withId(long id)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withInitialDate(LocalDate initialDate)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withInitialHour(LocalTime initialHour)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withItems(List<TaskItemModel> items)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withLastUpdatedByAgent(Long lastUpdatedByAgent)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withLastUpdatedByModule(String lastUpdatedByModule)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withObservation(String observation)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withOriginTaskId(Long originTaskId)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withPriority(Long priority)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withRecreateAfterDone(BooleanStatus recreateAfterDone)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withRecurrenceConfiguration(String config)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withSendMessage(BooleanStatus sendNotification)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withServiceLocal(ServiceLocalModel serviceLocal)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationId(Long situationId)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withTaskActivities(List<TaskActivityModel> taskActivities)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withTaskType(TaskTypeModel taskType)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withTeam(TeamModel team)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withTeamExecution(TeamExecution teamExecution)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withToleranceAfterEnd(Long toleranceAfterEnd)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withToleranceAfterStart(Long toleranceAfterStart)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withToleranceBeforeEnd(Long toleranceBeforeEnd)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withToleranceBeforeStart(Long toleranceBeforeStart)",3,1,1,1,1
"me.umov.business.application.model.fixture.TaskModelFixture.withWaitTimeOnField(Long waitTimeOnField)",3,1,1,1,1
"me.umov.business.application.model.fixture.WorkJourneyModelFixture.withId(Long id)",3,1,1,1,1
"me.umov.business.application.model.fixture.WorkJourneyModelFixture.withTaskCreationValidation(WorkdayTaskCreationValidation taskCreationValidation)",3,1,1,1,1
"me.umov.business.application.observer.TaskSavedObserver.process(TaskSavedEvent event)",3,1,1,1,1
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.disableCron(String cronId)",3,1,1,1,1
"me.umov.business.application.model.fixture.ItineraryFixture.isActive()",3,1,1,1,0
"me.umov.business.application.model.fixture.ItineraryFixture.isNotActive()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.isActive()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.isNotActive()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationAsCanceled()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationAsInPreparation()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationAsOnField()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationAsPending()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationAsRetrievedFromField()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationCanceled()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationInField()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationInPreparation()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationPending()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSituationReturned()",3,1,1,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.withSkipAgentJourneyValidation()",3,1,1,1,0
"me.umov.business.domain.rule.builders.TaskSaveRulesTest.setup()",3,1,1,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskType.shouldProcessRule()",3,1,1,1,0
"me.umov.business.infrastructure.serialization.GsonConfigurationTest.setup()",3,1,1,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.RecurrenceRepeatConfiguration(Long value, RecurrenceTimeUnit unit)",3,1,0,1,2
"me.umov.business.domain.rule.task.ShouldHaveServiceLocal.ShouldHaveServiceLocal(TaskModel task, ServiceLocalModel loadedServiceLocal)",3,1,0,1,2
"me.umov.business.utils.specification.domain.AndSpecification.AndSpecification(ISpecification<T> left, ISpecification<T> right)",3,1,0,1,2
"me.umov.business.utils.specification.domain.OrSpecification.OrSpecification(ISpecification<T> left, ISpecification<T> right)",3,1,0,1,2
"me.umov.business.application.model.ServiceLocalModel.setId(Long id)",3,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setId(Long id)",3,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setId(Long id)",3,1,0,1,1
"me.umov.business.domain.client.Client.setId(Long id)",3,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setClientId(Long clientId)",3,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setId(Long id)",3,1,0,1,1
"me.umov.business.domain.rule.task.ShouldHaveTaskModel.ShouldHaveTaskModel(TaskModel taskModel)",3,1,0,1,1
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelected.ShouldHaveTeamExecutionWhenTeamIsSelected(TaskModel taskModel)",3,1,0,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDate.ShouldHaveValidFinalDate(IDateInterval dateIntervalEntity)",3,1,0,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHour.ShouldHaveValidFinalHour(TaskModel taskModel)",3,1,0,1,1
"me.umov.business.infrastructure.serialization.HibernateProxyTypeAdapter.read(JsonReader in)",3,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.getId()",3,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.hasAlternativeIdentifier()",3,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.hasId()",3,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getId()",3,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getId()",3,1,0,1,0
"me.umov.business.domain.client.Client.getId()",3,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getClientId()",3,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getId()",3,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.hasCron()",3,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.isNew()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocal.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveTaskModel.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidAgent.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDate.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidTeam.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolio.shouldProcessRule()",3,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.startDateIsGreaterThanEndDate()",2,1,5,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.addSituationError(ArrayList<RuleMessage> messages)",2,1,3,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicle.isNewSituationNotPermitted(List<TaskSituation> permittedSituations)",2,1,2,1,1
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.generateJobCommand(String queueData)",2,1,2,1,1
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHour.hasFinalDateAndHour()",2,1,2,1,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHour.hasInitialDateAndHour()",2,1,2,1,0
"me.umov.business.application.service.DistributionTask.isEmpty(List list)",2,1,1,1,1
"me.umov.business.domain.model.builder.BaseLoader.loadById(IOperationDTO<TModel> dto)",2,1,1,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.firstItinerary()",2,1,1,1,0
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getClientId()",2,1,1,1,0
"me.umov.business.application.model.ServiceLocalModel.ServiceLocalModel(Long id)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setActive(BooleanStatus active)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setAgentResponsible(Long agentResponsible)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setClientId(Long clientId)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setDescription(String description)",2,1,0,1,1
"me.umov.business.application.model.ServiceLocalModel.setGeoposition(String geoposition)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setClientId(Long clientId)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setFinalHour1(LocalTime finalHour1)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setFinalHour2(LocalTime finalHour2)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setFinalHour3(LocalTime finalHour3)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setInitialHour1(LocalTime initialHour1)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setInitialHour2(LocalTime initialHour2)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setInitialHour3(LocalTime initialHour3)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyDayModel.setWeekday(DayOfWeek weekday)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setActive(BooleanStatus active)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setClientId(Long clientId)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setDays(List<WorkJourneyDayModel> days)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setDescription(String description)",2,1,0,1,1
"me.umov.business.application.model.WorkJourneyModel.setTaskCreationValidation(WorkdayTaskCreationValidation taskCreationValidation)",2,1,0,1,1
"me.umov.business.domain.client.Client.Client(Long id)",2,1,0,1,1
"me.umov.business.domain.client.Client.setDescription(String description)",2,1,0,1,1
"me.umov.business.domain.client.Client.setSystemParameters(SystemParameters systemParameters)",2,1,0,1,1
"me.umov.business.domain.event.DomainEventRegistry.setDomainListeners(List<DomainEventListener> domainListeners)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setActive(BooleanStatus active)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setCronId(String cronId)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setDescription(String description)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setFinalDate(LocalDate finalDate)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setInitialDate(LocalDate initialDate)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setItineraries(List<Itinerary> itineraries)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setMonthDay(Long monthDay)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setNextInitialDateToProcess(LocalDate nextInitialDateToProcess)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setOcurrencesLimit(Long ocurrencesLimit)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setRecurrenceEndType(RecurrenceEndType recurrenceEndType)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setType(ScheduleType type)",2,1,0,1,1
"me.umov.business.domain.itinerary.ItinerarySchedule.setWeeklyRepetition(Long weeklyRepetition)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.setEnds(RecurrenceEndsConfiguration ends)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.setRepeatEvery(RecurrenceRepeatConfiguration repeatEvery)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceConfiguration.setWeekdays(List<Integer> weekdays)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.setDate(LocalDate date)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.setOcurrences(Long ocurrences)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.setType(RecurrenceEndType type)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.setType(RecurrenceRepeatType type)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.setUnit(RecurrenceTimeUnit unit)",2,1,0,1,1
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.setValue(Long value)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setCity(String city)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setFindGeoPosition(boolean isToSearchGeoCoder)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setGeoCoordinate(String geoCoordinate)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setState(String state)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setStreet(String street)",2,1,0,1,1
"me.umov.business.domain.servicelocal.Address.setZipCode(String zipCode)",2,1,0,1,1
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.setRegion(String region)",2,1,0,1,1
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProvider.setTaskSchedulerQueueUrl(String taskSchedulerQueueUrl)",2,1,0,1,1
"me.umov.business.infrastructure.serialization.HibernateProxyTypeAdapter.HibernateProxyTypeAdapter(Gson context)",2,1,0,1,1
"me.umov.business.application.authorization.JWTService.getJtwSecret()",2,1,0,1,0
"me.umov.business.application.model.Interval.getInterval()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.ServiceLocalModel()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getActive()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getAgentResponsible()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getAlternativeIdentifier()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getClientId()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getDescription()",2,1,0,1,0
"me.umov.business.application.model.ServiceLocalModel.getGeoposition()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getClientId()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getFinalHour1()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getFinalHour2()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getFinalHour3()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getInitialHour1()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getInitialHour2()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getInitialHour3()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.getWeekday()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getActive()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getAlternativeIdentifier()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getClientId()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getDays()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getDescription()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.getTaskCreationValidation()",2,1,0,1,0
"me.umov.business.application.model.fixture.BaseReflectionFixture.build()",2,1,0,1,0
"me.umov.business.application.model.fixture.ItineraryFixture.build()",2,1,0,1,0
"me.umov.business.application.model.fixture.ItineraryFixture.get()",2,1,0,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.build()",2,1,0,1,0
"me.umov.business.application.model.fixture.TaskModelFixture.get()",2,1,0,1,0
"me.umov.business.application.model.fixture.WorkJourneyModelFixture.build()",2,1,0,1,0
"me.umov.business.application.model.fixture.WorkJourneyModelFixture.get()",2,1,0,1,0
"me.umov.business.domain.client.Client.getDescription()",2,1,0,1,0
"me.umov.business.domain.client.Client.getSystemParameters()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getActive()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getAlternativeIdentifier()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getCronId()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getDescription()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getFinalDate()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getInitialDate()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getItineraries()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getMonthDay()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getNextInitialDateToProcess()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getOcurrencesLimit()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getRecurrenceEndType()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getRepeatMode()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getType()",2,1,0,1,0
"me.umov.business.domain.itinerary.ItinerarySchedule.getWeeklyRepetition()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.RecurrenceConfiguration()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.getEnds()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.getRepeatEvery()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.getRepeatMode()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceConfiguration.getWeekdays()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.RecurrenceEndsConfiguration()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.getDate()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.getOcurrences()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceEndsConfiguration.getType()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.RecurrenceRepeatConfiguration()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.getType()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.getUnit()",2,1,0,1,0
"me.umov.business.domain.recurrence.RecurrenceRepeatConfiguration.getValue()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getCity()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getCountry()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getNeighborhood()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getState()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getStreet()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getStreetComplement()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getStreetNumber()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getStreetType()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.getZipCode()",2,1,0,1,0
"me.umov.business.domain.servicelocal.Address.isFindGeoPosition()",2,1,0,1,0
"me.umov.business.application.model.WorkJourneyDayModel.WorkJourneyDayModel()",1,1,0,1,0
"me.umov.business.application.model.WorkJourneyModel.WorkJourneyModel()",1,1,0,1,0
"me.umov.business.application.service.DistributionTask.getAgentAvailable(TaskModel taskModel, RuleRequestDTO dto)",0,1,0,1,2
"me.umov.business.domain.model.builder.BaseLoader.load(TModel model, IOperationDTO<TModel> dto)",0,1,0,1,2
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.addNewRelationship(Itinerary itinerary, Long id)",0,1,0,1,2
"me.umov.business.domain.model.builder.BaseLoader.getOperationValidationBuilder(Operation operation)",0,1,0,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getEntityModel(ERel entityRelationship)",0,1,0,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getEntityRelationship(Itinerary itinerary)",0,1,0,1,1
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.newEntityModelWithAlternativeIdentifier(RelationshipDTO dto)",0,1,0,1,1
"me.umov.business.application.service.DistributionTask.getBuilderValidator()",0,1,0,1,0
"me.umov.business.domain.client.Client.Client()",0,1,0,1,0
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getEntityModelRepository()",0,1,0,1,0
"me.umov.business.taskschedule.anticorruption.relationship.AbstractRelationshipConverter.getIntegrationRepository()",0,1,0,1,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverterTest.shouldConvertNewDailyTaskScheduleGroupCorrectly()",75,1,152,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverterTest.shouldConvertNewMonthlyTaskScheduleGroupCorrectly()",73,1,148,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverterTest.shouldConvertNewWeeklyTaskScheduleGroupCorrectly()",73,1,147,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverterTest.shouldConvertFrom()",67,1,118,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldTransformToModelWithAllFieldsWithSingleActivityOrigin()",62,1,117,0,0
"me.umov.business.domain.itinerary.specification.TaskScheduleGroupValidatorTest.shouldRegisterCreateTaskScheduleSpecifications()",44,1,132,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverterTest.shouldConvertServiceLocalsUsingAlternativeIdentifierSearch()",42,1,56,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldClearServiceLocalsAndAddAgain()",35,1,59,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithInitialAndFinalDateHour()",34,1,78,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithOnlyInitialDateHour()",34,1,74,0,0
"me.umov.business.domain.rule.builders.SaveTaskValidationBuilder.getRules(TaskModel taskModel)",34,1,39,0,1
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithInitialAndFinalDateHourInDifferentDays()",33,1,77,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithInitialAndFinalDateHourAndFinalDate()",33,1,76,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithInitialAndDateHourAndFinalHour()",32,1,75,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithOcurrencesEnded_forTasksWithOnlyInitialDateHour()",32,1,66,0,0
"me.umov.business.api.TaskScheduleApi.addActivity(@PathVariable Long taskScheduleId, @PathVariable Long activityId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addActivity(@PathVariable String taskScheduleAltId, @PathVariable String activityAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addAgent(@PathVariable Long taskScheduleId, @PathVariable Long agentId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addAgent(@PathVariable String taskScheduleAltId, @PathVariable String agentAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addServiceLocal(@PathVariable Long taskScheduleId, @PathVariable Long serviceLocalId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addServiceLocal(@PathVariable String taskScheduleAltId, @PathVariable String serviceLocalAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addTeam(@PathVariable Long taskScheduleId, @PathVariable Long teamId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.addTeam(@PathVariable String taskScheduleAltId, @PathVariable String teamAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteActivity(@PathVariable Long taskScheduleId, @PathVariable Long activityId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteActivity(@PathVariable String taskScheduleAltId, @PathVariable String activityAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteAgent(@PathVariable Long taskScheduleId, @PathVariable Long agentId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteAgent(@PathVariable String taskScheduleAltId, @PathVariable String agentAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteServiceLocal(@PathVariable Long taskScheduleId, @PathVariable Long serviceLocalId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteServiceLocal(@PathVariable String taskScheduleAltId, @PathVariable String serviceLocalAltId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteTeam(@PathVariable Long taskScheduleId, @PathVariable Long teamId)",32,1,1,0,2
"me.umov.business.api.TaskScheduleApi.deleteTeam(@PathVariable String taskScheduleAltId, @PathVariable String teamAltId)",32,1,1,0,2
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithDateEnded_forTasksWithOnlyInitialDateHourWith2WeekRepeat()",28,1,53,0,0
"me.umov.business.api.TaskScheduleApi.editByAlternativeIdentifier(@Valid @RequestBody SaveTaskScheduleGroupRequest request, @PathVariable String taskScheduleAltId)",28,1,3,0,2
"me.umov.business.api.TaskScheduleApi.editById(@Valid @RequestBody SaveTaskScheduleGroupRequest request, @PathVariable Long taskScheduleId)",28,1,3,0,2
"me.umov.business.api.TaskScheduleApi.partialEditByAlternativeIdentifier(@RequestBody SaveTaskScheduleGroupRequest request, @PathVariable String taskScheduleAltId)",28,1,3,0,2
"me.umov.business.api.TaskScheduleApi.partialEditById(@RequestBody SaveTaskScheduleGroupRequest request, @PathVariable Long taskScheduleId)",28,1,3,0,2
"me.umov.business.api.TaskScheduleApi.saveDeprecated(@Valid @RequestBody SaveTaskScheduleGroupRequest request)",28,1,2,0,1
"me.umov.business.api.TaskScheduleApi.save(@Valid @RequestBody SaveTaskScheduleGroupRequest request)",27,1,2,0,1
"me.umov.business.anticorruption.itinerary.WorkCycleScheduleConverterImplTest.shouldConvertRequestInWorkcycleWithAllFieldsSet()",26,1,39,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldCopyAllCustomFieldValuesWithoutRelationIds()",25,1,66,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverterTest.shouldAddAgentWithAletranitiveIdentifierSuccessfuly()",25,1,47,0,0
"me.umov.business.infrastructure.servicelocal.ServiceLocalDAOImplTest.shouldFindAllServiceLocalsById()",24,1,55,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWhenRepeatEveryIsTwo_andWhenTaskWeekDayIsOutOfConfiguration()",24,1,41,0,0
"me.umov.business.domain.itinerary.specification.TaskScheduleGroupValidator.validateCreation(ItinerarySchedule itinerarySchedule)",24,1,20,0,1
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWhenRepeatEveryIsTwo_andWhenTaskWeekDayIsOnConfiguration()",23,1,37,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverterTest.shouldRemoveAgentWithSuccessfuly()",22,1,34,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateOnlyLastSaturdayOnMonthFourTimes()",22,1,33,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateOnlyThirdSaturdayOnMonthFourTimes()",22,1,33,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeamTest.shouldValidateWhenTeamHasMoreThanOneAgents()",22,1,28,0,0
"me.umov.business.configuration.SwaggerConfig.configApi()",22,1,18,0,0
"me.umov.business.anticorruption.servicelocal.ServiceLocalConverterImpl.convertFrom(ServiceLocalRequest serviceLocalRequest)",22,1,11,0,1
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldCallWorkCycleStateUpdateWithActivitiesWorkCyclesOnApplyWorkCycleOperation()",21,1,42,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldRemoveAllCustomFieldValuesWithoutValue()",21,1,40,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateMonthlyRecurrenceWithOccurrencesEnded_forTasksWithInitial()",21,1,29,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateOnlyFirstSaturdayOnMonthThreeTimes()",21,1,29,0,0
"me.umov.business.infrastructure.jpa.workcycle.WorkCycleGeneratorImplTest.shouldCreateQueryWithParametersAndCallWhenGeneratingWorkCycles()",21,1,27,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldDetachServiceLocalWhenDoesNotHaveServiceLocalScheduleWithItinerarySchedule()",21,1,24,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverterTest.shouldAddAgentWithIdSuccessfuly()",20,1,32,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceWithOcurrencesEnded_forTasksWithOnlyInitialDateHourCase2()",20,1,24,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldAttachActivity()",20,1,21,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldAttachServiceLocalWhenServiceLocalAssociationDoesNotExists()",20,1,21,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldDetachActivity()",20,1,21,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldNotDetachServiceLocalWhenHaveServiceLocalScheduleWithItinerarySchedule()",20,1,20,0,0
"me.umov.business.infrastructure.serialization.GsonConfiguration.registerCustomAdapters(GsonBuilder gsonBuilder)",20,1,19,0,1
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldCallWorkCycleGeneratorAndReturnGeneratedWorkCycles()",20,1,14,0,0
"me.umov.business.infrastructure.cron.JobCreationRequestDTOTest.shouldCreateAJobCreationRequestProperly()",19,1,62,0,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHourTest.shouldReturnNotSatisfiedWhenHaveOneServiceLocalWithFinalDateGreaterThenInitialDate()",19,1,34,0,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHourTest.shouldReturnSatisfiedWhenServiceLocalHaveValidTime()",19,1,34,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldNotAttachServiceLocalWhenServiceLocalAssociationAlreadyExists()",19,1,17,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnApiReturnWithSuccessAndErrorCasesOnSaveBatch()",18,1,43,0,0
"me.umov.business.application.controller.workcycle.WorkCycleControllerTest.shouldProcessAllWorkCycleCreationRequests()",18,1,41,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldFindAndAssignWorkCycleForTaskActivity()",18,1,30,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFANewScheduleIsInPreparationSituation()",18,1,27,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFANewScheduleIsInRetrievedFromFieldSituation()",18,1,27,0,0
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProviderTest.shouldCallRundeckRestPostOnCreateCron()",18,1,22,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldBuildCronForWeeklyTaskSchedule()",17,1,56,0,0
"me.umov.business.application.service.DistributionIdleAgentTest.shouldReturnResultProcessRuleProccessErrorWhenTasksOfDifferentTeams()",17,1,48,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldCallRepositoryTODeleteAllNonPresentMultiListValues()",17,1,41,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFANewScheduleIsInOnFieldSituation()",17,1,23,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldGenerateWeeklyRecurrenceToSpecificCase()",17,1,18,0,0
"me.umov.business.anticorruption.itinerary.WorkCycleScheduleConverterImplTest.shouldSetNextProcessDateWithInitialDateWhenIsNew()",17,1,13,0,0
"me.umov.business.application.observer.NotificationAfterSaveTaskTest.shouldSuccessfullyProduceNotification()",16,1,32,0,0
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProviderTest.shouldCallRundeckRestToCreateProjectWhenProjectIsNotFound()",16,1,20,0,0
"me.umov.business.infrastructure.jpa.workcycle.WorkCycleGeneratorImpl.generateWorkCycles(Long clientId, Long serviceLocalId, List<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",16,1,12,0,6
"me.umov.business.application.service.DistributionIdleAgentTest.shouldReturnResultProcessRuleSuccess()",15,1,40,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnResultProcessRuleWhenDistributionTaskExecute()",15,1,31,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFAExistingScheduleIsNotAbleTo()",15,1,30,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldDecrementPendingTotalAndCreatedTotalWhenOperationIsTaskCancellationInativationOnApplyWorkCycleOperationAndFrequencyTypeIsTaskWithin()",15,1,29,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldIncrementPendingTotalAndCreatedTotalWhenOperationIsTaskCreationOnApplyWorkCycleOperationAndFrequencyTypeIsTaskWithin()",15,1,29,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldNotDecrementPendingTotalAndDecrementCreatedTotalWhenOperationIsTaskCancellationInativationOnApplyWorkCycleOperationAndFrequencyTypeIsLocalPlanned()",15,1,29,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldNotIncrementPendingTotalAndIncrementCreatedTotalWhenOperationIsTaskCancellationInativationOnApplyWorkCycleOperationAndFrequencyTypeIsLocalPlanned()",15,1,29,0,0
"me.umov.business.infrastructure.jpa.CustomFieldTypeConverterTest.shouldConvertToDB()",15,1,29,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldDecrementPendingTotalAndNotIncrementTotalExecutedWhenActivityWasNotExecutedAndOperationIsTaskExecutionOnApplyWorkCycleOperation()",15,1,27,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldDecrementPendingTotalAndIncrementTotalExecutedWhenOperationIsTaskExecutionOnApplyWorkCycleOperation()",15,1,26,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverterTest.shouldThrowDeleteExceptionWhenThereIsNoRelationship()",15,1,21,0,0
"me.umov.business.application.controller.workcycle.WorkCycleControllerTest.shouldSaveWorkcycle()",15,1,14,0,0
"me.umov.business.domain.event.DomainEventRegistryTest.shouldCallListenerWhenItSubscribesToEventClassAndNotCallOthers()",15,1,12,0,0
"me.umov.business.infrastructure.activity.ActivityDAOImplTest.shouldFindAllActivities()",15,1,10,0,0
"me.umov.business.infrastructure.agent.AgentDAOImplTest.shouldFindAllAgents()",15,1,10,0,0
"me.umov.business.infrastructure.team.TeamDAOImplTest.shouldFindAllTeams()",15,1,10,0,0
"me.umov.business.infrastructure.serialization.GsonConfiguration.configure()",15,1,6,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldRemoveAllValuesInValoredLists()",14,1,37,0,0
"me.umov.business.application.service.DistributionIdleAgentTest.shouldReturnResultProcessRuleProccessErrorWhenValidationSituationIsInvalid()",14,1,28,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldSaveAllCustomFieldValuesWithValue()",14,1,26,0,0
"me.umov.business.infrastructure.jpa.CustomFieldSubTypeConverterTest.shouldConvertToDB()",14,1,26,0,0
"me.umov.business.domain.itinerary.ItineraryCronServiceTest.shouldCreateCronStoreCronIdAndSaveItinerary()",14,1,25,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleCronServiceTest.shouldCreateCronStoreCronIdAndSaveItinerarySchedule()",14,1,25,0,0
"me.umov.business.application.model.WorkJourneyDayModelTest.shouldIdentifyTimeInsideOfIntervalCase3()",14,1,23,0,0
"me.umov.business.infrastructure.jpa.workcycle.WorkCycleGeneratorImplTest.shouldCreateQueryWithParametersAndCallWhenUpdatingWorkCycles()",14,1,18,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldValidateRequiredAgentFieldWhenAgentIsNull()",14,1,17,0,0
"me.umov.business.domain.rule.task.ShouldNotHaveAgentTest.shouldErrorWhenTaskWithAgent()",14,1,14,0,0
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProviderTest.shouldCallRundeckRestToGetProject()",14,1,14,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldRemoveTaskItemsFromTaskModel()",14,1,13,0,0
"me.umov.business.domain.generic.specification.ShouldHaveValidIdTest.shouldReturnNotSatisfiedWhenCandidateWasFoundAndBelongsToAnotherClient()",14,1,10,0,0
"me.umov.business.infrastructure.activity.ActivityDAOImplTest.shouldReturnEmptyListWhenRepositoryReturnNull()",14,1,9,0,0
"me.umov.business.infrastructure.agent.AgentDAOImplTest.shouldReturnEmptyListWhenRepositoryReturnNull()",14,1,9,0,0
"me.umov.business.infrastructure.team.TeamDAOImplTest.shouldReturnEmptyListWhenRepositoryReturnNull()",14,1,9,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldNotChangeAgentWhenDoNotPassAgent()",14,1,8,0,0
"me.umov.business.infrastructure.jpa.CustomFieldTypeConverterTest.shouldConvertFromDB()",13,1,29,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForMonthlyThatEndsIn01012050()",13,1,28,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForWeeklyThatEndsIn01012050()",13,1,28,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForDailyThatEndsIn01012050()",13,1,27,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForMonthlyThatEndsAfter20Ocurrences()",13,1,27,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForWeeklyThatEndsAfter20Ocurrences()",13,1,27,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForDailyThatEndsAfter20Ocurrences()",13,1,26,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFANewScheduleIsNotAbleTo()",13,1,21,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.shouldNotSendANotificationIFFeatureToggleIsDisabled()",13,1,20,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldSetTaskModelInNewTaskItems()",13,1,19,0,0
"me.umov.business.infrastructure.cron.RundeckRestServiceTest.shouldCallRestTemplatePOSTWithCorrectHeadersAndBody()",13,1,19,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeamTest.shouldValidateWhenTeamHasNoAgents()",13,1,18,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldValidateRequiredPrimitiveStringFieldWhenItIsEmpty()",13,1,17,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredPriorityFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredTeamFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredToleranceAfterEndFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredToleranceAfterStartFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredToleranceBeforeEndFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredToleranceBeforeStartFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldReturnErrorAtRequiredWaitTimeOnFieldWhenValueIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldValidateRequiredNumericField()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldValidateRequiredPrimitiveStringFieldWhenItIsNull()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldValidateRequiredRelationshipField()",13,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldHaveErrorMessageWhenEndDateAfter90Days()",13,1,15,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldHaveErrorMessageWhenEndDateIsBeforeInitialDate()",13,1,15,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldHaveErrorMessageWhenLackOfWeekdaysAndRepeatUnitIsDay()",13,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldHaveErrorMessageWhenLackOfWeekdaysAndRepeatUnitIsWeek()",13,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldValidateLackOfDateOnEndsIfTypeIsDATE()",13,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldValidateLackOfOcurrencesOnEndsIfTypeIsOCURRENCES()",13,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldValidateLackOfRepeatValue()",13,1,13,0,0
"me.umov.business.domain.rule.task.ShouldInitiateTodayTest.shouldErrorWhenTaskWithInitialDateTomorrow()",13,1,13,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldAddNewTaskItemsToTaskModel()",13,1,12,0,0
"me.umov.business.domain.rule.task.ShouldBeActiveTest.shouldErrorWhenTaskIsNotActive()",13,1,11,0,0
"me.umov.business.domain.rule.task.ShouldBeInPreparationTest.shouldErrorWhenTaskNotInPreparation()",13,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamTest.shouldErrorWhenTaskNothaveTeam()",13,1,10,0,0
"me.umov.business.domain.generic.specification.ShouldHaveValidIdTest.shouldReturnNotSatisfiedWhenCandidateWasNotFound()",13,1,9,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldChangeAgentWhenNullBaseAgent()",13,1,8,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldChangeAgentWhenToChangeAgent()",13,1,8,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldNotChangeAgentWhenDoToChangeAgent()",13,1,8,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldNotChangeAgentWhenThereIsNoAgent()",13,1,8,0,0
"me.umov.business.infrastructure.jpa.CustomFieldSubTypeConverterTest.shouldConvertFromDB()",12,1,26,0,0
"me.umov.business.application.service.DistributionIdleAgentTest.shouldReturnResultProcessRuleReprocessWhenNotHaveIdleAgents()",12,1,25,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForMonthlyThatNeverEnds()",12,1,22,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForWeeklyThatNeverEnds()",12,1,22,0,0
"me.umov.business.domain.itinerary.specification.WorkCycleScheduleValidatorTest.shouldRegisterCreateWorkcycleSpecifications()",12,1,22,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetRecurrenceConfigurationForDailyThatNeverEnds()",12,1,21,0,0
"me.umov.business.infrastructure.cron.RundeckRestServiceTest.shouldCallRestTemplateGETWithCorrectHeaders()",12,1,19,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldSaveResourceWithSuccessfuly()",12,1,19,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldPublishSavedEventWithExistentItinerary()",12,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHourTest.shouldReturnSatisfiedWhenServiceLocalWhenNotHaveFinalHour()",12,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHourTest.shouldReturnSatisfiedWhenServiceLocalWhenNotHaveInitialHour()",12,1,13,0,0
"me.umov.business.domain.servicelocal.ServiceLocalRepositoryImplTest.shouldUpdateAddress()",12,1,11,0,0
"me.umov.business.domain.activityHistory.ActivityHistoryServiceImplTest.shouldCallRespositoryWithParametersSpecify()",12,1,10,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetDateIntervalAndFinalDateWhenRecurrenceTypeDate()",12,1,10,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldSetTheComingSituationWhenInPreparationButFlagToTransformInFieldOffWhenExecuteToModel()",12,1,8,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldSetTheComingSituationWhenInPreparationFlagToTransformInFieldOnButIsNewTaskWhenExecuteToModel()",12,1,8,0,0
"me.umov.business.infrastructure.cron.RundeckRestService.obtainRundeckSession()",12,1,6,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHourTest.shouldNotValidateWhenDoesNotHaveInitialAndFinalDateAndHour()",11,1,40,0,0
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImplTest.shouldBuildQueryWithDateFinalWhenSetFinalDateinTask()",11,1,20,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTOTest.shouldConvertToModelWithValues()",11,1,19,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHourTest.shouldValidateWhenInitialDateHourIsAfterFinalDateHour()",11,1,19,0,0
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImplTest.shouldBuildQueryWithoutDateFinalWhenNotSetFinalDateinTask()",11,1,18,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnResultProcessRuleWithTypeErrorWhenThrowException()",11,1,16,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldAddResourceWithSuccessfuly()",11,1,16,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldDeleteResourceWithSuccessfuly()",11,1,16,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombinationTest.shouldReturnSatisfiedWhenServiceLocalHaveInitialHourAndFinalHour()",11,1,15,0,0
"me.umov.business.taskschedule.application.controller.CronControllerTest.shouldCallServiceAndReturnSuccessWhenCreatingCron()",11,1,14,0,0
"me.umov.business.taskschedule.application.controller.CronControllerTest.shouldCallServiceAndReturnSuccessWhenDisablingCron()",11,1,14,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldCallServiceAndReturnSuccessApiReturn()",11,1,13,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldPublishSavedEventWithNewItinerarySchedule()",11,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombinationTest.shouldReturnNotSatisfiedWhenServiceLocalHaveFinalHourButDoNotHaveInitialHour()",11,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombinationTest.shouldReturnSatisfiedWhenServiceLocalHaveOnlyInitialHour()",11,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsINFORMED_ACTIVITIESAndTaskActivityListIsEmpty()",11,1,13,0,0
"me.umov.business.infrastructure.cron.RundeckRestServiceTest.setup()",11,1,13,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddActivityInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddActivityInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddAgentInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddAgentInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddServiceLocalInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddServiceLocalInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddTeamInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldAddTeamInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteActivityInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteActivityInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteAgentInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteAgentInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteServiceLocalInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteServiceLocalInTheListUsingId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteTeamInTheListUsingAltId()",11,1,11,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldDeleteTeamInTheListUsingId()",11,1,11,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldTransformToModelWithoutRelationships()",11,1,11,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombinationTest.shouldReturnSatisfiedWhenServiceLocalDoNotHaveInitialHourAndFinalHour()",11,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelectedTest.shouldValidateWhenTaskHasNoTeamExecution()",11,1,11,0,0
"me.umov.business.domain.client.UserDataTest.shouldSetUserRequestData()",11,1,10,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldThrowErrorWhenIsNotPossibleChangeTasksPriority()",11,1,9,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeTest.shouldCallSetParameterValuesWithLongArrayTypeDescriptorInstance()",11,1,9,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateApiReturnWithStatusCodeMessageAndId()",11,1,8,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldSetSituationToInFieldWhenInPreparationFlagOnWhenExecuteToModel()",11,1,8,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldResolveGeoCoordinateWhenAddressHasStreetCityAndStateAddress()",11,1,7,0,0
"me.umov.business.application.service.RecurrenceServiceTest.setup()",11,1,6,0,0
"me.umov.business.configuration.SwaggerConfig.informacoesApi()",11,1,5,0,0
"me.umov.business.application.repository.custom.ActivityRepositoryImplTest.shouldSetParametersOnFindDefaultActivitiesFor()",10,1,28,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFieldsTest.shouldValidateWhenRequiredFieldIsPresentButEmpty()",10,1,20,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_ASK_CONFIRMATIONAndNoSkipValidationWasSetAndTaskFinalDateIsNotWithinJourney()",10,1,18,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_BLOCKAndTaskFinalDateIsNotWithinJourney()",10,1,18,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_ASK_CONFIRMATIONAndNoSkipValidationWasSetAndTaskInitialDateIsNotWithinJourney()",10,1,17,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_BLOCKAndTaskInitialDateIsNotWithinJourney()",10,1,17,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_ASK_CONFIRMATIONAndSkipValidationWasSetAndTaskFinalDateIsNotWithinJourney()",10,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldValidateInitialDateGreaterThanFinalDate()",10,1,15,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldValidateWhenAgentIsConfiguredToValidateLocalResponsibleAndIsNotResponsibleForLocalCase2()",10,1,15,0,0
"me.umov.business.application.model.WorkJourneyDayModelTest.shouldIdentifyTimeInsideOfIntervalCase2()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivitiesTest.shouldReturnNotSatisfiedWhenNotFoundAllActivities()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivitiesTest.shouldReturnSatisfiedWhenFoundAllActivitiesOfItinerary()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllAgentsTest.shouldReturnNotSatisfiedWhenNotFoundAllAgents()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllAgentsTest.shouldReturnSatisfiedWhenFoundAllAgentsOfItinerary()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllServiceLocalsTest.shouldReturnNotSatisfiedWhenNotFoundAllServiceLocals()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllServiceLocalsTest.shouldReturnSatisfiedWhenFoundAllServiceLocalsOfItinerary()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllTeamsTest.shouldReturnNotSatisfiedWhenNotFoundAllTeams()",10,1,14,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllTeamsTest.shouldReturnSatisfiedWhenFoundAllTeamsOfItinerary()",10,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocalTest.shouldValidateWhenLoadedServiceLocalIsNull()",10,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidAgentTest.shouldValidateWhenLoadedAgentIsNull()",10,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskTypeTest.shouldValidateWhenLoadedTaskTypeIsNullAndTaskTypeWasInfored()",10,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTeamTest.shouldValidateWhenLoadedTeamIsNull()",10,1,14,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldValidateWhenAgentIsConfiguredToValidateLocalResponsibleAndIsNotResponsibleForLocalCase1()",10,1,14,0,0
"me.umov.business.infrastructure.jpa.AgentPorfolioValidationConverterTest.shouldConvertFromDB()",10,1,14,0,0
"me.umov.business.infrastructure.jpa.AgentPorfolioValidationConverterTest.shouldConvertToDB()",10,1,14,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldNotCallServiceWhenNoClientIdIsProvided()",10,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocalTest.shouldValidateWhenServiceLocalIdIsNull()",10,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsINFORMED_ACTIVITIESAndHasNoTaskActivityList()",10,1,13,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldValidateWhenInitialDateIsBeforeToday()",10,1,13,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldRegisterAllSimplifiedTaskSaveRules()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredPriorityFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredTeamFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredToleranceAfterEndFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredToleranceAfterStartFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredToleranceBeforeEndWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredToleranceBeforeStartFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotReturnErrorAtRequiredWaitTimeOnFieldWhenAnyValue()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsENVIRONMENT_DEFAULTAndDefaultActivityListIsEmpty()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsPERSON_DEFAULTAndDefaultActivityListIsEmpty()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsSERVICE_LOCAL_DEFAULTAndDefaultActivityListIsEmpty()",10,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldValidateWhenActivityOriginIsTASK_TYPEAndDefaultActivityListIsEmpty()",10,1,12,0,0
"me.umov.business.infrastructure.jpa.ActivityCycleConverterTest.shouldConvertFromDB()",10,1,12,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateMultipleActivitiesOriginTest.shouldReturnNotSatisfiedWhenItineraryActivitiesOriginIsConfiguredWithAnotherOrigin()",10,1,11,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateMultipleActivitiesOriginTest.shouldReturnSatisfiedWhenItineraryActivitiesOriginIsConfiguredWithoutOther()",10,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotValidateOtherFields()",10,1,11,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAutomaticActivityLoadConfigTest.shouldReturnNotSatisfiedWhenIsAgentActivitiesOriginAndActivitiesAreInformed()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateItineraryActivitiesOriginWithoutActivitiesTest.shouldReturnNotSatisfiedWhenItineraryIsConfiguredToUseItineraryActivitiesAndHasNoActivities()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateItineraryActivitiesOriginWithoutActivitiesTest.shouldReturnSatisfiedWhenItineraryIsConfiguredToUseItineraryActivitiesAndHasActivities()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithTeamsTest.shouldReturnNotSatisfiedWhenAgentRelationIsSomeAgentsAndTeamsAreInformed()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithTeamsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeAgentsAndAgentsAreInformed()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithoutAgentsTest.shouldReturnNotSatisfiedWhenItineraryIsConfiguredToUseSomeAgentsAndHasNoAgents()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithoutAgentsTest.shouldReturnSatisfiedWhenItineraryIsConfiguredToUseSomeAgentsAndHasAgents()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeTeamsRelationWithAgentsTest.shouldReturnNotSatisfiedWhenAgentRelationIsSomeTeamsAndAgentsAreInformed()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeTeamsRelationWithAgentsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeTeamsAndTeamsAreInformed()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateTeamsByRelationTest.shouldReturnNotSatisfiedWhenItineraryIsConfiguredToUseSomeTeamsAndHasNoTeams()",10,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateTeamsByRelationTest.shouldReturnSatisfiedWhenItineraryIsConfiguredToUseSomeTeamsAndHasTeams()",10,1,10,0,0
"me.umov.business.application.model.dto.SaveTaskDTOTest.shouldTransformToModelWithMultipleActivityOrigin()",10,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeamsTest.shouldReturnNoSatisfiedWhenAgentRelationIsSomeTeamsAndTeamExecutionIsNull()",10,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeamsTest.shouldReturnSatisfiedWhenAgentRelationIsAllAgentsAndTeamExecutionIsNull()",10,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeamsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeAgentsAndTeamExecutionIsNull()",10,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeamsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeTeamsAndTeamExecutionIsNotNull()",10,1,9,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldChangeTasksPriority()",10,1,8,0,0
"me.umov.business.domain.generic.specification.ShouldHaveValidIdTest.shouldReturnSatisfiedWhenCandidateWasFoundAndBelongsToClient()",10,1,8,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetDateIntervalWithoutFinalDate()",10,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldPassRulesWhenLackOfWeekdaysButRepeatUnitIsMonth()",10,1,8,0,0
"me.umov.business.domain.rule.task.ShouldInitiateTodayTest.shouldNotErrorWhenTaskWithInitialDateNow()",10,1,8,0,0
"me.umov.business.domain.rule.task.ShouldBeActiveTest.shouldNotErrorWhenTaskActive()",10,1,7,0,0
"me.umov.business.domain.rule.task.ShouldBeInPreparationTest.shouldNotErrorWhenTaskInPreparation()",10,1,7,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamTest.shouldNotErrorWhenTaskHaveTeam()",10,1,7,0,0
"me.umov.business.domain.rule.task.ShouldNotHaveAgentTest.shouldNotErrorWhenTaskWithoutAgent()",10,1,7,0,0
"me.umov.business.domain.task.TaskModelTest.shouldSetActivityOriginProperly()",10,1,7,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.shouldCallWorkCycleGeneratorToUpdateWorkCycles()",10,1,7,0,0
"me.umov.business.application.repository.custom.task.TaskQueryBuilder.getQueryDefault()",10,1,0,0,0
"me.umov.business.application.repository.custom.task.TaskQueryBuilder.getQueryUsingFinalDate()",10,1,0,0,0
"me.umov.business.application.model.type.DayOfWeekTest.shouldDayOfWeekFromDate()",9,1,21,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnBatchResultWithUnprocessableEntityOnComputeTaskResumeWhenInvalidIntervalIsPresent()",9,1,18,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnBatchResultWithUnprocessableEntityOnComputeTaskResumeWhenInvalidTaskIdIsPresent()",9,1,18,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnBatchResultWithErrorOnComputeTaskResume()",9,1,17,0,0
"me.umov.business.infrastructure.cron.RundeckRestServiceTest.shouldCallRestTemplateDELETEWithCorrectHeaders()",9,1,17,0,0
"me.umov.business.infrastructure.jpa.ActivityOriginConverterTest.shouldConvertFromDB()",9,1,17,0,0
"me.umov.business.infrastructure.jpa.ActivityOriginConverterTest.shouldConvertToDB()",9,1,17,0,0
"me.umov.business.domain.task.TaskModelTest.shouldRetrieveTaskDateIntervalWithBothDatesAndHours()",9,1,16,0,0
"me.umov.business.domain.task.TaskModelTest.shouldRetrieveTaskDateIntervalWithBothDatesAndHours2()",9,1,16,0,0
"me.umov.business.application.interceptor.JWTAuthorizationInterceptorTest.shouldWhenJWTServiceReturnsAValidRequestUser()",9,1,15,0,0
"me.umov.business.application.service.BaseServiceTest.setup()",9,1,15,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFieldsTest.shouldValidateWhenRequiredFieldIsNotPresent()",9,1,15,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_ASK_CONFIRMATIONAndNoSkipValidationWasSetAndTaskInitialAndFinalDateIsWithinJourney()",9,1,15,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_BLOCKAndTaskInitialAndFinalDateIsWithinJourney()",9,1,15,0,0
"me.umov.business.domain.task.TaskModelTest.shouldRetrieveTaskDateIntervalWithInitialDatesAndHourAndFinalHour()",9,1,15,0,0
"me.umov.business.application.controller.AgentControllerTest.shouldReturnInternalServerErrorOnResultWhenErrorCallOfComputeJourneySchedules()",9,1,14,0,0
"me.umov.business.application.controller.AgentControllerTest.shouldReturnUnprocessableEntityWhenInvalidIntervalExceptionIsThrown()",9,1,14,0,0
"me.umov.business.application.model.type.DayOfWeekTest.shouldGetJavaDayOfWeek()",9,1,14,0,0
"me.umov.business.application.model.type.DayOfWeekTest.shouldGetOrdinalFromDayOfWeek()",9,1,14,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.shouldApplyModelValues()",9,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.validationShouldBeOkWhenRequiredRelationshipFieldIsInformed()",9,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_ASK_CONFIRMATIONAndNoSkipValidationWasSetAndTaskInitialDateIsWithinJourney()",9,1,14,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsVALIDATE_AND_BLOCKAndTaskInitialDateIsWithinJourney()",9,1,14,0,0
"me.umov.business.infrastructure.jpa.ExportSituationConverterTest.shouldConvertFromDB()",9,1,14,0,0
"me.umov.business.infrastructure.jpa.ExportSituationConverterTest.shouldConvertToDB()",9,1,14,0,0
"me.umov.business.application.model.WorkJourneyDayModelTest.shouldIdentifyTimeInsideOfIntervalCase1()",9,1,13,0,0
"me.umov.business.application.service.DistributionIdleAgentTest.shouldReturnResultProcessRuleProccessErrorWhenDoNotHaveTask()",9,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivitiesTest.shouldReturnNotSatisfiedWhenNotFoundAnyActivities()",9,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllAgentsTest.shouldReturnNotSatisfiedWhenNotFoundAnyAgents()",9,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllServiceLocalsTest.shouldReturnNotSatisfiedWhenNotFoundAnyServiceLocals()",9,1,13,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllTeamsTest.shouldReturnNotSatisfiedWhenNotFoundAnyTeams()",9,1,13,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldDeserializeValidValueWithSeconds()",9,1,13,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldDeserializeValidValueWithoutSeconds()",9,1,13,0,0
"me.umov.business.application.controller.AgentControllerTest.shouldCallServiceAndReturnSuccessApiReturn()",9,1,12,0,0
"me.umov.business.application.observer.NotificationAfterSaveTaskTest.shouldNotNotifyWhenDoNotChangeAgent()",9,1,12,0,0
"me.umov.business.application.observer.NotificationAfterSaveTaskTest.shouldNotNotifyWhenThereIsNoEvent()",9,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.validationShouldBeOkWhenAgentFieldIsInformed()",9,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotValidateAgentField()",9,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.validationShouldBeOkWhenRequiredPrimitiveLongFieldIsInformed()",9,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.validationShouldBeOkWhenRequiredPrimitiveStringFieldIsInformed()",9,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldPassValidationWhenActivityOriginIsINFORMED_ACTIVITIESAndTaskActivityListHasValues()",9,1,12,0,0
"me.umov.business.infrastructure.jpa.TaskScheduleActivityOriginConverterTest.shouldConvertFromDB()",9,1,12,0,0
"me.umov.business.infrastructure.jpa.TaskScheduleActivityOriginConverterTest.shouldConvertToDB()",9,1,12,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverter.addItinerary(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",9,1,11,0,2
"me.umov.business.domain.model.builder.TaskLoaderTest.shouldLoadCustomFieldWhenDtoHasCustomFieldDTO()",9,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotValidateAgentWhenFieldIsNotActiveOnCenter()",9,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotValidateAgentWhenFieldIsNotRequiredOnCenter()",9,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotValidateRequiredWhenFieldIsNotActiveOnCenter()",9,1,11,0,0
"me.umov.business.domain.task.TaskModelTest.shouldRetrieveTaskDateIntervalWithInitialDateOnly()",9,1,11,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateSuccessApiReturnWithId()",9,1,10,0,0
"me.umov.business.application.interceptor.JWTAuthorizationInterceptorTest.shouldThrowUnauthorizedExceptionWhenProblemsOccurOnJwtService()",9,1,10,0,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocalTest.shouldValidateWhenServiceLocalIsNull()",9,1,10,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldValidateWhenInitialDateIsNull()",9,1,10,0,0
"me.umov.business.infrastructure.jpa.ActivityCycleConverterTest.shouldConvertToDB()",9,1,10,0,0
"me.umov.business.infrastructure.jpa.ActivityExecutionModeConverterTest.shouldConvertFromDB()",9,1,10,0,0
"me.umov.business.application.observer.ItineraryCronSchedulerObserverTest.shouldNotDisableCronWhenEventSayThatIsMustNot()",9,1,9,0,0
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserverTest.shouldNotDisableCronWhenEventSayThatIsMustNot()",9,1,9,0,0
"me.umov.business.application.observer.ItineraryCronSchedulerObserverTest.shouldDisableCronWhenEventSayThatIsMust()",9,1,8,0,0
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserverTest.shouldDisableCronWhenEventSayThatIsMust()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAgentRelationEqualsAllAgentsTest.shouldReturnNotSatisfiedWhenAgentRelationIsAllAgents()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAgentRelationEqualsAllAgentsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeAgents()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAgentRelationEqualsAllAgentsTest.shouldReturnSatisfiedWhenAgentRelationIsSomeTeams()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAutomaticActivityLoadConfigTest.shouldReturnSatisfiedWhenIsAgentActivitiesOriginAndActivitiesAreNotInformed()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateItineraryActivitiesOriginWithoutActivitiesTest.shouldReturnSatisfiedWhenItineraryIsNotConfiguredToUseItineraryActivities()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithoutAgentsTest.shouldReturnSatisfiedWhenItineraryIsNotConfiguredToUseSomeAgents()",9,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateTeamsByRelationTest.shouldReturnSatisfiedWhenItineraryIsNotConfiguredToUseSomeTeams()",9,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldValidateSuccessfulWhenCase1()",9,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldValidateSuccessfulWhenCase2()",9,1,8,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldThrowErrorWhenIsNotPossibleAssignTasksToAgents()",9,1,7,0,0
"me.umov.business.application.controller.activityhistory.ActivityHistoryControllerTest.shouldCallDaoWhenDataToPassParameterIsValid()",9,1,7,0,0
"me.umov.business.domain.task.TaskModelTest.shouldGetActivityOriginProperly()",9,1,7,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateApiReturnWithStatusCodeAndMessage()",9,1,6,0,0
"me.umov.business.domain.rule.builders.IdleAgentBuilder.getRules(TaskModel taskModel)",9,1,5,0,1
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.CreateWorkCycleRequest(@NotNull Long serviceLocalId, @NotNull @NotEmpty List<Long> activityIds, @NotNull LocalDate initialDate, @NotNull LocalDate finalDate, @NotNull Long itineraryScheduleId)",9,1,0,0,5
"me.umov.business.application.repository.ItineraryTeamReposytory.findItineraryTeamCustomQuery(@Param("itineraryAltId") String itineraryAltId, @Param("teamAltId") String teamAltId, @Param("clientId") Long clientId)",9,1,0,0,3
"me.umov.business.application.repository.custom.task.TaskQueryBuilder.getQueryNotUsingFinalDate()",9,1,0,0,0
"me.umov.business.application.repository.custom.ActivityRepositoryImplTest.shouldSetParametersWithNullHandleOnFindDefaultActivitiesFor()",8,1,19,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfChangeTheAgent()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfChangeTheTeamExecution()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfChangeTheTeamExecutionFromNull()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfMarkCheckBox()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeAgentAndTeamExecutionBUTCheckboxIsUnchecked()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeAgentAndTeamExecutionBUTDisableCheckbox()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeTheAgentBUTUnmarckCheckBox()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeTheTeamExecutionBUTUnmarckCheckBox()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeTheTeamExecutionToNull()",8,1,18,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfNoCondictionsWasChanged()",8,1,18,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleBusinessValidationExceptionShouldReturnProperApiReturn()",8,1,16,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotValidateWhenAgentJourneyIsMarkedAsDONT_VALIDATE()",8,1,14,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldReturnApiErrorWhenThrowException()",8,1,13,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldReturnBatchResultWithUnprocessableEntityOnComputeTaskResumeWhenNoClientIdIsPresent()",8,1,12,0,0
"me.umov.business.application.interceptor.InterceptorConfigTest.shouldAddInterceptorsInRightOrderToRegistry()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsCanceledAndTheNewSituationIsCanceled()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsInFieldAndTheNewSituationIsCanceled()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsInFieldAndTheNewSituationIsInField()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsInFieldAndTheNewSituationIsPending()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsPendingAndTheNewSituationIsCanceled()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsPendingAndTheNewSituationIsPending()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldBeValidWhenIsEditingTaskModelAndOldSituationIsReturnedAndTheNewSituationIsReturned()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotHaveMessageWhenIsEditingTaskModelAndOldSituationIsInPreparationAndTheNewIsCanceled()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotHaveMessageWhenIsEditingTaskModelAndOldSituationIsInPreparationAndTheNewIsInPreparation()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotHaveMessageWhenIsEditingTaskModelAndOldSituationIsInPreparationAndTheNewIsPending()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsCanceledAndTheNewSituationIsInField()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsCanceledAndTheNewSituationIsInPreparation()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsCanceledAndTheNewSituationIsPending()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsCanceledAndTheNewSituationIsReturned()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsInFieldAndTheNewSituationIsInPreparation()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsInFieldAndTheNewSituationIsReturned()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsInPreparationButTheNewIsReturned()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsPendingButTheNewSituationIsInField()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsPendingButTheNewSituationIsInPreparation()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsPendingButTheNewSituationIsReturned()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsReturnedAndTheNewSituationIsCanceled()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsReturnedAndTheNewSituationIsInField()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsReturnedAndTheNewSituationIsInPreparation()",8,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldReturnErrorMessageWhenIsEditingTaskModelAndOldSituationIsReturnedAndTheNewSituationIsPending()",8,1,12,0,0
"me.umov.business.domain.task.TaskModelTest.shouldRetrieveTaskDateIntervalWithInitialDatesAndHour()",8,1,12,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldAddRequestHeaderToAllowAllOrigins()",8,1,11,0,0
"me.umov.business.domain.client.ClientConfigurationsTest.shouldReturnClientSettingsForUseFrequencyControl()",8,1,11,0,0
"me.umov.business.infrastructure.jpa.ItineraryAgentRelationConverterTest.shouldConvertToDB()",8,1,11,0,0
"me.umov.business.infrastructure.jpa.TeamExecutionConverterTest.shouldConvertToDB()",8,1,11,0,0
"me.umov.business.taskschedule.application.controller.CronControllerTest.shouldReturnErrorWhenExceptionOccursCreatingCron()",8,1,11,0,0
"me.umov.business.taskschedule.application.controller.CronControllerTest.shouldReturnErrorWhenExceptionOccursDisablingCron()",8,1,11,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.assertErrorRuleMessagesFromTaskProcessed(TaskModel task, TaskModel oldTaskModel)",8,1,10,0,2
"me.umov.business.domain.itinerary.specification.ShouldHaveStartDateLessThanEndDateTest.shouldBeSatisfiedWhenStartDateIsLessThanEndDate()",8,1,10,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveStartDateLessThanEndDateTest.shouldNotBeSatisfiedWhenStartDateIsGreaterThanEndDate()",8,1,10,0,0
"me.umov.business.domain.client.ClientServiceTest.shouldLoadCurrentUserFromUserData()",8,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryInitialDateGreaterThanTodayTest.shouldConsiderNotSatisfiedWhenInitialDateIsBeforeToday()",8,1,9,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveStartDateLessThanEndDateTest.shouldBeSatisfiedWhenStartDateEqualsEndDate()",8,1,9,0,0
"me.umov.business.domain.model.builder.TaskLoaderTest.shouldCustomFieldValueModelsIsEmptyWhenCustomFieldDTOIsNull()",8,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldNotReturnErrormessagewhereIsTaskExistOnDateInterval()",8,1,9,0,0
"me.umov.business.infrastructure.jpa.workcycle.WorkCycleGeneratorImpl.updateWorkCyclesState(Long clientId, List<Long> workCycleIds)",8,1,8,0,2
"me.umov.business.domain.itinerary.ItineraryCronServiceTest.shouldDisableCronRemoveCronIdAndSaveTaskItinerary()",8,1,8,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleCronServiceTest.shouldDisableCronRemoveCronIdAndSaveItinerarySchedule()",8,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryInitialDateGreaterThanTodayTest.shouldConsiderNotSatisfiedWhenInitialDateIsToday()",8,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryScheduleInitialDateGreaterThanTodayTest.shouldReturnNotSatisfiedWhenItineraryInitialDateIsBeforeNow()",8,1,8,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryScheduleInitialDateGreaterThanTodayTest.shouldReturnSatisfiedWhenInitialDateIsAfterNow()",8,1,8,0,0
"me.umov.business.infrastructure.cron.RundeckRestConfiguration.configure()",8,1,8,0,0
"me.umov.business.infrastructure.jpa.ActivityExecutionModeConverterTest.shouldConvertToDB()",8,1,8,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldChangeMethodTypeToPartialUpdateAndSaveTheResourceWhenPartialEditByAlternativeIdentifier()",8,1,7,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldChangeMethodTypeToPartialUpdateAndSetIdAndSaveTheResourceWhenEditById()",8,1,7,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldChangeMethodTypeToUpdateAndSaveTheResourceWhenEditByAlternativeIdentifier()",8,1,7,0,0
"me.umov.business.api.TaskScheduleApiTest.shouldChangeMethodTypeToUpdateAndSetIdAndSaveTheResourceWhenEditById()",8,1,7,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateApiReturnWithStatusCodeAndMessages()",8,1,7,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateErrorApiReturnWithMessage()",8,1,7,0,0
"me.umov.business.application.api.ApiReturnTest.shouldCreateSuccessApiReturnWithMessage()",8,1,7,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.shouldChangeMethodTypeToPartialUpdateWhenPartialEditByAlternativeIdentifier()",8,1,7,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.shouldChangeMethodTypeToPartialUpdateWhenPartialEditById()",8,1,7,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.shouldChangeMethodTypeToUpdateWhenEditByAlternativeIdentifier()",8,1,7,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.shouldChangeMethodTypeToUpdateWhenEditById()",8,1,7,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTOTest.shouldSetInternalAndExternalValueToEmptyWhenNull()",8,1,7,0,0
"me.umov.business.application.controller.TaskControllerTest.shouldAssignAgentsToTasks()",8,1,6,0,0
"me.umov.business.application.observer.ItineraryCronSchedulerObserverTest.shouldNotCreateCronWhenSavedItinerarySavedIsANewOne()",8,1,6,0,0
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserverTest.shouldNotCreateCronWhenSavedItineraryScheduleSavedIsANewOne()",8,1,6,0,0
"me.umov.business.domain.itinerary.ItineraryCronServiceTest.shouldThrowExceptionWhenTryingToCreateCronAndAlreadyHasCron()",8,1,6,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleCronServiceTest.shouldThrowExceptionWhenTryingToCreateCronAndAlreadyHasCron()",8,1,6,0,0
"me.umov.business.infrastructure.serialization.BooleanStatusSerializationAdapterTest.shouldSerializeBooleanStatusToBoolean()",8,1,6,0,0
"me.umov.business.infrastructure.serialization.WorkdayTaskCreationValidationSerializationAdapterTest.shouldDeserializeWorkdayTaskCreationValidationFromAllLong()",8,1,6,0,0
"me.umov.business.application.observer.ItineraryCronSchedulerObserverTest.shouldCreateCronWhenSavedItinerarySavedIsANewOne()",8,1,5,0,0
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserverTest.shouldCreateCronWhenSavedItineraryScheduleSavedIsANewOne()",8,1,5,0,0
"me.umov.business.domain.itinerary.ItineraryCronServiceTest.shouldThrowExceptionWhenTryingToDisableCronAndHasNoCron()",8,1,5,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleCronServiceTest.shouldThrowExceptionWhenTryingToDisableCronAndHasNoCron()",8,1,5,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldSaveTaskScheduleGroup()",8,1,5,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.shouldSaveWorkcycle()",8,1,5,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldResolveGeoCoordinateWhenAddressHasZipCode()",8,1,5,0,0
"me.umov.business.domain.task.TaskDailyResumeTest.shouldIgnoreNullNonconformitiesInArray()",8,1,4,0,0
"me.umov.business.infrastructure.cron.RundeckRestService.buildHeaders()",8,1,4,0,0
"me.umov.business.taskschedule.domain.TaskScheduleDomainService.saveItinerarySchedule(ItinerarySchedule itinerarySchedule)",8,1,3,0,1
"me.umov.business.domain.recurrence.CrontabExpression.CrontabExpression(String second, String minute, String hour, String dayOfMonth, String dayOfWeek, String month, String year)",8,1,0,0,7
"me.umov.business.application.service.AgentServiceTest.shouldCallRepositoryToComputeJourneySchedulesData()",7,1,16,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldBuildCronForDailyTaskSchedule()",7,1,16,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldBuildCronForMonthlyTaskSchedule()",7,1,16,0,0
"me.umov.business.infrastructure.cron.RundeckRestConfigurationTest.shouldRegisterMessageConvertersProperly()",7,1,16,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.buildMultimidiaURLTestCaseWithValue(String multimidiaURLValue)",7,1,15,0,1
"me.umov.business.application.service.ActivityServiceTest.shouldReturnRepositoryDefaultActivityPerOrigin()",7,1,15,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfChangeTheAgentFromNull()",7,1,15,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfChangeTheAgentToNull()",7,1,15,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.buildGeocoordinateTestCaseWithValue(String geoCoordinateValue)",7,1,14,0,1
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeamTest.shouldNotProcessRuleWhenSystemParameterIsNotTeamOnlyOneAgent()",7,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeamTest.shouldNotProcessRuleWhenTaskModelHasNoTeam()",7,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeamTest.shouldProcessRuleWhenHasTeamAndIsOnlyOneAgentTeam()",7,1,12,0,0
"me.umov.business.utils.specification.domain.AndSpecificationTest.shouldMakeLogicalANDWithTwoSpecifications()",7,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotProcessWhenTaskAgentWithNoDateInterval()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.ItineraryAgentRelationConverterTest.shouldConvertFromDB()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.RecurrenceRepeatModeConverterTest.shouldConvertFromDB()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.RecurrenceRepeatModeConverterTest.shouldConvertToDB()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.TeamExecutionConverterTest.shouldConvertFromDB()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.WorkdayTaskCreationValidationConverterTest.shouldConvertFromDB()",7,1,11,0,0
"me.umov.business.infrastructure.jpa.WorkdayTaskCreationValidationConverterTest.shouldConvertToDB()",7,1,11,0,0
"me.umov.business.application.service.ServiceLocalServiceTest.shouldReturnRepositorySearchByName()",7,1,10,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificaionIfOldScheduleIsNull()",7,1,10,0,0
"me.umov.business.infrastructure.jpa.LocalTimeConverterTest.shouldConvertFromDB()",7,1,10,0,0
"me.umov.business.infrastructure.serialization.TaskSituationSerializationAdapterTest.shouldDeserializeTaskSituationFromAllLong()",7,1,10,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldThrowBusinessValidationExceptionWhenSaveResource()",7,1,10,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverter.setSpecificValues(SaveTaskScheduleGroupRequest request, ItinerarySchedule taskSchedule)",7,1,9,0,2
"me.umov.business.domain.recurrence.DateIntervalTest.shouldCreateDateIntervalWithBothDatetimes()",7,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldReturnErrormessagewhereIsTaskExistOnDateInterval()",7,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldBeOKWhenActivityOriginIsENVIRONMENT_DEFAULTAndDefaultActivityListHasItems()",7,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldBeOKWhenActivityOriginIsPERSON_DEFAULTAndDefaultActivityListHasItems()",7,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldBeOKWhenActivityOriginIsSERVICE_LOCAL_DEFAULTAndDefaultActivityListHasItems()",7,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldBeOKWhenActivityOriginIsTASK_TYPEAndDefaultActivityListHasItems()",7,1,9,0,0
"me.umov.business.domain.model.builder.TaskLoaderTest.shouldApplyDefaultTaskModelWithGroupWhenHasRecurrence()",7,1,8,0,0
"me.umov.business.domain.recurrence.DateIntervalTest.shouldCreateDateIntervalWithOnlyInitialDatetime()",7,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveTaskModelTest.shouldValidateLackOfModel()",7,1,8,0,0
"me.umov.business.infrastructure.jpa.FieldConfigOriginConverterTest.shouldConvertToDB()",7,1,8,0,0
"me.umov.business.infrastructure.jpa.FrequencyControlTypeConverterTest.shouldConvertToDB()",7,1,8,0,0
"me.umov.business.infrastructure.serialization.HttpStatusSerializationAdapterTest.shouldSerializeHttpStatusCode()",7,1,8,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldAddRequestHeaderToAllowAllMethods()",7,1,7,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldAddRequestHeaderToAllowCredentials()",7,1,7,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldAddRequestHeaderToAllowSomeSpecifiedHeaders()",7,1,7,0,0
"me.umov.business.domain.task.TaskModelTest.shouldSetTeamExecutionToNotByTeamWhenTeamExecutioNullAndTeamIsNotNull()",7,1,7,0,0
"me.umov.business.domain.task.TaskModelTest.shouldSetTeamExecutionWhenTeamExecutionIsByTeamAndTeamIsNotNull()",7,1,7,0,0
"me.umov.business.domain.task.TaskModelTest.shouldSetTeamExecutionWhenTeamExecutionIsNullAndTeamIsNull()",7,1,7,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldReturnApiErrorWhenThrowExceptionInAddRelationship()",7,1,7,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldReturnApiErrorWhenThrowExceptionInDeleteRelationship()",7,1,7,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTOTest.shouldReturnEmptyHourWhenInitialAndFinalHourAreNull()",7,1,6,0,0
"me.umov.business.application.observer.TaskSavedObserverTest.shouldNotAssignTaskWorkCyclesWhenIsNotInsert()",7,1,6,0,0
"me.umov.business.application.observer.TaskSavedObserverTest.shouldNotGenerateRecurrencesWhenIsNotInsert()",7,1,6,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryInitialDateGreaterThanTodayTest.shouldConsiderSatisfiedWhenInitialDateIsAfterToday()",7,1,6,0,0
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.addNewRelationship(Itinerary itinerary, Long id)",7,1,5,0,2
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.addNewRelationship(Itinerary itinerary, Long id)",7,1,5,0,2
"me.umov.business.api.TaskScheduleApiTest.shouldChangeMethodTypeToCreateAndSaveTheResource()",7,1,5,0,0
"me.umov.business.application.observer.BeforeTaskSaveObserverTest.shouldCallTaskNotificationOnEvent()",7,1,5,0,0
"me.umov.business.application.observer.BeforeTaskSaveObserverTest.shouldCallWorkCycleUpdateOnEvent()",7,1,5,0,0
"me.umov.business.application.observer.TaskSavedObserverTest.shouldAssignTaskWorkCyclesWhenIsInsert()",7,1,5,0,0
"me.umov.business.application.observer.TaskSavedObserverTest.shouldGenerateRecurrencesWhenIsInsert()",7,1,5,0,0
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.createAmazonSQS()",7,1,5,0,0
"me.umov.business.taskschedule.api.TaskScheduleGroupController.save(@Valid @RequestBody SaveTaskScheduleGroupRequest request)",7,1,4,0,1
"me.umov.business.domain.servicelocal.AddressTest.shouldNotResolveGeoCoordinateWhenAddressHasNoZipCodeAndMinimalAddress()",7,1,4,0,0
"me.umov.business.application.controller.workcycle.WorkCycleControllerTest.shouldAttachServiceLocal()",7,1,3,0,0
"me.umov.business.application.controller.workcycle.WorkCycleControllerTest.shouldDetachServiceLocal()",7,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldGetDateIntervalWithoutInitialDate()",7,1,3,0,0
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProviderTest.shouldCallRundeckRestDeleteOnDisableCron()",7,1,3,0,0
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.jmsListenerContainerFactory()",7,1,3,0,0
"me.umov.business.domain.task.TaskJpaRepository.computeTaskDailyResume(@Param("clientId") Long clientId, @Param("taskId") Long taskId, @Param("agentId") Long agentId, @Param("date") LocalDate date, @Param("dateHourFirstExecution") LocalDateTime dateHourFirstExecution, @Param("dateHourLastExecution") LocalDateTime dateHourLastExecution, @Param("totalTaskTime") String totalTaskTime, @Param("totalWorkedTime") String totalWorkedTime, @Param("totalNotWorkedTime") String totalNotWorkedTime, @Param("totalTimeWithoutExecution") String totalTimeWithoutExecution, @Param("totalTraveledDistance") Double totalTraveledDistance, @Param("negativeExecution") String negativeExecution, @Param("totalExecutedActivities") Long totalExecutedActivities, @Param("nonconformities") String nonconformities)",7,1,0,0,14
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldNotProcessRuleWhenIsDateTaskBlockedAndExistAgent()",6,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldVerifyProcessRuleWhenNotIsDateTaskBlockedAndExistAgent()",6,1,12,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldVerifyProcessRuleWhenNotIsDateTaskBlockedNullAndExistAgent()",6,1,12,0,0
"me.umov.business.domain.task.TaskModelTest.shouldNotBeAbleToSendNotificationIfEnableCheckboxBUTAgentAndTeamExecutionIsNull()",6,1,12,0,0
"me.umov.business.infrastructure.serialization.RecurrenceRepeatModeSerializationAdapterTest.shouldSerializeRecurrenceRepeatModeToString()",6,1,12,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverterTest.setup()",6,1,12,0,0
"me.umov.business.utils.specification.domain.OrSpecificationTest.shouldMakeLogicalORWithTwoSpecifications()",6,1,12,0,0
"me.umov.business.application.repository.custom.ActivityRepositoryImplTest.setup()",6,1,11,0,0
"me.umov.business.infrastructure.serialization.JourneyHourTypeSerializationAdapterTest.shouldDeserialize()",6,1,11,0,0
"me.umov.business.application.repository.custom.task.TaskRepositoryCustomImplTest.setUp()",6,1,10,0,0
"me.umov.business.application.service.toggle.FeatureToggleServiceTest.shouldBeAbleToNotify()",6,1,10,0,0
"me.umov.business.application.service.toggle.FeatureToggleServiceTest.shouldNotBeAbleToNotify()",6,1,10,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldBeOkWhenIsUpdateAndDateIsBeforeToday()",6,1,10,0,0
"me.umov.business.application.service.AgentServiceTest.shouldReturnRepositoryById()",6,1,9,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldReturnGsonDeserializedObjectFromJSON()",6,1,9,0,0
"me.umov.business.application.service.ServiceLocalServiceTest.shouldReturnRepositoryById()",6,1,9,0,0
"me.umov.business.application.service.TaskTypeServiceTest.shouldReturnRepositoryById()",6,1,9,0,0
"me.umov.business.application.service.TaskTypeServiceTest.shouldReturnRepositoryList()",6,1,9,0,0
"me.umov.business.infrastructure.jpa.RecurrenceEndTypeConverterTest.shouldConvertFromDB()",6,1,9,0,0
"me.umov.business.infrastructure.jpa.RecurrenceEndTypeConverterTest.shouldConvertToDB()",6,1,9,0,0
"me.umov.business.infrastructure.serialization.RecurrenceRepeatModeSerializationAdapterTest.shouldDeserializeRecurrenceRepeatModeFromString()",6,1,9,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldNotProcessRuleWhenIsDateTaskBlockedAndNotExistAgent()",6,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.shouldNotProcessRuleWhenNotIsDateTaskBlockedAndNotExistAgent()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.AbsenceActionConverterTest.shouldConvertFromDB()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.AbsenceActionConverterTest.shouldConvertToDB()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.BooleanStatusConverterTest.shouldConvertFromDB()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.BooleanStatusConverterTest.shouldConvertToDB()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.FieldConfigOriginConverterTest.shouldConvertFromDB()",6,1,8,0,0
"me.umov.business.infrastructure.jpa.FrequencyControlTypeConverterTest.shouldConvertFromDB()",6,1,8,0,0
"me.umov.business.utils.specification.domain.SpecificationResultTest.shouldCreateUnsatisfiedResultWithMultipleMessages()",6,1,8,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleGeneralExceptionShouldHandleGeneralExceptions()",6,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleMethodArgumentTypeMismatchExceptionShouldReturnProperApiReturn()",6,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleMissingServletRequestParameterExceptionShouldReturnProperApiReturn()",6,1,7,0,0
"me.umov.business.application.service.AgentServiceTest.setup()",6,1,7,0,0
"me.umov.business.application.service.BaseServiceTest.shouldCallRepositorySaveAll()",6,1,7,0,0
"me.umov.business.application.service.CustomFieldValueServiceTest.setup()",6,1,7,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivitiesTest.shouldReturnSatisfiedWhenNotHaveActivitiesIds()",6,1,7,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotProcessWhenTaskAgentWithNoJourney()",6,1,7,0,0
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeValidValue()",6,1,7,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeValidValueWithSeconds()",6,1,7,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeValidValueWithoutSeconds()",6,1,7,0,0
"me.umov.business.application.exception.BaseApiExceptionTest.shouldBuildApiReturnCorrectly()",6,1,6,0,0
"me.umov.business.application.service.BaseServiceTest.shouldCallRepositorySave()",6,1,6,0,0
"me.umov.business.domain.rule.task.ShouldHaveScheduleInsideOfAgentJourneyTest.shouldNotProcessWhenTaskHasNoAgent()",6,1,6,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelectedTest.validationShouldBeOkWhenTeamExecutionFieldIsInformed()",6,1,6,0,0
"me.umov.business.utils.specification.domain.SpecificationResultTest.shouldCreateUnsatisfiedResultWithMessage()",6,1,6,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.shouldChangeMethodToCreateTypeWhenSaveResquest()",6,1,5,0,0
"me.umov.business.application.service.BaseServiceTest.shouldCallRepositoryFindByClientIdAndId()",6,1,5,0,0
"me.umov.business.application.service.BaseServiceTest.shouldCallRepositoryfindAllById()",6,1,5,0,0
"me.umov.business.domain.model.builder.TaskLoaderTest.shouldApplyDefaultTaskModelValues()",6,1,5,0,0
"me.umov.business.infrastructure.jpa.LocalTimeConverterTest.shouldConvertToDB()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldReturnActivityRelationshipConverterWhenTypeIsActivity()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldReturnAgentRelationshipConverterWhenTypeIsAgent()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldReturnServiceLocalRelationshipConverterWhenTypeIsServiceLocal()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldReturnTeamRelationshipConverterWhenTypeIsTeam()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactoryTest.shouldReturnTaskScheduleCreateConverterWhenIsCreate()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactoryTest.shouldReturnTaskSchedulePartialUpdateConverterWhenIsPartialUpdate()",6,1,5,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactoryTest.shouldReturnTaskScheduleUpdateConverterWhenIsUpdate()",6,1,5,0,0
"me.umov.business.utils.specification.rule.RuleMessageTest.shouldCreateErrorRuleMessage()",6,1,5,0,0
"me.umov.business.utils.specification.rule.RuleMessageTest.shouldCreateInfoRuleMessage()",6,1,5,0,0
"me.umov.business.utils.specification.rule.RuleMessageTest.shouldCreateWarningRuleMessage()",6,1,5,0,0
"me.umov.business.application.interceptor.InterceptorConfig.addResourceHandlers(ResourceHandlerRegistry registry)",6,1,4,0,1
"me.umov.business.configuration.SwaggerConfig.uiConfig()",6,1,4,0,0
"me.umov.business.domain.generic.specification.ShouldHaveValidIdTest.shouldReturnSatisfiedWhenCandidateNotHaveId()",6,1,4,0,0
"me.umov.business.domain.task.TaskDailyResumeTest.shouldConvertToNonconformityStringArrayWhenNonconformitiesHasValues()",6,1,4,0,0
"me.umov.business.domain.task.TaskDailyResumeTest.shouldReturnEmptyWhenNonconformitiesIsEmpty()",6,1,4,0,0
"me.umov.business.infrastructure.serialization.BooleanStatusSerializationAdapterTest.shouldDeserializeBooleanStatusFromString()",6,1,4,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldThorwBusinessValidationExceptionWhenTypeIsNull()",6,1,4,0,0
"me.umov.business.application.controller.activityhistory.ActivityHistoryController.markAsExported(@PathVariable Long historyId)",6,1,3,0,1
"me.umov.business.domain.task.TaskDailyResumeTest.shouldReturnEmpetyWhenNonconformitiesIsNull()",6,1,3,0,0
"me.umov.business.infrastructure.cron.RundeckSchedulerCronProviderTest.setup()",6,1,3,0,0
"me.umov.business.domain.task.TaskItemModel.TaskItemModel(Long clientId, Long id, TaskModel task, ItemModel item)",6,1,1,0,4
"me.umov.business.domain.servicelocal.ServiceLocal.ServiceLocal(Long id, Long clientId, Address address)",6,1,1,0,3
"me.umov.business.application.model.TeamAgentModel.TeamAgentModel(Long clientId, Long id, TeamModel team, AgentModel agent)",6,1,0,0,4
"me.umov.business.domain.task.TaskActivityModel.TaskActivityModel(Long clientId, Long id, TaskModel task, ActivityModel activity)",6,1,0,0,4
"me.umov.business.configuration.SwaggerConfig.contact()",6,1,0,0,0
"me.umov.business.infrastructure.serialization.JourneyHourTypeSerializationAdapterTest.shouldSerialize()",5,1,12,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFieldsTest.shouldProcessWhenThereAreFieldConfigurations()",5,1,10,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldBeOkWhenInitialDateIsBeforeEndDate()",5,1,10,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldBeOKWhenAgentIsConfiguredToNotValidatePortfolio()",5,1,10,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldBeOKWhenAgentIsConfiguredToValidateLocalResponsibleAndIsResponsibleForLocal()",5,1,10,0,0
"me.umov.business.utils.specification.rule.ValidationRules.processValidationRules()",5,1,10,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldBeOkWhenInitialDateIsEqualEndDate()",5,1,9,0,0
"me.umov.business.application.controller.AgentControllerTest.shouldReturnAgentById()",5,1,8,0,0
"me.umov.business.application.controller.TaskTypeControllerTest.shouldReturnTaskTypeById()",5,1,8,0,0
"me.umov.business.application.controller.TaskTypeControllerTest.shouldReturnTaskTypeList()",5,1,8,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTOTest.shouldReturnConventionedIdWithFields()",5,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldProcessRuleWhenTaskModelHasBothInitialAndFinalDates()",5,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskTypeTest.shouldValidateWhenTaskModelAndTaskTypeIdProvided()",5,1,8,0,0
"me.umov.business.infrastructure.cron.JobSchedule.JobSchedule(CrontabExpression cronExpression)",5,1,7,0,1
"me.umov.business.application.authorization.JWTServiceTest.shouldReturnAValidRequestUser()",5,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleBadRequestExceptionShouldReturnProperApiReturn()",5,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleGeneralExceptionShouldReturnProperApiReturn()",5,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleNotFoundExceptionShouldReturnProperApiReturn()",5,1,7,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleUnauthorizedRequestExceptionShouldReturnProperApiReturn()",5,1,7,0,0
"me.umov.business.application.repository.custom.ActivityRepositoryImplTest.shouldCreateNativeQueryOnFindDefaultActivitiesFor()",5,1,7,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateInvalidGeocoordinate3()",5,1,7,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateInvalidGeocoordinate4()",5,1,7,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateInvalidGeocoordinate5()",5,1,7,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.shouldValidateInvalidMultimidiaURL()",5,1,7,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase1()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase10()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase11()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase12()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase13()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase2()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase3()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase4()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase5()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase6()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase7()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase8()",5,1,6,0,0
"me.umov.business.application.model.WorkJourneyModelTest.shouldIdentifyIfDateIntervalIsInsideCase9()",5,1,6,0,0
"me.umov.business.application.model.type.JourneyHourTypeTest.shouldGetValuesByCode()",5,1,6,0,0
"me.umov.business.application.model.type.WorkdayTaskCreationValidationTest.shouldBeAbleToRetrieveEnumByCode()",5,1,6,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationEqualsFalse_UndependelyOfTeamExecution()",5,1,6,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationEqualsTrueANDTeamExecutionIsForOneMember()",5,1,6,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationEqualsTrueANDTeamExecutionIsForWholeTeam()",5,1,6,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationEqualsTrueANDTeamExecutionIsNull()",5,1,6,0,0
"me.umov.business.infrastructure.jpa.ScheduleTypeConverterTest.shouldConvertFromDB()",5,1,6,0,0
"me.umov.business.infrastructure.jpa.ScheduleTypeConverterTest.shouldConvertToDB()",5,1,6,0,0
"me.umov.business.application.service.idiom.IdiomEntryService.getIdiomEntry(Client client, String key)",5,1,5,0,2
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withServiceLocals(List<Long> serviceLocalsIds)",5,1,5,0,1
"me.umov.business.anticorruption.itinerary.WorkCycleScheduleConverterImplTest.setup()",5,1,5,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldDecodeAValidJWT()",5,1,5,0,0
"me.umov.business.application.exception.BaseApiExceptionTest.shouldHaveProperStatusCodeAndMessage()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleBadRequestExceptionShouldHandleResourceNotFoundException()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleBadRequestExceptionShouldRepondBADREQUEST()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleBusinessValidationExceptionShouldHandleUnauthorizedRequestException()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleGeneralExceptionShouldRepondINTERNALSERVERERROR()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleHttpMessageNotReadableExceptionShouldRespondBADREQUEST()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleMethodArgumentTypeMismatchExceptionShouldRepondBADREQUEST()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleMissingServletRequestParameterExceptionShouldRepondBADREQUEST()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleNotFoundExceptionShouldHandleResourceNotFoundException()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleNotFoundExceptionShouldRepondNOTFOUND()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleUnauthorizedRequestExceptionShouldHandleUnauthorizedRequestException()",5,1,5,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleUnauthorizedRequestExceptionShouldRepondUNAUTHORIZED()",5,1,5,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationEqualsFalse()",5,1,5,0,0
"me.umov.business.domain.task.TaskModelTest.shouldBeAbleToSendNotificationIfSendNotificationIsNull()",5,1,5,0,0
"me.umov.business.domain.task.TaskModelTest.shouldReturnFalseWhenTaskHasNoTeamExecution()",5,1,5,0,0
"me.umov.business.domain.task.TaskModelTest.shouldReturnTrueWhenTaskHasTeamExecution()",5,1,5,0,0
"me.umov.business.utils.specification.domain.SpecificationResultTest.shouldCreateSatisfiedResult()",5,1,5,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalController.updateAddress(@RequestBody ServiceLocalRequest request)",5,1,4,0,1
"me.umov.business.application.authorization.JWTServiceTest.setup()",5,1,4,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.handleHttpMessageNotReadableExceptionShouldReturnProperApiReturn()",5,1,4,0,0
"me.umov.business.application.service.BaseServiceTest.shouldCallRepositoryfindByClientId()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.hasActivities()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasAgents()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasServiceLocals()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldDisableCronWhenIsNotActiveAndHasCron()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldNotDisableCronWhenIsActiveAndHasCron()",5,1,4,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldNotDisableCronWhenIsNotActiveAndHasNoCron()",5,1,4,0,0
"me.umov.business.domain.recurrence.CrontabExpressionTest.shouldBuildMonthlyCrontabExpression()",5,1,4,0,0
"me.umov.business.domain.recurrence.CrontabExpressionTest.shouldBuildWeeklyCrontabExpression()",5,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.shouldValidateValidMultimidiaURL2()",5,1,4,0,0
"me.umov.business.infrastructure.serialization.RecurrenceEndTypeSerializationAdapterTest.shouldSerializeRecurrenceEndTypeToString()",5,1,4,0,0
"me.umov.business.infrastructure.serialization.RecurrenceTimeUnitSerializationAdapterTest.shouldSerializeRecurrenceTimeUnitToString()",5,1,4,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldThrowBusinessValidationExceptionWhenAddRelationship()",5,1,4,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.shouldThrowBusinessValidationExceptionWhenDeleteRelationship()",5,1,4,0,0
"me.umov.business.application.exception.DeleteException.DeleteException(RuleMessage validationMessages)",5,1,3,0,1
"me.umov.business.application.service.toggle.FeatureToggleService.isAbleToNotify(TaskModel task)",5,1,3,0,1
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.assertTaskHasNoErrorMessage(TaskModel task)",5,1,3,0,1
"me.umov.business.domain.recurrence.CrontabExpressionTest.shouldBuildDailyCrontabExpression()",5,1,3,0,0
"me.umov.business.domain.rule.builders.EmptyValidationBuilderTest.shouldReturnEmptyListForRules()",5,1,3,0,0
"me.umov.business.utils.specification.domain.BaseValidatorTest.shouldThrowBusinessValidationExceptionWhenNotSatisfied()",5,1,3,0,0
"me.umov.business.application.exception.BusinessValidationException.BusinessValidationException(RuleMessage validationMessages)",5,1,2,0,1
"me.umov.business.application.interceptor.InterceptorConfig.configureMessageConverters(List<HttpMessageConverter<?>> converters)",5,1,2,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.newEntityModelWithAlternativeIdentifier(RelationshipDTO dto)",5,1,2,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.newEntityModelWithAlternativeIdentifier(RelationshipDTO dto)",5,1,2,0,1
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.newEntityModelWithAlternativeIdentifier(RelationshipDTO dto)",5,1,2,0,1
"me.umov.business.application.exception.BadRequestExceptionTest.shouldSetExceptionMessage()",5,1,2,0,0
"me.umov.business.application.exception.ResourceNotFoundExceptionTest.shouldSetExceptionMessage()",5,1,2,0,0
"me.umov.business.application.exception.UnauthorizedRequestExceptionTest.shouldSetExceptionMessage()",5,1,2,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTOTest.shouldReturnEmptyWhenDescriptionAreNull()",5,1,2,0,0
"me.umov.business.application.api.ProcessApiReturn.ProcessApiReturn(String id, Boolean success, HttpStatus code, String... messages)",5,1,1,0,4
"me.umov.business.application.api.ApiReturn.ApiReturn(int code, String message, String id)",5,1,1,0,3
"me.umov.business.application.model.IntervalTest.shouldConsiderValidWhenIntervalIsFiftyFiveInAllFields()",5,1,1,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderValidWhenIntervalIsNull()",5,1,1,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderValidWhenIntervalIsZeroHour()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateCityBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateCountryBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateNeighborhoodBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateStateBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateStreetBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateStreetComplementBiggerThan100()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateStreetTypeBiggerThan50()",5,1,1,0,0
"me.umov.business.domain.servicelocal.AddressTest.shouldValidateZipCodeBiggerThan100()",5,1,1,0,0
"me.umov.business.application.repository.AgentRepository.computeJourneySchedules(@Param("clientId") Long clientId, @Param("agentId") Long agentId, @Param("date") LocalDate date, @Param("sequence") Long sequence, @Param("initialHour") String initialHour, @Param("finalHour") String finalHour, @Param("type") String type, @Param("description") String description, @Param("traveledDistance") Double traveledDistance, @Param("timeWithoutExecution") String timeWithoutExecution)",5,1,0,0,10
"me.umov.business.domain.servicelocal.ServiceLocal.ServiceLocal(Long id, Long clientId, String alternativeIdentifier, String description)",5,1,0,0,4
"me.umov.business.application.api.ApiReturn.ApiReturn(int code, List<String> message, List<ProcessApiReturn> processResult)",5,1,0,0,3
"me.umov.business.application.controller.agent.AgentRelationship.AgentRelationship(Long id, Long agentId, String alternativeIdentifier)",5,1,0,0,3
"me.umov.business.application.model.dto.AgentTaskDTO.AgentTaskDTO(@NotNull Long taskId, @NotNull Long agentId, Long priority)",5,1,0,0,3
"me.umov.business.application.model.dto.TaskItemDTO.TaskItemDTO(Long clientId, Long id, ItemModel item)",5,1,0,0,3
"me.umov.business.domain.itinerary.ItineraryServiceLocal.ItineraryServiceLocal(Long clientId, Itinerary itinerary, Long serviceLocalId)",5,1,0,0,3
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDate.ShouldHaveNoTaskInDate(SystemParameters systemParameters, TaskModel taskModel, TaskService taskService)",5,1,0,0,3
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeam.ShouldHaveOneAgentWhenOnlyOneAgentTeam(SystemParameters systemParameters, TeamModel team, TaskModel taskModel)",5,1,0,0,3
"me.umov.business.infrastructure.cron.Job.Job(String cronName, CrontabExpression cronExpression, String command)",5,1,0,0,3
"me.umov.business.taskschedule.application.dto.RelationshipDTO.RelationshipDTO(Long rootId, Long nodeId, RelationshipType type)",5,1,0,0,3
"me.umov.business.application.service.AgentService.computeJourneySchedules(AgentJourneyHoursDTO ajh)",4,1,12,0,1
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldBeOkWhenIsInsertAndDateIsAfterToday()",4,1,8,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldBeOkWhenIsInsertAndDateIsEqualToday()",4,1,7,0,0
"me.umov.business.domain.recurrence.DateIntervalTest.shouldCreateDateIntervalBasedOnInterval1()",4,1,6,0,0
"me.umov.business.domain.recurrence.DateIntervalTest.shouldCreateDateIntervalBasedOnInterval2()",4,1,6,0,0
"me.umov.business.domain.rule.task.ShouldHaveTaskModelTest.shouldAllwaysProcess()",4,1,6,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldNotProcessRuleWhenTaskModelHasNoFinalDate()",4,1,6,0,0
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withActivities(List<Long> activitiesIds)",4,1,5,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withAgents(List<Long> agentsIds)",4,1,5,0,1
"me.umov.business.application.controller.VersionControllerTest.shouldReturnApplicationAndVersionOnIndex()",4,1,5,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldReturnFalseWhenMethodIsOPTIONS()",4,1,5,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.shouldReturnTrueWhenMethodIsNotOPTIONS()",4,1,5,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveRequiredCustomFieldsTest.shouldNotProcessWhenFieldConfigurationsAreNullOrEmpty()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldProcessWhenTaskModelAndFieldConfigurationsAreInformed()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldProcessWhenTaskModelAndFieldConfigurationsAreInformed()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveTaskModelTest.shouldBeOkWhenModelIsProvided()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelectedTest.shouldNotProcessWhenTaskTeamIsNull()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelectedTest.shouldProcessWhenTaskAndTaskTeamAreInformed()",4,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldNotProcessWhenTaskModelIsInformedAndUpdate()",4,1,5,0,0
"me.umov.business.infrastructure.cron.RundeckRestService.post(RundeckEndpoints endPoint, TPayload payload, Class<TResponse> returnClass, Object... urlParameters)",4,1,4,0,4
"me.umov.business.infrastructure.cron.RundeckRestService.get(RundeckEndpoints endPoint, Class<TResponse> returnClass, Object... urlParameters)",4,1,4,0,3
"me.umov.business.application.observer.BeforeTaskSaveObserver.process(BeforeTaskSaveEvent event)",4,1,4,0,1
"me.umov.business.architecture.UtilsTest.commonPackagesAnd(String... packages)",4,1,4,0,1
"me.umov.business.domain.activityHistory.ActivityHistoryServiceImpl.markAsExported(ActivityHistory history)",4,1,4,0,1
"me.umov.business.application.exception.BadRequestExceptionTest.shouldHaveProperStatusCode()",4,1,4,0,0
"me.umov.business.application.exception.ResourceNotFoundExceptionTest.shouldHaveProperStatusCode()",4,1,4,0,0
"me.umov.business.application.exception.UnauthorizedRequestExceptionTest.shouldHaveProperStatusCode()",4,1,4,0,0
"me.umov.business.application.model.type.AbsenceActionTest.shouldBeAbleToRetrieveEnumByCode()",4,1,4,0,0
"me.umov.business.application.model.type.TaskSituationTest.shouldGetInPreparationById()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldNotValidateEmptyGeocoordinate()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateInvalidGeocoordinate1()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateInvalidGeocoordinate2()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate1()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate2()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate3()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate4()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate5()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate6()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidGeocoordinateCustomFieldsTest.shouldValidateValidGeocoordinate7()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.shouldNotValidateEmptyMultimidiaURL()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.shouldValidateValidMultimidiaURL1()",4,1,4,0,0
"me.umov.business.domain.rule.customfield.ShouldHaveValidMultimidiaURLCustomFieldsTest.shouldValidateValidMultimidiaURL3()",4,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalDateTest.shouldNotProcessRuleWhenTaskModelHasNoInitialDate()",4,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldValidateWhenTaskModelIsPresent()",4,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotHaveMessageWhenIsNewTaskModelAndSituationIsInPreparation()",4,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotHaveMessageWhenIsNewTaskModelAndSituationIsPending()",4,1,4,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeTest.shouldConstructObjectWithSQLAndJavaTypeDescriptors()",4,1,4,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldSerializeValidValue()",4,1,4,0,0
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityDAOImpl.existsWithItinerarySchedule(Long itineraryScheduleId)",4,1,3,0,1
"me.umov.business.application.model.dto.AgentJourneyHoursDTOTest.shouldReturnZeroWhenTravaledDistanceAreNull()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.hasTaskType()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.isNew()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasNoTaskType()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasNotActivities()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasNotAgents()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlHasNotServiceLocals()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shoudlNotBeNew()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldHasCronWhenCronIdIsNotNull()",4,1,3,0,0
"me.umov.business.domain.itinerary.ItineraryTest.shouldNotHaveCronWhenCronIdIsNull()",4,1,3,0,0
"me.umov.business.infrastructure.serialization.RecurrenceEndTypeSerializationAdapterTest.shouldDeserializeRecurrenceEndTypeFromString()",4,1,3,0,0
"me.umov.business.infrastructure.serialization.RecurrenceTimeUnitSerializationAdapterTest.shouldDeserializeRecurrenceTimeUnitFromString()",4,1,3,0,0
"me.umov.business.infrastructure.serialization.SpringfoxJsonToGsonAdapter.serialize(Json src, Type typeOfSrc, JsonSerializationContext context)",4,1,2,0,3
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.withFirstInterval(LocalTime initialTime, LocalTime finalTime)",4,1,2,0,2
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.withSecondInterval(LocalTime initialTime, LocalTime finalTime)",4,1,2,0,2
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.withThirdInterval(LocalTime initialTime, LocalTime finalTime)",4,1,2,0,2
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.addNewRelationship(Itinerary itinerary, Long agentId)",4,1,2,0,2
"me.umov.business.application.interceptor.InterceptorConfig.addInterceptors(InterceptorRegistry registry)",4,1,2,0,1
"me.umov.business.domain.itinerary.specification.WorkCycleScheduleValidator.validateCreation(ItinerarySchedule workCycleSchedule)",4,1,2,0,1
"me.umov.business.application.authorization.JWTServiceTest.shouldExtractJWTFromRequest()",4,1,2,0,0
"me.umov.business.application.controller.BaseControllerTest.shouldRetriveResourceNameFromControllerClassName()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_AGENT_ACTIVITIES_codeMustBe1()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_ALL_ACTIVITIES_codeMustBe5()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_ITINERARY_ACTIVITIES_codeMustBe0()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_SCHEDULE_TYPE_ACTIVITIES_codeMustBe7()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_SERVICELOCAL_ACTIVITIES_codeMustBe2()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryActivityOriginTest.should_SYSTEMPARAMETERS_ACTIVITIES_codeMustBe3()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryAgentRelationTest.should_ALL_AGENTS_codeMustBe1()",4,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryAgentRelationTest.should_SOME_AGENTS_codeMustBe0()",4,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidFinalHourTest.shouldNotValidateWhenTaskModelIsNull()",4,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidInitialDateTest.shouldNotValidateWhenTaskModelIsNull()",4,1,2,0,0
"me.umov.business.infrastructure.serialization.WorkdayTaskCreationValidationSerializationAdapterTest.shouldReturnNullWhenDeserializeWorkdayTaskCreationValidationFromNonExistsNumber()",4,1,2,0,0
"me.umov.business.application.api.ApiReturn.ApiReturn(int code, List<String> message)",4,1,1,0,2
"me.umov.business.application.api.ApiReturn.ApiReturn(int code, String message)",4,1,1,0,2
"me.umov.business.anticorruption.activityHistory.ActivityHistoryConverterImpl.convertFrom(Long activityHistoryId)",4,1,1,0,1
"me.umov.business.infrastructure.queue.MessageDTO.MessageDTO(Long id)",4,1,1,0,1
"me.umov.business.application.exception.BadRequestExceptionTest.shouldBeBaseApiException()",4,1,1,0,0
"me.umov.business.application.exception.BaseApiExceptionTest.shouldBeBaseRuntimeException()",4,1,1,0,0
"me.umov.business.application.exception.ResourceNotFoundExceptionTest.shouldBeBaseApiException()",4,1,1,0,0
"me.umov.business.application.exception.UnauthorizedRequestExceptionTest.shouldBeBaseApiException()",4,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryActivityRelationsTest.shouldTypeACTIVITY_RELATION_SOME_mustBe0()",4,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryActivityRelationsTest.shouldType_ACTIVITY_RELATION_ALL_mustBe0()",4,1,1,0,0
"me.umov.business.domain.task.TaskConfigModel.taskField()",4,1,1,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.shouldThorwBusinessValidationExceptionWhenDtoIsNull()",4,1,1,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactoryTest.shouldThrowBusinessValidationExceptionWhenThereIsNotMethodType()",4,1,1,0,0
"me.umov.business.domain.workcycle.WorkCycleJpaRepository.findByClientIdAndServiceLocalIdAndActivityIdAndInitialDateIsLessThanEqualAndFinalDateIsGreaterThanEqual(Long clientId, Long serviceLocalId, Long activityId, LocalDate initialDate, LocalDate finalDate)",4,1,0,0,5
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.ItineraryServiceLocalRelationship(Long id, Long serviceLocalId, LocalTime initialHour, LocalTime finalHour)",4,1,0,0,4
"me.umov.business.application.controller.workcycle.CreatedWorkCycle.CreatedWorkCycle(Long serviceLocalId, Long activityId, Long workCycleId)",4,1,0,0,3
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.ReplaceWorkCycleServiceLocalRequest(Long previousWorkcycleId, Long newWorkcycleId, Long serviceLocalId)",4,1,0,0,3
"me.umov.business.domain.client.UserData.setRequestData(Long clientId, Long agentId, String accessToken)",4,1,0,0,3
"me.umov.business.domain.itinerary.ItineraryActivity.ItineraryActivity(Long clientId, Itinerary itinerary, Long activityId)",4,1,0,0,3
"me.umov.business.domain.itinerary.ItineraryAgent.ItineraryAgent(Long clientId, Itinerary itinerary, Long agentId)",4,1,0,0,3
"me.umov.business.infrastructure.cron.JobScheduleTime.JobScheduleTime(String seconds, String minute, String hour)",4,1,0,0,3
"me.umov.business.taskschedule.application.dto.RelationshipDTO.RelationshipDTO(String alternativeIdentifier, String nodeAlternativeId, RelationshipType type)",4,1,0,0,3
"me.umov.business.application.controller.workcycle.WorkCycleRelationRequest.WorkCycleRelationRequest(Long workcycleId, Long entityId)",4,1,0,0,2
"me.umov.business.application.model.dto.TaskItemDTO.TaskItemDTO(Long id, ItemModel item)",4,1,0,0,2
"me.umov.business.application.model.dto.TaskSituationDTO.TaskSituationDTO(Long id, String description)",4,1,0,0,2
"me.umov.business.utils.specification.rule.RuleMessage.RuleMessage(String message, RuleMessageSeverity severity)",4,1,0,0,2
"me.umov.business.domain.task.TaskConfigModel.setId(Long id)",3,1,19,0,1
"me.umov.business.application.exception.BusinessValidationException.BusinessValidationException(SpecificationResult result)",3,1,7,0,1
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldValidateWhenLoadedEntitiesAreProvided()",3,1,6,0,0
"me.umov.business.utils.specification.domain.SpecificationResult.notSatisfied(String message)",3,1,5,0,1
"me.umov.business.application.service.RecurrenceServiceTest.shouldReturnEmptyRecurrenceDatesWhenNoConfigurationIsProvided()",3,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotProcessWhenTeamExecutionIsOnlyAllCanExecute()",3,1,5,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotProcessWhenTeamExecutionIsOnlyOneCanExecute()",3,1,5,0,0
"me.umov.business.application.model.dto.CancelTaskDTOTest.shouldHaveOperationCANCEL()",3,1,4,0,0
"me.umov.business.domain.client.ClientConfigurations.useFrequencyControl()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotProcessWhenFieldConfigurationsAreNull()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotProcessWhenFieldConfigurationsAreNull()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocalTest.shouldValidateWhenTaskModelProvided()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldProcessWhenTaskModelIsInformedAndIsNew()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidAgentTest.shouldValidateWhenTaskModelProvided()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldProcessWhenRecurrenceConfigurationIsPresent()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskTypeTest.shouldNotValidateWhenTaskModelProvidedWithoutTaskType()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTeamTest.shouldValidateWhenTaskModelProvided()",3,1,4,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldNotValidateWhenLoadedServiceLocalIsNull()",3,1,4,0,0
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldSerializeValidValue()",3,1,4,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldSerializeValidValue()",3,1,4,0,0
"me.umov.business.infrastructure.cron.RundeckRestService.delete(RundeckEndpoints endPoint, Object... urlParameters)",3,1,3,0,2
"me.umov.business.domain.recurrence.CrontabExpression.weeklyCronTab(LocalDate date)",3,1,3,0,1
"me.umov.business.application.model.type.TaskSituationTest.shouldCanceledIdMustBe70()",3,1,3,0,0
"me.umov.business.application.model.type.TaskSituationTest.shouldInFieldIdMustBe40()",3,1,3,0,0
"me.umov.business.application.model.type.TaskSituationTest.shouldPedingIdMustBe30()",3,1,3,0,0
"me.umov.business.application.model.type.TaskSituationTest.shouldPreparationIdMustBe20()",3,1,3,0,0
"me.umov.business.application.model.type.TaskSituationTest.shouldReturnedIdMustBe50()",3,1,3,0,0
"me.umov.business.application.service.BaseServiceTest.shouldReturnUserDataAgentId()",3,1,3,0,0
"me.umov.business.application.service.BaseServiceTest.shouldReturnUserDataClientId()",3,1,3,0,0
"me.umov.business.infrastructure.serialization.ActivityOriginSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.AgentPortfolioValidationSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.BooleanStatusSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.ItineraryAgentRelationSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.JourneyHourTypeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.RecurrenceEndTypeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.RecurrenceRepeatModeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.RecurrenceRepeatTypeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.RecurrenceTimeUnitSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.TaskScheduleActivityOriginSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.TaskSituationSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.TeamExecutionSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.infrastructure.serialization.WorkdayTaskCreationValidationSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.addNewRelationship(Itinerary itinerary, Long agentId)",3,1,2,0,2
"me.umov.business.application.exception.DeleteException.DeleteException(List<RuleMessage> validationMessages)",3,1,2,0,1
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.withWeekdays(Integer... weekdays)",3,1,2,0,1
"me.umov.business.application.service.BaseService.byIdDetached(Long id)",3,1,2,0,1
"me.umov.business.application.service.ServiceLocalApplicationService.searchByDescription(String description)",3,1,2,0,1
"me.umov.business.domain.recurrence.CrontabExpression.monthlyCronTab(LocalDate date)",3,1,2,0,1
"me.umov.business.domain.servicelocal.ServiceLocalService.updateAddress(ServiceLocal serviceLocal)",3,1,2,0,1
"me.umov.business.infrastructure.jpa.LongArrayType.setParameterValues(Properties parameters)",3,1,2,0,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleUpdateConverter.buildTaskSchedule(SaveTaskScheduleGroupRequest request)",3,1,2,0,1
"me.umov.business.taskschedule.domain.TaskScheduleDomainService.saveTaskSchedule(ItinerarySchedule itinerarySchedule)",3,1,2,0,1
"me.umov.business.application.exception.BusinessValidationException.getMessage()",3,1,2,0,0
"me.umov.business.application.exception.DeleteException.getMessage()",3,1,2,0,0
"me.umov.business.application.interceptor.JWTAuthorizationInterceptorTest.shouldReturnFalseWhenHandlerIsNotHandlerMethod()",3,1,2,0,0
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.withAllWeekdays()",3,1,2,0,0
"me.umov.business.application.model.fixture.SystemParametersFixture.withTeamOnlyOneAgent()",3,1,2,0,0
"me.umov.business.application.model.type.JourneyHourTypeTest.shouldGetNullWhenCodeIsInvalid()",3,1,2,0,0
"me.umov.business.application.model.type.RecurrenceEndTypeTest.shouldDATEValueBeLiteralDate()",3,1,2,0,0
"me.umov.business.application.model.type.RecurrenceEndTypeTest.shouldOCURRENCESValueBeLiteralOcurrences()",3,1,2,0,0
"me.umov.business.application.model.type.RecurrenceEndTypeTest.shouldRetriveByCode()",3,1,2,0,0
"me.umov.business.application.model.type.RecurrenceTimeUnitTest.shouldRetriveByCode()",3,1,2,0,0
"me.umov.business.application.model.type.RecurrenceTimeUnitTest.shouldWeekValueBeLiteralWeek()",3,1,2,0,0
"me.umov.business.application.service.BaseServiceTest.shouldThrowBusinessValidationExceptionWhenRuleFails()",3,1,2,0,0
"me.umov.business.application.service.FactoryDistributionTaskTest.shouldGetDistributionIdleAgentWhenActionTypeIdleAgentes()",3,1,2,0,0
"me.umov.business.application.service.RecurrenceServiceTest.shouldReturnNullWhenJSONIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveAgentByRequiredTaskConfigTest.shouldNotProcessWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDate.shouldProcessRule()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveOneAgentWhenOnlyOneAgentTeam.shouldProcessRule()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveRequiredTaskConfigFieldsTest.shouldNotProcessWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveServiceLocalTest.shouldNotValidateWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeamExecutionWhenTeamIsSelectedTest.shouldNotProcessWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidActivitiesAssociatedTest.shouldNotProcessWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidAgentTest.shouldNotValidateWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.shouldNotProcessWhenRecurrenceConfigurationIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotValidateWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldNotValidateWhenTaskServiceIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.shouldValidateWhenHasTaskModelAndTaskService()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTaskTypeTest.shouldNotValidateWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidTeamTest.shouldNotValidateWhenTaskModelIsNull()",3,1,2,0,0
"me.umov.business.domain.rule.task.ShouldValidateAgentPortfolioTest.shouldNotValidateWhenLoadedAgentIsNull()",3,1,2,0,0
"me.umov.business.infrastructure.cron.RundeckEndpointsTest.shouldFormatCreateJobUrlWithParameters()",3,1,2,0,0
"me.umov.business.infrastructure.cron.RundeckEndpointsTest.shouldFormatDeleteJobUrlWithParameters()",3,1,2,0,0
"me.umov.business.infrastructure.cron.RundeckEndpointsTest.shouldFormatGetProjectUrlWithParameters()",3,1,2,0,0
"me.umov.business.infrastructure.cron.RundeckEndpointsTest.shouldNotChangeCreateProjectUrlWithParameters()",3,1,2,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeDescriptorTest.should()",3,1,2,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeDescriptorTest.shouldReturnBigIntOnGetSqlArrayType()",3,1,2,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeTest.shouldRegisterUnderJavaType()",3,1,2,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeTest.shouldReturnLongArrayOnGetName()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeEmptyValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeNullValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldSerializeNullValue()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldDeserializeEmptyValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldDeserializeNullValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalDateTimeSerializationAdapterTest.shouldSerializeNullValue()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeEmptyValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeNullValueAsNull()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldSerializeNullValue()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.TaskSituationSerializationAdapterTest.shouldReturnNullWhenDeserializeTaskSituationFromNonExistsNumber()",3,1,2,0,0
"me.umov.business.utils.specification.domain.BaseValidatorTest.shouldConsiderValidWhenSatisfied()",3,1,2,0,0
"me.umov.business.utils.specification.domain.CompositeSpecificationTest.shouldReturnAndSpecificationInstance()",3,1,2,0,0
"me.umov.business.utils.specification.domain.CompositeSpecificationTest.shouldReturnOrSpecificationInstance()",3,1,2,0,0
"me.umov.business.infrastructure.serialization.ActivityOriginSerializationAdapter.serialize(ActivityOrigin src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.AgentPortfolioValidationSerializationAdapter.serialize(AgentPortfolioValidation src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.BooleanStatusSerializationAdapter.serialize(BooleanStatus src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.JourneyHourTypeSerializationAdapter.serialize(JourneyHourType src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.RecurrenceEndTypeSerializationAdapter.serialize(RecurrenceEndType src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.RecurrenceRepeatModeSerializationAdapter.serialize(RecurrenceRepeatMode src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.RecurrenceRepeatTypeSerializationAdapter.serialize(RecurrenceRepeatType src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.RecurrenceTimeUnitSerializationAdapter.serialize(RecurrenceTimeUnit src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.TaskScheduleActivityOriginSerializationAdapter.serialize(ItineraryActivityOrigin src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.infrastructure.serialization.WorkdayTaskCreationValidationSerializationAdapter.serialize(WorkdayTaskCreationValidation src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.business.application.service.TaskConfigService.findByClientIdAndFieldConfigOrigin(Long clientId, FieldConfigOrigin fieldConfigOrigin)",3,1,1,0,2
"me.umov.business.application.exception.BusinessValidationException.BusinessValidationException(List<RuleMessage> validationMessages)",3,1,1,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.fromCustomFieldConfiguration(BaseModel<Long> configModel)",3,1,1,0,1
"me.umov.business.application.model.fixture.ActivityModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.AddressFixture.withCity(String city)",3,1,1,0,1
"me.umov.business.application.model.fixture.AddressFixture.withState(String state)",3,1,1,0,1
"me.umov.business.application.model.fixture.AddressFixture.withStreet(String street)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentJourneyHoursDTOFixture.withAgentId(Long agentId)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentJourneyHoursDTOFixture.withDate(LocalDate date)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentJourneyHoursDTOFixture.withSequence(Long sequence)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentJourneyHoursDTOFixture.withType(JourneyHourType type)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentModelFixture.withAgentPortfolioValidation(AgentPortfolioValidation agentPortfolioValidation)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentModelFixture.withAlternativeId(String alternativeIdentifier)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentModelFixture.withName(String name)",3,1,1,0,1
"me.umov.business.application.model.fixture.AgentModelFixture.withWorkJourney(WorkJourneyModel workJourney)",3,1,1,0,1
"me.umov.business.application.model.fixture.CancelTaskDTOFixture.withId(long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.ClientFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.ClientFixture.withSystemParameters(SystemParameters systemParameters)",3,1,1,0,1
"me.umov.business.application.model.fixture.CommonCustomFieldConfigFixture.withCustomField(CustomFieldModel customField)",3,1,1,0,1
"me.umov.business.application.model.fixture.CommonCustomFieldConfigFixture.withCustomFieldName(String customFieldName)",3,1,1,0,1
"me.umov.business.application.model.fixture.CommonCustomFieldConfigFixture.withRequired(BooleanStatus required)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.withCustomFieldId(Long customFieldId)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.withCustomFieldValueId(Long customFieldValueId)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.withExternalValue(String externalValue)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.withInternalValue(String internalValue)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldModelFixture.withDescription(String description)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldModelFixture.withId(Long customFieldId)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldModelFixture.withSubType(CustomFieldSubType fieldSubType)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldModelFixture.withType(CustomFieldType fieldType)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.withCustomFieldId(Long customFieldId)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.withEntityId(Long entityId)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.withExternalValue(String externalValue)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.withInternalValue(String internalValue)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withActive(BooleanStatus active)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withClientId(Long clientId)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withCronId(String cronId)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withDescription(String description)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withFinalDate(LocalDate finalDate)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withInitialDate(LocalDate initialDate)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withItineraries(List<Itinerary> itineraries)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withRecurrenceEndType(RecurrenceEndType recurrenceEndType)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withRepeatMode(RecurrenceRepeatMode repeatMode)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.withWeeklyRepetition(Long weeklyRepetition)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryServiceLocalFixture.withFinalHour(LocalTime finalHour)",3,1,1,0,1
"me.umov.business.application.model.fixture.ItineraryServiceLocalFixture.withInitialHour(LocalTime initialHour)",3,1,1,0,1
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.withEnds(RecurrenceEndsConfiguration ends)",3,1,1,0,1
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.withRepeatEvery(RecurrenceRepeatConfiguration repeatEvery)",3,1,1,0,1
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.withRepeatMode(RecurrenceRepeatMode repeatMode)",3,1,1,0,1
"me.umov.business.application.model.fixture.ResultProcessRuleFixture.withMessage(String message)",3,1,1,0,1
"me.umov.business.application.model.fixture.ResultProcessRuleFixture.withState(RuleState state)",3,1,1,0,1
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.withActionType(ActionType actionType)",3,1,1,0,1
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.withClientId(long clientId)",3,1,1,0,1
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.withIgnoreTaskType(List<String> ignoreTaskType)",3,1,1,0,1
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.withScheduleId(Long scheduleId)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withActivityOrigin(ActivityOrigin activityOrigin)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withCustomFields(List<CustomFieldValueDTO> customFields)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withFinalDate(LocalDate finalDate)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withFinalHour(LocalTime finalHour)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withInitialDate(LocalDate initialDate)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withInitialHour(LocalTime initialHour)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withObservation(String observation)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withSituationId(Long situationId)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withTaskItems(List<TaskItemDTO> taskItems)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.withTeamId(long teamId)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withActivityOriginList(List<ItineraryActivityOrigin> activityOriginList)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withAlternativeIdentifier(String alternativeIdentifier)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withClientId(Long clientId)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withDescription(String description)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withInitialDate(LocalDate initialDate)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withRecurrenceConfig(RecurrenceConfiguration recurrenceConfig)",3,1,1,0,1
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.withTaskTypeId(Long taskTypeId)",3,1,1,0,1
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.withAgentResponsible(Long agentId)",3,1,1,0,1
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.withAlternativeIdentifier(String alternativeIdentifier)",3,1,1,0,1
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.withClientId(Long clientId)",3,1,1,0,1
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.withDescription(final String description)",3,1,1,0,1
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.SystemParametersFixture.withFrequencyControl(BooleanStatus useFrequencyControl)",3,1,1,0,1
"me.umov.business.application.model.fixture.SystemParametersFixture.withFrequencyControlType(FrequencyControlType frequencyControlType)",3,1,1,0,1
"me.umov.business.application.model.fixture.SystemParametersFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.SystemParametersFixture.withUseScheduleLock(BooleanStatus useScheduleLock)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskActivityModelFixture.withActivity(ActivityModel activity)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskActivityModelFixture.withActivityId(Long activityId)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskActivityModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskActivityModelFixture.withWorkCycle(WorkCycle workCycle)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskConfigModelFixture.withActiveOnCenter(BooleanStatus activeOnCenter)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskConfigModelFixture.withFieldName(String fieldName)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskConfigModelFixture.withRequired(BooleanStatus required)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskDailyResumeFixture.withActivitiesIds(List<Long> activitiesIds)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskDailyResumeFixture.withClientId(Long clientId)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskDailyResumeFixture.withTaskId(Long taskId)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskDailyResumeFixture.withTotalTaskTime(String totalTaskTime)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.withEnds(RecurrenceEndsConfiguration ends)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.withRepeatEvery(RecurrenceRepeatConfiguration repeat)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.withRepeatMode(RecurrenceRepeatMode recurrenceRepeatMode)",3,1,1,0,1
"me.umov.business.application.model.fixture.TaskTypeModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.TeamModelFixture.withDescription(String description)",3,1,1,0,1
"me.umov.business.application.model.fixture.TeamModelFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withActivity(ActivityModel activity)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withCreatedTotal(Long createdTotal)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withExecutedTotal(Long executedTotal)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withId(Long id)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withPendingTotal(Long pendingTotal)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkCycleFixture.withServiceLocal(ServiceLocalModel serviceLocal)",3,1,1,0,1
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.withWeekDay(DayOfWeek weekDay)",3,1,1,0,1
"me.umov.business.application.service.BaseService.findAllById(Iterable id)",3,1,1,0,1
"me.umov.business.architecture.IgnoreTests.includes(Location location)",3,1,1,0,1
"me.umov.business.domain.rule.builders.EmptyValidationBuilder.getRules(BaseModel<?> entity)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.AbsenceActionConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ActivityCycleConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ActivityExecutionModeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ActivityOriginConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.AgentPorfolioValidationConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.BooleanStatusConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.CustomFieldSubTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.CustomFieldTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ExportSituationConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.FieldConfigOriginConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.FrequencyControlTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ItineraryAgentRelationConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.RecurrenceEndTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.RecurrenceRepeatModeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.ScheduleTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.TaskScheduleActivityOriginConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.TeamExecutionConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.jpa.WorkdayTaskCreationValidationConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.business.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipField(FieldAttributes field)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.getEntityModel(ItineraryActivity entityRelationship)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.getEntityRelationship(Itinerary itinerary)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.getEntityModel(ItineraryAgent entityRelationship)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.getEntityRelationship(Itinerary itinerary)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.newEntityModelWithAlternativeIdentifier(RelationshipDTO dto)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.getEntityModel(ItineraryServiceLocal entityRelationship)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.getEntityRelationship(Itinerary itinerary)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.getEntityModel(ItineraryTeam entityRelationship)",3,1,1,0,1
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.getEntityRelationship(Itinerary itinerary)",3,1,1,0,1
"me.umov.business.api.TaskScheduleApiTest.setUp()",3,1,1,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldThrowUnauthorizedExceptionWhenCannotExtractJWTFromRequestHeaderIsInvalid()",3,1,1,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldThrowUnauthorizedExceptionWhenCannotExtractJWTFromRequestHeaderNull()",3,1,1,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldThrowUnauthorizedRequestExceptionWhenAuthorizationIsNull()",3,1,1,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldThrowUnauthorizedRequestExceptionWhenInvalidToken()",3,1,1,0,0
"me.umov.business.application.authorization.JWTServiceTest.shouldThrowUnauthorizedRequestExceptionWhenInvalidTokenFormat()",3,1,1,0,0
"me.umov.business.application.authorization.UMovMeJWTClaimsTest.shouldHaveAgentIdClaim()",3,1,1,0,0
"me.umov.business.application.authorization.UMovMeJWTClaimsTest.shouldHaveClientIdClaim()",3,1,1,0,0
"me.umov.business.application.controller.AgentControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.BaseControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.ServiceLocalControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.TaskControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.TaskScheduleGroupControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.TaskTypeController.list()",3,1,1,0,0
"me.umov.business.application.controller.TaskTypeControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.VersionController.index()",3,1,1,0,0
"me.umov.business.application.controller.VersionControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.controller.activityhistory.ActivityHistoryControllerTest.setUp()",3,1,1,0,0
"me.umov.business.application.controller.workcycle.WorkCycleControllerTest.setup()",3,1,1,0,0
"me.umov.business.application.exception.BusinessValidationException.getErrorReturn()",3,1,1,0,0
"me.umov.business.application.handler.GeneralRestExceptionHandlerTest.setup()",3,1,1,0,0
"me.umov.business.application.interceptor.CORSInterceptorTest.setup()",3,1,1,0,0
"me.umov.business.application.interceptor.InterceptorConfigTest.setup()",3,1,1,0,0
"me.umov.business.application.interceptor.JWTAuthorizationInterceptorTest.setup()",3,1,1,0,0
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.isActive()",3,1,1,0,0
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.isNotActive()",3,1,1,0,0
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.isActive()",3,1,1,0,0
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.isNotActive()",3,1,1,0,0
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.isActive()",3,1,1,0,0
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.isNotActive()",3,1,1,0,0
"me.umov.business.application.observer.BeforeTaskSaveObserverTest.setup()",3,1,1,0,0
"me.umov.business.application.observer.ItineraryCronSchedulerObserverTest.setUp()",3,1,1,0,0
"me.umov.business.application.observer.ItineraryScheduleCronSchedulerObserverTest.setUp()",3,1,1,0,0
"me.umov.business.application.observer.NotificationAfterSaveTaskTest.setUp()",3,1,1,0,0
"me.umov.business.application.observer.TaskSavedObserverTest.setup()",3,1,1,0,0
"me.umov.business.application.service.ActivityServiceTest.setup()",3,1,1,0,0
"me.umov.business.application.service.CustomFieldServiceTest.setup()",3,1,1,0,0
"me.umov.business.application.service.DistributionIdleAgentTest.setUp()",3,1,1,0,0
"me.umov.business.application.service.FactoryDistributionTaskTest.setUp()",3,1,1,0,0
"me.umov.business.application.service.FactoryDistributionTaskTest.shouldThrowBusinessValidationExceptionWhenActionTypeInvalid()",3,1,1,0,0
"me.umov.business.application.service.ServiceLocalServiceTest.setup()",3,1,1,0,0
"me.umov.business.application.service.TaskTypeServiceTest.setup()",3,1,1,0,0
"me.umov.business.application.service.notification.TaskNotificationServiceTest.setup()",3,1,1,0,0
"me.umov.business.application.service.toggle.FeatureToggleServiceTest.setUp()",3,1,1,0,0
"me.umov.business.domain.activityHistory.ActivityHistoryServiceImplTest.setUp()",3,1,1,0,0
"me.umov.business.domain.client.ClientConfigurationsTest.setup()",3,1,1,0,0
"me.umov.business.domain.client.ClientServiceTest.setup()",3,1,1,0,0
"me.umov.business.domain.event.DomainEventRegistryTest.setUp()",3,1,1,0,0
"me.umov.business.domain.generic.specification.ShouldHaveValidIdTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryCronServiceTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleCronServiceTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryServiceTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryInitialDateGreaterThanTodayTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveStartDateLessThanEndDateTest.setUp()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllActivitiesTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllAgentsTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllServiceLocalsTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.ShouldLoadAllTeamsTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.TaskScheduleGroupValidatorTest.setup()",3,1,1,0,0
"me.umov.business.domain.itinerary.specification.WorkCycleScheduleValidatorTest.setup()",3,1,1,0,0
"me.umov.business.domain.model.builder.TaskLoaderTest.setUp()",3,1,1,0,0
"me.umov.business.domain.rule.task.ShouldHaveNoTaskInDateTest.setup()",3,1,1,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidRecurrenceConfigurationTest.setup()",3,1,1,0,0
"me.umov.business.domain.rule.task.ShouldHaveValidSituationLifeCicleTest.setup()",3,1,1,0,0
"me.umov.business.domain.servicelocal.ServiceLocalRepositoryImplTest.setUp()",3,1,1,0,0
"me.umov.business.domain.workcycle.WorkCycleServiceTest.setUp()",3,1,1,0,0
"me.umov.business.infrastructure.activity.ActivityDAOImplTest.setup()",3,1,1,0,0
"me.umov.business.infrastructure.agent.AgentDAOImplTest.setup()",3,1,1,0,0
"me.umov.business.infrastructure.jpa.workcycle.WorkCycleGeneratorImplTest.setUp()",3,1,1,0,0
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.createSQSConnectionFactory()",3,1,1,0,0
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.init()",3,1,1,0,0
"me.umov.business.infrastructure.servicelocal.ServiceLocalDAOImplTest.setup()",3,1,1,0,0
"me.umov.business.infrastructure.team.TeamDAOImplTest.setup()",3,1,1,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverterTest.setUp()",3,1,1,0,0
"me.umov.business.taskschedule.anticorruption.relationship.RelationshipFactoryTest.setUp()",3,1,1,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleConverterFactoryTest.setUp()",3,1,1,0,0
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskSchedulePartialUpdateConverterTest.setUp()",3,1,1,0,0
"me.umov.business.taskschedule.application.controller.CronControllerTest.setup()",3,1,1,0,0
"me.umov.business.taskschedule.application.service.TaskScheduleApplicationServiceTest.setUp()",3,1,1,0,0
"me.umov.business.application.controller.activity.ActivityRelationship.ActivityRelationship(Long id, Long activityId)",3,1,0,0,2
"me.umov.business.application.controller.agent.AgentRelationship.AgentRelationship(Long id, Long agentId)",3,1,0,0,2
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.ServiceLocalRelationship(Long id, Long serviceLocalId)",3,1,0,0,2
"me.umov.business.application.controller.team.TeamRelationship.TeamRelationship(Long id, Long teamId)",3,1,0,0,2
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.WorkCycleServiceLocalRequest(Long workcycleId, Long serviceLocalId)",3,1,0,0,2
"me.umov.business.application.exception.BaseApiException.BaseApiException(int statusCode, String message)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryActivity.ItineraryActivity(Long id, Long activityId)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryAgent.ItineraryAgent(Long id, Long agentId)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItinerarySaved.ItinerarySaved(Itinerary itinerary, Boolean newEntity)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryScheduleSaved.ItineraryScheduleSaved(ItinerarySchedule itinerarySchedule, Boolean newEntity)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryServiceLocal.ItineraryServiceLocal(Long id, Long serviceLocalId)",3,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryTeam.ItineraryTeam(Long id, Long teamId)",3,1,0,0,2
"me.umov.business.domain.itinerary.ScheduleQueuePayload.ScheduleQueuePayload(Long id, String type)",3,1,0,0,2
"me.umov.business.domain.recurrence.DateInterval.DateInterval(LocalDateTime initialDatetime, LocalDateTime finalDatetime)",3,1,0,0,2
"me.umov.business.domain.task.TaskSavedEvent.TaskSavedEvent(TaskModel task, Boolean isInsert)",3,1,0,0,2
"me.umov.business.infrastructure.cron.JobScheduleMonth.JobScheduleMonth(String month, String day)",3,1,0,0,2
"me.umov.business.infrastructure.cron.RundeckProjectResponse.RundeckProjectResponse(String name, String description)",3,1,0,0,2
"me.umov.business.utils.specification.domain.SpecificationResult.SpecificationResult(Boolean satisfied, List<String> messages)",3,1,0,0,2
"me.umov.business.application.controller.activity.ActivityRelationship.ActivityRelationship(Long activityId)",3,1,0,0,1
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.ServiceLocalRelationship(Long serviceLocalId)",3,1,0,0,1
"me.umov.business.application.controller.team.TeamRelationship.TeamRelationship(Long teamId)",3,1,0,0,1
"me.umov.business.application.model.ActivityModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.AgentModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.CustomFieldModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.ItemModel.ItemModel(Long id)",3,1,0,0,1
"me.umov.business.application.model.TeamAgentModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.TeamModel.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.dto.CancelTaskDTO.toModel(TaskModel model)",3,1,0,0,1
"me.umov.business.application.model.idiom.Idiom.setId(Long id)",3,1,0,0,1
"me.umov.business.application.model.toggle.FeatureToggle.setClientId(Long clientId)",3,1,0,0,1
"me.umov.business.application.spring.AutoWiredUtils.setApplicationContext(ApplicationContext applicationContext)",3,1,0,0,1
"me.umov.business.domain.event.DomainEventRegistryTest$Event1Listener.process(DomainEvent1 event)",3,1,0,0,1
"me.umov.business.domain.event.DomainEventRegistryTest$Event2Listener.process(DomainEvent2 event)",3,1,0,0,1
"me.umov.business.domain.rule.task.ShouldBeActive.ShouldBeActive(TaskModel taskModel)",3,1,0,0,1
"me.umov.business.domain.rule.task.ShouldBeInPreparation.ShouldBeInPreparation(TaskModel taskModel)",3,1,0,0,1
"me.umov.business.domain.rule.task.ShouldHaveTeam.ShouldHaveTeam(TaskModel taskModel)",3,1,0,0,1
"me.umov.business.domain.rule.task.ShouldInitiateToday.ShouldInitiateToday(TaskModel taskModel)",3,1,0,0,1
"me.umov.business.domain.rule.task.ShouldNotHaveAgent.ShouldNotHaveAgent(TaskModel taskModel)",3,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setId(Long id)",3,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.setId(Long id)",3,1,0,0,1
"me.umov.business.infrastructure.cron.JobCommand.JobCommand(String exec)",3,1,0,0,1
"me.umov.business.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipClass(Class<?> clazz)",3,1,0,0,1
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.setClientId(Long clientId)",3,1,0,0,1
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.setId(Long id)",3,1,0,0,1
"me.umov.business.taskschedule.anticorruption.taskSchedule.TaskScheduleCreateConverter.buildTaskSchedule(SaveTaskScheduleGroupRequest request)",3,1,0,0,1
"me.umov.business.taskschedule.application.dto.RelationshipDTO.setAlternativeIdentifier(String alternativeIdentifier)",3,1,0,0,1
"me.umov.business.taskschedule.application.dto.RelationshipDTO.setId(Long id)",3,1,0,0,1
"me.umov.business.utils.specification.domain.BaseValidatorTest$ValidationWithError.isSatisfiedBy(Object candidate)",3,1,0,0,1
"me.umov.business.utils.specification.domain.SpecificationException.SpecificationException(List<RuleMessage> validationMessages)",3,1,0,0,1
"me.umov.business.application.model.ActivityModel.getId()",3,1,0,0,0
"me.umov.business.application.model.ActivityModel.hasAlternativeIdentifier()",3,1,0,0,0
"me.umov.business.application.model.ActivityModel.hasId()",3,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getId()",3,1,0,0,0
"me.umov.business.application.model.AgentModel.getId()",3,1,0,0,0
"me.umov.business.application.model.AgentModel.hasAlternativeIdentifier()",3,1,0,0,0
"me.umov.business.application.model.AgentModel.hasId()",3,1,0,0,0
"me.umov.business.application.model.AgentModel.hasWorkJourney()",3,1,0,0,0
"me.umov.business.application.model.CustomFieldModel.getId()",3,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getId()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasInvalidMinute()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasInvalidSecond()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasNegativeHour()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasNegativeMinute()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasNegativeSecond()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasNoSecond()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasOneDigitOnHour()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasOneDigitOnMinute()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalHasOneDigitOnSecond()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalIsEmpty()",3,1,0,0,0
"me.umov.business.application.model.IntervalTest.shouldConsiderInvalidWhenIntervalIsNoHour()",3,1,0,0,0
"me.umov.business.application.model.TeamAgentModel.getId()",3,1,0,0,0
"me.umov.business.application.model.TeamModel.getId()",3,1,0,0,0
"me.umov.business.application.model.TeamModel.hasAlternativeIdentifier()",3,1,0,0,0
"me.umov.business.application.model.TeamModel.hasId()",3,1,0,0,0
"me.umov.business.application.model.dto.CancelTaskDTO.getId()",3,1,0,0,0
"me.umov.business.application.model.dto.CancelTaskDTO.getOperation()",3,1,0,0,0
"me.umov.business.application.model.idiom.Idiom.getId()",3,1,0,0,0
"me.umov.business.application.model.toggle.FeatureToggle.getClientId()",3,1,0,0,0
"me.umov.business.application.service.DistributionIdleAgent.getBuilderValidator()",3,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveItineraryScheduleInitialDateGreaterThanTodayTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldHaveValidInitialHourAndFinalHourCombinationTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldServiceLocalHaveFinalHourGreaterThenInitialHourTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAgentRelationEqualsAllAgentsTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateAutomaticActivityLoadConfigTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateItineraryActivitiesOriginWithoutActivitiesTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateMultipleActivitiesOriginTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateNotNullTeamExecutionWhenItIsForSomeTeamsTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithTeamsTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeAgentsRelationWithoutAgentsTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateSomeTeamsRelationWithAgentsTest.setup()",3,1,0,0,0
"me.umov.business.domain.itinerary.specification.ShouldValidateTeamsByRelationTest.setup()",3,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.toString()",3,1,0,0,0
"me.umov.business.domain.rule.task.ShouldBeActive.shouldProcessRule()",3,1,0,0,0
"me.umov.business.domain.rule.task.ShouldBeInPreparation.shouldProcessRule()",3,1,0,0,0
"me.umov.business.domain.rule.task.ShouldHaveTeam.shouldProcessRule()",3,1,0,0,0
"me.umov.business.domain.rule.task.ShouldInitiateToday.shouldProcessRule()",3,1,0,0,0
"me.umov.business.domain.rule.task.ShouldNotHaveAgent.shouldProcessRule()",3,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getId()",3,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getId()",3,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.getId()",3,1,0,0,0
"me.umov.business.infrastructure.jpa.LongArrayType.registerUnderJavaType()",3,1,0,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeDescriptor.getSqlArrayType()",3,1,0,0,0
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.defaultJmsTemplate()",3,1,0,0,0
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.getClientId()",3,1,0,0,0
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.getId()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.getEntityModelRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.ActivityRelationshipConverter.getIntegrationRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.getEntityModelRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.AgentRelationshipConverter.getIntegrationRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.getEntityModelRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.ServiceLocalRelationshipConverter.getIntegrationRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.getEntityModelRepository()",3,1,0,0,0
"me.umov.business.taskschedule.anticorruption.relationship.TeamRelationshipConverter.getIntegrationRepository()",3,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.getAlternativeIdentifier()",3,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.getId()",3,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.hasAlternativeIdentifier()",3,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.hasId()",3,1,0,0,0
"me.umov.business.utils.specification.domain.SpecificationException.SpecificationException(SpecificationResult specificationResult)",2,1,6,0,1
"me.umov.business.application.service.CustomFieldValueServiceTest.rulesShouldContainBusinessRule(List<BusinessRule> rules, Class<? extends BusinessRule> ruleClass)",2,1,4,0,2
"me.umov.business.application.controller.BaseController.getControllerResourceName()",2,1,4,0,0
"me.umov.business.domain.client.ClientService.currentClient()",2,1,3,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.hasActivities()",2,1,3,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.hasScheduleTypeAltId()",2,1,3,0,0
"me.umov.business.application.api.ProcessApiReturn.errorApiReturn(String id, HttpStatus code, List<String> messages)",2,1,2,0,3
"me.umov.business.infrastructure.cron.RundeckRestService.getRundeckEndpointUrl(RundeckEndpoints endPoint, Object... urlParameters)",2,1,2,0,2
"me.umov.business.application.service.BaseService.byId(Long id)",2,1,2,0,1
"me.umov.business.application.controller.activity.ActivityRelationship.mustSearchForAlternativeIdentifier()",2,1,2,0,0
"me.umov.business.application.controller.agent.AgentRelationship.mustSearchForAlternativeIdentifier()",2,1,2,0,0
"me.umov.business.application.controller.team.TeamRelationship.mustSearchForAlternativeIdentifier()",2,1,2,0,0
"me.umov.business.application.service.BaseService.findByClientId()",2,1,2,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getAgentAlternativeId()",2,1,2,0,0
"me.umov.business.infrastructure.cron.JobCreationResultDTO.getJobId()",2,1,2,0,0
"me.umov.business.infrastructure.queue.ProducerBuilder.creatrSendMessageRequest()",2,1,2,0,0
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.mustSearchForAlternativeIdentifier()",2,1,2,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.geScheduleTypeAltId()",2,1,2,0,0
"me.umov.business.application.exception.ResourceNotFoundException.ResourceNotFoundException(String entityType, Object identifier)",2,1,1,0,2
"me.umov.business.BusinessApplication.main(String[] args)",2,1,1,0,1
"me.umov.business.application.api.ApiReturn.success(Long id)",2,1,1,0,1
"me.umov.business.application.exception.BadRequestException.BadRequestException(String message)",2,1,1,0,1
"me.umov.business.application.exception.InvalidOperationException.InvalidOperationException(String message)",2,1,1,0,1
"me.umov.business.application.exception.ResourceNotFoundException.ResourceNotFoundException(String message)",2,1,1,0,1
"me.umov.business.application.exception.UnauthorizedRequestException.UnauthorizedRequestException(String message)",2,1,1,0,1
"me.umov.business.application.service.BaseService.detach(TBusinessModel model)",2,1,1,0,1
"me.umov.business.application.service.BaseService.save(TModel model)",2,1,1,0,1
"me.umov.business.application.service.BaseService.saveAll(Iterable<TModel> models)",2,1,1,0,1
"me.umov.business.application.spring.AutoWiredUtils.getBean(Class<T> beanClass)",2,1,1,0,1
"me.umov.business.domain.recurrence.DateInterval.identifyFinalDate(Duration duration)",2,1,1,0,1
"me.umov.business.domain.rule.builders.ValidationBuilder.build(TModel entity)",2,1,1,0,1
"me.umov.business.domain.servicelocal.ServiceLocalRepositoryImpl.updateAddress(ServiceLocal serviceLocal)",2,1,1,0,1
"me.umov.business.utils.specification.domain.SpecificationException.SpecificationException(RuleMessage error)",2,1,1,0,1
"me.umov.business.application.exception.BaseApiException.getErrorReturn()",2,1,1,0,0
"me.umov.business.application.model.dto.ResultProcessRule.setUnexpectedError()",2,1,1,0,0
"me.umov.business.application.service.BaseService.getAgentId()",2,1,1,0,0
"me.umov.business.application.service.BaseService.getClientId()",2,1,1,0,0
"me.umov.business.domain.client.SystemParameters.getAgentTeamLinkType()",2,1,1,0,0
"me.umov.business.domain.client.SystemParameters.useTasksWithinCycleFrequencyControl()",2,1,1,0,0
"me.umov.business.domain.itinerary.ItinerarySaved.shouldDisableCron()",2,1,1,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleSaved.shouldDisableCron()",2,1,1,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalNotWorkedTime()",2,1,1,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalTaskTime()",2,1,1,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalTimeWithoutExecution()",2,1,1,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalWorkedTime()",2,1,1,0,0
"me.umov.business.domain.task.TaskSavedEvent.shouldNotify()",2,1,1,0,0
"me.umov.business.infrastructure.queue.MessageDTO.getMessageSqs()",2,1,1,0,0
"me.umov.business.infrastructure.queue.ProducerBuilder.getNotificationWhenSavingTask()",2,1,1,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.hasAlternativeIdentifier()",2,1,1,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.isCreate()",2,1,1,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.isPartialUpdate()",2,1,1,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.isUpdate()",2,1,1,0,0
"me.umov.business.application.api.ProcessApiReturn.errorApiReturn(String id, HttpStatus code, String... messages)",2,1,0,0,3
"me.umov.business.infrastructure.cron.JobCreationRequestDTO.JobCreationRequestDTO(String cronName, CrontabExpression cronExpression, String command)",2,1,0,0,3
"me.umov.business.application.api.ProcessApiReturn.successApiReturn(String id, String... messages)",2,1,0,0,2
"me.umov.business.application.repository.EventRepository.getNotificationWhenSavingTask(Long clientId, Long taskId)",2,1,0,0,2
"me.umov.business.domain.activityHistory.ActivityHistoryJpaRepository.markAsExported(Long historyId, Long clientId)",2,1,0,0,2
"me.umov.business.domain.recurrence.DateInterval.from(LocalDateTime initialDatetime, LocalDateTime finalDatetime)",2,1,0,0,2
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.ItineraryServiceLocalRelationship(Long id, Long serviceLocalId)",2,1,0,0,2
"me.umov.business.application.api.ApiReturn.error(List<String> messages)",2,1,0,0,1
"me.umov.business.application.api.ApiReturn.error(String message)",2,1,0,0,1
"me.umov.business.application.api.ApiReturn.success(List<ProcessApiReturn> processResult)",2,1,0,0,1
"me.umov.business.application.api.ApiReturn.success(String message)",2,1,0,0,1
"me.umov.business.application.api.ProcessApiReturn.setId(String id)",2,1,0,0,1
"me.umov.business.application.api.ProcessApiReturn.setMessages(List<String> messages)",2,1,0,0,1
"me.umov.business.application.controller.agent.AgentRelationship.AgentRelationship(Long agentId)",2,1,0,0,1
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.CreateWorkCycleResponse.CreateWorkCycleResponse(List<CreatedWorkCycle> createdWorkCycles)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.setNewWorkcycleId(Long newWorkcycleId)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.setPreviousWorkcycleId(Long previousWorkcycleId)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setActive(Boolean active)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setDescription(String description)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setId(Long id)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setInitialDate(LocalDate initialDate)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.setRecurrenceConfiguration(RecurrenceConfiguration recurrenceConfiguration)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.setWorkcycleId(Long workcycleId)",2,1,0,0,1
"me.umov.business.application.exception.BaseApiException.BaseApiException(int statusCode)",2,1,0,0,1
"me.umov.business.application.model.ActivityModel.ActivityModel(Long id)",2,1,0,0,1
"me.umov.business.application.model.ActivityModel.setActive(String active)",2,1,0,0,1
"me.umov.business.application.model.ActivityModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.model.ActivityModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.ActivityModel.setDescription(String description)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setAction(AbsenceAction action)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setDescription(String description)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setDestinationAgentId(Long destinationAgentId)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setFinalDateTime(LocalDateTime finalDateTime)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setInitialDateTime(LocalDateTime initialDateTime)",2,1,0,0,1
"me.umov.business.application.model.AgentAbsenceModel.setOriginAgentId(Long originAgentId)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.AgentModel(Long id)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.AgentModel(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setName(String name)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setValidatePortfolio(AgentPortfolioValidation validatePortfolio)",2,1,0,0,1
"me.umov.business.application.model.AgentModel.setWorkJourney(WorkJourneyModel workJourney)",2,1,0,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.setActiveOnCenter(BooleanStatus activeOnCenter)",2,1,0,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.setCustomField(CustomFieldModel customField)",2,1,0,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.setEditableOnCenter(BooleanStatus editableOnCenter)",2,1,0,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.setFieldName(String fieldName)",2,1,0,0,1
"me.umov.business.application.model.CommonCustomFieldConfig.setRequired(BooleanStatus required)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldModel.setDescription(String description)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldModel.setFieldSubType(CustomFieldSubType fieldSubType)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldModel.setFieldType(CustomFieldType fieldType)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setCustomFieldId(Long customFieldId)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setEntityId(Long entityId)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setExternalValue(String externalValue)",2,1,0,0,1
"me.umov.business.application.model.CustomFieldValueModel.setInternalValue(String internalValue)",2,1,0,0,1
"me.umov.business.application.model.Event.setActive(Character active)",2,1,0,0,1
"me.umov.business.application.model.Event.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.Event.setEventPlatformId(Long eventPlatformId)",2,1,0,0,1
"me.umov.business.application.model.Event.setId(Long id)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setCantEdit(Long cantEdit)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setId(Long id)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setInsertDateHour(LocalDateTime insertDateHour)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setLastUpdate(LocalDateTime lastUpdate)",2,1,0,0,1
"me.umov.business.application.model.ItemModel.setSubGroupId(Long subGroupId)",2,1,0,0,1
"me.umov.business.application.model.TeamAgentModel.setAgent(AgentModel agent)",2,1,0,0,1
"me.umov.business.application.model.TeamAgentModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.TeamAgentModel.setTeam(TeamModel team)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.TeamModel(Long id)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.setDescription(String description)",2,1,0,0,1
"me.umov.business.application.model.TeamModel.setTeamAgents(List<TeamAgentModel> teamAgents)",2,1,0,0,1
"me.umov.business.application.model.dto.AgentTaskDTO.setAgentId(Long agentId)",2,1,0,0,1
"me.umov.business.application.model.dto.AgentTaskDTO.setTaskId(Long taskId)",2,1,0,0,1
"me.umov.business.application.model.dto.AssignAgentsTasksDTO.setAgentsTasks(List<AgentTaskDTO> agentsTasks)",2,1,0,0,1
"me.umov.business.application.model.dto.CancelTaskDTO.setId(Long id)",2,1,0,0,1
"me.umov.business.application.model.dto.CustomFieldValueDTO.setCustomFieldId(Long customFieldId)",2,1,0,0,1
"me.umov.business.application.model.dto.CustomFieldValueDTO.setCustomFieldValueId(Long customFieldValueId)",2,1,0,0,1
"me.umov.business.application.model.dto.CustomFieldValueDTO.setExternalValue(String externalValue)",2,1,0,0,1
"me.umov.business.application.model.dto.CustomFieldValueDTO.setInternalValue(String internalValue)",2,1,0,0,1
"me.umov.business.application.model.dto.IdDTO.IdDTO(Long id)",2,1,0,0,1
"me.umov.business.application.model.dto.PrioritizeTasksDTO.setTaskIds(List<Long> taskIds)",2,1,0,0,1
"me.umov.business.application.model.dto.ResultProcessRule.setMessage(String message)",2,1,0,0,1
"me.umov.business.application.model.dto.ResultProcessRule.setState(RuleState state)",2,1,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.setActionType(ActionType actionType)",2,1,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.setGroup(String group)",2,1,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.setIgnoreTaskType(List<String> ignoreTaskType)",2,1,0,0,1
"me.umov.business.application.model.dto.RuleRequestDTO.setScheduleId(Long scheduleId)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskActivityDTO.setActivity(ActivityModel activity)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskActivityDTO.setId(Long id)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskItemDTO.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskItemDTO.setId(Long id)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskItemDTO.setItem(ItemModel item)",2,1,0,0,1
"me.umov.business.application.model.dto.TaskItemDTO.setTask(TaskModel task)",2,1,0,0,1
"me.umov.business.application.model.idiom.IdiomEntry.setId(final Long id)",2,1,0,0,1
"me.umov.business.application.model.toggle.FeatureToggle.setId(Long id)",2,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistory.ActivityHistory(Long id)",2,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistory.setActivityId(Long activityId)",2,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistory.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistory.setId(Long id)",2,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistory.setScheduleId(Long scheduleId)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setAgentTeamLink(String agentTeamLink)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setFrequencyControlType(FrequencyControlType frequencyControlType)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setId(Long id)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setUseFrequencyControl(BooleanStatus useFrequencyControl)",2,1,0,0,1
"me.umov.business.domain.client.SystemParameters.setUseScheduleLock(BooleanStatus useScheduleLock)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryActivity.setActivity(final ActivityModel activity)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryActivity.setClientId(final Long clientId)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryActivity.setId(final Long id)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryActivity.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryAgent.setAgent(final AgentModel agent)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryAgent.setClientId(final Long clientId)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryAgent.setId(final Long id)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryAgent.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setClientId(final Long clientId)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setFinalHour(LocalTime finalHour)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setId(final Long id)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setInitialHour(LocalTime initialHour)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setServiceLocal(ServiceLocalModel serviceLocal)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServiceLocal.setTreatmentOrder(Long treatmentOrder)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryTeam.setClientId(final Long clientId)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryTeam.setId(final Long id)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryTeam.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryTeam.setTeam(final TeamModel team)",2,1,0,0,1
"me.umov.business.domain.recurrence.DateInterval.from(LocalDateTime initialDatetime)",2,1,0,0,1
"me.umov.business.domain.servicelocal.ServiceLocal.setAddress(Address address)",2,1,0,0,1
"me.umov.business.domain.task.BeforeTaskSaveEvent.BeforeTaskSaveEvent(TaskModel task)",2,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setActivity(ActivityModel activity)",2,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setRequired(String required)",2,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setTask(TaskModel task)",2,1,0,0,1
"me.umov.business.domain.task.TaskActivityModel.setWorkCycle(WorkCycle workCycle)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setActiveOnCenter(BooleanStatus activeOnCenter)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setDefaultValue(String defaultValue)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setDisplayOnSimpleForm(BooleanStatus displayOnSimpleForm)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setEditableOnCenter(BooleanStatus editableOnCenter)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setFieldName(String fieldName)",2,1,0,0,1
"me.umov.business.domain.task.TaskConfigModel.setRequired(BooleanStatus required)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setActivitiesIds(List<Long> activitiesIds)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setAgentId(Long agentId)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setDate(LocalDate date)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setDateHourFirstExecution(LocalDateTime dateHourFirstExecution)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setDateHourLastExecution(LocalDateTime dateHourLastExecution)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setNegativeExecution(String negativeExecution)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setNonconformities(List<NonconformitiesType> nonconformities)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTaskId(Long taskId)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalExecutedActivities(Long totalExecutedActivities)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalNotWorkedTime(String totalNotWorkedTime)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalTaskTime(String totalTaskTime)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalTimeWithoutExecution(String totalTimeWithoutExecution)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalTraveledDistance(Double totalTraveledDistance)",2,1,0,0,1
"me.umov.business.domain.task.TaskDailyResume.setTotalWorkedTime(String totalWorkedTime)",2,1,0,0,1
"me.umov.business.domain.task.TaskItemModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.task.TaskItemModel.setId(Long id)",2,1,0,0,1
"me.umov.business.domain.task.TaskItemModel.setItem(ItemModel item)",2,1,0,0,1
"me.umov.business.domain.task.TaskItemModel.setTask(TaskModel task)",2,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.TaskTypeModel(Long id)",2,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.task.TaskTypeModel.setDescription(String description)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setActivity(ActivityModel activity)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setActivityExecutionMode(ActivityExecutionMode activityExecutionMode)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setCreatedTotal(Long createdTotal)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setExecutedTotal(Long executedTotal)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setFinalDate(LocalDate finalDate)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setId(Long id)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setInitialDate(LocalDate initialDate)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setMaximumFrequency(Long maximumFrequency)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setMinimumFrequency(Long minimumFrequency)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setPendingTotal(Long pendingTotal)",2,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycle.setServiceLocal(ServiceLocalModel serviceLocal)",2,1,0,0,1
"me.umov.business.infrastructure.cron.JobScheduleWeekday.JobScheduleWeekday(String day)",2,1,0,0,1
"me.umov.business.infrastructure.cron.JobScheduleYear.JobScheduleYear(String year)",2,1,0,0,1
"me.umov.business.infrastructure.cron.JobSequence.JobSequence(String command)",2,1,0,0,1
"me.umov.business.infrastructure.cron.RundeckRestService.setRundeckPassword(String rundeckPassword)",2,1,0,0,1
"me.umov.business.infrastructure.cron.RundeckRestService.setRundeckUrl(String rundeckUrl)",2,1,0,0,1
"me.umov.business.infrastructure.cron.RundeckRestService.setRundeckUser(String rundeckUser)",2,1,0,0,1
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.setConnectionFactory(SQSConnectionFactory connectionFactory)",2,1,0,0,1
"me.umov.business.infrastructure.queue.AmazonSQSConfiguration.setRegionName(String region)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setDateHourScheduling(LocalDateTime dateHourScheduling)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setEvent(Event event)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setId(Long id)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setMaxAttempts(Long maxAttempts)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setRuleType(String ruleType)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setScheduleId(Long scheduleId)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setStatus(Character status)",2,1,0,0,1
"me.umov.business.infrastructure.queue.analyzeRule.Rule.setTotalAttempts(Long totalAttempts)",2,1,0,0,1
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.setItineraryScheduleId(Long itineraryScheduleId)",2,1,0,0,1
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.ItineraryServiceLocalRelationship(Long serviceLocalId)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.setFinalHour(LocalTime finalHour)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.setInitialHour(LocalTime initialHour)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.changeMethodType(MethodType methodType)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setActivityOriginList(List<ItineraryActivityOrigin> activityOriginList)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setAgentRelationship(ItineraryAgentRelation agentRelationship)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setClientId(Long clientId)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setDescription(String description)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setId(Long id)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setInitialDate(LocalDate initialDate)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setRecurrenceConfiguration(RecurrenceConfiguration recurrenceConfiguration)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setScheduleType(ScheduleTypeDTO scheduleType)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTaskScheduleActivities(List<ActivityRelationship> taskScheduleActivities)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTaskScheduleAgents(List<AgentRelationship> taskScheduleAgents)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTaskScheduleServiceLocals(List<ItineraryServiceLocalRelationship> taskScheduleServiceLocals)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTaskScheduleTeams(List<TeamRelationship> taskScheduleTeams)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTaskTypeId(Long taskTypeId)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.setTeamExecution(TeamExecution teamExecution)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.ScheduleTypeDTO.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.business.taskschedule.application.dto.ScheduleTypeDTO.setId(Long id)",2,1,0,0,1
"me.umov.business.utils.specification.domain.CompositeSpecification.and(ISpecification<T> other)",2,1,0,0,1
"me.umov.business.utils.specification.domain.CompositeSpecification.or(ISpecification<T> other)",2,1,0,0,1
"me.umov.business.utils.specification.rule.RuleMessage.error(String message)",2,1,0,0,1
"me.umov.business.utils.specification.rule.RuleMessage.info(String message)",2,1,0,0,1
"me.umov.business.utils.specification.rule.RuleMessage.warning(String message)",2,1,0,0,1
"me.umov.business.application.api.ApiReturn.getCode()",2,1,0,0,0
"me.umov.business.application.api.ApiReturn.getId()",2,1,0,0,0
"me.umov.business.application.api.ApiReturn.getMessages()",2,1,0,0,0
"me.umov.business.application.api.ApiReturn.getProcessResult()",2,1,0,0,0
"me.umov.business.application.api.ProcessApiReturn.getCode()",2,1,0,0,0
"me.umov.business.application.api.ProcessApiReturn.getId()",2,1,0,0,0
"me.umov.business.application.api.ProcessApiReturn.getMessages()",2,1,0,0,0
"me.umov.business.application.api.ProcessApiReturn.getSuccess()",2,1,0,0,0
"me.umov.business.application.authorization.UMovMeJWTClaims.UMovMeJWTClaims()",2,1,0,0,0
"me.umov.business.application.controller.VersionController.getVersion()",2,1,0,0,0
"me.umov.business.application.controller.activity.ActivityRelationship.getActivityId()",2,1,0,0,0
"me.umov.business.application.controller.activity.ActivityRelationship.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.controller.activity.ActivityRelationship.getId()",2,1,0,0,0
"me.umov.business.application.controller.agent.AgentRelationship.getAgentId()",2,1,0,0,0
"me.umov.business.application.controller.agent.AgentRelationship.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.controller.agent.AgentRelationship.getId()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.getId()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRelationship.getServiceLocalId()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getCity()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getCountry()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getId()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getNeighborhood()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getState()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getStreet()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getStreetComplement()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getStreetNumber()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getStreetType()",2,1,0,0,0
"me.umov.business.application.controller.servicelocal.ServiceLocalRequest.getZipCode()",2,1,0,0,0
"me.umov.business.application.controller.team.TeamRelationship.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.controller.team.TeamRelationship.getId()",2,1,0,0,0
"me.umov.business.application.controller.team.TeamRelationship.getTeamId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.CreateWorkCycleRequest()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.getActivityIds()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.getFinalDate()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.getInitialDate()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.getItineraryScheduleId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleRequest.getServiceLocalId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreateWorkCycleResponse.getCreatedWorkCycles()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreatedWorkCycle.getActivityId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreatedWorkCycle.getServiceLocalId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.CreatedWorkCycle.getWorkCycleId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.getNewWorkcycleId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.getPreviousWorkcycleId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.getServiceLocalId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getActive()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getDescription()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getInitialDate()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.getRecurrenceConfiguration()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.SaveWorkCycleScheduleRequest.isNew()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleRelationRequest.getEntityId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleRelationRequest.getWorkcycleId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.getServiceLocalId()",2,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.getWorkcycleId()",2,1,0,0,0
"me.umov.business.application.exception.BusinessValidationException.getValidationMessages()",2,1,0,0,0
"me.umov.business.application.model.ActivityModel.ActivityModel()",2,1,0,0,0
"me.umov.business.application.model.ActivityModel.getActive()",2,1,0,0,0
"me.umov.business.application.model.ActivityModel.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.model.ActivityModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.ActivityModel.getDescription()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getAction()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getActive()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getDescription()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getDestinationAgentId()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getFinalDateTime()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getInitialDateTime()",2,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.getOriginAgentId()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.AgentModel()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getActive()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getName()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getValidatePortfolio()",2,1,0,0,0
"me.umov.business.application.model.AgentModel.getWorkJourney()",2,1,0,0,0
"me.umov.business.application.model.CommonCustomFieldConfig.getActiveOnCenter()",2,1,0,0,0
"me.umov.business.application.model.CommonCustomFieldConfig.getCustomField()",2,1,0,0,0
"me.umov.business.application.model.CommonCustomFieldConfig.getEditableOnCenter()",2,1,0,0,0
"me.umov.business.application.model.CommonCustomFieldConfig.getFieldName()",2,1,0,0,0
"me.umov.business.application.model.CommonCustomFieldConfig.getRequired()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldModel.getDescription()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldModel.getFieldSubType()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldModel.getFieldType()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getCustomFieldId()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getEntityId()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getExternalValue()",2,1,0,0,0
"me.umov.business.application.model.CustomFieldValueModel.getInternalValue()",2,1,0,0,0
"me.umov.business.application.model.Event.getActive()",2,1,0,0,0
"me.umov.business.application.model.Event.getClientId()",2,1,0,0,0
"me.umov.business.application.model.Event.getEventPlatformId()",2,1,0,0,0
"me.umov.business.application.model.Event.getId()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.ItemModel()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getActive()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getCantEdit()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getId()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getInsertDateHour()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getLastUpdate()",2,1,0,0,0
"me.umov.business.application.model.ItemModel.getSubGroupId()",2,1,0,0,0
"me.umov.business.application.model.TeamAgentModel.TeamAgentModel()",2,1,0,0,0
"me.umov.business.application.model.TeamAgentModel.getAgent()",2,1,0,0,0
"me.umov.business.application.model.TeamAgentModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.TeamAgentModel.getTeam()",2,1,0,0,0
"me.umov.business.application.model.TeamModel.TeamModel()",2,1,0,0,0
"me.umov.business.application.model.TeamModel.getActive()",2,1,0,0,0
"me.umov.business.application.model.TeamModel.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.application.model.TeamModel.getClientId()",2,1,0,0,0
"me.umov.business.application.model.TeamModel.getDescription()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getAgentId()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getDate()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getSequence()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentJourneyHoursDTO.getType()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentTaskDTO.getAgentId()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentTaskDTO.getPriority()",2,1,0,0,0
"me.umov.business.application.model.dto.AgentTaskDTO.getTaskId()",2,1,0,0,0
"me.umov.business.application.model.dto.AssignAgentsTasksDTO.getAgentsTasks()",2,1,0,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTO.getCustomFieldId()",2,1,0,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTO.getCustomFieldValueId()",2,1,0,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTO.getExternalValue()",2,1,0,0,0
"me.umov.business.application.model.dto.CustomFieldValueDTO.getInternalValue()",2,1,0,0,0
"me.umov.business.application.model.dto.IdDTO.getId()",2,1,0,0,0
"me.umov.business.application.model.dto.PrioritizeTasksDTO.getTaskIds()",2,1,0,0,0
"me.umov.business.application.model.dto.ResultProcessRule.getMessage()",2,1,0,0,0
"me.umov.business.application.model.dto.ResultProcessRule.getState()",2,1,0,0,0
"me.umov.business.application.model.dto.RuleRequestDTO.getActionType()",2,1,0,0,0
"me.umov.business.application.model.dto.RuleRequestDTO.getClientId()",2,1,0,0,0
"me.umov.business.application.model.dto.RuleRequestDTO.getGroup()",2,1,0,0,0
"me.umov.business.application.model.dto.RuleRequestDTO.getIgnoreTaskType()",2,1,0,0,0
"me.umov.business.application.model.dto.RuleRequestDTO.getScheduleId()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskActivityDTO.getActivity()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskActivityDTO.getId()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskActivityDTO.toTaskActivityModel()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.TaskItemDTO()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.getClientId()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.getId()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.getItem()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.getTask()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskItemDTO.toTaskItemModel()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskSituationDTO.getDescription()",2,1,0,0,0
"me.umov.business.application.model.dto.TaskSituationDTO.getId()",2,1,0,0,0
"me.umov.business.application.model.fixture.ActivityModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ActivityModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.AddressFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.AddressFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.AgentJourneyHoursDTOFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.AgentModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.AgentModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.CancelTaskDTOFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.CancelTaskDTOFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.ClientFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ClientFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.CommonCustomFieldConfigFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.CommonCustomFieldConfigFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldDTOFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.CustomFieldValueModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ItineraryScheduleFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.ItineraryServiceLocalFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ItineraryServiceLocalFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.RecurrenceConfigurationFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.ResultProcessRuleFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ResultProcessRuleFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.RuleRequestDTOFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.SaveTaskDTOFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.SaveTaskScheduleGroupRequestFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.ServiceLocalModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.SystemParametersFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.SystemParametersFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskActivityModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskActivityModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskConfigModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskConfigModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskDailyResumeFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskRecurrenceConfigurationFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskTypeModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.TaskTypeModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.TeamModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.TeamModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.WorkCycleFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.WorkCycleFixture.get()",2,1,0,0,0
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.build()",2,1,0,0,0
"me.umov.business.application.model.fixture.WorkJourneyDayModelFixture.get()",2,1,0,0,0
"me.umov.business.application.model.idiom.IdiomEntry.getCurrentValue()",2,1,0,0,0
"me.umov.business.application.model.idiom.IdiomEntry.getId()",2,1,0,0,0
"me.umov.business.application.model.toggle.FeatureToggle.getId()",2,1,0,0,0
"me.umov.business.domain.activityHistory.ActivityHistory.ActivityHistory()",2,1,0,0,0
"me.umov.business.domain.activityHistory.ActivityHistory.getActivityId()",2,1,0,0,0
"me.umov.business.domain.activityHistory.ActivityHistory.getClientId()",2,1,0,0,0
"me.umov.business.domain.activityHistory.ActivityHistory.getId()",2,1,0,0,0
"me.umov.business.domain.activityHistory.ActivityHistory.getScheduleId()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getClientId()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getFrequencyControlType()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getId()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getIdiom()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getUseFrequencyControl()",2,1,0,0,0
"me.umov.business.domain.client.SystemParameters.getUseScheduleLock()",2,1,0,0,0
"me.umov.business.domain.client.UserData.getAccessToken()",2,1,0,0,0
"me.umov.business.domain.client.UserData.getAgentId()",2,1,0,0,0
"me.umov.business.domain.client.UserData.getClientId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.getActivity()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.getClientId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.getId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.getItinerary()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivityRelations.ItineraryActivityRelations()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getAgent()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getClientId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.getItinerary()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItinerarySaved.getItinerary()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItinerarySaved.isNewEntity()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleSaved.getItinerarySchedule()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryScheduleSaved.isNewEntity()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.ItineraryServiceLocal()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getClientId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getFinalHour()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getInitialHour()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getItinerary()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getServiceLocal()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryServiceLocal.getTreatmentOrder()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.getClientId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.getId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.getItinerary()",2,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.getTeam()",2,1,0,0,0
"me.umov.business.domain.itinerary.ScheduleQueuePayload.getId()",2,1,0,0,0
"me.umov.business.domain.itinerary.ScheduleQueuePayload.getType()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.dailyCronTab()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getDayOfMonth()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getDayOfWeek()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getHour()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getMinute()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getMonth()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getSecond()",2,1,0,0,0
"me.umov.business.domain.recurrence.CrontabExpression.getYear()",2,1,0,0,0
"me.umov.business.domain.recurrence.DateInterval.getFinalDatetime()",2,1,0,0,0
"me.umov.business.domain.recurrence.DateInterval.getInitialDatetime()",2,1,0,0,0
"me.umov.business.domain.recurrence.DateInterval.hasFinal()",2,1,0,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.getAddress()",2,1,0,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.getClientId()",2,1,0,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.getDescription()",2,1,0,0,0
"me.umov.business.domain.servicelocal.ServiceLocal.getId()",2,1,0,0,0
"me.umov.business.domain.task.BeforeTaskSaveEvent.getTask()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.TaskActivityModel()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getActivity()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getClientId()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getRequired()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getTask()",2,1,0,0,0
"me.umov.business.domain.task.TaskActivityModel.getWorkCycle()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getActiveOnCenter()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getClientId()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getDefaultValue()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getDisplayOnSimpleForm()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getEditableOnCenter()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getFieldName()",2,1,0,0,0
"me.umov.business.domain.task.TaskConfigModel.getRequired()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getActivitiesIds()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getAgentId()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getClientId()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getDate()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getDateHourFirstExecution()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getDateHourLastExecution()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getNegativeExecution()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getNonconformities()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getTaskId()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalExecutedActivities()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResume.getTotalTraveledDistance()",2,1,0,0,0
"me.umov.business.domain.task.TaskDailyResumeTest.setUp()",2,1,0,0,0
"me.umov.business.domain.task.TaskItemModel.TaskItemModel()",2,1,0,0,0
"me.umov.business.domain.task.TaskItemModel.getClientId()",2,1,0,0,0
"me.umov.business.domain.task.TaskItemModel.getId()",2,1,0,0,0
"me.umov.business.domain.task.TaskItemModel.getItem()",2,1,0,0,0
"me.umov.business.domain.task.TaskItemModel.getTask()",2,1,0,0,0
"me.umov.business.domain.task.TaskSavedEvent.getTask()",2,1,0,0,0
"me.umov.business.domain.task.TaskSavedEvent.isInsert()",2,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.TaskTypeModel()",2,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.getActive()",2,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.getClientId()",2,1,0,0,0
"me.umov.business.domain.task.TaskTypeModel.getDescription()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getActivity()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getActivityExecutionMode()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getClientId()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getCreatedTotal()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getExecutedTotal()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getFinalDate()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getId()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getInitialDate()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getMaximumFrequency()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getMinimumFrequency()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getPendingTotal()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycle.getServiceLocal()",2,1,0,0,0
"me.umov.business.infrastructure.cron.CreatedJobDTO.getId()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getDefaultTab()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getDescription()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getExecutionEnabled()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getLogLevel()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getName()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getNodeFilterEditable()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getSchedule()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getScheduleEnabled()",2,1,0,0,0
"me.umov.business.infrastructure.cron.Job.getSequence()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobCommand.getExec()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobCreationRequestDTO.getJob()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobCreationResultDTO.getSucceeded()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobSchedule.getMonth()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobSchedule.getTime()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobSchedule.getWeekday()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobSchedule.getYear()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleMonth.getDay()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleMonth.getMonth()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleTime.getHour()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleTime.getMinute()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleTime.getSeconds()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleWeekday.getDay()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobScheduleYear.getYear()",2,1,0,0,0
"me.umov.business.infrastructure.cron.JobSequence.getCommand()",2,1,0,0,0
"me.umov.business.infrastructure.cron.RundeckProjectResponse.RundeckProjectResponse()",2,1,0,0,0
"me.umov.business.infrastructure.cron.RundeckProjectResponse.getDescription()",2,1,0,0,0
"me.umov.business.infrastructure.cron.RundeckProjectResponse.getName()",2,1,0,0,0
"me.umov.business.infrastructure.cron.RundeckRestConfiguration.getConnectTimeout()",2,1,0,0,0
"me.umov.business.infrastructure.cron.RundeckRestConfiguration.getReadTimeout()",2,1,0,0,0
"me.umov.business.infrastructure.cron.SuccessCreatedJobDTO.getJob()",2,1,0,0,0
"me.umov.business.infrastructure.jpa.LongArrayType.LongArrayType()",2,1,0,0,0
"me.umov.business.infrastructure.jpa.LongArrayType.getName()",2,1,0,0,0
"me.umov.business.infrastructure.jpa.LongArrayTypeDescriptor.LongArrayTypeDescriptor()",2,1,0,0,0
"me.umov.business.infrastructure.queue.MessageDTO.getId()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getClientId()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getDateHourScheduling()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getEvent()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getId()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getMaxAttempts()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getRuleType()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getScheduleId()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getStatus()",2,1,0,0,0
"me.umov.business.infrastructure.queue.analyzeRule.Rule.getTotalAttempts()",2,1,0,0,0
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.getItineraryScheduleId()",2,1,0,0,0
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityEntity.getServiceLocalId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.getFinalHour()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.ItineraryServiceLocalRelationship.getInitialHour()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.getNodeAlternativeId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.getNodeId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.getType()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.hasNodeAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.RelationshipDTO.hasNodeId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getActive()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getActivityOriginList()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getAgentRelationship()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getClientId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getDescription()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getInitialDate()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getRecurrenceConfiguration()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getScheduleType()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTaskScheduleActivities()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTaskScheduleAgents()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTaskScheduleServiceLocals()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTaskScheduleTeams()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.getTaskTypeId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.SaveTaskScheduleGroupRequest.hasId()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.ScheduleTypeDTO.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.business.taskschedule.application.dto.ScheduleTypeDTO.getId()",2,1,0,0,0
"me.umov.business.utils.specification.domain.SpecificationResult.getMessages()",2,1,0,0,0
"me.umov.business.utils.specification.domain.SpecificationResult.isSatisfied()",2,1,0,0,0
"me.umov.business.utils.specification.domain.SpecificationResult.satisfied()",2,1,0,0,0
"me.umov.business.utils.specification.rule.RuleMessage.getMessage()",2,1,0,0,0
"me.umov.business.utils.specification.rule.RuleMessage.getSeverity()",2,1,0,0,0
"me.umov.business.domain.workcycle.WorkCycleServicePort.generateWorkCycles(Long serviceLocalId, List<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",1,1,0,0,5
"me.umov.business.domain.workcycle.WorkCycleServicePort.applyWorkCycleOperation(List<TaskActivityModel> taskActivities, List<TaskActivityModel> executedActivities, WorkCycleOperation operation)",1,1,0,0,3
"me.umov.business.application.repository.BaseRepository.findByClientIdAndId(Long clientId, Long id)",1,1,0,0,2
"me.umov.business.application.repository.BaseRepository.findByClientIdAndIdIn(Long clientId, List<Long> ids)",1,1,0,0,2
"me.umov.business.application.repository.IntegrationRepository.findByClientIdAndAlternativeIdentifier(Long clientId, String alternativeIdentifier)",1,1,0,0,2
"me.umov.business.application.repository.IntegrationRepository.findByClientIdAndId(Long clientId, Long id)",1,1,0,0,2
"me.umov.business.application.controller.workcycle.ReplaceWorkCycleServiceLocalRequest.ReplaceWorkCycleServiceLocalRequest()",1,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleRelationRequest.WorkCycleRelationRequest()",1,1,0,0,0
"me.umov.business.application.controller.workcycle.WorkCycleServiceLocalRequest.WorkCycleServiceLocalRequest()",1,1,0,0,0
"me.umov.business.application.model.AgentAbsenceModel.AgentAbsenceModel()",1,1,0,0,0
"me.umov.business.application.model.dto.AgentTaskDTO.AgentTaskDTO()",1,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryActivity.ItineraryActivity()",1,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryAgent.ItineraryAgent()",1,1,0,0,0
"me.umov.business.domain.itinerary.ItineraryTeam.ItineraryTeam()",1,1,0,0,0
"me.umov.business.application.repository.custom.ActivityRepositoryCustom.findDefaultActivitiesFor(Long clientId, List<String> origin, Long teamId, Long agentId, Long serviceLocalId, Long taskTypeId)",0,1,0,0,6
"me.umov.business.domain.workcycle.WorkCycleGenerator.generateWorkCycles(Long clientId, Long serviceLocalId, List<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",0,1,0,0,6
"me.umov.business.domain.recurrence.CronProvider.createOrUpdateCron(Long clientId, Long entityId, CrontabExpression cronExpression, String queueData)",0,1,0,0,4
"me.umov.business.application.repository.CustomFieldValueRepository.deleteByCustomFieldIdAndEntityIdAndIdNotIn(Long customFieldId, Long entityId, List<Long> ids)",0,1,0,0,3
"me.umov.business.application.repository.IdiomEntryRepository.findByClientIdAndIdiomIdAndKey(Long clientId, Long idiomId, String key)",0,1,0,0,3
"me.umov.business.domain.task.TaskJpaRepository.findByGroupAndSituationIdAndClientId(String group, Long situationId, Long clientId)",0,1,0,0,3
"me.umov.business.application.repository.ActivityRepository.countByClientIdAndIdIn(Long clientId, List<Long> activitiesIds)",0,1,0,0,2
"me.umov.business.application.repository.AgentRepository.countByClientIdAndIdIn(Long clientId, List<Long> agentsIds)",0,1,0,0,2
"me.umov.business.application.repository.CustomFieldValueRepository.deleteByCustomFieldIdAndEntityId(Long customFieldId, Long entityId)",0,1,0,0,2
"me.umov.business.application.repository.CustomFieldValueRepository.deleteByCustomFieldIdAndEntityIdIn(List<Long> customFieldIds, Long entityId)",0,1,0,0,2
"me.umov.business.application.repository.FeatureToggleRepository.findByFeatureIdAndClientId(Long featureId, Long permissionClientId)",0,1,0,0,2
"me.umov.business.application.repository.ServiceLocalRepository.countByClientIdAndIdIn(Long clientId, List<Long> serviceLocalsIds)",0,1,0,0,2
"me.umov.business.application.repository.ServiceLocalRepository.findByClientIdAndAlternativeIdentifier(Long clientId, String alternativeIdentifier)",0,1,0,0,2
"me.umov.business.application.repository.ServiceLocalRepository.findTop20ByClientIdAndDescriptionContainingIgnoreCaseOrderByDescription(Long clientId, String description)",0,1,0,0,2
"me.umov.business.application.repository.TaskTypeRepository.existsByClientIdAndIdIn(Long clientId, Long id)",0,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryServicePort.attachActivity(Long workCycleId, Long activityId)",0,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryServicePort.attachServiceLocal(Long workCycleId, Long serviceLocalId)",0,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryServicePort.detachActivity(Long workCycleId, Long activityId)",0,1,0,0,2
"me.umov.business.domain.itinerary.ItineraryServicePort.detachServiceLocal(Long workCycleId, Long serviceLocalId)",0,1,0,0,2
"me.umov.business.domain.task.TaskActivityJpaRepository.findByClientIdAndTaskId(Long clientId, Long taskId)",0,1,0,0,2
"me.umov.business.domain.task.TaskConfigJpaRepository.findByClientIdAndFieldConfigOrigin(Long clientId, FieldConfigOrigin fieldConfigOrigin)",0,1,0,0,2
"me.umov.business.domain.task.TaskTypeJpaRepository.findByClientIdAndAlternativeIdentifier(Long clientId, String geScheduleTypeAltId)",0,1,0,0,2
"me.umov.business.domain.workcycle.WorkCycleGenerator.updateWorkCyclesState(Long clientId, List<Long> workCycleIds)",0,1,0,0,2
"me.umov.business.domain.workcycle.WorkCycleServicePort.assignWorkCycle(TaskModel task, List<TaskActivityModel> taskActivities)",0,1,0,0,2
"me.umov.business.infrastructure.servicelocal.activity.ServiceLocalActivityJpaRepository.findByClientIdAndItineraryScheduleId(Long clientId, Long itineraryScheduleId)",0,1,0,0,2
"me.umov.business.application.controller.activityhistory.ActivityHistoryConverter.convertFrom(Long activityHistoryId)",0,1,0,0,1
"me.umov.business.application.controller.servicelocal.ServiceLocalConverter.convertFrom(ServiceLocalRequest serviceLocalRequest)",0,1,0,0,1
"me.umov.business.application.controller.workcycle.WorkCycleScheduleConverter.convertFrom(SaveWorkCycleScheduleRequest request)",0,1,0,0,1
"me.umov.business.application.model.BaseClientModel.setClientId(Long clientId)",0,1,0,0,1
"me.umov.business.application.model.BaseModel.setId(TId id)",0,1,0,0,1
"me.umov.business.application.model.IntegrationModel.setAlternativeIdentifier(String alternativeIdentifier)",0,1,0,0,1
"me.umov.business.application.model.dto.CancelTaskDTO.setClientId(Long clientId)",0,1,0,0,1
"me.umov.business.application.model.dto.ICustomFields.setCustomFields(List<CustomFieldValueDTO> customFields)",0,1,0,0,1
"me.umov.business.application.model.dto.IOperationDTO.setClientId(Long clientId)",0,1,0,0,1
"me.umov.business.application.model.dto.IOperationDTO.toModel(TModel model)",0,1,0,0,1
"me.umov.business.application.repository.BaseRepository.findByClientId(Long clientId)",0,1,0,0,1
"me.umov.business.application.repository.CustomFieldRepository.findByIdIn(List<Long> id)",0,1,0,0,1
"me.umov.business.application.repository.custom.task.TaskRepositoryCustom.existTaskOnDateIntervalByAgent(TaskModel taskModel)",0,1,0,0,1
"me.umov.business.domain.activity.ActivityDAO.findAll(List<Long> ids)",0,1,0,0,1
"me.umov.business.domain.activityHistory.ActivityHistoryService.markAsExported(ActivityHistory history)",0,1,0,0,1
"me.umov.business.domain.agent.AgentDAO.findAll(List<Long> ids)",0,1,0,0,1
"me.umov.business.domain.event.DomainEventListener.process(T event)",0,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServicePort.saveTaskScheduleGroup(ItinerarySchedule itinerarySchedule)",0,1,0,0,1
"me.umov.business.domain.itinerary.ItineraryServicePort.saveWorkCycleSchedule(ItinerarySchedule itinerarySchedule)",0,1,0,0,1
"me.umov.business.domain.recurrence.CronProvider.disableCron(String cronId)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setFinalDate(LocalDate date)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setMonthDay(Long value)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setOcurrencesLimit(Long ocurrences)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setRecurrenceEndType(RecurrenceEndType type)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setRepeatMode(RecurrenceRepeatMode repeatMode)",0,1,0,0,1
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.setWeeklyRepetition(Long value)",0,1,0,0,1
"me.umov.business.domain.rule.builders.ValidationBuilder.getRules(TModel entity)",0,1,0,0,1
"me.umov.business.domain.servicelocal.ServiceLocalActivityDAO.existsWithItinerarySchedule(Long itineraryScheduleId)",0,1,0,0,1
"me.umov.business.domain.servicelocal.ServiceLocalDAO.findAll(List<Long> ids)",0,1,0,0,1
"me.umov.business.domain.servicelocal.ServiceLocalDAO.updateAddress(ServiceLocal serviceLocal)",0,1,0,0,1
"me.umov.business.domain.servicelocal.ServiceLocalRepository.updateAddress(ServiceLocal workCycle)",0,1,0,0,1
"me.umov.business.domain.team.TeamDAO.findAll(List<Long> ids)",0,1,0,0,1
"me.umov.business.domain.workcycle.WorkCycleServicePort.updateWorkCyclesState(List<Long> workCycleIds)",0,1,0,0,1
"me.umov.business.infrastructure.queue.ProducerNotification.send(MessageDTO message)",0,1,0,0,1
"me.umov.business.taskschedule.application.service.ConverterFactory.get(SaveTaskScheduleGroupRequest request)",0,1,0,0,1
"me.umov.business.taskschedule.application.service.RelationshipConverter.add(RelationshipDTO dto)",0,1,0,0,1
"me.umov.business.taskschedule.application.service.RelationshipConverter.remove(RelationshipDTO dto)",0,1,0,0,1
"me.umov.business.taskschedule.application.service.RelationshipConverterFactory.get(RelationshipDTO relationshipDTO)",0,1,0,0,1
"me.umov.business.taskschedule.application.service.TaskScheduleConverter.convertFrom(SaveTaskScheduleGroupRequest request)",0,1,0,0,1
"me.umov.business.taskschedule.domain.ScheduledTasksCreator.saveTaskSchedule(ItinerarySchedule itinerarySchedule)",0,1,0,0,1
"me.umov.business.utils.specification.domain.CompositeSpecification.isSatisfiedBy(T candidate)",0,1,0,0,1
"me.umov.business.utils.specification.domain.ISpecification.and(ISpecification<T> other)",0,1,0,0,1
"me.umov.business.utils.specification.domain.ISpecification.isSatisfiedBy(T candidate)",0,1,0,0,1
"me.umov.business.utils.specification.domain.ISpecification.or(ISpecification<T> other)",0,1,0,0,1
"me.umov.business.application.controller.EntityIntegration.getAlternativeIdentifier()",0,1,0,0,0
"me.umov.business.application.controller.EntityIntegration.mustSearchForAlternativeIdentifier()",0,1,0,0,0
"me.umov.business.application.model.BaseClientModel.getClientId()",0,1,0,0,0
"me.umov.business.application.model.BaseModel.getId()",0,1,0,0,0
"me.umov.business.application.model.IntegrationModel.getAlternativeIdentifier()",0,1,0,0,0
"me.umov.business.application.model.IntegrationModel.hasAlternativeIdentifier()",0,1,0,0,0
"me.umov.business.application.model.IntegrationModel.hasId()",0,1,0,0,0
"me.umov.business.application.model.dto.ICustomFields.getCustomFields()",0,1,0,0,0
"me.umov.business.application.model.dto.IOperationDTO.getId()",0,1,0,0,0
"me.umov.business.application.model.dto.IOperationDTO.getOperation()",0,1,0,0,0
"me.umov.business.domain.recurrence.IDateInterval.getDateInterval()",0,1,0,0,0
"me.umov.business.domain.recurrence.RecurrenceConfigurationInterface.getRepeatMode()",0,1,0,0,0
"me.umov.business.domain.recurrence.Recurrent.getRecurrenceConfiguration()",0,1,0,0,0
"me.umov.business.infrastructure.configuration.SpringConfiguration.configure()",0,1,0,0,0
"me.umov.business.utils.specification.rule.BusinessRule.processRule()",0,1,0,0,0
"me.umov.business.utils.specification.rule.BusinessRule.shouldProcessRule()",0,1,0,0,0
