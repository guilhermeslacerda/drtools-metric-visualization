"method","loc","cyclo","calls","nbd","param"
"me.umov.scheduler.domain.Itinerary.getWeekDays()",19,8,14,3,0
"me.umov.scheduler.domain.ItinerarySchedule.identifyCurrentCycleInterval(LocalDate startCycleDate)",24,6,25,1,1
"me.umov.scheduler.domain.ItinerarySchedule.getRecurrenceConfiguration()",15,5,8,1,0
"me.umov.scheduler.domain.recurrence.BaseRecurrenceGeneratorStrategy.hasReachedEndCondition(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, Long recurrenceCount, LocalDate endOfCycle)",13,4,9,2,4
"me.umov.scheduler.domain.DateInterval.setTime(LocalTime initialTime, LocalTime finalTime)",15,4,5,1,2
"me.umov.scheduler.domain.ItinerarySchedule.hasReachedEndCondition()",11,4,6,1,0
"me.umov.scheduler.infrastructure.serialization.LocalDateSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.scheduler.infrastructure.serialization.LocalDateTimeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.scheduler.infrastructure.serialization.LocalTimeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.scheduler.domain.Itinerary.createTasksForIntervals(List<DateInterval> intervals)",23,3,19,3,1
"me.umov.scheduler.domain.recurrence.BaseRecurrenceGeneratorStrategy.generate(Recurrent recurrent)",24,3,18,2,1
"me.umov.scheduler.domain.chain.Chain.processChain(TModel model)",9,3,3,2,1
"me.umov.scheduler.domain.recurrence.WeeklyRecurrenceGeneratorStrategy.shouldSkipDay(DayOfWeek dayOfWeek, RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> recurrenceDateIntervals)",14,3,6,1,4
"me.umov.scheduler.domain.specification.itinerary.ShouldHaveAtLeastOneActiveAgentWithAgentRelationship.isSatisfiedBy(ItinerarySchedule candidate)",13,3,13,1,1
"me.umov.scheduler.domain.specification.itinerary.ShouldHaveAtLeastOneActiveTeamWithTeamRelationship.isSatisfiedBy(ItinerarySchedule candidate)",13,3,13,1,1
"me.umov.scheduler.domain.ItinerarySchedule.applyEndDateWhenNecessary(DateInterval interval)",10,3,5,1,1
"me.umov.scheduler.domain.specification.AndSpecification.isSatisfiedBy(T candidate)",9,3,8,1,1
"me.umov.scheduler.domain.specification.OrSpecification.isSatisfiedBy(T candidate)",9,3,8,1,1
"me.umov.scheduler.domain.workcycle.request.RequestFactory.get(ItinerarySchedule workCycle)",9,3,6,1,1
"me.umov.scheduler.domain.Itinerary.getCurrentOcurrencesCount()",8,2,10,3,0
"me.umov.scheduler.domain.Itinerary.setActivityOriginList(List<ItineraryActivityOrigin> activityOriginList)",7,2,4,3,1
"me.umov.scheduler.domain.Itinerary.getActivityOriginList()",5,2,5,3,0
"me.umov.scheduler.domain.taskschedule.TaskCreator.createTasksDTOs(List<ItineraryTask> tasksForCreation)",35,2,53,2,1
"me.umov.scheduler.application.ScheduleController.runCycle(@RequestBody ScheduledItem scheduledItem)",20,2,17,2,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreator.bindWorkCycleCreationResponse(List<ItineraryWorkCycle> cycles, WorkCycleCreateResponse response)",16,2,11,2,2
"me.umov.scheduler.domain.specification.BaseValidator.validate(T t)",15,2,22,2,1
"me.umov.scheduler.domain.taskschedule.TaskCreator.bindBusinessResults(List<ItineraryTask> tasks, BatchOperationResult businessApiReturn)",9,2,10,2,2
"me.umov.scheduler.domain.workcycle.WorkCycleCreator.verifyCycles(ItineraryWorkCycle cycle, CreatedWorkCycle createdCycle)",6,2,10,2,2
"me.umov.scheduler.domain.taskschedule.TaskCreator.convertActivityOriginList(List<ItineraryActivityOrigin> itineraryActivityOriginList, List<TaskActivityOrigin> taskActivityOriginList)",4,2,2,2,2
"me.umov.scheduler.domain.workcycle.request.ServiceLocalRequest.buildCreateWorkCycleRequests(Itinerary workCycle, List<ItineraryWorkCycle> itineraryWorkCycles)",19,2,19,1,2
"me.umov.scheduler.application.ScheduleConsumer.processScheduleItem(@Payload Message<String> itineraryIdMessage)",18,2,15,1,1
"me.umov.scheduler.infrastructure.serialization.HibernateProxyTypeAdapter.write(JsonWriter out, HibernateProxy value)",15,2,7,1,2
"me.umov.scheduler.domain.workcycle.request.ActivityRequest.buildCreateWorkCycleRequests(Itinerary singleItinerary)",13,2,9,1,1
"me.umov.scheduler.domain.workcycle.request.ActivityRequest.createActivitiesCycles(Itinerary singleItinerary)",12,2,5,1,1
"me.umov.scheduler.domain.specification.itinerary.ShouldHaveAtLeastOneActiveServiceLocal.isSatisfiedBy(ItinerarySchedule candidate)",11,2,9,1,1
"me.umov.scheduler.domain.recurrence.DailyRecurrenceGeneratorStrategy.shouldSkipDay(DayOfWeek dayOfWeek, RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> recurrenceDateIntervals)",9,2,2,1,4
"me.umov.scheduler.domain.specification.itinerary.ShouldBeOnNextProcessDate.isSatisfiedBy(ItinerarySchedule candidate)",7,2,5,1,1
"me.umov.scheduler.domain.ItinerarySchedule.updateProcessingTimestamps()",6,2,5,1,0
"me.umov.scheduler.domain.specification.itinerary.ShouldBeActive.isSatisfiedBy(ItinerarySchedule candidate)",6,2,4,1,1
"me.umov.scheduler.domain.DateInterval.from(LocalDateTime initialDatetime, Duration duration)",5,2,1,1,2
"me.umov.scheduler.domain.ItinerarySchedule.isValid()",5,2,1,1,0
"me.umov.scheduler.domain.DateInterval.getDuration()",4,2,2,1,0
"me.umov.scheduler.domain.specification.SpecificationResult.notSatisfied(List<String>... messages)",7,2,6,0,1
"me.umov.scheduler.infrastructure.serialization.ScheduleTypeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,2,2,0,3
"me.umov.scheduler.infrastructure.serialization.TeamExecutionSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,2,2,0,3
"me.umov.scheduler.infrastructure.serialization.LocalDateSerializationAdapter.serialize(LocalDate src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.scheduler.infrastructure.serialization.LocalDateTimeSerializationAdapter.serialize(LocalDateTime src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.scheduler.infrastructure.serialization.LocalTimeSerializationAdapter.serialize(LocalTime src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.scheduler.infrastructure.serialization.ScheduleTypeSerializationAdapter.serialize(ScheduleType src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.scheduler.infrastructure.serialization.TeamExecutionSerializationAdapter.serialize(TeamExecution src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.scheduler.infrastructure.jpa.converter.ActivityCycleConverter.convertToDatabaseColumn(ActivityCycle attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.BooleanStatusConverter.convertToDatabaseColumn(BooleanStatus attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.ItineraryAgentRelationConverter.convertToDatabaseColumn(ItineraryAgentRelation attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.RecurrenceEndTypeConverter.convertToDatabaseColumn(RecurrenceEndType attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.RecurrenceRepeatModeConverter.convertToDatabaseColumn(RecurrenceRepeatMode attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.ScheduleTypeConverter.convertToDatabaseColumn(ScheduleType attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.TaskScheduleActivityOriginConverter.convertToDatabaseColumn(ItineraryActivityOrigin attribute)",5,2,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.TeamExecutionConverter.convertToDatabaseColumn(TeamExecution attribute)",5,2,1,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.setType()",5,2,0,0,0
"me.umov.scheduler.domain.ItineraryTeam.getTeamId()",2,2,1,0,0
"me.umov.scheduler.infrastructure.configuration.RestConfiguration.getConnectTimeout()",2,2,0,0,0
"me.umov.scheduler.infrastructure.configuration.RestConfiguration.getReadTimeout()",2,2,0,0,0
"me.umov.scheduler.domain.Itinerary.getRecurrenceConfiguration()",5,1,5,3,0
"me.umov.scheduler.domain.Itinerary.getRecurrenceDateInterval()",3,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getPendingItineraryTasks()",2,1,5,3,0
"me.umov.scheduler.domain.Itinerary.setActive(BooleanStatus active)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnFriday(BooleanStatus activeOnFriday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnMonday(BooleanStatus activeOnMonday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnSaturday(BooleanStatus activeOnSaturday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnSunday(BooleanStatus activeOnSunday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnThursday(BooleanStatus activeOnThursday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnTuesday(BooleanStatus activeOnTuesday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActiveOnWednesday(BooleanStatus activeOnWednesday)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setActivityOrigin(ItineraryActivityOrigin activityOrigin)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setAgentRelation(ItineraryAgentRelation agentRelation)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setClientId(Long clientId)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setCurrentCycleInterval(DateInterval currentCycleInterval)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setDescription(String description)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setFinalDate(LocalDate finalDate)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setId(Long id)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setInitialDate(LocalDate initialDate)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryActivities(List<ItineraryActivity> itineraryActivities)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryAgents(List<ItineraryAgent> itineraryAgents)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItinerarySchedule(ItinerarySchedule itinerarySchedule)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryServiceLocals(List<ItineraryServiceLocal> itineraryServiceLocals)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryTasks(List<ItineraryTask> itineraryTasks)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryTeams(List<ItineraryTeam> itineraryTeams)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setItineraryWorkCycles(List<ItineraryWorkCycle> itineraryWorkCycles)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setLastProcessDatetime(LocalDateTime lastProcessDatetime)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setLastTaskDate(LocalDate lastTaskDate)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setMonthDay(Long monthDay)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setNextProcessDatetime(LocalDateTime nextProcessDatetime)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setOcurrencesLimit(Long ocurrencesLimit)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setRecurrenceEndType(RecurrenceEndType recurrenceEndType)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setScheduleType(ScheduleType scheduleType)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setTaskTypeId(Long taskTypeId)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setTeamExecution(TeamExecution teamExecution)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.setWeeklyRepetition(Long weeklyRepetition)",2,1,0,3,1
"me.umov.scheduler.domain.Itinerary.getActive()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnFriday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnMonday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnSaturday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnSunday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnThursday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnTuesday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActiveOnWednesday()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getActivityOrigin()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getAgentRelation()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getAlternativeIdentifier()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getClientId()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getCurrentCycleInterval()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getDescription()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getFinalDate()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getId()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getInitialDate()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryActivities()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryAgents()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItinerarySchedule()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryServiceLocals()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryTasks()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryTeams()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getItineraryWorkCycles()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getLastProcessDatetime()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getLastTaskDate()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getMonthDay()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getNextProcessDatetime()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getOcurrencesLimit()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getRecurrenceEndType()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getRepeatMode()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getScheduleType()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getTaskTypeId()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getTeamExecution()",2,1,0,3,0
"me.umov.scheduler.domain.Itinerary.getWeeklyRepetition()",2,1,0,3,0
"me.umov.scheduler.domain.taskschedule.TaskCreator.createTasks(ItinerarySchedule taskSchedule)",17,1,10,2,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreator.createWorkCycles(ItinerarySchedule workCycle)",5,1,7,2,1
"me.umov.scheduler.domain.recurrence.BaseRecurrenceGeneratorStrategy.hasReachedDateEndCondition(RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate)",2,1,3,2,2
"me.umov.scheduler.domain.recurrence.BaseRecurrenceGeneratorStrategy.hasReachedOcurrencesEndCondition(RecurrenceConfiguration recurrenceConfiguration, Long recurrenceCount)",2,1,2,2,2
"me.umov.scheduler.domain.recurrence.BaseRecurrenceGeneratorStrategy.hasReachedEndOfCycle(LocalDate processingDate, LocalDate endOfCycle)",2,1,1,2,2
"me.umov.scheduler.domain.specification.BaseValidator.getSpecifications()",0,1,0,2,0
"me.umov.scheduler.domain.workcycle.request.ServiceLocalRequest.createServiceLocalsCycles(Itinerary workCycle)",10,1,18,1,1
"me.umov.scheduler.domain.workcycle.request.ServiceLocalRequest.findNotCompatibleServiceLocals(Itinerary workCycle, List<ItineraryWorkCycle> serviceLocalsCycles)",10,1,15,1,2
"me.umov.scheduler.domain.workcycle.request.ServiceLocalRequest.build(Itinerary singleItinerary)",8,1,8,1,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleCronDisableStep.process(ItinerarySchedule obj)",8,1,6,1,1
"me.umov.scheduler.infrastructure.authorization.JwtService.genarateTokenJwt(Long clientId, String token)",7,1,4,1,2
"me.umov.scheduler.domain.workcycle.request.ActivityRequest.build(Itinerary singleItinerary)",6,1,5,1,1
"me.umov.scheduler.domain.recurrence.WeeklyRecurrenceGeneratorStrategy.hasDateIntervalForDayOfWeekBeforePause(List<DateInterval> intervals, DayOfWeek dayOfWeek, LocalDate afterDate)",5,1,8,1,3
"me.umov.scheduler.infrastructure.authorization.JwtService.buildClaims(Long clientId, String token)",3,1,2,1,2
"me.umov.scheduler.domain.taskschedule.TaskScheduleCronDisableStep.shouldProcess(ItinerarySchedule obj)",3,1,1,1,1
"me.umov.scheduler.domain.DateInterval.DateInterval(LocalDateTime initialDatetime, LocalDateTime finalDatetime)",3,1,0,1,2
"me.umov.scheduler.domain.specification.AndSpecification.AndSpecification(ISpecification<T> left, ISpecification<T> right)",3,1,0,1,2
"me.umov.scheduler.domain.specification.OrSpecification.OrSpecification(ISpecification<T> left, ISpecification<T> right)",3,1,0,1,2
"me.umov.scheduler.infrastructure.serialization.HibernateProxyTypeAdapter.read(JsonReader in)",3,1,0,1,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleCronDisableStep.next()",3,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.firstItinerary()",2,1,3,1,0
"me.umov.scheduler.domain.DateInterval.identifyFinalDate(Duration duration)",2,1,1,1,1
"me.umov.scheduler.infrastructure.authorization.JwtService.getToken(Long clientId)",2,1,1,1,1
"me.umov.scheduler.domain.DateInterval.getFinalDate()",2,1,1,1,0
"me.umov.scheduler.domain.DateInterval.getInitialDate()",2,1,1,1,0
"me.umov.scheduler.domain.DateInterval.from(LocalDateTime initialDatetime, LocalDateTime finalDatetime)",2,1,0,1,2
"me.umov.scheduler.domain.DateInterval.from(LocalDateTime initialDatetime)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setActive(BooleanStatus active)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setClientId(Long clientId)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setCronId(String cronId)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setDescription(String description)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setFinalDate(LocalDate finalDate)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setId(Long id)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setInitialDate(LocalDate initialDate)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setItineraries(List<Itinerary> itineraries)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setMonthDay(Long monthDay)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setNextProcessDatetime(LocalDate nextProcessDatetime)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setOcurrencesLimit(Long ocurrencesLimit)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setRecurrenceEndType(RecurrenceEndType recurrenceEndType)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setType(ScheduleType type)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setValidationResult(SpecificationResult validationResult)",2,1,0,1,1
"me.umov.scheduler.domain.ItinerarySchedule.setWeeklyRepetition(Long weeklyRepetition)",2,1,0,1,1
"me.umov.scheduler.domain.workcycle.request.ActivityRequest.ActivityRequest(ItinerarySchedule workCycle)",2,1,0,1,1
"me.umov.scheduler.domain.workcycle.request.ServiceLocalRequest.ServiceLocalRequest(ItinerarySchedule workCycle)",2,1,0,1,1
"me.umov.scheduler.infrastructure.authorization.JwtService.setJwtBuilder(Builder jwtBuilder)",2,1,0,1,1
"me.umov.scheduler.infrastructure.authorization.JwtService.setSecret(String secret)",2,1,0,1,1
"me.umov.scheduler.infrastructure.serialization.HibernateProxyTypeAdapter.HibernateProxyTypeAdapter(Gson context)",2,1,0,1,1
"me.umov.scheduler.domain.DateInterval.getFinalDatetime()",2,1,0,1,0
"me.umov.scheduler.domain.DateInterval.getInitialDatetime()",2,1,0,1,0
"me.umov.scheduler.domain.DateInterval.hasFinal()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getActive()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getAlternativeIdentifier()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getClientId()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getCronId()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getCurrentCycleInterval()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getDescription()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getFinalDate()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getId()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getInitialDate()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getItineraries()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getLastProcessDatetime()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getMonthDay()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getNextProcessDatetime()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getOcurrencesLimit()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getRecurrenceEndType()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getRepeatMode()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getType()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getValidationResult()",2,1,0,1,0
"me.umov.scheduler.domain.ItinerarySchedule.getWeeklyRepetition()",2,1,0,1,0
"me.umov.scheduler.infrastructure.configuration.GsonConfiguration.configure()",16,1,6,0,0
"me.umov.scheduler.domain.specification.itinerary.TaskScheduleValidator.getSpecifications()",11,1,5,0,0
"me.umov.scheduler.infrastructure.configuration.GsonConfiguration.registerCustomAdapters(GsonBuilder gsonBuilder)",10,1,8,0,1
"me.umov.scheduler.domain.ItineraryTask.ItineraryTask(Itinerary itinerary, Long teamId, Long agentId, Long serviceLocalId, DateInterval interval)",10,1,3,0,5
"me.umov.scheduler.infrastructure.configuration.RestConfiguration.configure()",9,1,8,0,0
"me.umov.scheduler.domain.specification.itinerary.WorkCycleValidator.getSpecifications()",9,1,3,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.ItineraryWorkCycle(Long clientId, Itinerary itinerary, Long serviceLocalId, DateInterval interval, String log)",8,1,4,0,5
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.jmsListenerContainerFactory()",8,1,3,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.WorkCycleCreateRequest(Long serviceLocalId, List<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",8,1,1,0,5
"me.umov.scheduler.domain.ItineraryWorkCycle.ItineraryWorkCycle(Long clientId, Itinerary itinerary, Long serviceLocalId, Long activityId, DateInterval interval)",7,1,4,0,5
"me.umov.scheduler.infrastructure.business.BusinessRestService.setUrlBusiness(String urlBusiness)",7,1,0,0,1
"me.umov.scheduler.infrastructure.business.BusinessRestService.post(BusinessEndpoints endPoint, BusinessPayload<TPayload> payload, Class<TResponse> returnClass)",6,1,6,0,3
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.configureAmazonSQS()",6,1,5,0,0
"me.umov.scheduler.domain.chain.ScheduleChainProcessorImpl.processChain(ItinerarySchedule schedule)",6,1,4,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.WorkCycleCreateRequest(ArrayList<Long> activityIds, LocalDate initialDate, LocalDate finalDate, Long itineraryScheduleId)",6,1,0,0,4
"me.umov.scheduler.domain.recurrence.MonthlyRecurrenceGeneratorStrategy.shouldSkipDay(DayOfWeek dayOfWeek, RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> recurrenceDateIntervals)",5,1,4,0,4
"me.umov.scheduler.infrastructure.business.BusinessRestService.createHttpHeaders(Long clientId)",5,1,3,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreationStep.process(ItinerarySchedule workCycle)",5,1,2,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.RecurrenceConfiguration(RecurrenceRepeatMode repeatMode, RecurrenceRepeatConfiguration repeatEvery, RecurrenceEndsConfiguration ends, List<DayOfWeek> weekdays)",5,1,0,0,4
"me.umov.scheduler.domain.recurrence.RecurrenceEndsConfiguration.RecurrenceEndsConfiguration(RecurrenceEndType type, LocalDate date, Long ocurrences)",5,1,0,0,3
"me.umov.scheduler.infrastructure.configuration.JwtConfiguration.configure()",4,1,5,0,0
"me.umov.scheduler.domain.workcycle.request.RequestBuilder.build()",4,1,4,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceGenerator.generateRecurrence(Recurrent recurrent)",4,1,3,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleValidationStep.process(ItinerarySchedule obj)",4,1,2,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleValidationStep.process(ItinerarySchedule obj)",4,1,2,0,1
"me.umov.scheduler.domain.OperationResult.OperationResult(Long id, Boolean success, List<String> messages)",4,1,0,0,3
"me.umov.scheduler.domain.workcycle.CreatedWorkCycle.CreatedWorkCycle(Long serviceLocalId, Long activityId, Long workCycleId)",4,1,0,0,3
"me.umov.scheduler.domain.recurrence.RecurrenceRepeatConfiguration.RecurrenceRepeatConfiguration(Long value, RecurrenceTimeUnit unit)",4,1,0,0,2
"me.umov.scheduler.domain.workcycle.request.RequestDTO.RequestDTO(List<ItineraryWorkCycle> cycles, List<WorkCycleCreateRequest> workCycleRequests)",4,1,0,0,2
"me.umov.scheduler.infrastructure.business.BusinessPayload.BusinessPayload(Long clientId, T payload)",4,1,0,0,2
"me.umov.scheduler.domain.specification.SpecificationResult.notSatisfied(String message)",3,1,5,0,1
"me.umov.scheduler.anticorruption.ItineraryScheduleConverterImpl.convertFrom(ScheduledItem scheduledItem)",3,1,4,0,1
"me.umov.scheduler.application.ScheduledItem.toString()",3,1,3,0,0
"me.umov.scheduler.infrastructure.serialization.BooleanStatusSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.scheduler.infrastructure.serialization.TaskActivityOriginSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",3,1,2,0,3
"me.umov.scheduler.infrastructure.business.BusinessRestService.createWorkCycles(Long clientId, List<WorkCycleCreateRequest> request)",3,1,2,0,2
"me.umov.scheduler.infrastructure.business.BusinessRestService.disableCron(Long clientId, Identifier identifier)",3,1,2,0,2
"me.umov.scheduler.infrastructure.business.BusinessRestService.saveTasksInBatch(Long clientId, List<Task> tasks)",3,1,2,0,2
"me.umov.scheduler.domain.taskschedule.TaskScheduleCurrentCycleIdentificationStep.process(ItinerarySchedule schedule)",3,1,2,0,1
"me.umov.scheduler.infrastructure.serialization.BooleanStatusSerializationAdapter.serialize(BooleanStatus src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.scheduler.infrastructure.serialization.TaskActivityOriginSerializationAdapter.serialize(TaskActivityOrigin src, Type typeOfSrc, JsonSerializationContext context)",3,1,1,0,3
"me.umov.scheduler.domain.BatchOperationResult.BatchOperationResult(int code, String message)",3,1,1,0,2
"me.umov.scheduler.domain.exception.SchedulerException.SchedulerException(String message)",3,1,1,0,1
"me.umov.scheduler.domain.taskschedule.TaskCreationStep.process(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.domain.taskschedule.TaskCreationStep.shouldProcess(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleChain.processChain(ItinerarySchedule model)",3,1,1,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleStateUpdateStep.process(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleStateUpdateStep.shouldProcess(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleChain.processChain(ItinerarySchedule model)",3,1,1,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreationStep.shouldProcess(ItinerarySchedule workCycle)",3,1,1,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleStateUpdateStep.process(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleStateUpdateStep.shouldProcess(ItinerarySchedule obj)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.ActivityCycleConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.BooleanStatusConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.ItineraryAgentRelationConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.RecurrenceEndTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.RecurrenceRepeatModeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.ScheduleTypeConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.TaskScheduleActivityOriginConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.jpa.converter.TeamExecutionConverter.convertToEntityAttribute(String dbData)",3,1,1,0,1
"me.umov.scheduler.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipField(FieldAttributes field)",3,1,1,0,1
"me.umov.scheduler.application.VersionController.index()",3,1,1,0,0
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.init()",3,1,1,0,0
"me.umov.scheduler.application.ScheduledItem.ScheduledItem(Long id, ScheduleType type)",3,1,0,0,2
"me.umov.scheduler.domain.BatchOperationResult.BatchOperationResult(int code, List<String> message)",3,1,0,0,2
"me.umov.scheduler.domain.ItineraryTeam.ItineraryTeam(Long id, Long teamId)",3,1,0,0,2
"me.umov.scheduler.domain.ServiceLocalActivity.ServiceLocalActivity(Long activityId, Long workCycleScheduleId)",3,1,0,0,2
"me.umov.scheduler.domain.specification.SpecificationResult.SpecificationResult(Boolean satisfied, List<String> messages)",3,1,0,0,2
"me.umov.scheduler.domain.ItineraryTask.markAsFailureProcessed(String log)",3,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.markAsSuccessfulProcessed(Long taskId)",3,1,0,0,1
"me.umov.scheduler.domain.TaskActivity.TaskActivity(Long activityId)",3,1,0,0,1
"me.umov.scheduler.domain.exception.SchedulerException.SchedulerException(List<String> messages)",3,1,0,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleCurrentCycleIdentificationStep.shouldProcess(ItinerarySchedule obj)",3,1,0,0,1
"me.umov.scheduler.domain.taskschedule.TaskScheduleValidationStep.shouldProcess(ItinerarySchedule obj)",3,1,0,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleValidationStep.shouldProcess(ItinerarySchedule obj)",3,1,0,0,1
"me.umov.scheduler.domain.workcycle.request.RequestBuilder.RequestBuilder(ItinerarySchedule workCycle)",3,1,0,0,1
"me.umov.scheduler.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipClass(Class<?> clazz)",3,1,0,0,1
"me.umov.scheduler.domain.taskschedule.TaskCreationStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.taskschedule.TaskScheduleCurrentCycleIdentificationStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.taskschedule.TaskScheduleStateUpdateStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.taskschedule.TaskScheduleValidationStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreationStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleStateUpdateStep.next()",3,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleValidationStep.next()",3,1,0,0,0
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.defaultJmsTemplate()",3,1,0,0,0
"me.umov.scheduler.domain.chain.ScheduleChainProcessorImpl.discoverChain(ItinerarySchedule itinerarySchedule)",2,1,7,0,1
"me.umov.scheduler.infrastructure.business.BusinessRestService.getBusinessEndpointUrl(BusinessEndpoints endPoint)",2,1,2,0,1
"me.umov.scheduler.domain.systemParameters.SystemParameters.isActivityCycle()",2,1,2,0,0
"me.umov.scheduler.domain.systemParameters.SystemParameters.isServiceLocalCycle()",2,1,2,0,0
"me.umov.scheduler.domain.exception.ResourceNotFoundException.ResourceNotFoundException(String entityType, Object identifier)",2,1,1,0,2
"me.umov.scheduler.infrastructure.business.BusinessRestService.post(BusinessEndpoints endPoint, BusinessPayload<T> payload)",2,1,1,0,2
"me.umov.scheduler.SchedulerApplication.main(String[] args)",2,1,1,0,1
"me.umov.scheduler.domain.exception.SchedulerException.addMessage(String message)",2,1,1,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.getServiceLocalId()",2,1,1,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getServiceLocalId()",2,1,1,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.getGenerator()",2,1,1,0,0
"me.umov.scheduler.domain.systemParameters.SystemParameters.getUseFrequencyType()",2,1,1,0,0
"me.umov.scheduler.domain.workcycle.request.RequestBuilder.getItinerary()",2,1,1,0,0
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.createSQSConnectionFactory()",2,1,1,0,0
"me.umov.scheduler.infrastructure.business.BusinessPayload.businessPayloadFrom(Long clientId, T payload)",2,1,0,0,2
"me.umov.scheduler.domain.Activity.Activity(Long activityId)",2,1,0,0,1
"me.umov.scheduler.domain.Agent.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.scheduler.domain.Agent.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.Agent.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.BatchOperationResult.BatchOperationResult(List<OperationResult> processResult)",2,1,0,0,1
"me.umov.scheduler.domain.BatchOperationResult.error(List<String> messages)",2,1,0,0,1
"me.umov.scheduler.domain.BatchOperationResult.error(String message)",2,1,0,0,1
"me.umov.scheduler.domain.BatchOperationResult.success(String message)",2,1,0,0,1
"me.umov.scheduler.domain.Identifier.Identifier(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.Identifier.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryActivity.setActivityId(Long activityId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryActivity.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryActivity.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryAgent.ItineraryAgent(Agent agent)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.ItineraryServiceLocal(ServiceLocal serviceLocal)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setFinalHour(LocalTime finalHour)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setInitialHour(LocalTime initialHour)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setOrder(Long order)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryServiceLocal.setServiceLocal(ServiceLocal serviceLocal)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setAgentId(Long agentId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setDate(LocalDate date)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setInterval(DateInterval interval)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setLog(String log)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setTaskId(Long taskId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTask.setTeamId(Long teamId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTeam.ItineraryTeam(Team team)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTeam.setClientId(final Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTeam.setId(final Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTeam.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryTeam.setTeam(final Team team)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setActivityId(Long activityId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setFinalDate(LocalDate finalDate)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setInitialDate(LocalDate initialDate)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setItinerary(Itinerary itinerary)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setLog(String log)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.scheduler.domain.ItineraryWorkCycle.setWorkCycleId(Long workCycleId)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocal.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocal.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocal.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocal.setServiceLocalActivities(List<ServiceLocalActivity> serviceLocalActivities)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocalActivity.setActivityId(Long activityId)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocalActivity.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocalActivity.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocalActivity.setServiceLocal(ServiceLocal serviceLocal)",2,1,0,0,1
"me.umov.scheduler.domain.ServiceLocalActivity.setWorkCycleScheduleId(Long workCycleScheduleId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setActivityOrigin(TaskActivityOrigin activityOrigin)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setActivityOriginList(List<TaskActivityOrigin> activityOriginList)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setAgentId(Long agentId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setCreatedByModule(String createdByModule)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setFinalDate(LocalDate finalDate)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setFinalHour(LocalTime finalHour)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setInitialDate(LocalDate initialDate)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setInitialHour(LocalTime initialHour)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setServiceLocalId(Long serviceLocalId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setSituationId(Long situationId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setSkipAgentJourneyValidation(BooleanStatus skipAgentJourneyValidation)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setTaskActivities(List<TaskActivity> taskActivities)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setTaskTypeId(Long taskTypeId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setTeamExecutionId(TeamExecution teamExecutionId)",2,1,0,0,1
"me.umov.scheduler.domain.Task.setTeamId(Long teamId)",2,1,0,0,1
"me.umov.scheduler.domain.Team.Team(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.Team.setActive(BooleanStatus active)",2,1,0,0,1
"me.umov.scheduler.domain.Team.setAlternativeIdentifier(String alternativeIdentifier)",2,1,0,0,1
"me.umov.scheduler.domain.Team.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.Team.setDescription(String description)",2,1,0,0,1
"me.umov.scheduler.domain.Team.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.chain.ScheduleChainProcessorImpl.setChains(List<Chain<ItinerarySchedule,?>> chains)",2,1,0,0,1
"me.umov.scheduler.domain.exception.ResourceNotFoundException.ResourceNotFoundException(String message)",2,1,0,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.setEnds(RecurrenceEndsConfiguration ends)",2,1,0,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.setRepeatEvery(RecurrenceRepeatConfiguration repeatEvery)",2,1,0,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.setRepeatMode(RecurrenceRepeatMode repeatMode)",2,1,0,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.setWeekdays(List<DayOfWeek> weekdays)",2,1,0,0,1
"me.umov.scheduler.domain.specification.CompositeSpecification.and(ISpecification<T> other)",2,1,0,0,1
"me.umov.scheduler.domain.specification.CompositeSpecification.or(ISpecification<T> other)",2,1,0,0,1
"me.umov.scheduler.domain.systemParameters.SystemParameters.setClientId(Long clientId)",2,1,0,0,1
"me.umov.scheduler.domain.systemParameters.SystemParameters.setId(Long id)",2,1,0,0,1
"me.umov.scheduler.domain.systemParameters.SystemParameters.setUseFrequencyType(Character useFrequencyType)",2,1,0,0,1
"me.umov.scheduler.domain.workcycle.WorkCycleCreateResponse.WorkCycleCreateResponse(List<CreatedWorkCycle> createdWorkCycles)",2,1,0,0,1
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.setConnectionFactory(SQSConnectionFactory connectionFactory)",2,1,0,0,1
"me.umov.scheduler.infrastructure.configuration.AmazonSQSConfiguration.setRegionName(String region)",2,1,0,0,1
"me.umov.scheduler.application.ScheduledItem.getId()",2,1,0,0,0
"me.umov.scheduler.application.ScheduledItem.getType()",2,1,0,0,0
"me.umov.scheduler.application.VersionController.getVersion()",2,1,0,0,0
"me.umov.scheduler.domain.Activity.getId()",2,1,0,0,0
"me.umov.scheduler.domain.Agent.getActive()",2,1,0,0,0
"me.umov.scheduler.domain.Agent.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.Agent.getId()",2,1,0,0,0
"me.umov.scheduler.domain.BatchOperationResult.getCode()",2,1,0,0,0
"me.umov.scheduler.domain.BatchOperationResult.getId()",2,1,0,0,0
"me.umov.scheduler.domain.BatchOperationResult.getMessages()",2,1,0,0,0
"me.umov.scheduler.domain.BatchOperationResult.getProcessResult()",2,1,0,0,0
"me.umov.scheduler.domain.Identifier.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryActivity.getActivityId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryActivity.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryActivity.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryAgent.ItineraryAgent()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryAgent.getAgent()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryAgent.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryAgent.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.ItineraryServiceLocal()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getFinalHour()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getInitialHour()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getOrder()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryServiceLocal.getServiceLocal()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.ItineraryTask()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getAgentId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getDate()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getInterval()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getItinerary()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getLog()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getServiceLocalId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getTaskId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.getTeamId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTask.isProcessed()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTeam.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTeam.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTeam.getItinerary()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryTeam.getTeam()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.ItineraryWorkCycle()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getActivityId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getFinalDate()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getInitialDate()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getItinerary()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getLog()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getServiceLocalId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.getWorkCycleId()",2,1,0,0,0
"me.umov.scheduler.domain.ItineraryWorkCycle.hasServiceLocal()",2,1,0,0,0
"me.umov.scheduler.domain.OperationResult.OperationResult()",2,1,0,0,0
"me.umov.scheduler.domain.OperationResult.getId()",2,1,0,0,0
"me.umov.scheduler.domain.OperationResult.getMessages()",2,1,0,0,0
"me.umov.scheduler.domain.OperationResult.getSuccess()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocal.getActive()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocal.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocal.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocal.getServiceLocalActivities()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.ServiceLocalActivity()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getActivityId()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getId()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getServiceLocal()",2,1,0,0,0
"me.umov.scheduler.domain.ServiceLocalActivity.getWorkCycleScheduleId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getActive()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getActivityOrigin()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getActivityOriginList()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getAgentId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getCreatedByModule()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getFinalDate()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getFinalHour()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getInitialDate()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getInitialHour()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getServiceLocalId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getSituationId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getSkipAgentJourneyValidation()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getTaskActivities()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getTaskTypeId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getTeamExecutionId()",2,1,0,0,0
"me.umov.scheduler.domain.Task.getTeamId()",2,1,0,0,0
"me.umov.scheduler.domain.TaskActivity.getActivity()",2,1,0,0,0
"me.umov.scheduler.domain.Team.Team()",2,1,0,0,0
"me.umov.scheduler.domain.Team.getActive()",2,1,0,0,0
"me.umov.scheduler.domain.Team.getAlternativeIdentifier()",2,1,0,0,0
"me.umov.scheduler.domain.Team.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.Team.getDescription()",2,1,0,0,0
"me.umov.scheduler.domain.Team.getId()",2,1,0,0,0
"me.umov.scheduler.domain.exception.SchedulerException.getMessages()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.RecurrenceConfiguration()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.getEnds()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.getRepeatEvery()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.getRepeatMode()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceConfiguration.getWeekdays()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceEndsConfiguration.getDate()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceEndsConfiguration.getOcurrences()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceEndsConfiguration.getType()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceRepeatConfiguration.getUnit()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceRepeatConfiguration.getValue()",2,1,0,0,0
"me.umov.scheduler.domain.specification.SpecificationResult.getMessages()",2,1,0,0,0
"me.umov.scheduler.domain.specification.SpecificationResult.isSatisfied()",2,1,0,0,0
"me.umov.scheduler.domain.specification.SpecificationResult.satisfied()",2,1,0,0,0
"me.umov.scheduler.domain.systemParameters.SystemParameters.getClientId()",2,1,0,0,0
"me.umov.scheduler.domain.systemParameters.SystemParameters.getId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.CreatedWorkCycle.getActivityId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.CreatedWorkCycle.getServiceLocalId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.CreatedWorkCycle.getWorkCycleId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getActivityIds()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getFinalDate()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getInitialDate()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getItineraryScheduleId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getServiceLocalId()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateRequest.getType()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.WorkCycleCreateResponse.getCreatedWorkCycles()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.request.RequestDTO.getCycles()",2,1,0,0,0
"me.umov.scheduler.domain.workcycle.request.RequestDTO.getWorkCycleRequests()",2,1,0,0,0
"me.umov.scheduler.infrastructure.business.BusinessPayload.getClientId()",2,1,0,0,0
"me.umov.scheduler.infrastructure.business.BusinessPayload.getPayload()",2,1,0,0,0
"me.umov.scheduler.domain.recurrence.RecurrenceGeneratorStrategy.shouldSkipDay(DayOfWeek dayOfWeek, RecurrenceConfiguration recurrenceConfiguration, LocalDate processingDate, List<DateInterval> recurrenceDateIntervals)",1,1,0,0,4
"me.umov.scheduler.domain.repository.BaseRepository.findByClientIdAndId(Long clientId, Long id)",1,1,0,0,2
"me.umov.scheduler.domain.ItineraryTeam.ItineraryTeam()",1,1,0,0,0
"me.umov.scheduler.domain.BatchTaskSaver.saveTasksInBatch(Long clientId, List<Task> tasks)",0,1,0,0,2
"me.umov.scheduler.domain.CronDisabler.disableCron(Long clientId, Identifier idDTO)",0,1,0,0,2
"me.umov.scheduler.domain.workcycle.WorkCycleManager.createWorkCycles(Long clientId, List<WorkCycleCreateRequest> request)",0,1,0,0,2
"me.umov.scheduler.application.ItineraryScheduleConverter.convertFrom(ScheduledItem scheduledItem)",0,1,0,0,1
"me.umov.scheduler.domain.chain.ChainStep.process(T obj)",0,1,0,0,1
"me.umov.scheduler.domain.chain.ChainStep.shouldProcess(T obj)",0,1,0,0,1
"me.umov.scheduler.domain.chain.ScheduleChainProcessor.processChain(ItinerarySchedule schedule)",0,1,0,0,1
"me.umov.scheduler.domain.recurrence.RecurrenceGeneratorStrategy.generate(Recurrent recurrent)",0,1,0,0,1
"me.umov.scheduler.domain.repository.BaseRepository.findByClientId(Long clientId)",0,1,0,0,1
"me.umov.scheduler.domain.repository.SystemParametersRepository.findByClientId(Long clientId)",0,1,0,0,1
"me.umov.scheduler.domain.specification.CompositeSpecification.isSatisfiedBy(T candidate)",0,1,0,0,1
"me.umov.scheduler.domain.specification.ISpecification.and(ISpecification<T> other)",0,1,0,0,1
"me.umov.scheduler.domain.specification.ISpecification.isSatisfiedBy(T candidate)",0,1,0,0,1
"me.umov.scheduler.domain.specification.ISpecification.or(ISpecification<T> other)",0,1,0,0,1
"me.umov.scheduler.domain.workcycle.request.RequestBuilder.build(Itinerary singleItinerary)",0,1,0,0,1
"me.umov.scheduler.domain.ClientModel.getClientId()",0,1,0,0,0
"me.umov.scheduler.domain.chain.ChainStep.next()",0,1,0,0,0
"me.umov.scheduler.domain.recurrence.Recurrent.getCurrentOcurrencesCount()",0,1,0,0,0
"me.umov.scheduler.domain.recurrence.Recurrent.getRecurrenceConfiguration()",0,1,0,0,0
"me.umov.scheduler.domain.recurrence.Recurrent.getRecurrenceDateInterval()",0,1,0,0,0
"me.umov.scheduler.infrastructure.configuration.SpringConfiguration.configure()",0,1,0,0,0
