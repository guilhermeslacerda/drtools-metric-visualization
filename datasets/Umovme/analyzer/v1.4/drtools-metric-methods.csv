"method","loc","cyclo","calls","nbd","param"
"me.umov.analyzer.domain.core.StepFactory.get(ProcessingState status)",15,7,7,0,1
"me.umov.analyzer.domain.actions.NotificationStrategy.defineRuleState(List<ProcessRuleMessage> processMessages)",10,5,8,2,1
"me.umov.analyzer.domain.events.DomainEventRegistry.publish(T event)",7,5,3,2,1
"me.umov.analyzer.domain.model.ActionRuleModel.getDelayTimeOutInMinute()",11,5,0,0,0
"me.umov.analyzer.domain.model.Recipients.splitEmails(List<Attribute> to)",16,4,7,3,1
"me.umov.analyzer.application.observers.LogGenerator.process(RuleLogEvent event)",11,4,4,3,1
"me.umov.analyzer.domain.model.Recipients.buildListMail(List<Attribute> mailList)",8,4,5,3,1
"me.umov.analyzer.domain.actionRule.ActionRuleGenerator.getWaitTimePutQueue(ActionRuleModel actionRuleModel, Rule rule)",10,4,9,2,2
"me.umov.analyzer.domain.model.Rule.getNexStateWhenError()",9,4,2,1,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilder.get(Action action)",12,4,10,0,1
"me.umov.analyzer.domain.actions.RuleStrategyFactory.get(RuleType type)",12,4,4,0,1
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapter.deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)",6,4,5,0,3
"me.umov.analyzer.domain.model.Recipients.getFirstTo()",4,3,3,3,0
"me.umov.analyzer.infrastructure.xstreamadapter.converters.EventSettingConverter.unmarshal(HierarchicalStreamReader stream, UnmarshallingContext context)",14,3,7,2,2
"me.umov.analyzer.application.observers.ReprocessTimeout.process(TaskDistributionCompleted event)",11,3,12,2,1
"me.umov.analyzer.application.observers.SynchronismTimeout.process(TaskDistributionCompleted distributionCompleted)",9,3,9,1,1
"me.umov.analyzer.infrastructure.services.ActionService.getActionParameter(List<Action> actions)",5,3,4,1,1
"me.umov.analyzer.application.controller.ReprocessController.verifyEntityDTO(EntityDTO entityDTO)",4,3,1,1,1
"me.umov.analyzer.domain.model.Rule.initTotalAttempts()",3,3,1,1,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilder.get(Rule rule)",8,3,7,0,1
"me.umov.analyzer.domain.model.SendMessage.getDelayTimeout()",5,3,2,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.mustTryAgain(ProcessRuleMessage processRuleMessage)",4,3,2,0,1
"me.umov.analyzer.domain.model.Recipients.addCc(Attribute cc)",5,2,2,3,1
"me.umov.analyzer.domain.model.Recipients.addTo(Attribute to)",5,2,2,3,1
"me.umov.analyzer.domain.model.Recipients.initCc()",3,2,0,3,0
"me.umov.analyzer.domain.model.Recipients.initTo()",3,2,0,3,0
"me.umov.analyzer.domain.actions.NotificationStrategy.execute(Rule rule)",17,2,14,2,1
"me.umov.analyzer.domain.actions.NotificationStrategy.processRuleState(Rule rule, List<ProcessRuleMessage> processMessages)",6,2,3,2,2
"me.umov.analyzer.domain.actions.NotificationStrategy.verifyActionType(Action ruleAction)",3,2,3,2,1
"me.umov.analyzer.infrastructure.services.EntitySQSService.getEntity(MessageAWS message, JpaRepository<Model,Long> repository)",13,2,8,1,2
"me.umov.analyzer.infrastructure.services.ActionService.retrieveNotificationActions(Rule rule)",9,2,8,1,1
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.execute(Rule rule)",9,2,5,1,1
"me.umov.analyzer.infrastructure.xstreamadapter.converters.IgnoreTaskTypeConverter.buildList(HierarchicalStreamReader reader)",8,2,5,1,1
"me.umov.analyzer.domain.model.Rule.setRuleType(RuleType actionType)",8,2,2,1,1
"me.umov.analyzer.application.controller.ReprocessController.getActionRule(EntityDTO entityDTO)",6,2,5,1,1
"me.umov.analyzer.domain.model.Rule.finishedReprocessingTime(Long reprocessingTimeout)",6,2,4,1,1
"me.umov.analyzer.domain.actionRule.ActionRuleAnalyzer.getState(ProcessRuleMessage processRuleMessage, ActionRuleModel actionRuleModel)",6,2,3,1,2
"me.umov.analyzer.infrastructure.xstreamadapter.converters.IgnoreTaskTypeConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)",6,2,3,1,2
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.sendMail(Rule rule)",6,2,3,1,1
"me.umov.analyzer.application.observers.SynchronismTimeout.getEvent(TaskDistributionCompleted distributionCompleted)",5,2,6,1,1
"me.umov.analyzer.domain.core.Process.nextState(Rule rule)",5,2,4,1,1
"me.umov.analyzer.domain.validators.BusinessValidator.validate(T entity)",4,2,2,1,1
"me.umov.analyzer.domain.model.Rule.addLog(String log)",4,2,1,1,1
"me.umov.analyzer.domain.actions.DistributionTaskStrategy.validate(Rule rule)",3,2,3,1,1
"me.umov.analyzer.infrastructure.aws.ProducerService.setDelay(SendMessage message)",3,2,3,1,1
"me.umov.analyzer.infrastructure.services.ActionService.hasAction(List<Action> actions)",3,2,1,1,1
"me.umov.analyzer.domain.model.Rule.setStatus(ProcessingState state)",2,2,1,1,1
"me.umov.analyzer.fixture.ProcessHasBeenExecutedFixture.get(Long clientId, Long entityId, String message)",7,2,5,0,3
"me.umov.analyzer.domain.validators.rules.TimeOnQueueRuleValidation.validate(Rule entity)",6,2,5,0,1
"me.umov.analyzer.domain.core.Error.run(Rule rule)",6,2,3,0,1
"me.umov.analyzer.domain.model.History.havePendingPhotos()",6,2,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapter.serialize(LocalDate src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapter.serialize(LocalTime src, Type typeOfSrc, JsonSerializationContext context)",6,2,1,0,3
"me.umov.analyzer.domain.core.Step.getLog(Rule rule, String messageDefault)",5,2,3,0,2
"me.umov.analyzer.domain.model.Task.getEmailServiceLocal()",5,2,3,0,0
"me.umov.analyzer.domain.model.Task.getEmailAgent()",5,2,2,0,0
"me.umov.analyzer.domain.model.History.getWaitTimePutQueue()",5,2,1,0,0
"me.umov.analyzer.domain.model.ProcessRuleMessage.getStatus()",5,2,1,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.incrementAttempts()",5,2,0,0,0
"me.umov.analyzer.domain.model.History.getTotalPhotos()",5,2,0,0,0
"me.umov.analyzer.domain.model.History.getTotalPhotosReceived()",5,2,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getRuleId()",4,2,3,0,0
"me.umov.analyzer.domain.model.Task.getAgentId()",4,2,3,0,0
"me.umov.analyzer.domain.model.Task.getServiceLocalId()",4,2,3,0,0
"me.umov.analyzer.domain.model.Task.getWorkspace()",4,2,3,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamService.createXstream()",4,2,3,0,0
"me.umov.analyzer.domain.model.Attribute.setEntity(String entity)",4,2,1,0,1
"me.umov.analyzer.infrastructure.converters.LocalDateTimeAttributeConverter.convertToDatabaseColumn(LocalDateTime localDateTime)",3,2,1,0,1
"me.umov.analyzer.infrastructure.converters.LocalDateTimeAttributeConverter.convertToEntityAttribute(Timestamp timestamp)",3,2,1,0,1
"me.umov.analyzer.domain.model.Action.setType(ActionType type)",2,2,1,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setActionType(ActionType type)",2,2,1,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setStatus(ProcessingState state)",2,2,1,0,1
"me.umov.analyzer.infrastructure.configurations.RestConfiguration.getConnectTimeout()",2,2,0,0,0
"me.umov.analyzer.infrastructure.configurations.RestConfiguration.getReadTimeout()",2,2,0,0,0
"me.umov.analyzer.application.observers.LogGenerator.createLog(RuleLogEvent event)",7,1,8,3,1
"me.umov.analyzer.application.observers.LogGenerator.shouldProcess(Class clazz)",6,1,4,3,1
"me.umov.analyzer.domain.model.Recipients.hasNoRecipients()",4,1,6,3,0
"me.umov.analyzer.domain.model.Recipients.single(String address)",4,1,2,3,1
"me.umov.analyzer.domain.model.Recipients.getCc()",3,1,2,3,0
"me.umov.analyzer.domain.model.Recipients.getTo()",3,1,2,3,0
"me.umov.analyzer.domain.model.Recipients.getCcMailList()",2,1,2,3,0
"me.umov.analyzer.domain.model.Recipients.getToMailList()",2,1,2,3,0
"me.umov.analyzer.domain.model.Recipients.isBlank(String value)",2,1,1,3,1
"me.umov.analyzer.domain.model.Recipients.isEmpty(Object[] array)",2,1,0,3,1
"me.umov.analyzer.domain.model.Recipients.setCc(List<Attribute> cc)",2,1,0,3,1
"me.umov.analyzer.domain.model.Recipients.setTo(List<Attribute> to)",2,1,0,3,1
"me.umov.analyzer.domain.actionRule.ActionRuleGenerator.createActionRuleModel(Rule rule, Action action)",12,1,12,2,2
"me.umov.analyzer.domain.actionRule.ActionRuleGenerator.generate(Rule rule, Action action)",5,1,4,2,2
"me.umov.analyzer.application.observers.ReprocessTimeout.update(Rule rule)",4,1,3,2,1
"me.umov.analyzer.application.observers.ReprocessTimeout.updateStatus(Rule rule)",3,1,2,2,1
"me.umov.analyzer.application.observers.ReprocessTimeout.shouldProcess(Class clazz)",3,1,1,2,1
"me.umov.analyzer.infrastructure.xstreamadapter.converters.EventSettingConverter.canConvert(Class type)",3,1,1,2,1
"me.umov.analyzer.infrastructure.xstreamadapter.converters.EventSettingConverter.isNotBlank(String attribute)",2,1,1,2,1
"me.umov.analyzer.infrastructure.xstreamadapter.converters.EventSettingConverter.marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)",2,1,0,2,3
"me.umov.analyzer.domain.actions.DistributionTaskStrategy.execute(Rule rule)",14,1,10,1,1
"me.umov.analyzer.application.worker.DistributionWorker.process(MessageAWS message)",12,1,11,1,1
"me.umov.analyzer.application.worker.NotificationWorker.process(MessageAWS messageAws)",11,1,12,1,1
"me.umov.analyzer.application.controller.ReprocessController.reprocessActionRule(@RequestBody EntityDTO entityDTO)",11,1,8,1,1
"me.umov.analyzer.application.observers.SynchronismTimeout.create(TaskDistributionCompleted distributionCompleted, Event event)",10,1,12,1,2
"me.umov.analyzer.domain.validators.rules.TimeOnQueueValidationTest.shouldThrowBusinessExceptionWhenLimitTimeExceeded()",9,1,9,1,0
"me.umov.analyzer.infrastructure.services.BusinessRestService.get(HttpEntity<RuleRequest> request)",9,1,6,1,1
"me.umov.analyzer.infrastructure.aws.NotificationAWSScheduler.schedule(ActionRuleModel actionRuleModel)",8,1,11,1,1
"me.umov.analyzer.domain.validators.rules.TimeOnQueueValidationTest.shouldNotThrowBusinessExceptionWhenItsWithinTheTimeLimit()",8,1,7,1,0
"me.umov.analyzer.infrastructure.aws.ProducerService.send(SendMessage message)",8,1,5,1,1
"me.umov.analyzer.infrastructure.services.JwtService.genarateTokenJwt(Long clientId, String token)",7,1,4,1,2
"me.umov.analyzer.domain.core.Reprocess.sendMessage(Rule rule)",7,1,4,1,1
"me.umov.analyzer.infrastructure.services.ActionService.getAction(Rule rule, List<ActionType> actionTypes)",6,1,9,1,2
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.produceEmailNotification(Rule rule)",5,1,5,1,1
"me.umov.analyzer.domain.core.Reprocess.run(Rule rule)",5,1,5,1,1
"me.umov.analyzer.infrastructure.services.BusinessRestService.addJwtToken(Long clientId)",5,1,3,1,1
"me.umov.analyzer.application.observers.SynchronismTimeout.createSendMessage(Rule rule, ActionRule actionRule)",4,1,3,1,2
"me.umov.analyzer.domain.actionRule.ActionRuleAnalyzer.analyzer(ActionRuleModel actionRuleModel, ProcessRuleMessage processRuleMessage)",4,1,3,1,2
"me.umov.analyzer.infrastructure.services.BusinessRestService.redistributeTasks(Long clientId, RuleRequest ruleRequest)",4,1,3,1,2
"me.umov.analyzer.application.controller.ReprocessController.incrementAndUpdateState(ActionRuleModel actionRule)",4,1,3,1,1
"me.umov.analyzer.application.worker.DistributionWorker.getRule(MessageAWS message)",4,1,3,1,1
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.update(Rule rule)",4,1,3,1,1
"me.umov.analyzer.infrastructure.aws.NotificationAWSScheduler.createSendMessage(ActionRuleModel actionRuleModel)",4,1,3,1,1
"me.umov.analyzer.infrastructure.services.JwtService.buildClaims(Long clientId, String token)",4,1,2,1,2
"me.umov.analyzer.domain.core.Process.run(Rule rule)",4,1,2,1,1
"me.umov.analyzer.domain.validators.rules.TimeOnQueueValidationTest.setUp()",4,1,2,1,0
"me.umov.analyzer.infrastructure.aws.ProducerService.ProducerService(AmazonSQS amazonSQS, SendMessageRequest sendMessageRequest)",4,1,0,1,2
"me.umov.analyzer.domain.model.Rule.notReprocess()",4,1,0,1,0
"me.umov.analyzer.application.controller.ReprocessController.addQueueSQS(ActionRuleModel actionRule)",3,1,4,1,1
"me.umov.analyzer.infrastructure.services.ActionService.getActionRule(Rule rule, ActionType actionType)",3,1,3,1,2
"me.umov.analyzer.application.worker.DistributionWorker.runCurrentStep(Rule rule)",3,1,3,1,1
"me.umov.analyzer.application.observers.SynchronismTimeout.createMessage(TaskDistributionCompleted distributionCompleted, ActionRule actionRule, Event event)",3,1,2,1,3
"me.umov.analyzer.domain.core.Reprocess.updateRule(Rule rule)",3,1,2,1,1
"me.umov.analyzer.infrastructure.services.ActionService.decode(List<Action> actions)",3,1,2,1,1
"me.umov.analyzer.application.observers.SynchronismTimeout.shouldProcess(Class clazz)",3,1,1,1,1
"me.umov.analyzer.domain.core.Process.getClassToLogger()",3,1,1,1,0
"me.umov.analyzer.domain.core.Reprocess.getClassToLogger()",3,1,1,1,0
"me.umov.analyzer.infrastructure.services.BusinessRestService.getUrlDistributionTask()",3,1,1,1,0
"me.umov.analyzer.infrastructure.xstreamadapter.converters.IgnoreTaskTypeConverter.marshal(Object list, HierarchicalStreamWriter writer, MarshallingContext context)",3,1,0,1,3
"me.umov.analyzer.infrastructure.xstreamadapter.converters.IgnoreTaskTypeConverter.canConvert(Class type)",3,1,0,1,1
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.isProcess(Rule rule, ActionRule actionRule)",2,1,3,1,2
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategy.isSendMail(Rule rule)",2,1,3,1,1
"me.umov.analyzer.domain.core.Process.executeRule(Rule rule)",2,1,3,1,1
"me.umov.analyzer.domain.model.Rule.getEventId()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.getMessageSqs()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.hasReprocessing()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.isDistributionTask()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.isNotUnprocessed()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.isReprocess()",2,1,2,1,0
"me.umov.analyzer.domain.model.Rule.isSuccess()",2,1,2,1,0
"me.umov.analyzer.application.observers.SynchronismTimeout.hasEvent(Event event)",2,1,1,1,1
"me.umov.analyzer.domain.actions.DistributionTaskStrategy.getActionRule(Rule rule)",2,1,1,1,1
"me.umov.analyzer.domain.model.Rule.setMessageLog(String messageLog)",2,1,1,1,1
"me.umov.analyzer.infrastructure.services.EntitySQSService.decodeRuleId(String message)",2,1,1,1,1
"me.umov.analyzer.infrastructure.services.JwtService.getToken(Long clientId)",2,1,1,1,1
"me.umov.analyzer.application.worker.DistributionWorker.incrementRunningMetric()",2,1,1,1,0
"me.umov.analyzer.domain.model.Rule.getRuleType()",2,1,1,1,0
"me.umov.analyzer.domain.model.Rule.getStatus()",2,1,1,1,0
"me.umov.analyzer.domain.model.Rule.isLog()",2,1,1,1,0
"me.umov.analyzer.domain.model.Rule.setActionRuleIdForLog(Long actionRuleIdForLog)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setClientId(Long clientId)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setDateHourScheduling(LocalDateTime dateHourScheduling)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setDateProcessed(LocalDateTime dateProcessed)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setEvent(Event event)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setGroup(String group)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setHistoryId(Long historyId)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setId(Long id)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setLogs(List<String> logs)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setMaxAttempts(Long maxAttempts)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setScheduleId(Long scheduleId)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.setTotalAttempts(Long totalAttempts)",2,1,0,1,1
"me.umov.analyzer.infrastructure.services.BusinessRestService.setUrlBusiness(String urlBusiness)",2,1,0,1,1
"me.umov.analyzer.infrastructure.services.JwtService.setJwtBuilder(Builder jwtBuilder)",2,1,0,1,1
"me.umov.analyzer.infrastructure.services.JwtService.setSecret(String secret)",2,1,0,1,1
"me.umov.analyzer.domain.model.Rule.getActionRuleIdForLog()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getClientId()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getDateHourScheduling()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getDateProcessed()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getEvent()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getGroup()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getHistoryId()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getId()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getLogs()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getMaxAttempts()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getScheduleId()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getSqsType()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.getTotalAttempts()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.hasActivityExecution()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.hasHistoryId()",2,1,0,1,0
"me.umov.analyzer.domain.model.Rule.increaseTotalAttempts()",2,1,0,1,0
"me.umov.analyzer.domain.actions.DistributionTaskStrategy.processAction(Rule rule)",0,1,0,1,1
"me.umov.analyzer.domain.actions.DistributionTaskStrategy.getValidator()",0,1,0,1,0
"me.umov.analyzer.domain.validators.BusinessValidator.getRules()",0,1,0,1,0
"me.umov.analyzer.application.observers.SynchronismTimeoutTest.shouldProcessSynchronismWhenResultProcessRuleIsSuccessAndHasEvent()",20,1,43,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldReprocessWhenProcessedSuccess()",18,1,43,0,0
"me.umov.analyzer.infrastructure.services.BusinessRestServiceTest.shouldRedistributeTasksWithSuccess()",18,1,21,0,0
"me.umov.analyzer.application.observers.SynchronismTimeoutTest.shouldNotProcessSynchronismWhenResultProcessRuleIsNotSuccess()",17,1,35,0,0
"me.umov.analyzer.application.observers.SynchronismTimeoutTest.shouldNotProcessSynchronismWhenResultProcessRuleIsSuccessAndHasNotEvent2()",17,1,34,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldReprocessWhenNotFinishedReprocessingTime()",16,1,39,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldRedistributionTaskWithSucccess()",16,1,33,0,0
"me.umov.analyzer.domain.actions.NotificationStrategyTest.shouldResultProcessRuleWithWarningWhenErrorAndSuccess()",16,1,31,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldReprocessWhenServiceThrowReprocessBusinessException()",16,1,28,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldCreateAndSaveLogWhenGetMessageInFinishStep()",16,1,13,0,0
"me.umov.analyzer.domain.repository.ActionRepository.findActionsNotificationsBy(Long historyId, Long eventId, Long clientId)",16,1,0,0,3
"me.umov.analyzer.application.observers.SynchronismTimeoutTest.shouldNotProcessSynchronismWhenResultProcessRuleIsSuccessAndHasNotEvent()",15,1,32,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.EventSettingTranslatorTest.shouldBuildReportRequestWithSuccess()",15,1,16,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.shouldConvertActionType()",15,1,16,0,0
"me.umov.analyzer.infrastructure.configurations.GsonConfiguration.configure()",15,1,6,0,0
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategyTest.shouldNotProcessActionWithSuccessWhenNotExistsByGroupAndSituationIdAndClientId()",14,1,34,0,0
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategyTest.shouldNotProcessActionWithSuccessWhenNotSynchonismTimeout()",14,1,34,0,0
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategyTest.shouldProcessActionWithSuccess()",14,1,33,0,0
"me.umov.analyzer.application.observers.ReprocessTimeoutTest.shouldNotProcessRuleWhenNotFinishedReprocessingTime()",14,1,29,0,0
"me.umov.analyzer.application.observers.ReprocessTimeoutTest.shouldProcessRuleWhenRuleStateEqaulsReprocessAndFinishedReprocessingTime()",14,1,27,0,0
"me.umov.analyzer.infrastructure.services.BusinessRestServiceTest.shouldThrowReprocessBusinessExceptionWhenErrorRequest()",14,1,17,0,0
"me.umov.analyzer.domain.actions.NotificationStrategyTest.shouldResultProcessRuleWithSuccess()",13,1,24,0,0
"me.umov.analyzer.domain.actions.NotificationStrategyTest.shouldHandleSendNotificationAnalyzerException()",13,1,23,0,0
"me.umov.analyzer.domain.actions.NotificationStrategyTest.shouldResultProcessRuleWithError()",13,1,23,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldGetActionRule()",13,1,23,0,0
"me.umov.analyzer.infrastructure.aws.ProducerServiceTest.shouldSetTheDelayWhenTheMessageHasDelay()",13,1,19,0,0
"me.umov.analyzer.domain.core.ErrorTest.shouldReprocessWhenHasAttempts()",13,1,15,0,0
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategyTest.shouldNotSerializeFieldWhenAnnotationIsFoundOnField()",13,1,5,0,0
"me.umov.analyzer.application.AwsConsumerTest.buildMessage()",13,1,0,0,0
"me.umov.analyzer.domain.actionRule.ActionRuleGeneratorTest.shouldSendActionRuleModelToSQS()",12,1,15,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldFindByEventIdAndClientIdAndType()",11,1,20,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldProccesedErrorExcptionWhenActionParameterIsNull()",11,1,17,0,0
"me.umov.analyzer.domain.core.ProcessTest.shouldProcessRuleWithSuccessfullWhenRuleTypeValid()",11,1,17,0,0
"me.umov.analyzer.infrastructure.aws.ProducerServiceTest.shouldNotSetTheDelayWhenTheMessageHasNoDelay()",11,1,17,0,0
"me.umov.analyzer.domain.core.ErrorTest.shouldErrorWhenAttemptsHaveNot()",11,1,15,0,0
"me.umov.analyzer.domain.core.ErrorTest.shouldErrorWhenMaxAttemptsHaveNot()",11,1,15,0,0
"me.umov.analyzer.domain.core.ErrorTest.shouldErrorWhenMaxAttemptsIsNull()",11,1,15,0,0
"me.umov.analyzer.domain.core.ReprocessTest.shouldExecuteWithSeccess()",11,1,15,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldProccesedErrorWhenBusinessServiceDoesNotRespond()",11,1,14,0,0
"me.umov.analyzer.domain.actionRule.ActionRuleAnalyzerTest.shouldSaveAActionRuleWithProcessRuleMessageStatusWhenMustTryAgainIsFalse()",11,1,13,0,0
"me.umov.analyzer.infrastructure.aws.ProducerServiceTest.shouldThrowJmsAnalyzerExceptionWhenAnyExceptionThrow()",11,1,13,0,0
"me.umov.analyzer.application.AwsConsumerTest.shoudWorkerProcessWhenConsumerSQSAnalyzeMail()",11,1,8,0,0
"me.umov.analyzer.application.AwsConsumerTest.shoudWorkerProcessWhenConsumerSQSAnalyzeRule()",11,1,8,0,0
"me.umov.analyzer.application.AwsConsumerTest.shoudWorkerProcessWhenConsumerSQSAnalyzeSynchronism()",11,1,8,0,0
"me.umov.analyzer.application.observers.ReprocessTimeoutTest.shouldNotProcessRuleWhenuleStateNotEqualsReprocess()",10,1,19,0,0
"me.umov.analyzer.domain.core.StartTest.shouldProccesStepSuccessful()",10,1,12,0,0
"me.umov.analyzer.domain.core.ReprocessTest.shouldThrowJmsAnaliyzerExceptionWhenDoNotSendQueue()",10,1,11,0,0
"me.umov.analyzer.domain.model.RuleRequest.toString()",10,1,11,0,0
"me.umov.analyzer.infrastructure.services.EntitySQSServiceTest.shouldReturnEntityWhenIdValid()",10,1,11,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldProccesedErrorExcptionWhenAction()",10,1,9,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldProccesedErrorExcptionWhenEventHithoutAction()",10,1,9,0,0
"me.umov.analyzer.infrastructure.aws.NotificationAWSSenderTest.shouldSendSuccessfuly()",9,1,12,0,0
"me.umov.analyzer.domain.actions.DistributionTaskActionStrategy.buildRuleRequest(Rule rule)",9,1,11,0,1
"me.umov.analyzer.domain.actionRule.ActionRuleAnalyzerTest.shouldSaveAActionRuleWithReprocessWhenMustTryAgainIsTrue()",9,1,10,0,0
"me.umov.analyzer.infrastructure.services.EntitySQSServiceTest.shouldThrowAnalyzerExceptionWhenFindByIdRetrunRuleNull()",9,1,10,0,0
"me.umov.analyzer.actions.DistributionTaskTest.shouldProccesedErrorExcptionWhenActionParameterIsEmpty()",9,1,9,0,0
"me.umov.analyzer.infrastructure.aws.NotificationAWSSenderTest.shouldProcessErrorWhenThrowException()",9,1,9,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.shouldConvertTimeoutReprocessing()",9,1,5,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.shouldConsumeCallbackParametersXML()",9,1,4,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.shouldConvertActionTypeSuccess()",9,1,4,0,0
"me.umov.analyzer.domain.repository.CustomFieldValueRepository.findByAlternativeIdentifierAndEntityAndClientId(String alternativeIdentifier, Long entityType, Long entityId, Long clientId)",9,1,0,0,4
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldThrowBusinessExceptionWhenIsNotAction()",8,1,15,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldThrowBusinessExceptionWhenActionsIsEmpty()",8,1,14,0,0
"me.umov.analyzer.application.worker.NotificationWorkerTest.shouldPublishEventWhenThrowAnyExceptions()",8,1,11,0,0
"me.umov.analyzer.application.worker.NotificationWorkerTest.shouldProcessSuccessfullyNotification()",8,1,10,0,0
"me.umov.analyzer.domain.core.SuccessTest.shouldProcessSteoWithSuccess()",8,1,9,0,0
"me.umov.analyzer.domain.core.WarningTest.shouldProcessSteoWithWarning()",8,1,9,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamService.buildEventSetting(String xml)",8,1,8,0,1
"me.umov.analyzer.infrastructure.services.JwtServiceTest.setUp()",8,1,8,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldGetActionParameter()",8,1,7,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldThrowBusinessExceptionWhenActionParameterIsEmpty()",8,1,7,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamService.consumeActionRuleXml(String xml)",8,1,6,0,1
"me.umov.analyzer.infrastructure.services.ActionServiceTest.shouldThrowBusinessExceptionWhenActionParameterIsNul()",8,1,6,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.shouldConvertEventSetting()",8,1,3,0,0
"me.umov.analyzer.application.worker.DistributionWorkerTest.shouldProcessRule()",7,1,17,0,0
"me.umov.analyzer.infrastructure.configurations.GsonConfigurationTest.shouldRegisterTypeAdapters()",7,1,10,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSAnalyzeRule()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSCallbackServiceWhenSendCallback()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSMailServiceWhenSendMail()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSNotification()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSNotificationWhenGetNotification()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSSMSServiceWhenSendSMS()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSSynchronism()",7,1,7,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldReturnProducerServiceWithSQSSynchronismWhenGetSynchronism()",7,1,7,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.createAmazonSQS()",7,1,5,0,0
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategyTest.shouldSerializeFieldWhenNoAnnotationIsFoundOnField()",7,1,5,0,0
"me.umov.analyzer.infrastructure.services.EntitySQSServiceTest.shouldThrowAnalyzerExceptionWhenMessageInvalid()",7,1,4,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.jmsListenerContainerFactory()",7,1,3,0,0
"me.umov.analyzer.infrastructure.configurations.RestConfiguration.restTemplate()",6,1,7,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeValidValue()",6,1,7,0,0
"me.umov.analyzer.domain.validators.DistributionTaskValidatorTest.shouldReturnCorrectValidations()",6,1,5,0,0
"me.umov.analyzer.infrastructure.configurations.JwtConfiguration.createBuilderJWTAuth()",6,1,5,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.NotificationWasScheduled(Rule rule)",6,1,4,0,1
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldIncrementAttempts()",6,1,4,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldIncrementAttemptsWhenTotalAttempsIsNull()",6,1,4,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.shouldThrowUnsupportedAnalyzerTypeWhenTypeInvalid()",6,1,4,0,0
"me.umov.analyzer.domain.model.RecipientsTest.shouldCreateRecipientWithSingleTo()",6,1,3,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.NotificationWasScheduled(Rule rule, Long actionRuleId, List<String> message)",6,1,2,0,3
"me.umov.analyzer.infrastructure.services.JwtServiceTest.should()",6,1,2,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldNotCreateLogAndSaveWhenFinishStepIsNull()",5,1,5,0,0
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeValidValue()",5,1,5,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldNotRetryWhenProcessRuleMessageEqualsErrorAndNumberOfRetriesEqualsThree()",5,1,4,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldNotRetryWhenProcessRuleMessageEqualsErrorAndNumberOfRetriesGreaterThanThree()",5,1,4,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldNotRetryWhenProcessRuleMessageEqualsSeccess()",5,1,4,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldTryAgainWhenProcessRuleMessageEqualsErrorAndNumberOfRetriesLessThanThree()",5,1,4,0,0
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategyTest.shouldNeverSkipClass()",5,1,4,0,0
"me.umov.analyzer.application.AwsConsumer.buildMessageAWS(Message<String> message, RuleType type)",5,1,3,0,2
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnFalseIsReprocessWhenStatusSuccess()",5,1,3,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnFifteenMinuteWhenThreeTry()",5,1,3,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnFiveMinuteWhenTwoTry()",5,1,3,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnOneMinuteWhenAnAttempt()",5,1,3,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnTrueIsReprocessWhenStatusReprocess()",5,1,3,0,0
"me.umov.analyzer.domain.validators.EmptyValidatorTest.shouldHaveNoRuleToValidate()",5,1,3,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfigurationTest.setUp()",5,1,3,0,0
"me.umov.analyzer.infrastructure.configurations.CounterConfiguration.queueCounter()",5,1,3,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.EventSettingTranslator.transform(NotificationMessage notificationMessage)",5,1,2,0,1
"me.umov.analyzer.infrastructure.configurations.CounterConfigurationTest.shouldBuildCounter()",5,1,2,0,0
"me.umov.analyzer.domain.repository.TaskRepository.findScheduleByHistoryIdByClientId(Long historyId, Long clientId)",5,1,0,0,2
"me.umov.analyzer.domain.core.Error.updateRule(Rule rule)",4,1,6,0,1
"me.umov.analyzer.domain.core.Start.run(Rule rule)",4,1,5,0,1
"me.umov.analyzer.application.controller.VersionControllerTest.shouldReturnApplicationAndVersionOnIndex()",4,1,5,0,0
"me.umov.analyzer.domain.core.Success.run(Rule rule)",4,1,4,0,1
"me.umov.analyzer.domain.core.Warning.run(Rule rule)",4,1,4,0,1
"me.umov.analyzer.application.observers.SynchronismTimeoutTest.setUp()",4,1,4,0,0
"me.umov.analyzer.domain.actions.SynchronismTimeoutActionStrategyTest.setUp()",4,1,4,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldSerializeValidValue()",4,1,4,0,0
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldSerializeValidValue()",4,1,4,0,0
"me.umov.analyzer.infrastructure.services.RuleRequestBuilderTest.shouldGetHttpEntity()",4,1,4,0,0
"me.umov.analyzer.domain.core.Start.moveTo(ProcessingState state, Rule rule)",4,1,3,0,2
"me.umov.analyzer.domain.events.ErrorExecutingNotificationWorker.ErrorExecutingNotificationWorker(Rule rule, String message)",4,1,3,0,2
"me.umov.analyzer.domain.actions.DistributionTaskActionStrategy.processAction(Rule rule)",4,1,3,0,1
"me.umov.analyzer.domain.core.Error.reprocess(Rule rule)",4,1,3,0,1
"me.umov.analyzer.domain.actions.RuleStrategyFactoryTest.shouldReturnDistributionTaskServiceWhenTypeDISTRIBUTION_TASK()",4,1,3,0,0
"me.umov.analyzer.application.AwsConsumer.executeAnalyzeNotification(@Payload Message<String> message)",4,1,2,0,1
"me.umov.analyzer.application.AwsConsumer.executeAnalyzeRule(@Payload Message<String> message)",4,1,2,0,1
"me.umov.analyzer.application.AwsConsumer.executeAnalyzeSynchronism(@Payload Message<String> message)",4,1,2,0,1
"me.umov.analyzer.infrastructure.configurations.GsonConfiguration.registerCustomAdapters(GsonBuilder gsonBuilder)",4,1,2,0,1
"me.umov.analyzer.actions.ActionStrategyFactoryTest.shouldGetIdleAgentsDistribution()",4,1,2,0,0
"me.umov.analyzer.actions.ActionStrategyFactoryTest.shouldGetNotification()",4,1,2,0,0
"me.umov.analyzer.actions.ActionStrategyFactoryTest.shouldGetSynchronismTimeoutAction()",4,1,2,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldReturnErrorStepWhenTypeEqualsProcessedError()",4,1,2,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldReturnProcessStepWhenTypeEqualsProcessed()",4,1,2,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldReturnReprocessStepWhenTypeEqualsReprocessed()",4,1,2,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldReturnStartStepWhenTypeEqualsUnprocessed()",4,1,2,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldReturnSuccessStepWhenTypeEqualsProcessedSuccess()",4,1,2,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.shouldReturnOneMinuteWhenAttemptIsNull()",4,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfigurationTest.shouldInjectAmazonSQS()",4,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfigurationTest.shouldInjectSendDefaultJmsListenerContainerFactory()",4,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfigurationTest.shouldInjectSendDefaultJmsTemplate()",4,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.JwtConfigurationTest.shouldInjectJwtBuilder()",4,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.RestConfigurationTest.shouldInjectRestTemplate()",4,1,2,0,0
"me.umov.analyzer.domain.core.Step.buildContext(ResultProcessRule resultProcess)",4,1,1,0,1
"me.umov.analyzer.infrastructure.aws.ProducerServiceTest.setUp()",4,1,1,0,0
"me.umov.analyzer.application.dto.ResultDTO.ResultDTO(String message, int statusCode)",4,1,0,0,2
"me.umov.analyzer.domain.model.NotificationMessage.NotificationMessage(Rule rule, Action action)",4,1,0,0,2
"me.umov.analyzer.domain.model.ProcessRuleMessage.ProcessRuleMessage(ProcessRuleMessageType type, String message)",4,1,0,0,2
"me.umov.analyzer.fixture.CallbackParametersFixture.withCredentials(boolean basicAuth, String hash)",3,1,5,0,2
"me.umov.analyzer.domain.actions.ActionStrategy.updateRule(Rule rule, ResultProcessRule resultProcessRule)",3,1,4,0,2
"me.umov.analyzer.fixture.TaskFixture.withWorkspace(String workspace)",3,1,4,0,1
"me.umov.analyzer.domain.core.Step.saveRule(Rule rule)",3,1,3,0,1
"me.umov.analyzer.domain.actions.ActionStrategy.updateRule(Rule rule, ProcessingState state, List<String> message)",3,1,2,0,3
"me.umov.analyzer.domain.core.Step.nextState(Rule rule, ProcessingState state)",3,1,2,0,2
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldNotProcess()",3,1,2,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldProcessErrorExecutingNotificationWorker()",3,1,2,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldProcessNotificationWasExecuted()",3,1,2,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldProcessSynchronismTimeoutWasExecuted()",3,1,2,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.shouldProcessTaskDistributionCompleted()",3,1,2,0,0
"me.umov.analyzer.domain.model.ActionRuleModelTest.setUp()",3,1,2,0,0
"me.umov.analyzer.infrastructure.configurations.GsonConfigurationTest.shouldCreateGson()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeEmptyValueAsNull()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldDeserializeNullValueAsNull()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalDateSerializationAdapterTest.shouldSerializeNullValue()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeEmptyValueAsNull()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldDeserializeNullValueAsNull()",3,1,2,0,0
"me.umov.analyzer.infrastructure.serialization.LocalTimeSerializationAdapterTest.shouldSerializeNullValue()",3,1,2,0,0
"me.umov.analyzer.architecture.IgnoreTests.includes(Location location)",3,1,1,0,1
"me.umov.analyzer.domain.excptions.AnalyzerException.AnalyzerException(String message)",3,1,1,0,1
"me.umov.analyzer.domain.model.ResultProcessRule.setMessage(String message)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionFixture.withActionParameter(String actionParameter)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionFixture.withType(ActionType type)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionRuleFixture.withActionType(ActionType actionType)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionRuleFixture.withReprocessingTimeout(long reprocessingTimeout)",3,1,1,0,1
"me.umov.analyzer.fixture.ActionRuleFixture.withSynchonismTimeout(Integer synchonismTimeout)",3,1,1,0,1
"me.umov.analyzer.fixture.AgentFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.AgentFixture.withMail(String email)",3,1,1,0,1
"me.umov.analyzer.fixture.AttributeFixture.withEntity(String entity)",3,1,1,0,1
"me.umov.analyzer.fixture.AttributeFixture.withField(String field)",3,1,1,0,1
"me.umov.analyzer.fixture.AttributeFixture.withValue(String value)",3,1,1,0,1
"me.umov.analyzer.fixture.CallbackCredentialsFixture.withBasic(boolean basicAuth)",3,1,1,0,1
"me.umov.analyzer.fixture.CallbackCredentialsFixture.withHash(String hash)",3,1,1,0,1
"me.umov.analyzer.fixture.CallbackParametersFixture.withUrl(String url)",3,1,1,0,1
"me.umov.analyzer.fixture.ClientFixture.withWorkspace(String workspace)",3,1,1,0,1
"me.umov.analyzer.fixture.CustomFieldValueFixture.withExternalValue(String externalValue)",3,1,1,0,1
"me.umov.analyzer.fixture.EventFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.HistoryFixture.withActivityId(long activityId)",3,1,1,0,1
"me.umov.analyzer.fixture.HistoryFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.HistoryItemFixture.withExibitionValue(String exibitionValue)",3,1,1,0,1
"me.umov.analyzer.fixture.HistoryItemFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.MessageAWSFixture.withMessage(String messageSQS)",3,1,1,0,1
"me.umov.analyzer.fixture.MessageAWSFixture.withType(RuleType type)",3,1,1,0,1
"me.umov.analyzer.fixture.RecipientsFixture.withCC(Attribute cc)",3,1,1,0,1
"me.umov.analyzer.fixture.RecipientsFixture.withTo(Attribute attribute)",3,1,1,0,1
"me.umov.analyzer.fixture.ResultProcessRuleFixture.withState(ProcessingState state)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withClientId(long clientId)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withDataHourScheduling(LocalDateTime dateHourScheduling)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withDateProcess(LocalDateTime dateProcessed)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withEvent(Event event)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withGroup(String group)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withHistoryId(Long historyId)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withMaxAttempts(Long maxAttempts)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withMessageLog(String messageLog)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withRuleType(RuleType ruleType)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withStatus(ProcessingState state)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withTotalAttempts(long totalAttempts)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleFixture.withType(RuleType type)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleRequestFixture.withScheduleId(long scheduleId)",3,1,1,0,1
"me.umov.analyzer.fixture.RuleRequestFixture.withType(ActionType actionType)",3,1,1,0,1
"me.umov.analyzer.fixture.SMSFixture.withAccount(String account)",3,1,1,0,1
"me.umov.analyzer.fixture.SMSFixture.withLasId(long lasId)",3,1,1,0,1
"me.umov.analyzer.fixture.SMSFixture.withPassword(String password)",3,1,1,0,1
"me.umov.analyzer.fixture.SMSFixture.withPort(String port)",3,1,1,0,1
"me.umov.analyzer.fixture.SendMessageFixture.withRule(Rule rule)",3,1,1,0,1
"me.umov.analyzer.fixture.ServiceLocalFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.ServiceLocalFixture.withMail(String email)",3,1,1,0,1
"me.umov.analyzer.fixture.SystemParameterFixture.withSMS(SMS sms)",3,1,1,0,1
"me.umov.analyzer.fixture.TaskFixture.withAgent(Agent agent)",3,1,1,0,1
"me.umov.analyzer.fixture.TaskFixture.withClientId(long clientId)",3,1,1,0,1
"me.umov.analyzer.fixture.TaskFixture.withId(long id)",3,1,1,0,1
"me.umov.analyzer.fixture.TaskFixture.withServiceLocal(ServiceLocal serviceLocal)",3,1,1,0,1
"me.umov.analyzer.fixture.TaskFixture.withToken(String tokenReport)",3,1,1,0,1
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipField(FieldAttributes field)",3,1,1,0,1
"me.umov.analyzer.actions.ActionStrategyFactoryTest.setUp()",3,1,1,0,0
"me.umov.analyzer.actions.DistributionTaskTest.setUp()",3,1,1,0,0
"me.umov.analyzer.application.AwsConsumerTest.setUp()",3,1,1,0,0
"me.umov.analyzer.application.controller.VersionController.index()",3,1,1,0,0
"me.umov.analyzer.application.controller.VersionControllerTest.setup()",3,1,1,0,0
"me.umov.analyzer.application.observers.LogGeneratorTest.setUp()",3,1,1,0,0
"me.umov.analyzer.application.observers.ReprocessTimeoutTest.setUp()",3,1,1,0,0
"me.umov.analyzer.application.worker.DistributionWorkerTest.setUp()",3,1,1,0,0
"me.umov.analyzer.application.worker.NotificationWorkerTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.actionRule.ActionRuleAnalyzerTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.actionRule.ActionRuleGeneratorTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.actions.NotificationStrategyTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.actions.RuleStrategyFactoryTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.actions.RuleStrategyFactoryTest.shouldThrowUnsupportedTypeWhenTypeInvalid()",3,1,1,0,0
"me.umov.analyzer.domain.core.Error.getClassToLogger()",3,1,1,0,0
"me.umov.analyzer.domain.core.ErrorTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.ProcessTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.ReprocessTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.Start.getClassToLogger()",3,1,1,0,0
"me.umov.analyzer.domain.core.StartTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.StepFactoryTest.shouldThrowUnsupportedAnalyzerTypeWhenTypeEqualsReprocessed()",3,1,1,0,0
"me.umov.analyzer.domain.core.Success.getClassToLogger()",3,1,1,0,0
"me.umov.analyzer.domain.core.SuccessTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.core.Warning.getClassToLogger()",3,1,1,0,0
"me.umov.analyzer.domain.core.WarningTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.events.SynchronismTimeoutWasExecuted.getActionRuleId()",3,1,1,0,0
"me.umov.analyzer.domain.events.SynchronismTimeoutWasExecuted.getClientId()",3,1,1,0,0
"me.umov.analyzer.domain.events.SynchronismTimeoutWasExecuted.getEntityId()",3,1,1,0,0
"me.umov.analyzer.domain.events.SynchronismTimeoutWasExecuted.getMessages()",3,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getActionRuleId()",3,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getEntityId()",3,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getMessages()",3,1,1,0,0
"me.umov.analyzer.domain.validators.DistributionTaskValidator.getRules()",3,1,1,0,0
"me.umov.analyzer.domain.validators.DistributionTaskValidatorTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.aws.NotificationAWSSenderTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilderTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.createSQSConnectionFactory()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.init()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.CounterConfigurationTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.GsonConfigurationTest.setup()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.JwtConfigurationTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.configurations.RestConfigurationTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategyTest.setup()",3,1,1,0,0
"me.umov.analyzer.infrastructure.services.ActionServiceTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.services.BusinessRestServiceTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.services.EntitySQSServiceTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.services.RuleRequestBuilderTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.EventSettingTranslatorTest.setUp()",3,1,1,0,0
"me.umov.analyzer.infrastructure.xstreamadapter.service.XStreamServiceTest.setUp()",3,1,1,0,0
"me.umov.analyzer.domain.excptions.ReprocessBusinessException.ReprocessBusinessException(String message, Throwable cause)",3,1,0,0,2
"me.umov.analyzer.domain.excptions.AnalyzerException.AnalyzerException(List<String> messages)",3,1,0,0,1
"me.umov.analyzer.domain.excptions.ConditionAnalyzerException.ConditionAnalyzerException(String message)",3,1,0,0,1
"me.umov.analyzer.domain.excptions.JmsAnalyzerException.JmsAnalyzerException(String message)",3,1,0,0,1
"me.umov.analyzer.domain.excptions.ReprocessBusinessException.ReprocessBusinessException(String message)",3,1,0,0,1
"me.umov.analyzer.domain.excptions.UnsupportedAnalyzerType.UnsupportedAnalyzerType(String message)",3,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.Attribute(String value)",3,1,0,0,1
"me.umov.analyzer.domain.model.CallbackParameters.CallbackParameters(String url)",3,1,0,0,1
"me.umov.analyzer.domain.model.SendMessage.SendMessage(String messageSqs)",3,1,0,0,1
"me.umov.analyzer.fixture.NotificationMessageFixture.withAction(Action action)",3,1,0,0,1
"me.umov.analyzer.fixture.NotificationMessageFixture.withRule(Rule rule)",3,1,0,0,1
"me.umov.analyzer.fixture.ProcessHasBeenExecutedFixture.ProcessHasBeenExecutedFixture(NotificationWasScheduled stepWasPerformed)",3,1,0,0,1
"me.umov.analyzer.infrastructure.serialization.AnnotationExcludeSerializationStrategy.shouldSkipClass(Class<?> clazz)",3,1,0,0,1
"me.umov.analyzer.domain.actions.DistributionTaskActionStrategy.getValidator()",3,1,0,0,0
"me.umov.analyzer.domain.events.ErrorExecutingNotificationWorker.getActionRuleId()",3,1,0,0,0
"me.umov.analyzer.domain.events.ErrorExecutingNotificationWorker.getClientId()",3,1,0,0,0
"me.umov.analyzer.domain.events.ErrorExecutingNotificationWorker.getEntityId()",3,1,0,0,0
"me.umov.analyzer.domain.events.ErrorExecutingNotificationWorker.getMessages()",3,1,0,0,0
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.defaultJmsTemplate()",3,1,0,0,0
"me.umov.analyzer.domain.actions.ActionStrategy.updateRule(Rule rule, ProcessingState state, String message)",2,1,2,0,3
"me.umov.analyzer.domain.model.ActionRuleModel.isError(ProcessRuleMessage processRuleMessage)",2,1,2,0,1
"me.umov.analyzer.domain.model.NotificationMessage.NotificationMessage(ActionRuleModel actionRuleMode)",2,1,2,0,1
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getMessageSqs()",2,1,2,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getMessageSqs()",2,1,2,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.isReprocess()",2,1,2,0,0
"me.umov.analyzer.domain.model.ResultProcessRule.isReprocess()",2,1,2,0,0
"me.umov.analyzer.domain.model.ResultProcessRule.isSuccess()",2,1,2,0,0
"me.umov.analyzer.domain.model.RuleContext.getState()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestAnalyzeRule()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestCallbackService()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestMailervice()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestNotification()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestSMSService()",2,1,2,0,0
"me.umov.analyzer.infrastructure.aws.SendMessageRequestService.createSendMessageRequestSynchronism()",2,1,2,0,0
"me.umov.analyzer.AnalyzerApplication.main(String[] args)",2,1,1,0,1
"me.umov.analyzer.domain.events.TaskDistributionCompleted.finishedReprocessingTime(Long reprocessingTimeout)",2,1,1,0,1
"me.umov.analyzer.domain.excptions.AnalyzerException.addMessage(String message)",2,1,1,0,1
"me.umov.analyzer.domain.model.Attribute.isBlank(String value)",2,1,1,0,1
"me.umov.analyzer.domain.model.ResultProcessRule.addMessage(String message)",2,1,1,0,1
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getClientId()",2,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getGroup()",2,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getScheduleId()",2,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.isReprocess()",2,1,1,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.isSuccess()",2,1,1,0,0
"me.umov.analyzer.domain.model.Action.getType()",2,1,1,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getActionType()",2,1,1,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getStatus()",2,1,1,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.now()",2,1,1,0,0
"me.umov.analyzer.domain.model.Attribute.isValue()",2,1,1,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.isExchangeServer()",2,1,1,0,0
"me.umov.analyzer.domain.model.NotificationMessage.getActionParameter()",2,1,1,0,0
"me.umov.analyzer.domain.model.NotificationMessage.getClientId()",2,1,1,0,0
"me.umov.analyzer.domain.model.NotificationMessage.getHistoryId()",2,1,1,0,0
"me.umov.analyzer.domain.model.NotificationMessage.getType()",2,1,1,0,0
"me.umov.analyzer.domain.validators.EmptyValidator.getRules()",2,1,1,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilder.getNotification()",2,1,1,0,0
"me.umov.analyzer.infrastructure.aws.ProducerAWSBuilder.getSynchronism()",2,1,1,0,0
"me.umov.analyzer.infrastructure.services.RuleRequestBuilder.get(RuleRequest ruleRequest, HttpHeaders headers)",2,1,0,0,2
"me.umov.analyzer.domain.core.Step.setResultProcessRule(ResultProcessRule resultProcessRule)",2,1,0,0,1
"me.umov.analyzer.domain.events.SynchronismTimeoutWasExecuted.SynchronismTimeoutWasExecuted(Rule rule)",2,1,0,0,1
"me.umov.analyzer.domain.events.TaskDistributionCompleted.TaskDistributionCompleted(Rule rule)",2,1,0,0,1
"me.umov.analyzer.domain.excptions.BusinessException.BusinessException(String message)",2,1,0,0,1
"me.umov.analyzer.domain.excptions.HttpAnalyzerException.HttpAnalyzerException(String message)",2,1,0,0,1
"me.umov.analyzer.domain.excptions.SendNotificationAnalyzerException.SendNotificationAnalyzerException(List<String> messages)",2,1,0,0,1
"me.umov.analyzer.domain.excptions.SendNotificationAnalyzerException.SendNotificationAnalyzerException(String message)",2,1,0,0,1
"me.umov.analyzer.domain.model.Action.setActionParameter(String actionParameter)",2,1,0,0,1
"me.umov.analyzer.domain.model.Action.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Action.setEventId(Long eventId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Action.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRule.setActionType(ActionType actionType)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRule.setIgnoreTaskType(List<String> ignoreTaskType)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRule.setReprocessingTimeout(Long reprocessingTimeout)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRule.setSynchonismTimeout(Integer synchonismTimeout)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setAction(Action action)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setDateProcessed(LocalDateTime dateProcessed)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setMaxAttempts(Long maxAttempts)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setRule(Rule rule)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setTotalAttempts(Long totalAttempts)",2,1,0,0,1
"me.umov.analyzer.domain.model.ActionRuleModel.setWaitTimePutQueue(int waitTimePutQueue)",2,1,0,0,1
"me.umov.analyzer.domain.model.Agent.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Agent.setEmail(String email)",2,1,0,0,1
"me.umov.analyzer.domain.model.Agent.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.setEntityId(String entityId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.setField(String field)",2,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.setHasMapping(boolean hasMapping)",2,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.setInternalValue(boolean isInternalValue)",2,1,0,0,1
"me.umov.analyzer.domain.model.Attribute.setValue(String value)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackParameters.setCredentials(HttpCredentials credentials)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackParameters.setExportStatusFlagExported(boolean exportStatusFlagExported)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackParameters.setUrl(String url)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackParameters.setWaitTimePutQueue(int waitTimePutQueue)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackProtocol.CallbackProtocol(Long historyId)",2,1,0,0,1
"me.umov.analyzer.domain.model.CallbackProtocol.setHistory(History history)",2,1,0,0,1
"me.umov.analyzer.domain.model.Client.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.Client.setWorkspace(String workspace)",2,1,0,0,1
"me.umov.analyzer.domain.model.CustomFieldValue.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.CustomFieldValue.setExternalValue(String externalValue)",2,1,0,0,1
"me.umov.analyzer.domain.model.CustomFieldValue.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.CustomFieldValue.setInternalValue(String internalValue)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailAuth(Character emailAuth)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailHost(String emailHost)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailPassword(String emailPassword)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailPort(Long emailPort)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailReplyTo(String emailReplyTo)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setEmailUser(String emailUser)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setExchangeServer(Character exchangeServer)",2,1,0,0,1
"me.umov.analyzer.domain.model.DefaultSystemSettings.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.Event.setActive(Character active)",2,1,0,0,1
"me.umov.analyzer.domain.model.Event.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Event.setEventPlatformId(Long eventPlatformId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Event.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.EventSetting.setWaitTimePutQueue(int waitTimePutQueue)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.History(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setActivityId(Long activityId)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setScheduleId(Long scheduleId)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setTotalPhotos(Long totalPhotos)",2,1,0,0,1
"me.umov.analyzer.domain.model.History.setTotalPhotosReceived(Long totalPhotosReceived)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setExibitionValue(String exibitionValue)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setFieldId(Long fieldId)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setHistoryId(Long historyId)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.HistoryItem.setValue(String value)",2,1,0,0,1
"me.umov.analyzer.domain.model.HttpCredentials.HttpCredentials(boolean basic)",2,1,0,0,1
"me.umov.analyzer.domain.model.HttpCredentials.setBasic(boolean basic)",2,1,0,0,1
"me.umov.analyzer.domain.model.HttpCredentials.setHash(String hash)",2,1,0,0,1
"me.umov.analyzer.domain.model.MessageAWS.setMessageSQS(String messageSQS)",2,1,0,0,1
"me.umov.analyzer.domain.model.MessageAWS.setType(RuleType type)",2,1,0,0,1
"me.umov.analyzer.domain.model.ProcessRuleMessage.error(String message)",2,1,0,0,1
"me.umov.analyzer.domain.model.ProcessRuleMessage.sucess(String message)",2,1,0,0,1
"me.umov.analyzer.domain.model.ResultProcessRule.setMessages(List<String> messages)",2,1,0,0,1
"me.umov.analyzer.domain.model.ResultProcessRule.setState(ProcessingState state)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleContext.setResultProcess(ResultProcessRule resultProcess)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setActionRuleId(Long actionRuleId)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setInsertDateHour(LocalDateTime insertDateHour)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setLog(String log)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleLog.setRuleId(Long ruleId)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleRequest.setActionType(ActionType actionType)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleRequest.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleRequest.setGroup(String group)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleRequest.setIgnoreTaskType(List<String> ignoreTaskType)",2,1,0,0,1
"me.umov.analyzer.domain.model.RuleRequest.setScheduleId(Long scheduleId)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setAccount(String account)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setLasId(Long lasId)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setPassword(String password)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setPort(String port)",2,1,0,0,1
"me.umov.analyzer.domain.model.SMS.setUrl(String url)",2,1,0,0,1
"me.umov.analyzer.domain.model.SendMessage.changeDelayTimeout(Integer delayTimeout)",2,1,0,0,1
"me.umov.analyzer.domain.model.ServiceLocal.setEmail(String email)",2,1,0,0,1
"me.umov.analyzer.domain.model.ServiceLocal.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.SystemParameter.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.SystemParameter.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.SystemParameter.setSms(SMS sms)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setAgent(Agent agent)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setClient(Client client)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setClientId(Long clientId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setGroup(String group)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setId(Long id)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setServiceLocal(ServiceLocal serviceLocal)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setSituationId(Long situationId)",2,1,0,0,1
"me.umov.analyzer.domain.model.Task.setTokenReport(String tokenReport)",2,1,0,0,1
"me.umov.analyzer.fixture.MessageRequestFixture.withActionType(ActionType actionType)",2,1,0,0,1
"me.umov.analyzer.fixture.MessageRequestFixture.withBody(Attribute message)",2,1,0,0,1
"me.umov.analyzer.fixture.MessageRequestFixture.withCondition(Attribute condition)",2,1,0,0,1
"me.umov.analyzer.fixture.MessageRequestFixture.withRecipients(Recipients recipients)",2,1,0,0,1
"me.umov.analyzer.fixture.MessageRequestFixture.withSubject(Attribute subject)",2,1,0,0,1
"me.umov.analyzer.fixture.TaskDistributionCompletedFixture.TaskDistributionCompletedFixture(Rule rule)",2,1,0,0,1
"me.umov.analyzer.fixture.TaskDistributionCompletedFixture.get(Rule rule)",2,1,0,0,1
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.setConnectionFactory(SQSConnectionFactory connectionFactory)",2,1,0,0,1
"me.umov.analyzer.infrastructure.configurations.AmazonSQSConfiguration.setRegionName(String region)",2,1,0,0,1
"me.umov.analyzer.infrastructure.services.BusinessRestServiceTest.getReturn(ResultProcessRule resultProcessRule)",2,1,0,0,1
"me.umov.analyzer.application.controller.VersionController.getVersion()",2,1,0,0,0
"me.umov.analyzer.application.dto.EntityDTO.getId()",2,1,0,0,0
"me.umov.analyzer.application.dto.ResultDTO.getMessage()",2,1,0,0,0
"me.umov.analyzer.application.dto.ResultDTO.getStatusCode()",2,1,0,0,0
"me.umov.analyzer.domain.core.Step.getResultProcessRule()",2,1,0,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.getActionRuleId()",2,1,0,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.getEntityId()",2,1,0,0,0
"me.umov.analyzer.domain.events.NotificationWasScheduled.getMessages()",2,1,0,0,0
"me.umov.analyzer.domain.events.TaskDistributionCompleted.getRule()",2,1,0,0,0
"me.umov.analyzer.domain.excptions.AnalyzerException.getMessages()",2,1,0,0,0
"me.umov.analyzer.domain.model.Action.getActionParameter()",2,1,0,0,0
"me.umov.analyzer.domain.model.Action.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Action.getEventId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Action.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRule.getActionType()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRule.getIgnoreTaskType()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRule.getReprocessingTimeout()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRule.getSynchonismTimeout()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRule.isSynchonismTimeout()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getAction()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getDateProcessed()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getMaxAttempts()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getRule()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.getTotalAttempts()",2,1,0,0,0
"me.umov.analyzer.domain.model.ActionRuleModel.shouldRetry()",2,1,0,0,0
"me.umov.analyzer.domain.model.Agent.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Agent.getEmail()",2,1,0,0,0
"me.umov.analyzer.domain.model.Agent.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.getEntity()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.getEntityId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.getField()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.getHasMapping()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.getValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.isInternalValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.CallbackParameters.getCredentials()",2,1,0,0,0
"me.umov.analyzer.domain.model.CallbackParameters.getUrl()",2,1,0,0,0
"me.umov.analyzer.domain.model.CallbackParameters.getWaitTimePutQueue()",2,1,0,0,0
"me.umov.analyzer.domain.model.CallbackParameters.isExportStatusFlagExported()",2,1,0,0,0
"me.umov.analyzer.domain.model.CallbackProtocol.getHistory()",2,1,0,0,0
"me.umov.analyzer.domain.model.Client.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Client.getWorkspace()",2,1,0,0,0
"me.umov.analyzer.domain.model.CustomFieldValue.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.CustomFieldValue.getExternalValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.CustomFieldValue.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.CustomFieldValue.getInternalValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailAuth()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailHost()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailPassword()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailPort()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailReplyTo()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getEmailUser()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getExchangeServer()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.DefaultSystemSettings.getUrlJaiminho()",2,1,0,0,0
"me.umov.analyzer.domain.model.Event.getActive()",2,1,0,0,0
"me.umov.analyzer.domain.model.Event.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Event.getEventPlatformId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Event.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.EventSetting.getWaitTimePutQueue()",2,1,0,0,0
"me.umov.analyzer.domain.model.History.History()",2,1,0,0,0
"me.umov.analyzer.domain.model.History.getActivityId()",2,1,0,0,0
"me.umov.analyzer.domain.model.History.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.History.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.History.getScheduleId()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getExibitionValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getFieldId()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getHistoryId()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.HistoryItem.getValue()",2,1,0,0,0
"me.umov.analyzer.domain.model.HttpCredentials.getHash()",2,1,0,0,0
"me.umov.analyzer.domain.model.HttpCredentials.isBasic()",2,1,0,0,0
"me.umov.analyzer.domain.model.MessageAWS.getMessageSQS()",2,1,0,0,0
"me.umov.analyzer.domain.model.MessageAWS.getType()",2,1,0,0,0
"me.umov.analyzer.domain.model.NotificationMessage.getRule()",2,1,0,0,0
"me.umov.analyzer.domain.model.ProcessRuleMessage.getMessage()",2,1,0,0,0
"me.umov.analyzer.domain.model.ProcessRuleMessage.getType()",2,1,0,0,0
"me.umov.analyzer.domain.model.ResultProcessRule.getMessage()",2,1,0,0,0
"me.umov.analyzer.domain.model.ResultProcessRule.getMessages()",2,1,0,0,0
"me.umov.analyzer.domain.model.ResultProcessRule.getState()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleContext.getResultProcess()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getActionRuleId()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getInsertDateHour()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getLog()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleLog.getRuleId()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleRequest.getActionType()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleRequest.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleRequest.getGroup()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleRequest.getIgnoreTaskType()",2,1,0,0,0
"me.umov.analyzer.domain.model.RuleRequest.getScheduleId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getAccount()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getLasId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getPassword()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getPort()",2,1,0,0,0
"me.umov.analyzer.domain.model.SMS.getUrl()",2,1,0,0,0
"me.umov.analyzer.domain.model.SendMessage.delayInSeconds()",2,1,0,0,0
"me.umov.analyzer.domain.model.SendMessage.getMessageSqs()",2,1,0,0,0
"me.umov.analyzer.domain.model.SendMessage.isDelayTimeout()",2,1,0,0,0
"me.umov.analyzer.domain.model.ServiceLocal.getEmail()",2,1,0,0,0
"me.umov.analyzer.domain.model.ServiceLocal.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SystemParameter.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SystemParameter.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.SystemParameter.getSms()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getAgent()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getClient()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getClientId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getGroup()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getServiceLocal()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getSituationId()",2,1,0,0,0
"me.umov.analyzer.domain.model.Task.getTokenReport()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionRuleFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionRuleFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionRuleModelFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ActionRuleModelFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.AgentFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.AgentFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.AttributeFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.AttributeFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.CallbackCredentialsFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.CallbackCredentialsFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.CallbackParametersFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.CallbackParametersFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ClientFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ClientFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.CustomFieldValueFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.CustomFieldValueFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.EventFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.EventFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.HistoryFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.HistoryFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.HistoryItemFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.HistoryItemFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.MessageAWSFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.MessageAWSFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.MessageRequestFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.MessageRequestFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.NotificationMessageFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.NotificationMessageFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ProcessHasBeenExecutedFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.RecipientsFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.RecipientsFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ResultProcessRuleFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ResultProcessRuleFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.RuleFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.RuleFixture.buildOptional()",2,1,0,0,0
"me.umov.analyzer.fixture.RuleFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.RuleRequestFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.RuleRequestFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.SMSFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.SMSFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.SendMessageFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.SendMessageFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.ServiceLocalFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.ServiceLocalFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.SystemParameterFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.SystemParameterFixture.get()",2,1,0,0,0
"me.umov.analyzer.fixture.TaskDistributionCompletedFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.TaskFixture.build()",2,1,0,0,0
"me.umov.analyzer.fixture.TaskFixture.get()",2,1,0,0,0
"me.umov.analyzer.domain.model.Attribute.Attribute()",1,1,0,0,0
"me.umov.analyzer.domain.model.CallbackParameters.CallbackParameters()",1,1,0,0,0
"me.umov.analyzer.domain.model.EventSetting.EventSetting()",1,1,0,0,0
"me.umov.analyzer.domain.model.HttpCredentials.HttpCredentials()",1,1,0,0,0
"me.umov.analyzer.domain.repository.ActionRepository.findByEventIdAndClientIdAndTypeIn(Long eventId, Long clientId, List<String> types)",0,1,0,0,3
"me.umov.analyzer.domain.repository.EventRepository.findByEventPlatformIdAndClientIdAndActive(Long eventPlatformId, Long clientId, Character active)",0,1,0,0,3
"me.umov.analyzer.domain.repository.TaskRepository.existsByGroupAndSituationIdAndClientId(String group, Long situationId, Long clientId)",0,1,0,0,3
"me.umov.analyzer.domain.ports.ActionServices.getActionRule(Rule rule, ActionType actionType)",0,1,0,0,2
"me.umov.analyzer.domain.ports.BusinessService.redistributeTasks(Long clientId, RuleRequest ruleRequest)",0,1,0,0,2
"me.umov.analyzer.application.worker.IWorker.process(MessageAWS messageAws)",0,1,0,0,1
"me.umov.analyzer.domain.actions.ActionStrategy.execute(Rule rule)",0,1,0,0,1
"me.umov.analyzer.domain.core.Step.run(Rule rule)",0,1,0,0,1
"me.umov.analyzer.domain.ports.ActionServices.retrieveNotificationActions(Rule rule)",0,1,0,0,1
"me.umov.analyzer.domain.ports.ApplicationListener.process(T event)",0,1,0,0,1
"me.umov.analyzer.domain.ports.ApplicationListener.shouldProcess(Class clazz)",0,1,0,0,1
"me.umov.analyzer.domain.ports.IStepFacory.get(ProcessingState status)",0,1,0,0,1
"me.umov.analyzer.domain.ports.NotificationScheduler.schedule(ActionRuleModel actionRuleModel)",0,1,0,0,1
"me.umov.analyzer.domain.ports.NotificationTranslatorFactory.get(Action action)",0,1,0,0,1
"me.umov.analyzer.domain.ports.ProducerBuilder.get(Action action)",0,1,0,0,1
"me.umov.analyzer.domain.ports.ProducerBuilder.get(Rule rule)",0,1,0,0,1
"me.umov.analyzer.domain.ports.QueueProducer.send(SendMessage message)",0,1,0,0,1
"me.umov.analyzer.domain.ports.TranslatorMessage.transform(NotificationMessage notificationMessage)",0,1,0,0,1
"me.umov.analyzer.domain.repository.SystemParameterRepository.findByClientId(Long ClientId)",0,1,0,0,1
"me.umov.analyzer.domain.validators.RuleValidation.validate(T object)",0,1,0,0,1
"me.umov.analyzer.domain.core.Step.getClassToLogger()",0,1,0,0,0
"me.umov.analyzer.domain.events.RuleLogEvent.getActionRuleId()",0,1,0,0,0
"me.umov.analyzer.domain.events.RuleLogEvent.getClientId()",0,1,0,0,0
"me.umov.analyzer.domain.events.RuleLogEvent.getEntityId()",0,1,0,0,0
"me.umov.analyzer.domain.events.RuleLogEvent.getMessages()",0,1,0,0,0
"me.umov.analyzer.domain.ports.ProducerBuilder.getNotification()",0,1,0,0,0
"me.umov.analyzer.domain.ports.ProducerBuilder.getSynchronism()",0,1,0,0,0
