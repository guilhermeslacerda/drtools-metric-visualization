"method","loc","cyclo","calls","nbd","param"
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.deleteTreeNode(TreeNode p)",168,60,6,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.deleteTreeNode(TreeNode p)",168,60,6,8,1
"net.sourceforge.pmd.lang.java.ast.DumpFacade.dump(JavaNode node, String prefix)",176,59,88,3,2
"net.sourceforge.pmd.lang.ecmascript.ast.DumpFacade.dump(EcmascriptNode<?> node, String prefix)",161,56,76,2,2
"net.sourceforge.pmd.cpd.CsTokenizer$Tokenizer.getNextToken()",204,55,49,6,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalComputeIfAbsent(K k, Fun<? super K,?> mf)",126,52,32,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalComputeIfAbsent(K k, Fun<? super K,?> mf)",126,52,30,8,2
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.internalEquals(Object obj)",65,47,37,4,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalPutIfAbsent(Object k, Object v)",99,45,25,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalPutIfAbsent(Object k, Object v)",99,45,23,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalCompute(K k, boolean onlyIfPresent, BiFun<? super K,? super V,? extends V> mf)",129,43,31,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalCompute(K k, boolean onlyIfPresent, BiFun<? super K,? super V,? extends V> mf)",129,43,29,8,3
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.startsWithSafeResource(final ASTElExpression el)",69,43,7,6,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.ensureClosed(ASTLocalVariableDeclaration var, ASTVariableDeclaratorId id, Object data)",160,39,53,9,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalReplace(Object k, Object v, Object cv)",95,39,21,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalReplace(Object k, Object v, Object cv)",95,39,20,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalMerge(K k, V v, BiFun<? super V,? super V,? extends V> mf)",106,35,26,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalMerge(K k, V v, BiFun<? super V,? super V,? extends V> mf)",106,35,24,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalPutAll(Map<?,?> m)",101,34,28,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalPutAll(Map<?,?> m)",101,34,27,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.putTreeNode(int h, RubyObject k, Object v)",101,34,13,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.putTreeNode(int h, RubyObject k, Object v)",101,34,13,8,3
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.isAvoidingConflict(final AbstractJavaTypeNode node, final String name, final ASTImportDeclaration firstMatch)",92,34,51,7,3
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.determineArgumentTypes(JavaNameOccurrence occurrence, List<TypedNameDeclaration> parameterTypes)",121,33,67,6,2
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.visit(ASTMethodDeclaration node, Object data)",126,33,81,5,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.rebuild(AtomicReferenceArray<Node> tab)",97,32,24,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.rebuild(Node[] tab)",97,32,23,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalPut(Object k, Object v)",84,31,21,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalPut(Object k, Object v)",84,31,19,8,2
"net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule.visit(ASTFieldDeclaration node, Object data)",110,29,36,8,2
"com.concurrent_ruby.ext.jsr166e.Striped64.retryUpdate(long x, HashCode hc, boolean wasUncontended)",85,29,7,7,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.retryUpdate(long x, HashCode hc, boolean wasUncontended)",85,29,7,7,3
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getMethod(ASTPrimaryExpression node)",204,28,39,8,1
"net.sourceforge.pmd.lang.dfa.Linker.computePaths()",178,28,91,4,0
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.visit(ASTAdditiveExpression node, Object data)",68,26,28,3,2
"net.sourceforge.pmd.util.database.DBMSMetadata.getSourceObjectList(List<String> languages, List<String> schemas, List<String> sourceCodeTypes, List<String> sourceCodeNames)",110,24,23,7,4
"net.sourceforge.pmd.lang.java.rule.performance.RedundantFieldInitializerRule.visit(ASTFieldDeclaration fieldDeclaration, Object data)",74,24,41,7,2
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.checkLocalVariableUsage(ASTMethodDeclaration node, String returnVariableName)",54,23,39,10,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.checkImports(AbstractJavaTypeNode node, Object data)",84,23,38,7,2
"net.sourceforge.pmd.docs.RuleDocGenerator.generateRuleSetIndex(Map<Language,List<RuleSet>> rulesets)",178,23,163,6,1
"net.sourceforge.pmd.testframework.RuleTst.parseTests(Rule rule, Document doc)",110,23,69,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTStatement node, Object data)",108,23,86,5,2
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferForStringAppendsRule.visit(ASTVariableDeclaratorId node, Object data)",57,23,31,5,2
"net.sourceforge.pmd.util.database.DBType.equals(Object obj)",58,23,8,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.checkForAccessibility(final ASTSoqlExpression node, Object data)",79,22,40,6,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.rollupTypeBinaryNumericPromotion(TypeNode typeNode)",36,22,36,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.visit(ASTForStatement node, Object data)",60,22,28,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.IdempotentOperationsRule.visit(ASTStatementExpression node, Object data)",64,22,65,2,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTExpression node, Object data)",81,21,74,5,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.visit(ASTIfStatement node, Object data)",116,21,50,4,2
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.determineLocation(Node n, int index)",72,21,61,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule.visit(final ASTMethodDeclaration node, final Object data)",55,21,30,4,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.readObject(java.io.ObjectInputStream s)",80,20,14,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.readObject(java.io.ObjectInputStream s)",80,20,14,8,1
"net.sourceforge.pmd.docs.DeadLinksChecker.checkDeadLinks(Path rootDirectory)",120,20,54,6,1
"net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule.visit(ASTClassOrInterfaceBody decl, Object data)",57,20,20,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.overriddenMethodsRec(Class<?> exploredType, boolean skip, Set<Method> candidates, Set<Method> result, Set<Class<?>> alreadyExplored, boolean onlyPublic)",57,20,32,4,6
"net.sourceforge.pmd.lang.java.rule.errorprone.CompareObjectsWithEqualsRule.visit(ASTEqualityExpression node, Object data)",63,20,41,3,2
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.iterateAxis(byte axisNumber)",47,20,7,2,1
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.visit(ASTMethodDeclaration node, Object data)",66,19,42,10,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.visit(ASTCatchStatement catchStmt, Object data)",64,19,40,9,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveAppendsShouldReuseRule.getVariableAppended(ASTBlockStatement node)",64,19,31,9,1
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.checkLimitedFlags(ASTElement node, Object data)",60,19,20,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.checkApexTagsThatSupportEscaping(ASTElement node, Object data)",60,19,17,6,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.visit(ASTVariableDeclaratorId node, Object data)",74,19,26,5,2
"net.sourceforge.pmd.RuleSetReferenceId.RuleSetReferenceId(final String id, final RuleSetReferenceId externalRuleSetReferenceId)",114,19,21,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.testAllPMDBuiltInRulesMeetConventions()",92,19,43,4,0
"net.sourceforge.pmd.RuleSetFactory.parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode, String ref, boolean withDeprecatedRuleReferences)",91,19,37,4,5
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.isIPv6(final char firstChar, String s, final boolean checkIPv6, final boolean checkIPv4MappedIPv6)",79,19,15,4,4
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalClear()",63,18,13,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalClear()",63,18,12,8,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.findVariableHere(JavaNameOccurrence occurrence)",59,18,55,6,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.incorporateBounds(List<Bound> currentBounds, List<Bound> newBounds)",57,18,28,4,2
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.initializedInConstructor(List<NameOccurrence> usages, Set<ASTConstructorDeclaration> allConstructors)",47,18,15,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.findSanitizedVariables(AbstractApexNode<?> node)",45,18,23,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SuspiciousOctalEscapeRule.visit(ASTLiteral node, Object data)",69,17,26,10,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.getTreeNode(int h, RubyObject k, TreeNode p)",34,17,9,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.getTreeNode(int h, RubyObject k, TreeNode p)",34,17,9,8,3
"net.sourceforge.pmd.RuleSetWriter.createPropertiesElement(List<PropertyDescriptor<?>> propertyDescriptors, Map<PropertyDescriptor<?>,Object> propertiesByPropertyDescriptor)",58,17,19,6,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPrimaryExpression primaryNode, Object data)",91,17,47,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.populateType(TypeNode node, String className, int arrayDimens)",69,17,24,5,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.checkForDirectAssignment(Object ctx, final ASTFormalParameter parameter, final List<ASTBlockStatement> bs)",61,17,21,5,3
"net.sourceforge.pmd.lang.java.rule.multithreading.NonThreadSafeSingletonRule.visit(ASTMethodDeclaration node, Object data)",51,17,29,5,2
"net.sourceforge.pmd.lang.java.rule.performance.UselessStringValueOfRule.visit(ASTPrimaryPrefix node, Object data)",48,17,31,5,2
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.initializeXPathExpression(final Navigator navigator)",108,16,35,7,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.addNameOccurrence(NameOccurrence occurrence)",49,16,26,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.matchMethodDeclaration(JavaNameOccurrence occurrence, Set<MethodNameDeclaration> methodDeclarations, final boolean hasAuxclasspath, Set<NameDeclaration> result)",42,16,22,6,4
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.findVariableHere(PLSQLNameOccurrence occurrence)",66,16,45,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.copyConstraint(BoundOrConstraint first, BoundOrConstraint second, Sides sides, InferenceRuleType rule)",63,16,44,4,4
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getVariableDependencies(List<Bound> bounds)",61,16,23,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SingletonClassReturningNewInstanceRule.visit(ASTMethodDeclaration node, Object data)",67,15,21,8,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visitClassDec(ASTClassOrInterfaceDeclaration node, Object data)",66,15,42,8,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.getArgumentTypes(ASTArguments args)",35,15,17,8,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.getConstructorLength(Node node, int constructorLength)",69,15,18,6,2
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.visit(ASTVariableDeclaratorId node, Object data)",61,15,29,6,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidMultipleUnaryOperatorsRule.checkUnaryDescendent(Node node, Object data)",37,15,15,5,2
"net.sourceforge.pmd.lang.dfa.SequenceChecker.run()",92,15,44,4,0
"net.sourceforge.pmd.lang.dfa.Linker.getNodeToBreakStatement(DataFlowNode node)",41,15,29,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldDeclarationsShouldBeAtStartOfClassRule.visit(ASTFieldDeclaration node, Object data)",38,15,15,3,2
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isSelfAssignment()",39,15,13,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.equals(Object obj)",37,15,6,2,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.advance()",36,14,3,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.advance()",36,14,1,8,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule.visit(ASTMethodDeclaration method, Object data)",41,14,20,7,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTName node, Object data)",71,14,30,5,2
"net.sourceforge.pmd.RuleSetFactory.parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement, String ref)",72,14,31,4,3
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTArgumentList node, Object data)",53,14,36,4,2
"net.sourceforge.pmd.cpd.AbstractTokenizer.parseString(StringBuilder token, int loc, char stringDelimiter)",43,14,14,4,3
"net.sourceforge.pmd.util.database.DBURI.setFields()",92,14,45,3,0
"net.sourceforge.pmd.lang.java.ast.DumpFacade.collectModifiers(JavaNode node, List<String> extras)",41,14,24,3,2
"net.sourceforge.pmd.lang.java.rule.performance.BigIntegerInstantiationRule.visit(ASTAllocationExpression node, Object data)",33,14,27,3,2
"net.sourceforge.pmd.benchmark.TextReport.generate(Map<String,BenchmarkResult> benchmarksByName, PrintStream stream)",91,14,53,2,2
"net.sourceforge.pmd.lang.jsp.ast.DumpFacade.dump(Node node, String prefix)",62,14,33,2,2
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testOperationRoles()",49,14,36,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.checkForResources(Node node, Object data)",29,13,23,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Node.tryAwaitLock(Node[] tab, int i)",44,13,13,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Node.tryAwaitLock(AtomicReferenceArray<Node> tab, int i)",44,13,11,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.equals(Object o)",32,13,8,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.equals(Object o)",32,13,8,8,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.visit(ASTReturnStatement rtn, Object data)",42,13,25,7,2
"net.sourceforge.pmd.docs.RuleDocGenerator.generateLanguageIndex(Map<Language,List<RuleSet>> rulesets, Map<Language,List<RuleSet>> sortedAdditionalRulesets)",118,13,113,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.selectMethodsFirstPhase(JavaTypeDefinition context, List<MethodType> methodsToSearch, ASTArgumentList argList)",66,13,19,6,3
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.processElInScriptContext(ASTElExpression elExpression, ASTText prevText, Object data)",27,13,15,6,3
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTIfStatement node, Object data)",67,13,33,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addNodeToTree()",57,13,20,5,0
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.processAdditive(Object data, int concurrentCount, Node sn, Node rootNode)",41,13,11,5,4
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.split(String input, String regex, int limit)",58,13,29,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule.checkForViolations(ASTIfStatement node, Object data, Node conditionalExpression)",54,13,15,3,3
"net.sourceforge.pmd.lang.java.symboltable.NameFinder.checkForNameChild(JavaNode node)",31,13,32,3,1
"net.sourceforge.pmd.lang.vm.ast.TokenMgrError.addEscapes(final String str)",47,13,18,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",44,13,34,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.findLambdaScopeNameSegment(ASTLambdaExpression node)",37,13,11,2,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.equals(Object obj)",35,13,7,2,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.tryPresize(int size)",37,12,5,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.tryPresize(int size)",37,12,4,8,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule.isEmptyArray(String varName, AbstractNode typeDeclaration)",27,12,9,7,2
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.setClassNameFrom(JavaNode node)",41,12,16,5,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.findSafeLiterals(AbstractApexNode<?> node)",38,12,15,5,1
"net.sourceforge.pmd.cache.AbstractAnalysisCache.checkValidity(final RuleSets ruleSets, final ClassLoader auxclassPathClassLoader)",44,12,15,4,2
"net.sourceforge.pmd.lang.vm.rule.design.CollapsibleIfStatementsRule.handleIfElseIf(final AbstractVmNode node, final Object data)",37,12,11,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.OverrideBothEqualsAndHashcodeRule.visit(ASTMethodDeclarator node, Object data)",32,12,10,4,2
"net.sourceforge.pmd.lang.java.rule.performance.UnnecessaryWrapperObjectCreationRule.visit(ASTPrimaryPrefix node, Object data)",30,12,21,4,2
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",26,12,19,4,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.addForExpressionNode(Node node, Structure dataFlow)",34,12,17,3,2
"net.sourceforge.pmd.lang.java.rule.performance.BooleanInstantiationRule.visit(ASTPrimaryPrefix node, Object data)",33,12,23,3,2
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.doTask()",109,12,38,2,0
"net.sourceforge.pmd.lang.vf.ast.DumpFacade.dump(Node node, String prefix)",57,12,27,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.findMethod(ASTPrimaryExpression node, String className)",37,11,12,8,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.visitComments(ASTCompilationUnit node)",37,11,14,7,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isSubtypeable(JavaTypeDefinition parameter, JavaTypeDefinition argument)",48,11,17,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.doesElContainAnyUnescapedIdentifiers(final ASTElExpression elExpression, EnumSet<Escaping> escapes)",46,11,13,6,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule.analyzeMember(final AbstractJavaAccessNode node, final List<NameOccurrence> occurrences, final ClassScope classScope, final Object data)",38,11,16,6,4
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.processNode(Node sn)",33,11,18,6,1
"net.sourceforge.pmd.lang.vm.ast.NodeUtils.getSpecialText(final Token t)",73,11,7,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTSwitchExpression node, Object data)",42,11,17,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.checkInitializerExpressions(ASTVariableDeclaratorId node)",41,11,12,5,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CheckSkipResultRule.visit(ASTVariableDeclaratorId node, Object data)",37,11,15,5,2
"net.sourceforge.pmd.RuleSetFactory.parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)",73,11,41,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.processVariableAssignments(AbstractApexNode<?> node, Object data, final boolean reverseOrder)",41,11,14,4,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.recursivelyCheckForSelect(final ASTVariableExpression var, final ASTBinaryExpression node)",40,11,18,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule.extendsOrImplementsCloneable(final ASTClassOrInterfaceDeclaration node)",39,11,18,4,1
"net.sourceforge.pmd.util.database.DBType.DBType(String subProtocol, String subnamePrefix)",38,11,7,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.determineType()",35,11,17,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.addNameOccurrence(NameOccurrence occ)",34,11,15,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitUseExpectedRule.visit(ASTMethodDeclaration node, Object data)",32,11,20,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.visit(ConstructorNode constructorNode, Object data)",27,11,21,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.isExpectStatement(ASTStatementExpression expression, Map<String,List<NameOccurrence>> expectables)",27,11,17,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.MoreThanOneLoggerRule.visit(ASTVariableDeclarator node, Object data)",24,11,12,4,2
"net.sourceforge.pmd.lang.plsql.ast.DumpFacade.dump(PLSQLNode node, String prefix)",62,11,13,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer$ConstructorDetector.processToken(Token currentToken)",52,11,8,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.isConditionallyExecuted(Node node, ASTStatement loopBody)",44,11,9,3,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.suppresses(Rule rule)",43,11,13,3,1
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTStatement node, Object data)",42,11,39,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.hasGuard(ASTPrimaryExpression node, String methodCall, String logLevel)",40,11,17,3,3
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.getAtomicRepresentation(final Object value)",39,11,6,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningParametersRule.lookForViolation(Map<VariableNameDeclaration,List<NameOccurrence>> params, Object data)",22,11,18,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.detectAnnotations(Token currentToken)",21,11,0,3,1
"net.sourceforge.pmd.lang.java.rule.performance.StringToStringRule.visit(ASTVariableDeclaratorId node, Object data)",19,11,17,3,2
"net.sourceforge.pmd.rules.RuleFactory.buildRule(Element ruleElement)",83,11,41,2,1
"net.sourceforge.pmd.rules.RuleFactory.decorateRule(Rule referencedRule, RuleSetReference ruleSetReference, Element ruleElement)",53,11,30,2,3
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitBaseType(char descriptor)",37,11,2,2,1
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visitDomNode(XmlNode node, Node domNode, RuleContext ctx)",35,11,12,2,3
"net.sourceforge.pmd.lang.java.rule.multithreading.UnsynchronizedStaticFormatterRule.visit(ASTFieldDeclaration node, Object data)",32,11,13,2,2
"net.sourceforge.pmd.util.database.SourceObject.getSuffixFromType()",28,11,18,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractTypeBodyDeclaration.determineKind()",26,11,3,1,0
"ClazzPropertyOfPrimitiveTypes.test()",20,11,4,1,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentInOperandRule.visit(ASTExpression node, Object data)",16,11,10,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.visit(ASTCompilationUnit node, Object data)",17,10,17,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.toArray(T[] a)",28,10,9,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.toArray(T[] a)",28,10,9,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.internalGet(Object k)",21,10,6,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.internalGet(Object k)",21,10,5,8,1
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll(List<Node> nodes, RuleContext ctx)",58,10,30,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.isInitDataModifiedAfterInit(final VariableNameDeclaration variableDeclaration, final ASTReturnStatement rtn)",40,10,19,7,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isMemberVisibleFromClass(Class<?> classWithMember, int modifiers, Class<?> accessingClass)",43,10,11,6,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.collectCRUDMethodLevelChecks(final ASTMethodCallExpression node)",41,10,24,6,1
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.innerContainsSafeFields(final AbstractVFNode expression)",29,10,6,6,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getSuperClassTypeDefinition(Node node, Class<?> clazz)",35,10,9,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getTypeParameterDeclaration(Node startNode, String image)",23,10,8,5,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.determineLastAssignment()",51,10,27,4,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.visit(ASTUserClass node, Object data)",47,10,20,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.lub(List<JavaTypeDefinition> types)",46,10,13,4,1
"net.sourceforge.pmd.util.StringUtil.appendXmlEscaped(StringBuilder buf, String src, boolean supportUTF8)",37,10,15,4,3
"net.sourceforge.pmd.lang.vf.rule.security.VfCsrfRule.visit(ASTElement node, Object data)",35,10,9,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(final ASTMethodDeclaration node, Object data)",31,10,14,4,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTProgramUnit node, Object data)",54,10,17,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.visit(ASTStatementExpression node, Object data)",23,10,15,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.CheckResultSetRule.visit(ASTLocalVariableDeclaration node, Object data)",18,10,18,3,2
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.getMessage()",69,10,23,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.isUtilityClass(ASTAnyTypeDeclaration node)",38,10,12,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.AtLeastOneConstructorRule.visit(final ASTClassOrInterfaceDeclaration node, final Object data)",34,10,11,2,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.visit(ASTMethod node, Object data)",27,10,17,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.NullAssignmentRule.visit(ASTNullLiteral node, Object data)",27,10,15,2,2
"net.sourceforge.pmd.util.datasource.ZipDataSource.equals(Object obj)",27,10,8,2,1
"net.sourceforge.pmd.dcd.graph.MemberNode.equals(Object obj)",27,10,4,2,1
"net.sourceforge.pmd.cpd.PLSQLTokenizer.processToken(Tokens tokenEntries, GenericToken currentToken, String fileName)",20,10,4,1,3
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.ifVerify(ASTIfStatement is, String varname)",17,9,13,10,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.evaluateDangerOfConstructors1(Map<ConstructorHolder,List<MethodInvocation>> classConstructorMap, Set<MethodHolder> evaluatedMethods)",47,9,21,8,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule.hasClone(ASTReturnStatement ret, String varName)",14,9,10,7,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.selectMethodsThirdPhase(List<MethodType> methodsToSearch, ASTArgumentList argList)",53,9,16,6,2
"net.sourceforge.pmd.RuleSetWriter.createSingleRuleElement(Language language, LanguageVersion minimumLanguageVersion, LanguageVersion maximumLanguageVersion, Boolean deprecated, String name, String since, String ref, String message, String externalInfoUrl, String clazz, Boolean dfa, Boolean typeResolution, Boolean multifile, String description, RulePriority priority, List<PropertyDescriptor<?>> propertyDescriptors, Map<PropertyDescriptor<?>,Object> propertiesByPropertyDescriptor, List<String> examples)",47,9,24,6,18
"net.sourceforge.pmd.lang.java.rule.codestyle.DuplicateImportsRule.isDisambiguationImport(ASTCompilationUnit node, String singleTypePkg, String singleTypeName)",35,9,16,6,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.checkForCRUD(final AbstractApexNode<?> node, final Object data, final String crudMethod)",30,9,20,6,3
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getTypeDefinitionOfVariableFromScope(Scope scope, String image, Class<?> accessingClass)",59,9,19,5,3
"net.sourceforge.pmd.util.log.AntLogHandler.getAntLogLevel()",38,9,19,5,0
"net.sourceforge.pmd.util.log.AntLogHandler.publish(LogRecord logRecord)",30,9,8,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",20,9,18,5,2
"net.sourceforge.pmd.lang.java.rule.performance.UselessStringValueOfRule.isPrimitive(Node parent)",18,9,7,5,1
"net.sourceforge.pmd.lang.dfa.Linker.computeFor(int firstIndex, int lastIndex)",49,9,30,4,2
"net.sourceforge.pmd.util.StringUtil.substringsOf(String source, char delimiter)",48,9,5,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.reportStrings(ASTMethodCallExpression m, Object data)",34,9,14,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",30,9,13,4,2
"net.sourceforge.pmd.cpd.AbstractTokenizer.getTokenFromLine(StringBuilder token, int loc)",29,9,12,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.visit(MethodNode methodNode, Object data)",27,9,18,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.checkViolation()",20,9,4,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.isAssertOrFailStatement(ASTStatementExpression expression)",18,9,7,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.visit(final ASTName node, final Object data)",55,9,24,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTTypeMethod node, Object data)",45,9,16,3,2
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.fillBuff()",40,9,5,3,0
"net.sourceforge.pmd.lang.java.rule.security.HardCodedCryptoKeyRule.validateProperKeyArgument(Object data, ASTPrimaryPrefix firstArgumentExpression)",38,9,12,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.hasSameSubTree(Node node1, Node node2, String exceptionName1, String exceptionName2)",34,9,9,3,4
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.checkName(List<String> prefixes, List<String> suffixes, ApexNode<?> node, boolean isStatic, boolean isFinal, Object data)",33,9,11,3,6
"net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule.findExpressionNames(Node nullCompareVariable, List<String> results)",32,9,13,3,2
"net.sourceforge.pmd.lang.java.rule.security.InsecureCryptoIvRule.validateProperIv(Object data, ASTPrimaryPrefix firstArgumentExpression)",29,9,12,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryCaseChangeRule.getBadPrefixOrNull(ASTPrimaryExpression exp, int childrenCount)",25,9,8,3,2
"net.sourceforge.pmd.renderers.TextColorRenderer.end()",69,9,72,2,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.equals(Object o)",62,9,25,2,1
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testOperationVisibility()",47,9,34,2,0
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testFieldvisibility()",45,9,33,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.resolveTypeDefinition(final Type type, Method method, List<JavaTypeDefinition> methodTypeArgs)",41,9,21,2,3
"net.sourceforge.pmd.rules.RuleBuilder.build()",39,9,21,2,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule.visit(ASTUserClass node, Object data)",29,9,12,2,2
"net.sourceforge.pmd.lang.java.rule.performance.AvoidInstantiatingObjectsInLoopsRule.insideLoop(ASTAllocationExpression node)",25,9,9,2,1
"net.sourceforge.pmd.lang.java.rule.performance.StringInstantiationRule.visit(ASTAllocationExpression node, Object data)",35,9,11,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.evaluateDangerOfMethods(Map<MethodHolder,List<MethodInvocation>> classMethodMap)",46,8,22,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.evaluateDangerOfConstructors2(Map<ConstructorHolder,List<MethodInvocation>> classConstructorMap)",40,8,17,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.splitTreeBin(AtomicReferenceArray<Node> nextTab, int i, TreeBin t)",37,8,5,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.splitTreeBin(Node[] nextTab, int i, TreeBin t)",37,8,4,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.getValue(int h, Object k)",25,8,6,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.getValue(int h, Object k)",25,8,6,8,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.check(Node node)",22,8,16,7,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getApplicableMethods(JavaTypeDefinition context, String methodName, List<JavaTypeDefinition> typeArguments, int argArity, Class<?> accessingClass)",51,8,15,6,5
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.selectMethodsSecondPhase(List<MethodType> methodsToSearch, ASTArgumentList argList)",38,8,11,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.checkAllOnEventTags(ASTElement node, Object data)",32,8,11,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.hasELInInnerElements(final ASTElement node)",26,8,9,6,1
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.startsWithSlashLiteral(final ASTElExpression elExpression)",16,8,9,6,1
"net.sourceforge.pmd.lang.java.symboltable.OccurrenceFinder.visit(ASTPrimaryExpression node, Object data)",67,8,19,5,2
"net.sourceforge.pmd.lang.plsql.symboltable.OccurrenceFinder.visit(ASTPrimaryExpression node, Object data)",59,8,18,5,2
"net.sourceforge.pmd.cache.FileAnalysisCache.persist()",47,8,28,5,0
"net.sourceforge.pmd.util.FileUtil.collect(List<DataSource> dataSources, String fileLocation, FilenameFilter filenameFilter)",37,8,21,5,3
"net.sourceforge.pmd.lang.java.rule.AbstractPoorMethodCall.visit(ASTVariableDeclaratorId node, Object data)",37,8,17,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.buildDataFlowFor(PLSQLNode node)",35,8,29,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTForStatement node, Object data)",29,8,14,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.usedInOuter(NameDeclaration decl, JavaNode body)",28,8,14,5,2
"net.sourceforge.pmd.lang.vm.ast.ASTMethod$MethodCacheKey.equals(final Object o)",25,8,2,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTLiteral node, Object data)",23,8,15,5,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.handleParseProblems(EcmascriptNode<? extends AstNode> node)",22,8,14,5,1
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.lclFindChildrenOfType(Node node, Class<T> targetType, List<T> results)",20,8,10,5,3
"net.sourceforge.pmd.util.database.DBType.loadDBProperties(String matchString)",101,8,40,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree.addRuleViolation(RuleViolation violation)",51,8,11,4,1
"net.sourceforge.pmd.util.StringUtil.isSame(String s1, String s2, boolean trim, boolean ignoreCase, boolean standardizeWhitespace)",33,8,6,4,5
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTMethodDeclaration node, Object data)",31,8,11,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitUseExpectedRule.visit(ASTClassOrInterfaceBodyDeclaration node, Object data)",26,8,10,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.isIPv4(final char firstChar, final String s)",22,8,8,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.containsExpectOrAssert(Node n, Map<String,List<NameOccurrence>> expectables, Map<String,VariableNameDeclaration> variables)",19,8,7,4,3
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.visit(ASTIfStatement node, Object data)",18,8,12,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.findSafeVariablesInSignature(ASTMethod m)",17,8,5,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.boundsHaveAnEqualityBetween(List<Variable> firstList, Variable second, List<Bound> bounds)",15,8,5,4,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.visit(ASTLocalVariableDeclaration node, Object data)",41,8,19,3,2
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.checkValidDefaults(List<T> items, String[] legalNamePrefixes)",41,8,5,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTExpression node, Object data)",39,8,26,3,2
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.visit(ASTMethod node, Object data)",37,8,18,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTTriggerTimingPointSection node, Object data)",37,8,15,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.checkVariableDeclaratorId(List<String> prefixes, List<String> suffixes, boolean isStatic, boolean isFinal, ASTVariableDeclaratorId variableDeclaratorId, Object data)",34,8,11,3,6
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getEscapedStringLiteral()",27,8,16,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.stripIntValue()",26,8,14,3,0
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.assignCommentsToDeclarations(ASTCompilationUnit cUnit)",25,8,6,3,1
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.isInStringBufferOperation(Node node, int length, String methodName)",24,8,10,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.TestClassWithoutTestCasesRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",23,8,6,3,2
"net.sourceforge.pmd.lang.rule.ImportWrapper.ImportWrapper(String fullname, String name, Node node, Class<?> type, boolean isStaticDemand)",22,8,16,3,5
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit3Class(ASTCompilationUnit node)",22,8,13,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.check(Node node, Object data)",21,8,16,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer.processToken(Tokens tokenEntries, GenericToken currentToken, String fileName)",20,8,6,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.isReferencingThrowable(ASTPrimaryExpression last)",15,8,10,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.add(long x)",15,8,4,3,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.add(long x)",15,8,4,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isDoubleLiteral()",14,8,5,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.isSerializationMethod(ASTMethodDeclaration node)",13,8,16,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.skipAnnotationSuppression(final Token currentToken)",11,8,2,3,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.verifyResults(double sigma, double minimum, int topScore, int expected, int delta)",56,8,33,2,5
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isOnLeftHandSide()",34,8,19,2,0
"ParserCornerCases17.stringsInSwitchStatements()",23,8,0,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTMethod node, Object data)",22,8,11,2,2
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferLengthRule.visit(ASTName decl, Object data)",20,8,8,2,2
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.forClass(TypeDefinitionType type, JavaTypeDefinition... intersectionTypes)",20,8,2,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldNamingConventionsRule.visit(ASTFieldDeclaration node, Object data)",18,8,12,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.isForeignAttributeOrMethod(ASTPrimaryExpression node)",15,8,6,2,1
"net.sourceforge.pmd.util.DateTimeUtil.asHoursMinutesSeconds(long milliseconds)",38,8,7,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.hashCode()",12,8,1,1,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.isInitCauseCalled(String target, List<NameOccurrence> occurrences)",20,7,8,9,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.splitBin(AtomicReferenceArray<Node> nextTab, int i, Node e)",29,7,3,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.splitBin(Node[] nextTab, int i, Node e)",29,7,2,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.toArray()",21,7,6,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.toArray()",21,7,6,8,0
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.initialize()",41,7,16,7,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule.hasArraysCopyOf(ASTReturnStatement ret)",10,7,11,7,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.produceInitialBounds(Method method, JavaTypeDefinition context, List<Variable> variables, List<Bound> initialBounds)",44,7,15,6,4
"net.sourceforge.pmd.cpd.CsTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",39,7,17,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(final ASTFieldDeclaration node, Object data)",34,7,20,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleIfNotExists(final Rule ruleOrRef)",32,7,7,6,1
"net.sourceforge.pmd.util.datasource.FileDataSource.glomName(boolean shortNames, String inputFileName, File file)",30,7,20,6,3
"net.sourceforge.pmd.docs.RuleDocGenerator.stripIndentation(String description)",30,7,15,6,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule.isCompileTimeConstant(ASTPrimaryExpression expressions)",28,7,10,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.recursivelyEvaluateCRUDMethodCalls(final AbstractApexNode<?> self, final Set<ASTMethodCallExpression> innerMethodCalls, final ASTBlockStatement blockStatement)",25,7,10,6,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.validateCRUDCheckPresent(final AbstractApexNode<?> node, final Object data, final String crudMethod, final String typeCheck)",25,7,7,6,4
"net.sourceforge.pmd.RuleViolationComparator.compare(final RuleViolation r1, final RuleViolation r2)",22,7,19,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.checkSubtypeability(MethodType method, MethodType subtypeableMethod)",22,7,16,6,2
"net.sourceforge.pmd.util.datasource.FileDataSource.equals(Object obj)",20,7,3,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.getConstructorAppendsLength(final Node node)",19,7,7,6,1
"net.sourceforge.pmd.testframework.RuleTst.runTest(TestDescriptor test)",51,7,28,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.populateImports(ASTCompilationUnit node)",47,7,27,5,1
"net.sourceforge.pmd.renderers.YAHTMLRenderer.addViolation(RuleViolation violation)",38,7,17,5,1
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.hasLombokAnnotation(Node node)",33,7,9,5,1
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.visit(ASTImportDeclaration node, Object data)",30,7,11,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule.visit(final ASTAllocationExpression node, final Object data)",29,7,12,5,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.visit(ASTUserClass node, Object data)",29,7,11,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.checkConstructor(ASTVariableDeclaratorId node, Object data)",25,7,9,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.removeFromTree()",20,7,9,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.rollupTypeUnaryNumericPromotion(TypeNode typeNode)",16,7,12,5,1
"net.sourceforge.pmd.PMD.internalGetApplicableFiles(PMDConfiguration configuration, Set<Language> languages)",56,7,25,4,2
"net.sourceforge.pmd.renderers.RendererFactory.createRenderer(String reportFormat, Properties properties)",48,7,20,4,2
"net.sourceforge.pmd.ant.Formatter.start(String baseDir)",45,7,15,4,1
"net.sourceforge.pmd.util.designer.Designer$SymbolTableListener.valueChanged(TreeSelectionEvent e)",44,7,27,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.getIterableNameOrNullToAbort(ASTExpression guardCondition, String itName)",43,7,12,4,2
"net.sourceforge.pmd.lang.java.rule.UselessAssignment.execute(CurrentPath path)",42,7,18,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree$TreeIterator.getNext()",42,7,6,4,0
"net.sourceforge.pmd.cpd.MatchAlgorithm.hash()",38,7,16,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.isReplaceableIteratorLoop(Entry<VariableNameDeclaration,List<NameOccurrence>> indexInfo, ASTExpression guardCondition, Entry<VariableNameDeclaration,List<NameOccurrence>> iterableInfo, ASTForStatement stmt)",38,7,10,4,4
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.unexpandEntities(Node n, String te, boolean withQuotes)",36,7,28,4,3
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTJoinClause node, Object data)",35,7,17,4,2
"net.sourceforge.pmd.util.database.DBType.setProperties(Properties properties)",35,7,14,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.inferTypes(List<Constraint> constraints, List<Bound> bounds, List<Variable> variables)",34,7,12,4,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.getRuleAnnotatedExpectedExceptions(Scope classScope)",29,7,22,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getInstantiations(List<Bound> bounds)",27,7,11,4,1
"net.sourceforge.pmd.lang.dfa.Linker.computeIf(int first, int second, int last)",25,7,31,4,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.findTaintedVariables(AbstractApexNode<?> node, Object data)",25,7,8,4,2
"net.sourceforge.pmd.lang.java.rule.design.PositionalIteratorRule.visit(ASTWhileStatement node, Object data)",23,7,11,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.visit(ASTMethodDeclaration methodDeclaration, Object o)",22,7,13,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.visit(FieldNode fieldNode, Object data)",20,7,17,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.isJUnitTest(ASTClassOrInterfaceType type)",19,7,8,4,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotation.suppresses(Rule rule)",18,7,11,4,1
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.checkEachChildOnNextLine(Object data, Node parent, int firstLine, int indentation)",17,7,10,4,4
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.isVerifyStatement(ASTStatementExpression expression)",17,7,5,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getUnequalSides(BoundOrConstraint first, BoundOrConstraint second)",16,7,10,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule$AssertionCall.check(Object ctx, ASTArguments node)",16,7,8,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.isParenthesisAroundMatch(Node node)",16,7,7,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.checkVariableAccess(DataFlowNode inode, VariableAccess va, final Usage u)",15,7,14,4,3
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.addSourceFilesToCPD(CPD cpd, CPDConfiguration arguments)",14,7,17,4,2
"net.sourceforge.pmd.util.database.DBType.hashCode()",12,7,6,4,0
"net.sourceforge.pmd.util.database.DBURI.DBURI(String string)",99,7,24,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.main(String[] args)",48,7,23,3,1
"net.sourceforge.pmd.renderers.VBHTMLRenderer.end()",47,7,39,3,0
"net.sourceforge.pmd.renderers.XMLRenderer.end()",46,7,55,3,0
"net.sourceforge.pmd.renderers.VBHTMLRenderer.renderFileViolations(Iterator<RuleViolation> violations)",44,7,25,3,1
"net.sourceforge.pmd.renderers.CodeClimateRenderer.getBody()",42,7,25,3,0
"net.sourceforge.pmd.lang.java.xpath.TypeOfFunction.typeof(Node n, String nodeTypeName, String fullTypeName, String shortTypeName)",38,7,14,3,4
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.checkIncrementAndDecrement(Object data, Set<String> loopVariables, ASTStatement loopBody, IgnoreFlags... ignoreFlags)",36,7,16,3,4
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.updateLineColumn(char c)",34,7,0,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.visit(ASTLiteral node, Object data)",33,7,13,3,2
"net.sourceforge.pmd.lang.java.xpath.TypeOfFunction.call(Context context, List args)",33,7,11,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",32,7,20,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.getLogLevelName(Node node, String methodCallName)",31,7,10,3,2
"net.sourceforge.pmd.document.DocumentFileTest.readAllBytes(final FileInputStream stream)",31,7,3,3,1
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.readAllBytes(final FileInputStream stream)",31,7,3,3,1
"net.sourceforge.pmd.cpd.CSVRenderer.render(Iterator<Match> matches, Writer writer)",30,7,38,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyLockableObject.nsWait(ThreadContext context, IRubyObject[] args)",30,7,12,3,2
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.computeWithResultOption(MetricKey<O> key, T node, boolean force, MetricOptions options, ResultOption option, ProjectMemoizer<T,O> stats)",28,7,9,3,6
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.visit(ASTMethodDeclaration node, Object data)",27,7,12,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryCaseChangeRule.visit(ASTPrimaryExpression exp, Object data)",27,7,8,3,2
"net.sourceforge.pmd.cpd.MatchCollector.collect(List<TokenEntry> marks)",26,7,11,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.mark(Benchmark type, String name, long time, long count)",26,7,3,3,4
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.isLocal()",24,7,2,3,0
"net.sourceforge.pmd.lang.vm.rule.bestpractices.UnusedMacroParameterRule.visit(final ASTDirective node, final Object data)",23,7,16,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.extractProperties()",23,7,15,3,0
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.visit(ASTCompilationUnit node, Object data)",20,7,7,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.visit(ASTFieldDeclaration node, Object data)",18,7,8,3,2
"org.sonar.plugins.scala.language.Comment.getNumberOfBlankLines()",17,7,3,3,0
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.doesNodeContainJUnitAnnotation(Node node, String annotationTypeClassName)",15,7,7,3,2
"net.sourceforge.pmd.cpd.PHPTokenizer.tokenize(SourceCode tokens, Tokens tokenEntries)",13,7,11,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.LooseCouplingRule.methodHasOverride(Node node)",12,7,7,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.visit(ASTMethodDeclaration node, Object data)",9,7,7,3,2
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.equals(Object o)",66,7,21,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.setUp()",48,7,27,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTIfStatement node, Object data)",48,7,20,2,2
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.apply(RuleContext ctx)",47,7,23,2,1
"net.sourceforge.pmd.lang.java.ast.CommentUtil.javadocContentAfter(String text, int position)",40,7,13,2,2
"net.sourceforge.pmd.lang.java.multifile.PackageStats.getClassStats(JavaTypeQualifiedName qname, boolean createIfNotFound)",38,7,13,2,2
"net.sourceforge.pmd.Report.merge(Report r)",33,7,23,2,1
"net.sourceforge.pmd.lang.java.qname.QualifiedNameFactory.ofStringWithClassLoader(String name, ClassLoader classLoader)",32,7,26,2,2
"net.sourceforge.pmd.renderers.XSLTRenderer.start()",30,7,13,2,0
"net.sourceforge.pmd.util.CollectionUtil.valuesAreTransitivelyEqual(Object[] thisArray, Object[] thatArray)",28,7,1,2,2
"net.sourceforge.pmd.lang.apex.rule.design.TooManyFieldsRule.visit(ASTUserClass node, Object data)",27,7,13,2,2
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.deriveAccessLabels(List<DataFlowNode> flow)",26,7,13,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.NameFinder.checkForNameChild(Node node)",24,7,17,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidFieldNameMatchingMethodNameRule.visit(ASTClassOrInterfaceBody node, Object data)",24,7,15,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.visit(ASTMethodDeclaration node, Object data)",24,7,14,2,2
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.visit(ASTUserClass node, Object data)",23,7,13,2,2
"net.sourceforge.pmd.dcd.graph.MemberNodeComparator.compare(MemberNode node1, MemberNode node2)",23,7,3,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTSwitchStatement node, Object data)",22,7,11,2,2
"net.sourceforge.pmd.cpd.CPPTokenizer.maybeSkipBlocks(String test)",22,7,9,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SuspiciousHashcodeMethodNameRule.visit(ASTMethodDeclaration node, Object data)",21,7,14,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableCouldBeFinalRule.visit(ASTLocalVariableDeclaration node, Object data)",20,7,13,2,2
"net.sourceforge.pmd.cpd.Mark.equals(Object obj)",20,7,3,2,1
"net.sourceforge.pmd.lang.java.symboltable.Search.searchUpward(NameOccurrence nameOccurrence, Scope scope)",18,7,10,2,2
"net.sourceforge.pmd.util.viewer.gui.MainFrame.getLanguageVersion()",17,7,20,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.Search.searchUpward(PLSQLNameOccurrence nameOccurrence, Scope scope)",17,7,13,2,2
"net.sourceforge.pmd.lang.java.rule.performance.InefficientEmptyStringCheckRule.visit(ASTPrimaryExpression node, Object data)",16,7,14,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.check(PropertyDescriptor<List<String>> property, Node node, Object data)",16,7,7,2,3
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isExactlyAny(TypedNameDeclaration vnd, Class<?>... clazzes)",10,7,8,2,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.FieldNamingConventionsRule.visit(ASTField node, Object data)",21,7,12,1,2
"net.sourceforge.pmd.ant.AbstractAntTestHelper.validatePostConstruct()",5,7,3,1,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.checkForTargetUsage(String target, Node baseNode)",24,6,4,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity, float loadFactor, int concurrencyLevel)",29,6,1,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity, float loadFactor, int concurrencyLevel)",29,6,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.toString()",28,6,10,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.toString()",28,6,10,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visit(ASTMethodDeclarator node, Object data)",22,6,15,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.initTable()",22,6,2,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.initTable()",22,6,2,8,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.findFirstMatch(List<ASTImportDeclaration> imports)",21,6,2,7,1
"net.sourceforge.pmd.RuleSet.apply(List<? extends Node> acuList, RuleContext ctx)",30,6,15,6,2
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.qualifyTypeName(String typeImage)",29,6,12,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.getInitialLength(Node node)",20,6,9,6,1
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.doesTagSupportEscaping(final ASTElement node)",15,6,3,6,1
"net.sourceforge.pmd.renderers.YAHTMLRenderer.renderClasses(String outputDir)",47,6,53,5,1
"net.sourceforge.pmd.cache.FileAnalysisCache.loadFromFile(final File cacheFile)",46,6,23,5,1
"net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader.getImportedClasses(String name)",27,6,11,5,1
"net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule.isOkUsingLombok(ASTClassOrInterfaceDeclaration parent)",25,6,7,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getEnclosingTypeDeclaration(Node node)",25,6,2,5,1
"net.sourceforge.pmd.testframework.RuleTst.assertMessages(Report report, TestDescriptor test)",24,6,16,5,2
"net.sourceforge.pmd.testframework.RuleTst.assertLineNumbers(Report report, TestDescriptor test)",23,6,16,5,2
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.isSupressed(Node node, Rule rule)",22,6,7,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.phase2(boolean flag)",21,6,8,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.equalsPseudoPathElementWithDoBranchNodeInLevel(DefaultMutableTreeNode level)",18,6,7,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.getExpressionVarName(Node e)",17,6,6,5,1
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.setVariableNameIfExists(Node node)",14,6,7,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.getArrays(ASTFormalParameters params)",12,6,6,5,1
"net.sourceforge.pmd.PMD.run(String[] args)",57,6,21,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule$MethodLookup.resolveBridges(List<Method> overloads)",53,6,9,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$AbstractResolver.resolveMaybeInner(final String name, final String fqName)",51,6,8,4,2
"net.sourceforge.pmd.PMD.processFiles(final PMDConfiguration configuration, final RuleSetFactory ruleSetFactory, final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers)",46,6,15,4,5
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.resolveVariables(List<Bound> bounds)",40,6,9,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTProgramUnit node, Object data)",34,6,23,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTTypeMethod node, Object data)",34,6,23,4,2
"net.sourceforge.pmd.util.StringUtil.maxCommonLeadingWhitespaceForAll(String[] strings)",34,6,4,4,1
"net.sourceforge.pmd.lang.dfa.Linker.computeSwitch(int firstIndex, int lastIndex)",33,6,21,4,2
"net.sourceforge.pmd.cpd.CPDConfiguration.filenameFilter()",33,6,9,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.isProperSubsetOfVariables(List<Variable> variables, Map<Variable,JavaTypeDefinition> instantiations, Map<Variable,Set<Variable>> dependencies, List<Bound> bounds)",30,6,4,4,4
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.merge(JavaTypeDefinition first, JavaTypeDefinition second)",29,6,16,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.getIndexVarDeclaration(ASTForInit init, ASTForUpdate update)",29,6,11,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.UselessOperationOnImmutableRule.visit(ASTLocalVariableDeclaration node, Object data)",27,6,19,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.execute(CurrentPath path)",27,6,9,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.getVariableName(ASTPrimaryExpression node)",26,6,14,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree.isStringInLevel(String str)",25,6,5,4,1
"net.sourceforge.pmd.cpd.AbstractTokenizer.tokenize(SourceCode tokens, Tokens tokenEntries)",24,6,15,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTReturnStatement node, Object data)",24,6,11,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.occurenceIsListGet(NameOccurrence occ, String listName)",24,6,10,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTAnnotationTypeDeclaration node, Object data)",24,6,10,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.createMethodCalls(ASTPrimaryExpression expression)",24,6,8,4,1
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",20,6,8,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isWhitelisted(List<Identifier> ids)",20,6,8,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.visit(ASTLiteral node, Object data)",19,6,11,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.isNodesEquals(Node n1, Node n2)",18,6,11,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.violationAlreadyExists(String type, String var, int startLine, int endLine)",18,6,6,4,4
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.isConditionalWithAllMatches(Node node)",18,6,3,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.isExpectAnnotated(Node methodParent)",17,6,6,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.isLocalAttributeAccess(String varName, Scope scope)",16,6,7,4,2
"net.sourceforge.pmd.lang.java.rule.design.PositionalIteratorRule.collectNames(String target, List<String> names, Node node)",12,6,10,4,3
"net.sourceforge.pmd.cpd.GUI.go()",67,6,55,3,0
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegister.closeTag(String closingTagName)",55,6,12,3,1
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegister.closeTag(String closingTagName)",55,6,12,3,1
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.adjustBeginLineColumn(int newLine, int newCol)",51,6,0,3,2
"net.sourceforge.pmd.util.database.DBMSMetadataTest.dumpResultSet(ResultSet resultSet, String description)",37,6,14,3,2
"net.sourceforge.pmd.renderers.CodeClimateRenderer.asIssue(RuleViolation rv)",33,6,7,3,1
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.assignApexDocTokenToNode(AstNode jorjeNode, ApexNode<?> node)",31,6,3,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.expectedArguments(final ASTExpression node)",27,6,14,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.markUsages(DataFlowNode inode)",25,6,16,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule$ExceptionParser.parse(String s)",25,6,12,3,1
"net.sourceforge.pmd.util.database.DBURI.getParameterMap(URI dburi)",25,6,7,3,1
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.markUsages(DataFlowNode inode)",24,6,14,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.equivalenceClasses(List<ASTCatchStatement> catches)",24,6,9,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule.visit(ASTLocalVariableDeclaration node, Object data)",24,6,8,3,2
"net.sourceforge.pmd.dcd.ClassLoaderUtil.isOverridenMethod(Class<?> clazz, Method method, boolean checkThisClass)",22,6,8,3,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule.calledFromOutsideItself(List<NameOccurrence> occs, NameDeclaration mnd)",22,6,7,3,2
"net.sourceforge.pmd.lang.java.rule.design.ExceptionAsFlowControlRule.visit(ASTThrowStatement node, Object data)",21,6,12,3,2
"net.sourceforge.pmd.cpd.MatchCollector.reportMatch(TokenEntry mark1, TokenEntry mark2, int dupes)",20,6,16,3,3
"net.sourceforge.pmd.ant.PMDTask.validate()",20,6,7,3,0
"net.sourceforge.pmd.lang.java.rule.regex.RegexHelper.compilePatternsFromList(List<String> list)",20,6,5,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.dump(final String prefix, final boolean recurse, final Writer writer)",19,6,3,3,3
"net.sourceforge.pmd.lang.java.xpath.GetCommentOnFunction.call(Context context, List args)",18,6,10,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.DontImportJavaLangRule.visit(ASTImportDeclaration node, Object data)",18,6,9,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.visit(ASTFormalParameters node, Object data)",18,6,6,3,2
"net.sourceforge.pmd.lang.vm.rule.bestpractices.AvoidReassigningParametersRule.visit(final ASTDirective node, final Object data)",17,6,15,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.isNoMethodName(Node name)",17,6,10,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.runChecks(AbstractApexNode<?> node, Object data)",16,6,10,3,2
"net.sourceforge.pmd.lang.rule.ImportWrapper.equals(Object other)",16,6,5,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.visit(ASTPrimarySuffix node, Object data)",15,6,10,3,2
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnitMethod(ASTMethodDeclaration method, Object data)",15,6,7,3,2
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression(Rule rule, T node)",15,6,4,3,2
"net.sourceforge.pmd.cpd.GUI.getPhaseText(int phase)",15,6,0,3,1
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getMethodSignature(String name, Class<?>... parameterTypes)",13,6,10,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.hasOverrideAnnotation(ASTMethodDeclaration node)",13,6,7,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getIntBase()",13,6,7,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.LooseCouplingRule.visit(ASTClassOrInterfaceType node, Object data)",13,6,6,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isLongLiteral()",13,6,4,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.CheckResultSetRule.visit(ASTName node, Object data)",12,6,9,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkBooleanMethods(ASTMethodDeclaration node, Object data, String nameOfMethod)",11,6,9,3,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.throwsOneException(ASTMethodDeclaration node, Class<? extends Throwable> exception)",10,6,10,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isFloatLiteral()",9,6,4,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isIntLiteral()",8,6,4,3,0
"net.sourceforge.pmd.lang.xml.ast.DumpFacade.dump(XmlNode node, String prefix)",47,6,19,2,2
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.visit(AbstractReportNode node)",45,6,11,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.drawMyLine(int index1, int index2, Graphics g)",37,6,14,2,3
"net.sourceforge.pmd.util.filter.Filters.buildRegexFilterExcludeOverInclude(List<String> includeRegexes, List<String> excludeRegexes)",34,6,4,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(PLSQLNode node, Object data)",33,6,24,2,2
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.equals(Object obj)",31,6,4,2,1
"net.sourceforge.pmd.util.CollectionUtil.areSemanticEquals(T[] a, T[] b)",31,6,1,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.glomSuppressions(Writer writer, List<Report.SuppressedViolation> suppressed)",30,6,27,2,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isFinal()",27,6,8,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.apply(String ruleset)",26,6,10,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.illegalTermsIn(Comment comment)",24,6,11,2,1
"net.sourceforge.pmd.lang.java.rule.migrating.UnnecessaryCastRule.process(Node node, Object data)",19,6,11,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.visit(ASTVariableDeclaratorId node, Object data)",18,6,12,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.checkCommentMeetsRequirement(Object data, AbstractJavaNode node, PropertyDescriptor<CommentRequirement> descriptor)",18,6,5,2,3
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.visit(ASTAnyTypeDeclaration node, Object data)",16,6,9,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.isBeanAccessor(ASTMethodDeclarator meth)",15,6,10,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldNamingConventionsRule.kindDisplayName(ASTVariableDeclaratorId node, PropertyDescriptor<Pattern> descriptor)",13,6,6,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.insideLoop(AbstractNode node)",12,6,2,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule.insideLoop(ASTSoqlExpression node)",12,6,2,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoslInLoopsRule.insideLoop(ASTSoslExpression node)",12,6,2,2,1
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.getDeclaringType(Node node)",40,6,10,1,1
"net.sourceforge.pmd.lang.java.metrics.impl.CycloMetric.booleanExpressionComplexity(Node expr)",31,6,4,1,1
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.nextLong(long n)",27,6,2,1,1
"net.sourceforge.pmd.lang.LanguageVersion.compareTo(LanguageVersion o)",23,6,13,1,1
"net.sourceforge.pmd.lang.java.ast.ASTExpression.isStandAlonePrimitive()",23,6,9,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.equals(Object obj)",19,6,7,1,1
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexAssertionsShouldIncludeMessageRule.visit(ASTMethodCallExpression node, Object data)",16,6,8,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidCallingFinalizeRule.visit(ASTPrimaryPrefix pp, Object ctx)",15,6,12,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTBlock node, Object data)",15,6,8,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidCallingFinalizeRule.checkForViolation(ScopedNode node)",12,6,6,1,1
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.skipLibraryAndImport(final AntlrToken currentToken)",7,6,1,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer$KotlinTokenFilter.skipPackageAndImport(final AntlrToken currentToken)",7,6,1,1,1
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.matchName(ASTPrimaryExpression ape, String name)",9,5,5,10,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveAppendsShouldReuseRule.getNextBlockStatementSibling(Node node)",16,5,5,9,1
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveAppendsShouldReuseRule.visit(ASTBlockStatement node, Object data)",13,5,6,9,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visit(ASTConstructorDeclaration node, Object data)",42,5,14,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.containsValue(Object value)",20,5,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.containsValue(Object value)",20,5,2,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.getMethodDeclaratorParameterTypes(Node methodOrConstructorDeclarator)",17,5,9,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.rotateLeft(TreeNode p)",15,5,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.rotateRight(TreeNode p)",15,5,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.rotateLeft(TreeNode p)",15,5,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.rotateRight(TreeNode p)",15,5,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.toString()",14,5,10,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.toString()",14,5,10,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.replaceWithTreeBin(AtomicReferenceArray<Node> tab, int index, Object key)",13,5,5,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.replaceWithTreeBin(Node[] tab, int index, Object key)",13,5,4,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.addAll(Collection<? extends K> c)",12,5,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.addAll(Collection<? extends K> c)",12,5,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.findKey(Object value)",10,5,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.findKey(Object value)",10,5,2,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.containsAll(Collection<?> c)",9,5,4,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.containsAll(Collection<?> c)",9,5,4,8,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.isMethodCall(Node node)",19,5,8,7,1
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.createXPath(final String xpathQueryString, final Navigator navigator)",15,5,9,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.isJavaLangImplicit(AbstractJavaTypeNode node)",14,5,10,7,1
"net.sourceforge.pmd.RuleSetWriter.createRuleElement(Rule rule)",41,5,42,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.determineParameterTypes(MethodNameDeclaration mnd)",38,5,16,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.storeBlockStatistics(Map<Node,Map<Node,Integer>> blocks, int thisSize, Node block)",33,5,8,6,3
"net.sourceforge.pmd.RuleSetWriter.createRuleSetElement(RuleSet ruleSet)",26,5,17,6,1
"net.sourceforge.pmd.lang.java.rule.codestyle.DuplicateImportsRule.visit(ASTCompilationUnit node, Object data)",26,5,12,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRule(final Rule newRule)",25,5,8,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.toString()",22,5,33,6,0
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleReplaceIfExists(final Rule rule)",22,5,10,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.determineSuper(Node declaringNode)",22,5,7,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.resolveAdditionalRulesets(List<String> additionalRulesets)",21,5,9,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.resolveGenericType(String typeImage, List<ASTTypeParameter> types)",17,5,8,6,2
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.processAdditive(Node sn)",15,5,7,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.addParametersToMapping(final ASTFieldDeclaration node, List<TypeRef> typeArgs)",12,5,9,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.isLastMethodName(final ASTMethodCallExpression methodNode, final String className, final String methodName)",11,5,13,6,3
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.findQualifiedName(String typeImage, Set<String> candidates)",11,5,4,6,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTCaseStatement node, Object data)",34,5,15,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTLoopStatement node, Object data)",31,5,16,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTClassOrInterfaceType node, Object data)",29,5,16,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.searchImportedStaticMethods(String methodName, List<JavaTypeDefinition> typeArguments, int argArity, Class<?> accessingClass)",29,5,6,5,4
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTElseClause node, Object data)",26,5,15,5,2
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.JavaRuleViolation(Rule rule, RuleContext ctx, JavaNode node, String message)",24,5,11,5,4
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.getObjectValue(ApexNode<?> node, Object data)",23,5,7,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.addForExpressionNode(Node node, Structure dataFlow)",21,5,3,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.phase3()",20,5,10,5,0
"net.sourceforge.pmd.lang.vm.ast.NodeUtils.tokenLiteral(final Token t)",19,5,5,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.countLoops()",17,5,8,5,0
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.isMethodThrowingType(ASTMethodDeclaration node, List<String> exceptedExceptions)",14,5,4,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.visit(ASTImportDeclaration node, Object data)",7,5,5,5,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.assertEqualsRuleSet(String message, RuleSet ruleSet1, RuleSet ruleSet2)",68,5,92,4,3
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.main(String[] args)",49,5,33,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.getMethodLookup(Class<?> exploredType)",35,5,13,4,1
"net.sourceforge.pmd.util.StringUtil.substringsOf(String str, String separator)",31,5,9,4,2
"net.sourceforge.pmd.cpd.MatchAlgorithm.findMatches()",30,5,19,4,0
"net.sourceforge.pmd.it.ZipFileExtractor.extractZipFile(Path zipPath, Path tempDir)",28,5,15,4,2
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTDeclarativeSection node, Object data)",28,5,14,4,2
"net.sourceforge.pmd.coverage.PMDCoverageTest.testResourceFileCommands()",27,5,11,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTMethodDeclaration node, Object data)",26,5,16,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.analyze(ASTPrimaryPrefix prefixNode)",26,5,10,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.TccMetric.numMethodsRelatedByAttributeAccess(Map<String,Set<String>> usagesByMethod)",26,5,7,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setSystemProperties(CPDConfiguration configuration)",25,5,19,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule$MethodLookup.isOverridden(String name, ASTFormalParameters params)",25,5,9,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.isSoftAssertionStatement(ASTStatementExpression expression, Map<String,VariableNameDeclaration> variables)",24,5,9,4,2
"net.sourceforge.pmd.util.StringUtil.asString(Object[] items, String separator)",24,5,5,4,2
"net.sourceforge.pmd.cpd.AnyTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",23,5,14,4,2
"net.sourceforge.pmd.RuleSetFactory.parseTextNode(Node node)",23,5,9,4,1
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTSwitchStatement node, Object data)",22,5,7,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.toString()",21,5,14,4,0
"net.sourceforge.pmd.RuleSetReferenceId.parse(String referenceString)",21,5,7,4,1
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.checkVariableType(Node nameNode, String variableType)",20,5,9,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isMethodCallChain(final ASTMethodCallExpression methodNode, final String... methodNames)",20,5,7,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTSwitchStatement node, Object data)",20,5,6,4,2
"net.sourceforge.pmd.util.designer.CodeEditorTextPane.getPosition(String[] lines, int line, int column)",20,5,3,4,3
"net.sourceforge.pmd.dcd.graph.ConstructorNode.compareTo(ConstructorNode that)",19,5,16,4,1
"net.sourceforge.pmd.dcd.graph.MethodNode.compareTo(MethodNode that)",19,5,16,4,1
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTConstructorDeclaration node, Object data)",19,5,8,4,2
"net.sourceforge.pmd.lang.ecmascript.rule.bestpractices.ConsistentReturnRule.visit(ASTFunctionNode functionNode, Object data)",19,5,7,4,2
"net.sourceforge.pmd.PMD.getApplicableLanguages(PMDConfiguration configuration, RuleSets ruleSets)",18,5,11,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.processBinaryExpression(AbstractApexNode<?> node, Object data)",18,5,8,4,2
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.addSourcesFilesToCPD(List<File> files, CPD cpd, boolean recursive)",18,5,5,4,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.isReplaceableListLoop(ASTForStatement stmt, List<NameOccurrence> occurrences, VariableNameDeclaration listDeclaration)",17,5,7,4,3
"net.sourceforge.pmd.lang.java.rule.errorprone.OverrideBothEqualsAndHashcodeRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",17,5,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",16,5,8,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.processEscapingMethodCalls(ASTMethodCallExpression methodNode, Object data)",16,5,7,4,2
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTResultType node, Object data)",16,5,7,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.visit(ASTMethodDeclaration node, Object data)",16,5,7,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getMinimalErasedCandidateSet(Set<Class<?>> erasedSet)",16,5,3,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.postContruct()",15,5,15,4,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.addDaaViolation(Object data, Node node, String type, String var, int startLine, int endLine)",15,5,8,4,6
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.intersect(JavaTypeDefinition first, JavaTypeDefinition second)",15,5,8,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.isReplaceableArrayLoop(ASTForStatement stmt, List<NameOccurrence> occurrences, VariableNameDeclaration arrayDeclaration)",15,5,7,4,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.processInlineMethodCalls(ASTMethodCallExpression methodNode, Object data, final boolean isNested)",15,5,5,4,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.visit(ASTCompilationUnit node, Object data)",15,5,4,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.getNodeName(Node node)",14,5,7,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule.validateBooleanParameter(ASTMethodCallExpression methodCall, Object data)",14,5,6,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getLowerBoundsOf(Variable var, List<Bound> bounds)",14,5,5,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.OverrideBothEqualsAndHashcodeRule.visit(ASTImplementsList node, Object data)",13,5,7,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule.visit(ASTUserClass node, Object data)",13,5,5,4,2
"net.sourceforge.pmd.util.designer.Designer.getSupportedLanguageVersions()",12,5,7,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.getPrintableNodeKind(Node node)",11,5,4,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isIterator()",7,5,1,4,0
"net.sourceforge.pmd.renderers.XMLRenderer.renderFileViolations(Iterator<RuleViolation> violations)",50,5,61,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.stress(LanguageVersion languageVersion, RuleSet ruleSet, List<DataSource> dataSources, Set<RuleDuration> results, boolean debug)",44,5,14,3,5
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.initializeXPathExpression()",42,5,12,3,0
"net.sourceforge.pmd.cpd.XMLRendererTest.testWithOneDuplication()",40,5,42,3,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.visit(ASTCompilationUnit node, Object data)",34,5,15,3,2
"net.sourceforge.pmd.lang.java.ast.Comment.trim(List<String> lines)",33,5,7,3,1
"net.sourceforge.pmd.util.database.DBURI.dump(String description, URI dburi)",31,5,18,3,2
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testJavadoc()",30,5,15,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.buildUsageText(JCommander jcommander)",30,5,9,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule.primaryExpressionsAreEqual(ASTPrimaryExpression nullCompareVariable, ASTPrimaryExpression expressionUsage)",30,5,8,3,2
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.addVariableAccess(Node node, VariableAccess va, List<DataFlowNode> flow)",28,5,9,3,3
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.addVariableAccess(Node node, VariableAccess va, List<DataFlowNode> flow)",28,5,9,3,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.getReturnedVariableName(ASTReturnStatement ret)",26,5,10,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.visit(ASTUserClass node, Object data)",24,5,8,3,2
"net.sourceforge.pmd.cli.PMDCommandLineInterface.getReports()",23,5,25,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.isLocalVariable(String vn, Node node)",23,5,3,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule.visit(ASTUserClass node, Object data)",22,5,8,3,2
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.checkValidPackages(String[] legalNamePrefixes)",22,5,3,3,1
"net.sourceforge.pmd.util.database.DBURITest.dump(String description, URI dburi)",21,5,16,3,2
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator$MethodWrapper.truncateMethodName(String n)",21,5,12,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.isField(String varName, AbstractNode typeDeclaration)",21,5,3,3,2
"net.sourceforge.pmd.util.FileFinder.scanDirectory(File dir, List<File> list, boolean recurse)",20,5,5,3,3
"net.sourceforge.pmd.lang.LanguageFilenameFilter.accept(File dir, String name)",20,5,5,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTPackageBody node, Object data)",19,5,12,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTTriggerUnit node, Object data)",19,5,12,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.OnlyOneReturnRule.visit(ASTMethodDeclaration node, Object data)",19,5,8,3,2
"net.sourceforge.pmd.lang.cpp.CppCharStream.readChar()",19,5,7,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.ParametricRuleViolation(Rule theRule, RuleContext ctx, T node, String message)",19,5,6,3,4
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.expandVariables(String message)",18,5,8,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentToNonFinalStaticRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",17,5,12,3,2
"net.sourceforge.pmd.lang.java.rule.security.HardCodedCryptoKeyRule.visit(ASTAllocationExpression node, Object data)",17,5,8,3,2
"net.sourceforge.pmd.lang.java.rule.security.InsecureCryptoIvRule.visit(ASTAllocationExpression node, Object data)",17,5,8,3,2
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.shouldHaveApexDocs(AbstractApexNode<?> node)",17,5,8,3,1
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.visit(ASTClassOrInterfaceType classType, Object data)",17,5,6,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule.collectBenignVariables(ASTUserClass node)",16,5,10,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.getAmountOfExpectedArguments(final String variableName, final List<ASTVariableDeclarator> variables)",16,5,6,3,2
"net.sourceforge.pmd.lang.java.symboltable.LocalScope.addNameOccurrence(NameOccurrence occurrence)",15,5,8,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.LocalScope.addNameOccurrence(NameOccurrence occ)",15,5,8,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$ConstructorDetector.restoreConstructorToken(Tokens tokenEntries, Token currentToken)",15,5,7,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.getFirstDescendantOfType(final Class<T> descendantType, final Node node)",15,5,7,3,2
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.delimitedPackageNames()",15,5,4,3,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.addNameOccurrence(NameOccurrence occurrence)",14,5,8,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.addNameOccurrence(NameOccurrence occ)",14,5,8,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.runChecks(final AbstractApexNode<?> node, Object data)",14,5,7,3,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestShouldNotUseSeeAllDataTrueRule.checkForSeeAllData(final ApexNode<?> node, final Object data)",14,5,6,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.actuallyUsed(VariableNameDeclaration nameDecl, List<NameOccurrence> usages)",14,5,6,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.findDescendantsOfType(final Node node, final Class<T> targetType, final List<T> results, final boolean crossFindBoundaries)",13,5,8,3,4
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidHardcodingIdRule.visit(ASTLiteralExpression node, Object data)",13,5,7,3,2
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getVariableValue(String name)",13,5,7,3,1
"net.sourceforge.pmd.util.filter.FileExtensionFilter.filter(File file)",13,5,4,3,1
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.isStringType(ASTName name)",12,5,7,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryCaseChangeRule.getBadSuffixOrNull(ASTPrimaryExpression exp, int equalsPosition)",12,5,6,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.removeThrowableParam(final List<ASTExpression> params)",11,5,8,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.findInnerInsecureEndpoints(AbstractApexNode<?> node, ASTVariableExpression variableNode)",11,5,7,3,2
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.jjtClose()",11,5,1,3,0
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.addAccess(NameOccurrence occ, DataFlowNode inode)",10,5,12,3,2
"net.sourceforge.pmd.lang.rule.ImportWrapper.matches(ImportWrapper i)",10,5,6,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryConversionTemporaryRule.visit(ASTPrimarySuffix node, Object data)",10,5,4,3,2
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.jjtClose()",10,5,0,3,0
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.addAccess(JavaNameOccurrence occurrence, DataFlowNode inode)",9,5,12,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.skipPackageAndImport(final Token currentToken)",6,5,0,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.skipAnnotations()",6,5,0,3,0
"net.sourceforge.pmd.lang.apex.ast.DumpFacade.dump(ApexNode<?> node, String prefix)",41,5,12,2,2
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.paintComponent(Graphics g)",40,5,29,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.deepCopy()",37,5,37,2,0
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.PMDTaskImpl(PMDTask task)",37,5,36,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTElsifClause node, Object data)",36,5,16,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.getPackageList(ASTPackageDeclaration pack)",36,5,11,2,1
"net.sourceforge.pmd.rules.RuleFactory.parsePropertyDefinition(Element propertyElement)",35,5,19,2,1
"net.sourceforge.pmd.util.filter.Filters.buildRegexFilterIncludeOverExclude(List<String> includeRegexes, List<String> excludeRegexes)",32,5,2,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.glomRuleViolations(Writer writer, Iterator<RuleViolation> violations)",31,5,25,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NcssObjectCountRule.visit(ASTProgramUnit node, Object data)",31,5,14,2,2
"net.sourceforge.pmd.util.CollectionUtil.addWithoutDuplicates(T[] values, T[] newValues)",29,5,9,2,2
"net.sourceforge.pmd.cpd.SimpleRenderer.renderOn(Writer writer, Match match)",28,5,30,2,2
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.visit(ASTTriggerUnit node, Object data)",28,5,27,2,2
"net.sourceforge.pmd.benchmark.TextTimingReportRenderer.render(final TimingReport report, final Writer writer)",27,5,19,2,2
"net.sourceforge.pmd.lang.java.multifile.PackageStats.getSubPackage(JavaTypeQualifiedName qname, boolean createIfNotFound)",27,5,9,2,2
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.compareAndSetNumeric(ThreadContext context, IRubyObject expectedValue, IRubyObject newValue)",27,5,5,2,3
"net.sourceforge.pmd.util.CollectionUtil.areEqual(Object value, Object otherValue)",27,5,4,2,2
"net.sourceforge.pmd.cpd.CPD.add(File file)",26,5,16,2,1
"net.sourceforge.pmd.cpd.CPDTask.report(CPD cpd)",26,5,15,2,1
"net.sourceforge.pmd.Report.addRuleViolation(RuleViolation violation)",26,5,10,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.drawArrow(Graphics g, int x, int y, int direction)",26,5,8,2,4
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getTypeNode()",26,5,7,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTElseClause node, Object data)",25,5,14,2,2
"net.sourceforge.pmd.util.viewer.gui.ASTPanel.viewerModelChanged(ViewerModelEvent e)",25,5,11,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveLengthRule.visit(PLSQLNode node, Object data)",24,5,31,2,2
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.filter(char[] chars, char removeChar)",23,5,0,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestClassShouldHaveAssertsRule.checkForAssertStatements(ApexNode<?> node, Object data)",22,5,9,2,2
"net.sourceforge.pmd.rules.RuleFactory.parseTextNode(Node node)",22,5,9,2,1
"net.sourceforge.pmd.rules.RuleBuilder.loadLanguageMinMaxVersions(Rule rule)",21,5,9,2,1
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.isReferenceToClassSameCompilationUnit()",21,5,7,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.hasTooManyLines(Comment comment)",21,5,5,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.visit(ASTCompilationUnit cUnit, Object data)",20,5,11,2,2
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.popType()",20,5,4,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.CycloMetric.booleanExpressionComplexity(ASTStandardCondition expression)",20,5,2,2,1
"net.sourceforge.pmd.lang.apex.ast.ASTExpressionStatement.getBeginColumn()",19,5,9,2,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule.checkForCSRF(ASTMethod node, Object data)",19,5,7,2,2
"net.sourceforge.pmd.lang.java.rule.design.TooManyFieldsRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",19,5,5,2,2
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.computeAllMetricsFor(Node node)",17,5,10,2,1
"net.sourceforge.pmd.rules.RuleFactory.valueFrom(Element propertyNode)",17,5,10,2,1
"net.sourceforge.pmd.cpd.CPDTask.createLanguage()",17,5,8,2,0
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.checkNodeAndReport(Object data, Node location, Node expr)",17,5,5,2,3
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.isGetter(ASTMethodDeclaration node, Map<String,String> fieldNames)",16,5,18,2,2
"net.sourceforge.pmd.rules.RuleFactory.parsePropertiesForDefinitions(RuleBuilder builder, Node propertiesNode)",16,5,10,2,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedLocalVariableRule.visit(ASTLocalVariableDeclaration decl, Object data)",15,5,11,2,2
"net.sourceforge.pmd.lang.vf.ast.AbstractVfNodesTest.addNodeAndSubnodes(Node node, Set<T> nodes, Class<T> clazz)",14,5,6,2,3
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNodesTst.addNodeAndSubnodes(Node node, Set<T> nodes, Class<T> clazz)",13,5,6,2,3
"net.sourceforge.pmd.docs.EscapeUtils.escapeLines(List<String> lines)",13,5,6,2,1
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.toCHM(ThreadContext context, IRubyObject options)",11,5,15,2,2
"net.sourceforge.pmd.lang.java.rule.performance.InefficientEmptyStringCheckRule.isTargetMethod(JavaNameOccurrence occ)",10,5,11,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.visit(MethodLikeNode node, Object data)",10,5,7,2,2
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsComputer.findOperations(ASTUserClassOrInterface<?> node)",10,5,4,2,1
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",10,5,3,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.jjtClose()",10,5,0,2,0
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.jjtClose()",10,5,0,2,0
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.jjtClose()",10,5,0,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodArgumentCouldBeFinalRule.lookForViolation(Scope scope, Object data)",9,5,9,2,2
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.visit(ASTMethod node, Object data)",9,5,5,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTClassOrInterfaceDeclaration decl, final Object data)",8,5,11,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.visit(ASTPrimaryExpression node, Object data)",8,5,6,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.isCausedBySecurityException(Throwable t)",8,5,4,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.hasAssignmentOperator(Node node)",7,5,2,2,1
"net.sourceforge.pmd.cli.PMDParameters.toConfiguration()",46,5,51,1,0
"net.sourceforge.pmd.AbstractLanguageVersionTest.testRegisteredRulesets()",36,5,14,1,0
"net.sourceforge.pmd.renderers.TextRenderer.end()",27,5,35,1,0
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.renderFileReport(Report report)",19,5,15,1,1
"net.sourceforge.pmd.lang.ast.xpath.Attribute.getValue()",19,5,8,1,0
"net.sourceforge.pmd.lang.dfa.Structure.pushOnStack(NodeType type, DataFlowNode node)",17,5,5,1,2
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationKey.equals(final Object obj)",16,5,3,1,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ImportFromSamePackageRule.visit(ASTImportDeclaration importDecl, Object data)",13,5,9,1,2
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isInterfaceMember()",13,5,6,1,0
"net.sourceforge.pmd.lang.plsql.dfa.PLSQLDataFlowNode.toString()",13,5,2,1,0
"net.sourceforge.pmd.dcd.graph.ClassNodeComparator.compare(Object obj1, Object obj2)",11,5,6,1,2
"net.sourceforge.pmd.lang.vm.rule.errorprone.EmptyForeachStmtRule.visit(final ASTForeachStatement node, final Object data)",10,5,11,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.FormalParameterNamingConventionsRule.visit(ASTVariableDeclaratorId node, Object data)",10,5,6,1,2
"SwitchRules.main(String[] args)",10,5,1,1,1
"net.sourceforge.pmd.lang.java.rule.codestyle.FormalParameterNamingConventionsRule.kindDisplayName(ASTVariableDeclaratorId node, PropertyDescriptor<Pattern> descriptor)",9,5,4,1,2
"net.sourceforge.pmd.lang.vm.rule.errorprone.EmptyIfStmtRule.handleIf(final AbstractVmNode node, final Object data)",8,5,10,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryReturnRule.visit(ASTReturnStatement node, Object data)",7,5,5,1,2
"net.sourceforge.pmd.lang.apex.rule.design.ExcessivePublicCountRule.visit(ASTMethod node, Object data)",6,5,4,1,2
"MultipleCaseLabels.main(String[] args)",9,5,4,0,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.variableIsPassedToMethod(ASTPrimaryExpression expr, String variable)",13,4,4,9,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveAppendsShouldReuseRule.isAStringBuilderBuffer(AbstractJavaNode node, String name)",9,4,6,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.merge(K key, V value, BiFun<? super V,? super V,? extends V> remappingFunction)",30,4,1,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.merge(K key, V value, BiFun<? super V,? super V,? extends V> remappingFunction)",30,4,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.writeObject(java.io.ObjectOutputStream s)",27,4,6,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.writeObject(java.io.ObjectOutputStream s)",27,4,6,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.Traverser(Traverser<K,V,?> it)",12,4,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.Traverser(Traverser<K,V,?> it)",12,4,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.remove(Object o)",11,4,4,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.remove(Object o)",11,4,4,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.replace(K key, V oldValue, V newValue)",9,4,1,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.replace(K key, V oldValue, V newValue)",9,4,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.tryAcquireShared(int ignore)",7,4,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.tryAcquireShared(int ignore)",7,4,2,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.remove()",5,4,2,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.remove()",5,4,2,8,0
"net.sourceforge.pmd.util.database.DBMSMetadata.getSourceCode(String objectType, String name, String schema)",40,4,13,7,3
"net.sourceforge.pmd.util.database.DBMSMetadata.init(DBURI dbURI)",20,4,17,7,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.visit(ASTImportDeclaration node, Object data)",19,4,16,7,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.visit(ASTCompilationUnit node, Object data)",18,4,10,7,2
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.initializeExpressionIfStatusIsNoneOrPartial(final Navigator navigator)",17,4,2,7,1
"com.concurrent_ruby.ext.jsr166e.Striped64.internalReset(long initialValue)",14,4,5,7,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.internalReset(long initialValue)",14,4,0,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.visit(ASTName node, Object data)",11,4,5,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.couldBeMethodCall(JavaNode node)",8,4,8,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.visit(ASTMethodDeclaration meth, Object data)",7,4,4,7,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleSetByReference(final RuleSet ruleSet, final boolean allRules, final String... excludes)",33,4,7,6,3
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.resolveGenericType(Node argument, String typeImage)",30,4,8,6,2
"net.sourceforge.pmd.docs.DeadLinksChecker.extractLinkTargets(List<Path> mdFiles)",29,4,13,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getBestMethodReturnType(JavaTypeDefinition context, List<MethodType> methods, ASTArgumentList arguments)",27,4,12,6,3
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isMethodConvertible(JavaTypeDefinition parameter, JavaTypeDefinition argument)",27,4,11,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleByReference(final String ruleSetFileName, final Rule rule)",26,4,2,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.produceInitialConstraints(Method method, ASTArgumentList argList, List<Variable> variables)",23,4,8,6,3
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.selectAmongMaximallySpecific(MethodType first, MethodType second)",23,4,3,6,2
"net.sourceforge.pmd.docs.RuleDocGenerator.sortRulesets(Iterator<RuleSet> rulesets)",22,4,9,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.getFirstParentBlock(Node node)",22,4,5,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.getSwitchParent(Node parentNode, Node lastNode)",22,4,3,6,2
"net.sourceforge.pmd.lang.java.rule.codestyle.DuplicateImportsRule.visit(ASTImportDeclaration node, Object data)",21,4,18,6,2
"net.sourceforge.pmd.docs.RuleDocGenerator.determineDefaultValueAsString(PropertyDescriptor<?> propertyDescriptor, Rule rule, boolean pad)",21,4,8,6,3
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.selectMostSpecificMethod(List<MethodType> selectedMethods)",21,4,6,6,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule.analyzeScope(final AbstractJavaScope file, final Object data)",19,4,18,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getMethodExplicitTypeArugments(Node node)",18,4,8,6,1
"net.sourceforge.pmd.RuleSet.usesMultifile(Language language)",18,4,3,6,1
"net.sourceforge.pmd.RuleSet.usesDFA(Language language)",17,4,3,6,1
"net.sourceforge.pmd.RuleSet.usesTypeResolution(Language language)",17,4,3,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTUserClass node, Object data)",16,4,22,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.checkIfCorrectlyEscaped(ASTHtmlScript node, Object data)",16,4,3,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.isUnbalanced(String image, char pattern)",16,4,1,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.extractObjectTypeFromESAPI(final ASTMethodCallExpression node, final String dmlOperation)",15,4,15,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getTypeDefOfMethod(JavaTypeDefinition context, Method method, List<JavaTypeDefinition> typeArguments)",15,4,9,6,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.mapCallToMethodDecl(final AbstractApexNode<?> self, final Set<ASTMethodCallExpression> innerMethodCalls, final List<ASTMethodCallExpression> nodes)",13,4,4,6,3
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getFieldType(JavaTypeDefinition typeToSearch, String fieldImage, Class<?> accessingClass)",36,4,14,5,3
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.searchNodeNameForClass(TypeNode node)",35,4,7,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTCompilationUnit node, Object data)",29,4,8,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.isAdditive(Node n)",26,4,6,5,1
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTCaseWhenClause node, Object data)",24,4,13,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTWhileStatement node, Object data)",24,4,9,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.getFirstParentBlock(Node node)",23,4,5,5,1
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.getSwitchParent(Node parentNode, Node lastNode)",23,4,3,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractPoorMethodCall.isNotedMethod(NameOccurrence occurrence)",23,4,3,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.getDoBranchNodeInLevel(DefaultMutableTreeNode level)",17,4,6,5,1
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTEmbeddedSqlStatement node, Object data)",16,4,10,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTSqlStatement node, Object data)",16,4,10,5,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.checkNewObjects(ASTNewObjectExpression node, Object data)",16,4,5,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTUnlabelledStatement node, Object data)",15,4,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTLocalVariableDeclaration node, Object data)",15,4,7,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTVariableDeclaratorId node, Object data)",14,4,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.searchImportedStaticFields(String fieldName)",14,4,5,5,1
"net.sourceforge.pmd.testframework.RuleTst.getNodeValue(Element parentElm, String nodeName, boolean required)",11,4,4,5,3
"net.sourceforge.pmd.testframework.RuleTst.parseTextNode(Node exampleNode)",9,4,10,5,1
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.isStringBuilderOrBuffer(ASTVariableDeclaratorId node)",9,4,6,5,1
"net.sourceforge.pmd.PMD.doPMD(PMDConfiguration configuration)",73,4,29,4,1
"net.sourceforge.pmd.cache.AbstractAnalysisCache.getClassPathEntries()",46,4,17,4,0
"net.sourceforge.pmd.util.designer.Designer.loadSettings()",29,4,26,4,0
"net.sourceforge.pmd.cpd.ApexTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",29,4,13,4,2
"net.sourceforge.pmd.util.StringUtil.toCamelCase(String name, boolean forceLowerCase)",29,4,7,4,2
"net.sourceforge.pmd.renderers.RendererFactory.getRendererConstructor(Class<? extends Renderer> rendererClass)",29,4,7,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.findClass(String name)",29,4,4,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTListCellRenderer.getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)",28,4,28,4,5
"net.sourceforge.pmd.RuleSetFactory.containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName)",28,4,10,4,2
"net.sourceforge.pmd.RuleSetReferenceId.resolveBuiltInRuleset(final String name)",28,4,4,4,1
"net.sourceforge.pmd.util.designer.Designer$DFAListener.actionPerformed(ActionEvent ae)",27,4,16,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.getRendererFromString(String name, String encoding)",27,4,10,4,2
"net.sourceforge.pmd.util.StringUtil.replaceString(final String original, final String oldString, final String newString)",26,4,12,4,3
"net.sourceforge.pmd.util.StringUtil.replaceString(final String original, char oldChar, final String newString)",26,4,11,4,3
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ExplicitImportResolver.ExplicitImportResolver(PMDASMClassLoader pmdClassLoader, Set<String> importStmts)",25,4,5,4,2
"net.sourceforge.pmd.RuleSetReferenceId.getInputStream(final ResourceLoader rl)",25,4,4,4,1
"net.sourceforge.pmd.util.StringUtil.lengthOfShortestIn(String[] strings)",24,4,3,4,1
"net.sourceforge.pmd.RuleSetReferenceId.toString()",24,4,0,4,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParser.parse(final Reader reader)",23,4,13,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations$CombinationsIterator.next()",23,4,11,4,0
"net.sourceforge.pmd.cache.AbstractAnalysisCache.isUpToDate(final File sourceFile)",23,4,9,4,1
"net.sourceforge.pmd.lang.plsql.rule.codestyle.LineLengthRule.visit(ASTInput node, Object data)",23,4,6,4,2
"net.sourceforge.pmd.cpd.CPDConfiguration.getCPDRendererFromString(String name, String encoding)",22,4,10,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.getIterableDeclOfIteratorLoop(VariableNameDeclaration indexDecl, Scope scope)",22,4,8,4,2
"net.sourceforge.pmd.lang.plsql.rule.codestyle.AvoidTabCharacterRule.visit(ASTInput node, Object data)",22,4,5,4,2
"net.sourceforge.pmd.util.StringUtil.asStringOn(StringBuilder sb, Object[] items, String separator)",22,4,3,4,3
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitField(int access, String name, String desc, String signature, Object value)",21,4,10,4,5
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImportOnDemandResolver.resolve(String name)",20,4,10,4,1
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.addFilesFromFilelist(String inputFilePath, CPD cpd, boolean recursive)",20,4,6,4,3
"net.sourceforge.pmd.RuleSetReferenceId.getRuleName(final String rulesetName)",20,4,5,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule.determineTopLevelCloneableClasses(final ASTClassOrInterfaceDeclaration currentClass)",19,4,6,4,1
"net.sourceforge.pmd.renderers.RendererFactory.getRendererClass(String reportFormat)",19,4,5,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.guessIndexVarFromUpdate(ASTForUpdate update)",18,4,9,4,1
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTFormalParameters node, Object data)",17,4,15,4,2
"net.sourceforge.pmd.util.designer.Designer$TreeWidget.expandAll(TreePath parent, boolean expand)",16,4,9,4,2
"net.sourceforge.pmd.dcd.graph.ConstructorNode.getMember()",16,4,7,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.visit(ASTMethodDeclaration method, Object data)",15,4,10,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.isIterableModifiedInsideLoop(Entry<VariableNameDeclaration,List<NameOccurrence>> iterableInfo, ASTForStatement stmt)",15,4,9,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTFieldDeclaration node, Object data)",15,4,8,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.occurenceIsArrayAccess(NameOccurrence occ, String arrayName)",14,4,8,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.visit(ClassNode classNode, Object data)",13,4,7,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.findDeclaration(String varName, Scope innermost)",13,4,6,4,2
"net.sourceforge.pmd.util.designer.Designer$TreeWidget.convertValueToText(Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)",13,4,3,4,6
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.hasSuffixesWithArguments(ASTPrimaryExpression expr)",12,4,3,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.reportVariables(final ASTMethodCallExpression m, Object data)",11,4,5,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.findSuffixesWithoutArguments(ASTPrimaryExpression expr)",11,4,4,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule$MethodLookup.getMethods(String name, int paramCount)",11,4,3,4,2
"net.sourceforge.pmd.util.designer.Designer.setLanguageVersion(LanguageVersion languageVersion)",11,4,3,4,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.internalEqualsNext(Object obj)",11,4,2,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.visit(ASTAnyTypeDeclaration node, Object data)",10,4,4,4,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.checkDeclarationInInterfaceType(Object data, Node fieldOrMethod, Set<Modifier> unnecessary)",9,4,7,4,3
"net.sourceforge.pmd.SourceCodeProcessor.processSourceCode(Reader sourceCode, RuleSets ruleSets, RuleContext ctx)",50,4,23,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.SingleMethodSingletonRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",31,4,5,3,2
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.readChar()",29,4,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.build(T astNode)",26,4,15,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.checkAssignments(Object data, Set<String> loopVariables, ASTStatement loopBody, boolean checkIncrement, IgnoreFlags... ignoreFlags)",25,4,9,3,5
"com.concurrent_ruby.ext.jsr166e.LongAdder.sumThenReset()",25,4,0,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.sumThenReset()",25,4,0,3,0
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.createDynamicContext(final ElementNode elementNode)",24,4,11,3,1
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.buildApexDocTokenLocations(String source)",23,4,10,3,1
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.load(int startLine, int endLine)",23,4,8,3,2
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.buildToString()",22,4,17,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.buildDataFlowFor(JavaNode node)",22,4,13,3,1
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.AttributeAxisIterator(Node contextNode)",21,4,12,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.sum()",21,4,0,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.sum()",21,4,0,3,0
"net.sourceforge.pmd.cpd.GUI$SaveListener.actionPerformed(ActionEvent evt)",20,4,14,3,1
"net.sourceforge.pmd.cpd.GUI.copyMatchListSelectionsToClipboard()",20,4,12,3,0
"net.sourceforge.pmd.lang.jsp.rule.design.NoInlineStyleInformationRule.isStyleAttribute(ASTAttribute attributeNode)",20,4,8,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.dysfunctionReason()",20,4,4,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.appendElement(final org.w3c.dom.Node parentNode)",19,4,14,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.visit(ASTTryStatement node, Object data)",19,4,9,3,2
"net.sourceforge.pmd.cpd.FileReporterTest.readFile(File file)",19,4,6,3,1
"net.sourceforge.pmd.lang.java.rule.regex.RegexHelper.isMatch(Pattern pattern, String subject)",19,4,3,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.getTypeOfMethodCall(ASTPrimarySuffix node)",17,4,16,3,1
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.addFormalComments()",17,4,7,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isSingleCharacterStringLiteral()",17,4,5,3,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isFunctionNodeParameter()",17,4,4,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testOverLoads()",16,4,5,3,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.checkForDatabaseMethods(ASTUserClass node, Object data, boolean sharingFound)",16,4,3,3,3
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",15,4,9,3,2
"net.sourceforge.pmd.lang.xml.rule.XmlRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",15,4,9,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.visit(ASTUserClass node, Object data)",15,4,7,3,2
"net.sourceforge.pmd.lang.java.rule.performance.BooleanInstantiationRule.visit(ASTAllocationExpression node, Object data)",15,4,6,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentToNonFinalStaticRule.initializedInConstructor(List<NameOccurrence> usages)",15,4,4,3,1
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.valueErrorFor(T value)",15,4,3,3,1
"net.sourceforge.pmd.lang.apex.rule.ApexRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",14,4,9,3,2
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.collectDeclarations(DataFlowNode inode)",14,4,9,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.collectDeclarations(DataFlowNode inode)",14,4,9,3,1
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.getRepresentation(final PropertyDescriptor<?> descriptor, final Object value)",14,4,8,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryConversionTemporaryRule.visit(ASTPrimaryExpression node, Object data)",14,4,7,3,2
"net.sourceforge.pmd.lang.LanguageFilenameFilter.toString()",14,4,7,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.literal()",14,4,7,3,0
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.visit(ASTProperty node, Object data)",14,4,4,3,2
"net.sourceforge.pmd.lang.xpath.Initializer.initialize(IndependentContext context)",13,4,9,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.checkFile(File file)",13,4,6,3,1
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.visit(ASTImportDeclaration node, Object data)",13,4,5,3,2
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.deleteDirectory(File dir)",13,4,5,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.getFirstParentOfAnyType(final Class<? extends T>... parentTypes)",13,4,4,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule.findNullCompareExpression(ASTEqualityExpression equalityExpression)",13,4,3,3,1
"org.sonar.plugins.scala.language.Comment.getNumberOfCommentedOutLinesOfCode()",13,4,3,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getNthParent(final int n)",13,4,2,3,1
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.check(int[][] array, List<ASTMethodDeclarator> methodNodes)",12,4,8,3,2
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.getTypeNode(ASTName name)",12,4,8,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkTransformMethods(ASTMethodDeclaration node, Object data, String nameOfMethod)",12,4,6,3,3
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclaration.hasSuppressWarningsAnnotationFor(Rule rule)",12,4,4,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.equals(Object o)",12,4,4,3,1
"net.sourceforge.pmd.properties.CharacterMultiProperty.CharacterMultiProperty(String theName, String theDescription, List<Character> defaultValues, float theUIOrder, char delimiter, boolean isDefinedExternally)",12,4,0,3,6
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.isCommentNotWithin(FormalComment n1, Node n2, Node node)",11,4,14,3,3
"net.sourceforge.pmd.lang.java.symboltable.LocalScope.findVariableHere(JavaNameOccurrence occurrence)",11,4,11,3,1
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.findVariableHere(JavaNameOccurrence occurrence)",11,4,11,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.LocalScope.findVariableHere(PLSQLNameOccurrence occurrence)",11,4,10,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.findVariableHere(PLSQLNameOccurrence occurrence)",11,4,10,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.reportViolation(ApexNode<?> node, Object data)",11,4,5,3,2
"net.sourceforge.pmd.lang.java.multifile.ClassStats.hasMatchingOpSig(String name, JavaOperationSigMask mask)",11,4,5,3,2
"net.sourceforge.pmd.docs.RuleSetResolverTest.filterRuleSets(List<String> additionalRulesets)",11,4,5,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.checkForSharingDeclaration(ApexNode<?> node, Object data, boolean sharingFound)",11,4,4,3,3
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.handleClassOrInterface(AbstractApexNode<?> node, Object data)",11,4,4,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.hasSuppressWarningsAnnotationFor(Rule rule)",11,4,4,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.hasSuppressWarningsAnnotationFor(Rule rule)",11,4,4,3,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration.hasSuppressWarningsAnnotationFor(Rule rule)",11,4,4,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.hasPrefixesOrSuffixes()",11,4,3,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getBeginColumn()",11,4,1,3,0
"net.sourceforge.pmd.lang.java.symboltable.NameFinder.NameFinder(ASTPrimaryExpression node)",10,4,8,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkPrefixedTransformMethods(ASTMethodDeclaration node, Object data, String nameOfMethod)",10,4,7,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryConversionTemporaryRule.visit(ASTAllocationExpression node, Object data)",10,4,7,3,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.visit(ASTField node, Object data)",10,4,5,3,2
"net.sourceforge.pmd.lang.java.multifile.ClassStats.hasMatchingFieldSig(String name, JavaFieldSigMask mask)",10,4,5,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.findAuthLiterals(final AbstractApexNode<?> node)",10,4,5,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.removeChildAtIndex(final int childIndex)",10,4,5,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.visit(ASTFieldDeclaration node, Object data)",10,4,4,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.visit(ASTLocalVariableDeclaration node, Object data)",10,4,4,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.stripSuffix(String varName, List<String> suffixes)",10,4,4,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.getLastPartOfName(Node name)",10,4,4,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTField.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclarationStatements.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.hasSuppressWarningsAnnotationFor(Rule rule)",10,4,3,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.dump(String prefix)",10,4,3,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule.validateParameters(ASTMethodCallExpression methodCall, Object data)",9,4,7,3,2
"net.sourceforge.pmd.lang.apex.multifile.ApexClassStats.hasMatchingSig(String operation, ApexOperationSigMask mask)",9,4,5,3,2
"net.sourceforge.pmd.lang.xpath.Initializer.initializeLanguages()",9,4,5,3,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.stripSuffix(String varName, List<String> suffixes)",9,4,4,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.CheckResultSetRule.getResultSetVariableName(String image)",9,4,4,3,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.stripPrefix(String varName, List<String> prefixes)",9,4,3,3,2
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.hasImports(ASTCompilationUnit cu, String className)",9,4,3,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.stripPrefix(String varName, List<String> prefixes)",9,4,3,3,2
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isTestNgClass(ASTCompilationUnit node)",8,4,4,3,1
"net.sourceforge.pmd.cpd.GUI.isLegalPath(String path, LanguageConfig config)",8,4,3,3,2
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.highest(List<Double> values)",8,4,0,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkField(ASTType typeNode, ASTVariableDeclarator node, Object data)",7,4,7,3,3
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkVariable(ASTType typeNode, ASTVariableDeclarator node, Object data)",7,4,7,3,3
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.get(int i)",7,4,4,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.skipSemicolon(final Token currentToken)",6,4,0,3,1
"net.sourceforge.pmd.renderers.TextColorRenderer.getRelativePath(String fileName)",41,4,6,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.sumExpressionComplexity(ASTExpression expr)",36,4,7,2,1
"net.sourceforge.pmd.util.viewer.model.ViewerModel.evaluateXPathExpression(String xPath, Object evaluator)",33,4,13,2,2
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.unescape(final String string)",31,4,10,2,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.isExhaustiveEnumSwitch()",30,4,11,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.JavaTypeDefinitionSimple(Class<?> clazz, JavaTypeDefinition... boundGenerics)",29,4,10,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveRootNodeChildAtIndex(final int childIndex)",28,4,11,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.equals(Object o)",28,4,11,2,1
"net.sourceforge.pmd.lang.java.ast.CommentUtil.wordAfter(String text, int position)",28,4,6,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.glomProcessingErrors(Writer writer, List<Report.ProcessingError> errors)",27,4,16,2,2
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.adjTokenLineNums(final AbstractVmNode node)",27,4,6,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.forClass(final Class<?> clazz, JavaTypeDefinition... boundGenerics)",27,4,2,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.glomConfigurationErrors(final Writer writer, final List<ConfigurationError> configErrors)",26,4,17,2,2
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testMethodUsageSeen2()",24,4,29,2,0
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.handleError(RuleContext ctx, Report errorReport, RuntimeException pmde)",24,4,14,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getGenericType(final String parameterName)",24,4,14,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTReturnStatement node, Object data)",24,4,6,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.getOperationName(String methodName, ASTFormalParameters params)",23,4,10,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.enclosingTypeIsA(TypeKind... kinds)",23,4,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.toString()",21,4,16,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.parseClassName(String name)",21,4,9,2,1
"net.sourceforge.pmd.processor.MultiThreadProcessor.collectReports(List<Renderer> renderers)",21,4,7,2,1
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testMethodReferenceConfused()",19,4,23,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testEq()",19,4,22,2,0
"com.cb4.common.utils.MapUtilsTest.testRandomSortByValue()",19,4,13,2,0
"net.sourceforge.pmd.lang.jsp.rule.codestyle.DuplicateJspImportsRule.visit(ASTJspDirectiveAttribute node, Object data)",19,4,11,2,2
"net.sourceforge.pmd.rules.RuleFactory.getPropertyValuesFrom(Element propertiesNode)",19,4,11,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.findLanguageVersionByTerseName(String terseNameAndVersion)",19,4,9,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.checkDefaults(List<String> defaultValue, char delim)",19,4,1,2,2
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.getParameterDisplaySignature()",18,4,15,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.visit(ASTCompilationUnit cUnit, Object data)",18,4,9,2,2
"net.sourceforge.pmd.properties.AbstractPropertySource.getPropertiesByPropertyDescriptor()",18,4,8,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.TooManyFieldsRule.visit(ASTPackageSpecification node, Object data)",18,4,7,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.TooManyFieldsRule.visit(ASTTypeSpecification node, Object data)",18,4,7,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTReturnStatement node, Object data)",18,4,3,2,2
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityRule.assignReportLevelsCompat()",17,4,7,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.getSubTypes(String qualifyingName, Scope subType)",16,4,11,2,2
"net.sourceforge.pmd.lang.xpath.MatchesFunction.call(Context context, List args)",16,4,10,2,2
"net.sourceforge.pmd.lang.apex.rule.design.CyclomaticComplexityRule.visit(ASTMethod node, Object data)",16,4,8,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.usesDefaultValues()",16,4,7,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.usesDefaultValues()",16,4,7,2,0
"net.sourceforge.pmd.docs.RuleSetUtils.isRuleSetDeprecated(RuleSet ruleset)",16,4,2,2,1
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTUserClass node, Object data)",15,4,10,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTUserTrigger node, Object data)",15,4,10,2,2
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.addAccessLabel(StringBuffer sb, VariableAccess va)",15,4,10,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.visitInnerClass(String name, String outerName, String innerName, int access)",15,4,8,2,4
"net.sourceforge.pmd.lang.apex.rule.errorprone.MethodWithSameNameAsEnclosingClassRule.visit(ASTUserClass node, Object data)",15,4,6,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.isJunit3Test(ASTMethodDeclaration node)",15,4,6,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getNextSibling()",15,4,3,2,0
"net.sourceforge.pmd.util.designer.DFAPanel.valueChanged(ListSelectionEvent event)",14,4,9,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",14,4,7,2,2
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.asDelimitedString(List<V> values, char delimiter)",14,4,7,2,2
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.processCPDSuppression(final T currentToken)",14,4,6,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.NameFinder.NameFinder(ASTPrimaryExpression node)",14,4,6,2,1
"net.sourceforge.pmd.lang.java.rule.performance.AppendCharacterWithCharRule.visit(ASTLiteral node, Object data)",14,4,4,2,2
"net.sourceforge.pmd.lang.java.rule.StringConcatenationRule.visit(ASTForStatement node, Object data)",14,4,1,2,2
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.isSetter(ASTMethodDeclaration node, Map<String,String> fieldNames)",13,4,12,2,2
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testLineNumbersForNameSplitOverTwoLines()",13,4,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isStandAlonePostfix(Node primaryExpression)",13,4,5,2,1
"net.sourceforge.pmd.cpd.CPDTask.validateFields()",13,4,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getAsSuper(Class<?> superClazz)",13,4,3,2,1
"net.sourceforge.pmd.dcd.graph.ClassNode.defineConstructor(String name, String desc)",13,4,2,2,2
"net.sourceforge.pmd.dcd.graph.ClassNode.defineMethod(String name, String desc)",13,4,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.getDeclarationsOfType(ASTAnyTypeDeclaration node, Class<T> tClass)",12,4,7,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.parsesRealWorldClasses()",12,4,7,2,0
"net.sourceforge.pmd.lang.java.rule.GenericLiteralCheckerRule.visit(ASTLiteral node, Object data)",12,4,5,2,2
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.getDoBranchNodeFromFirstDoStatement()",12,4,4,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.defineField(String name, String desc)",12,4,2,2,2
"net.sourceforge.pmd.lang.LanguageRegistry.commaSeparatedTerseNamesForLanguageVersion(List<LanguageVersion> languageVersions)",11,4,10,2,1
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testLineNumbersAreSetOnAllSiblings()",11,4,9,2,0
"net.sourceforge.pmd.dcd.graph.UsageGraph.usageMethod(String className, String name, String desc, MemberNode usingMemberNode)",11,4,7,2,4
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.getTypeNode()",11,4,6,2,0
"net.sourceforge.pmd.cpd.ApexTokenizerTest.findTokensByLine(int line, Tokens tokens)",11,4,5,2,2
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.findByLine(int line, Tokens tokens)",11,4,5,2,2
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsComputer.findOperations(ASTAnyTypeDeclaration node)",11,4,5,2,1
"net.sourceforge.pmd.cpd.TokenEntry.toString()",11,4,5,2,0
"net.sourceforge.pmd.benchmark.TimingReport.getLabeledMeasurements(final TimedOperationCategory category)",11,4,4,2,1
"net.sourceforge.pmd.lang.java.rule.GenericLiteralCheckerRule.init()",11,4,3,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getGenericType(final String parameterName, Method method, List<JavaTypeDefinition> methodTypeArguments)",10,4,4,2,3
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.getAnnotation(String annotQualifiedName)",10,4,3,2,1
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.getTypeNameNode()",9,4,10,2,0
"net.sourceforge.pmd.rules.RuleBuilder.checkLanguageVersionsAreOrdered(Rule rule)",9,4,9,2,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.hashCode()",9,4,4,2,0
"net.sourceforge.pmd.benchmark.TimingReport.getUnlabeledMeasurements(final TimedOperationCategory category)",9,4,3,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredTest.getProperties(Rule rule)",9,4,2,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.selection(int[] choiceIndices, E[] theChoices)",9,4,1,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.checkForGlobal(ApexNode<?> node, Object data)",8,4,5,2,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule.findSafeVariables(AbstractApexNode<?> var)",8,4,5,2,1
"net.sourceforge.pmd.lang.java.rule.performance.AbstractOptimizationRule.assigned(List<NameOccurrence> usages)",8,4,2,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setLanguage(Language language)",7,4,3,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule.visit(ASTSoqlExpression node, Object data)",6,4,4,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoslInLoopsRule.visit(ASTSoslExpression node, Object data)",6,4,4,2,2
"net.sourceforge.pmd.lang.java.rule.performance.AvoidInstantiatingObjectsInLoopsRule.visit(ASTAllocationExpression node, Object data)",6,4,4,2,2
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.isOnLeftHandSide()",34,4,21,1,0
"net.sourceforge.pmd.processor.PmdRunnable.call()",33,4,15,1,0
"net.sourceforge.pmd.benchmark.TimeTracker.finishOperation(final long extraDataCounter)",26,4,8,1,1
"net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel.viewerModelChanged(ViewerModelEvent e)",23,4,5,1,1
"net.sourceforge.pmd.util.viewer.gui.XPathPanel.viewerModelChanged(ViewerModelEvent e)",19,4,6,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexSignature.get(ASTMethod method)",18,4,4,1,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSignature.get(AccessNode node)",17,4,3,1,1
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions$DocumentOperationNonOverlappingRegionsComparator.compare(final DocumentOperation o1, final DocumentOperation o2)",16,4,9,1,2
"net.sourceforge.pmd.lang.java.rule.design.GodClassRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",15,4,6,1,2
"net.sourceforge.pmd.lang.xml.XmlParserOptions.equals(Object obj)",15,4,3,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.getName(Node node)",14,4,7,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.delimiterIn(Map<PropertyDescriptorField,String> valuesById, char defalt)",14,4,6,1,2
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.getColumnNumber()",14,4,0,1,0
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.getLineNumber()",14,4,0,1,0
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.valueErrorFor(T value)",13,4,4,1,1
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.equals(Object obj)",13,4,3,1,1
"net.sourceforge.pmd.PMDConfiguration.getAnalysisCache()",13,4,2,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator$AllowedPermGuard.equals(final Object obj)",12,4,4,1,1
"net.sourceforge.pmd.lang.java.symboltable.DeclarationFinderFunction.applyTo(NameDeclaration nameDeclaration)",12,4,3,1,1
"net.sourceforge.pmd.lang.metrics.MetricOptions.equals(Object o)",12,4,3,1,1
"net.sourceforge.pmd.lang.dfa.VariableAccess.toString()",12,4,3,1,0
"net.sourceforge.pmd.properties.AbstractProperty.equals(Object obj)",12,4,2,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.equals(Object o)",11,4,6,1,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidUsingOctalValuesRule.visit(ASTLiteral node, Object data)",11,4,5,1,2
"net.sourceforge.pmd.lang.ast.xpath.Attribute.equals(Object o)",11,4,4,1,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableNamingConventionsRule.visit(ASTVariableDeclaratorId node, Object data)",10,4,5,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidCallingFinalizeRule.visit(ASTName name, Object ctx)",10,4,5,1,2
"net.sourceforge.pmd.lang.ParserOptions.equals(Object obj)",10,4,3,1,1
"net.sourceforge.pmd.lang.ast.xpath.Attribute.getStringValue()",10,4,2,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableNamingConventionsRule.kindDisplayName(ASTVariableDeclaratorId node, PropertyDescriptor<Pattern> descriptor)",9,4,3,1,2
"net.sourceforge.pmd.lang.java.dfa.JavaDataFlowNode.toString()",9,4,2,1,0
"TestParseAnnototation.parse()",8,4,3,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.hashCode()",8,4,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTType.getArrayDepth()",7,4,5,1,0
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.visit(ASTMethod node, Object data)",7,4,3,1,2
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.iterateAxis(byte axisNumber)",12,4,2,0,1
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.findNonVariableStmt(String variableName, ASTPrimaryExpression apeLeft, ASTPrimaryExpression apeRight)",20,3,2,10,3
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.visit(ASTFieldDeclaration fieldDeclaration, Object data)",9,3,5,10,2
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.getNameFromPrimaryPrefix(ASTPrimaryPrefix pp)",5,3,4,10,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.isStringConcat(Node childNode, Node baseNode)",15,3,2,9,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.findIfStatement(ASTBlock enclosingBlock, Node node)",7,3,3,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.compute(K key, BiFun<? super K,? super V,? extends V> remappingFunction)",45,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.compute(K key, BiFun<? super K,? super V,? extends V> remappingFunction)",45,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.computeIfAbsent(K key, Fun<? super K,? extends V> mappingFunction)",44,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.computeIfAbsent(K key, Fun<? super K,? extends V> mappingFunction)",44,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.computeIfPresent(K key, BiFun<? super K,? super V,? extends V> remappingFunction)",39,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.computeIfPresent(K key, BiFun<? super K,? super V,? extends V> remappingFunction)",39,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.checkForResize()",21,3,4,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.checkForResize()",21,3,3,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity)",18,3,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity)",18,3,1,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.show()",17,3,18,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.put(K key, V value)",17,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.put(K key, V value)",17,3,1,8,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.getNameFromPrefix(ASTPrimaryPrefix node)",15,3,3,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.getValueOrDefault(Object key, V defaultValue)",15,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.getValueOrDefault(Object key, V defaultValue)",15,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.rubyCompare(RubyObject l, RubyObject r)",14,3,10,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.rubyCompare(RubyObject l, RubyObject r)",14,3,10,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.tableSizeFor(int c)",12,3,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.tableSizeFor(int c)",12,3,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.putIfAbsent(K key, V value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.remove(Object key, Object value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.replace(K key, V value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.putIfAbsent(K key, V value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.remove(Object key, Object value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.replace(K key, V value)",11,3,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.removeAll(Collection<?> c)",9,3,5,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.retainAll(Collection<?> c)",9,3,5,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.removeAll(Collection<?> c)",9,3,5,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.retainAll(Collection<?> c)",9,3,5,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.addCalledMethodsOfNodeImpl(List<ASTPrimaryExpression> expressions, List<MethodInvocation> calledMethods, String className)",9,3,2,8,3
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.getASTExplicitConstructorInvocation()",9,3,2,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.size()",8,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.size()",8,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.addAll(Collection<? extends Entry<K,V>> c)",7,3,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.add(K e)",7,3,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.addAll(Collection<? extends Entry<K,V>> c)",7,3,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.add(K e)",7,3,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntryIterator.next()",7,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntryIterator.next()",7,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.add(Entry<K,V> e)",6,3,3,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.add(Entry<K,V> e)",6,3,3,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeyIterator.next()",6,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValueIterator.next()",6,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeyIterator.next()",6,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValueIterator.next()",6,3,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.equals(Object o)",5,3,10,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SingletonClassReturningNewInstanceRule.getNameFromPrimaryPrefix(ASTPrimaryPrefix pp)",5,3,4,8,1
"net.sourceforge.pmd.util.database.DBMSMetadata.DBMSMetadata(Properties properties, DBURI dbURI)",32,3,11,7,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.getImportWrapper(Node node)",20,3,12,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.isMethodCall(ASTReturnStatement rtn)",15,3,2,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.statementsBeforeReturn(VariableNameDeclaration variableDeclaration, ASTReturnStatement returnStatement)",13,3,8,7,2
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.createBuiltInMethodDeclaration(final String methodName, final String... parameterTypes)",67,3,25,6,2
"net.sourceforge.pmd.docs.DeadLinksChecker.joinFutures(Map<Path,List<Future<String>>> map)",23,3,13,6,1
"net.sourceforge.pmd.RuleSet.equals(Object o)",21,3,6,6,1
"net.sourceforge.pmd.RuleSet.getRuleByName(String ruleName)",18,3,2,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.getPreviousMethodCalls(final AbstractApexNode<?> self)",17,3,7,6,1
"net.sourceforge.pmd.RuleSet.removeDysfunctionalRules(Collection<Rule> collector)",16,3,6,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.processBlocks(Map<Node,Map<Node,Integer>> blocks)",12,3,6,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.isProperESAPICheckForDML(final String typeToCheck, final String dmlOperation)",12,3,5,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.extractObjectAndFields(final List<Identifier> listIdentifiers, final String method, final String definingType)",11,3,11,6,3
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.convertToSimpleType(List<ASTClassOrInterfaceType> types)",11,3,2,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.filterRulesByPriority(RulePriority minimumPriority)",9,3,9,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.addVariableToMapping(final String variableName, final String type)",9,3,3,6,2
"net.sourceforge.pmd.RuleViolationComparator.compare(final String s1, final String s2)",9,3,1,6,2
"net.sourceforge.pmd.docs.RuleDocGenerator.RuleDocGenerator(FileWriter writer, Path root)",8,3,5,6,2
"net.sourceforge.pmd.renderers.YAHTMLRenderer.renderIndex(String outputDir)",37,3,36,5,1
"net.sourceforge.pmd.util.log.AntLogHandler.determineGradleLogLevel(BuildListener l)",36,3,16,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getLocalApplicableMethods(TypeNode node, String methodName, List<JavaTypeDefinition> typeArguments, int argArity, Class<?> accessingClass)",27,3,8,5,5
"net.sourceforge.pmd.util.FileUtil.findPatternInFile(final File file, final String pattern)",22,3,4,5,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.buildInternal(T astNode)",21,3,12,5,1
"net.sourceforge.pmd.lang.vm.ast.ASTMethod$MethodCacheKey.hashCode()",21,3,2,5,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTContinueStatement node, Object data)",20,3,8,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTExitStatement node, Object data)",20,3,8,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTGotoStatement node, Object data)",20,3,8,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addCurrentChild()",17,3,13,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTTypeParameters node, Object data)",17,3,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTImportDeclaration node, Object data)",16,3,10,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTElsifClause node, Object data)",15,3,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.processOnDemand(String qualifiedName)",15,3,3,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTAllocationExpression node, Object data)",14,3,8,5,2
"net.sourceforge.pmd.renderers.YAHTMLRenderer.end()",14,3,8,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTResource node, Object data)",14,3,7,5,2
"net.sourceforge.pmd.util.FileUtil.normalizeFilename(String fileName)",14,3,1,5,1
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTReturnStatement node, Object data)",13,3,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getClassName(ASTCompilationUnit node)",13,3,8,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTFormalParameter node, Object data)",13,3,7,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTReferenceType node, Object data)",13,3,7,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.usedInOuterClass(ASTClassOrInterfaceDeclaration node, NameDeclaration decl)",13,3,3,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTRaiseStatement node, Object data)",12,3,8,5,2
"net.sourceforge.pmd.lang.java.symboltable.OccurrenceFinder.visit(ASTResource node, Object data)",12,3,7,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTCloseStatement node, Object data)",12,3,6,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTFetchStatement node, Object data)",12,3,6,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTOpenStatement node, Object data)",12,3,6,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTPipelineStatement node, Object data)",12,3,6,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTVariableOrConstantDeclarator node, Object data)",12,3,6,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getSuffixMethodArgs(Node node)",12,3,6,5,1
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.determineUsages(ASTVariableDeclaratorId node)",11,3,8,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.isNodeInLevel(DefaultMutableTreeNode level)",11,3,4,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule.visit(final ASTConstructorDeclaration node, final Object data)",10,3,9,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.populateVariableDeclaratorFromType(ASTLocalVariableDeclaration node, JavaTypeDefinition typeDefinition)",10,3,4,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.usedInOuterEnum(ASTClassOrInterfaceDeclaration node, NameDeclaration decl)",9,3,3,5,2
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.isAllowedClass(ASTImportDeclaration node)",9,3,3,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.actuallyUsed(List<NameOccurrence> usages)",9,3,1,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addLastChild()",8,3,7,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.rollupTypeUnary(TypeNode typeNode)",7,3,4,5,1
"net.sourceforge.pmd.lang.vm.ast.ASTMethod$MethodCacheKey.MethodCacheKey(final String methodName, final Class<?>[] params)",7,3,0,5,2
"net.sourceforge.pmd.lang.java.rule.multithreading.NonThreadSafeSingletonRule.visit(ASTFieldDeclaration node, Object data)",6,3,4,5,2
"net.sourceforge.pmd.util.designer.Designer.Designer(String[] args)",46,3,34,4,1
"net.sourceforge.pmd.PMD.getURIDataSources(String uriString)",45,3,10,4,1
"net.sourceforge.pmd.util.designer.Designer$XPathListener.actionPerformed(ActionEvent ae)",41,3,30,4,1
"net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode)",25,3,8,4,3
"net.sourceforge.pmd.RuleSetFactory.parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode, boolean withDeprecatedRuleReferences)",25,3,6,4,4
"net.sourceforge.pmd.ant.Formatter.getToFileWriter(String baseDir, File toFile, Charset charset)",23,3,7,4,3
"net.sourceforge.pmd.util.StringUtil.asStringOn(StringBuffer sb, Iterator<?> iter, String separator)",22,3,7,4,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.indexStartsAtZero(VariableNameDeclaration index)",21,3,4,4,1
"net.sourceforge.pmd.util.StringUtil.areSemanticEquals(String a, String b)",20,3,3,4,2
"net.sourceforge.pmd.util.StringUtil.startsWithAny(String text, String... prefixes)",20,3,1,4,2
"net.sourceforge.pmd.util.StringUtil.trimStartOn(String[] strings, int trimDepth)",20,3,1,4,2
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImplicitImportResolver.resolve(String name)",19,3,5,4,1
"net.sourceforge.pmd.RuleSetFactory.isRuleName(Element ruleElement, String ruleName)",18,3,10,4,2
"net.sourceforge.pmd.RuleSetReferenceId.isValidUrl(String name)",18,3,7,4,1
"net.sourceforge.pmd.util.StringUtil.withoutPrefixes(String text, String... prefixes)",18,3,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.index(String name)",17,3,11,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.visit(ASTPrimaryExpression node, Object data)",17,3,6,4,2
"net.sourceforge.pmd.cache.AbstractAnalysisCache.computeClassPathHash(final URL... classpathEntry)",17,3,6,4,1
"net.sourceforge.pmd.ant.Formatter.getConsoleEncoding()",17,3,6,4,0
"net.sourceforge.pmd.util.StringUtil.isAnyOf(String text, String... tests)",17,3,1,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.visit(ASTMethodDeclaration node, Object data)",16,3,7,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.UselessOperationOnImmutableRule.getDeclaration(ASTLocalVariableDeclaration node)",16,3,5,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImportOnDemandResolver.ImportOnDemandResolver(PMDASMClassLoader pmdClassLoader, Set<String> importStmts)",16,3,2,4,2
"net.sourceforge.pmd.util.StringUtil.percentageString(double val, int numDecimals)",16,3,1,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",15,3,9,4,5
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$CurrentPackageResolver.CurrentPackageResolver(PMDASMClassLoader pmdClassLoader, String pkg)",15,3,1,4,2
"net.sourceforge.pmd.util.designer.Designer.createXPathVersionPanel()",14,3,13,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)",14,3,8,4,5
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.isNodesEqualWithUnaryExpression(Node n1, Node n2)",14,3,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.evaluateExceptions(List<ASTName> exceptionList, Object context)",14,3,2,4,2
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.step(NodeType type)",14,3,0,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(final ASTVariableExpression variable)",13,3,18,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImportOnDemandResolver.couldResolve(String name)",13,3,18,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitFieldInsn(int opcode, String owner, String name, String desc)",13,3,7,4,4
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTEnumDeclaration node, Object data)",13,3,5,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.getDescendant(Node node, int level)",13,3,2,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule$MethodLookup.getParameterTypes(ASTFormalParameters params)",13,3,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$FullyQualifiedNameResolver.resolve(String name)",13,3,1,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTAllocationExpression node, Object data)",12,3,7,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getErasedCandidateSet(List<JavaTypeDefinition> erasedSuperTypeSets)",12,3,7,4,1
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTFieldDeclaration node, Object data)",12,3,6,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.checkExceptions(Node method, Object o)",12,3,5,4,2
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.handleASTTypeChildren(Node node)",12,3,5,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree$TreeIterator.next()",12,3,2,4,0
"net.sourceforge.pmd.util.designer.Designer$TreeWidget.getToolTipText(MouseEvent e)",11,3,10,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.reportUnnecessaryModifiers(Object data, Node node, Set<Modifier> unnecessaryModifiers, String explanation)",11,3,6,4,4
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTAnnotationMethodDeclaration node, Object data)",11,3,6,4,2
"net.sourceforge.pmd.dcd.graph.MethodNode.getMember()",11,3,6,4,0
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTEnumDeclaration node, Object data)",10,3,7,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isSystemLevelClass(ASTUserClass node)",10,3,6,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isTestMethodOrClass(final ApexNode<?> node)",10,3,6,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.visit(ASTConditionalExpression node, Object data)",10,3,5,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule$MethodLookup.MethodLookup(Map<String,Map<Integer,List<Method>>> map, Set<Method> overridden)",10,3,4,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isFactory(ASTVariableDeclarator declarator)",10,3,4,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree.equalsNodeInLevel(AbstractReportNode level, AbstractReportNode node)",10,3,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.determineTypeOfVariable(String variableName, Set<VariableNameDeclaration> declarations)",10,3,2,4,2
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getChildAt(int childIndex)",10,3,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.addNext(SimpleTypedNameDeclaration next)",10,3,1,4,1
"net.sourceforge.pmd.util.designer.Designer.getTextContext(Element element)",9,3,7,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.findInLocalScope(String name, Scope scope)",9,3,6,4,2
"net.sourceforge.pmd.lang.java.rule.design.PositionalIteratorRule.getName(Node node)",9,3,6,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTSelectionListener.valueChanged(ListSelectionEvent e)",9,3,5,4,1
"net.sourceforge.pmd.lang.java.rule.design.PositionalIteratorRule.hasNameAsChild(Node node)",9,3,4,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.asList(int[] array)",9,3,1,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getIndex(TreeNode node)",9,3,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.visit(ASTConstructorDeclaration constructorDeclaration, Object o)",8,3,4,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.eachNodeHasOneChild(Node node)",8,3,4,4,1
"net.sourceforge.pmd.util.designer.Designer$CodeHighlightListener.valueChanged(TreeSelectionEvent e)",8,3,4,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(ASTConstructorDeclaration node, Object data)",8,3,3,4,2
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.getIndex(TreeNode node)",8,3,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule.addViolations(List<MethodCall> calls, RuleContext ctx)",7,3,5,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTUserClass node, Object data)",7,3,3,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitUseExpectedRule.getCatch(Node n)",7,3,3,4,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.hashCode()",7,3,2,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.usesSimpleParameters(List<ASTArgument> arguments)",7,3,1,4,1
"net.sourceforge.pmd.util.designer.Designer.selectedLanguageVersionIndex()",7,3,1,4,0
"net.sourceforge.pmd.util.designer.Designer.getXmlTreeCode()",6,3,6,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.checkLineAndIndentation(Object data, Node node, int line, int indentation, String name)",6,3,4,4,5
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.addDeclaration(NameDeclaration declaration)",6,3,4,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.findSelectContainingVariables(AbstractApexNode<?> node)",6,3,3,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration$LanguageConverter.convert(String languageString)",6,3,2,4,1
"net.sourceforge.pmd.dcd.ClassLoaderUtil.myGetMethod(Class<?> type, String name, Class<?>... parameterTypes)",37,3,8,3,3
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.reInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize)",25,3,0,3,4
"net.sourceforge.pmd.benchmark.Benchmarker.parseStress(Parser parser, List<DataSource> dataSources, boolean debug)",24,3,6,3,3
"net.sourceforge.pmd.lang.java.multifile.ClassStats.getNestedClassStats(String className, boolean createIfNotFound)",24,3,3,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.getFirstNameImage(Node n)",24,3,3,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.getFirstChild(Node root, Class<? extends Node>... childrenTypes)",23,3,1,3,2
"net.sourceforge.pmd.lang.java.ast.Comment.multiLinesIn()",22,3,8,3,0
"net.sourceforge.pmd.dcd.ClassLoaderUtil.myGetField(Class<?> type, String name)",21,3,7,3,2
"net.sourceforge.pmd.util.ClasspathClassLoader.loadClass(final String name, final boolean resolve)",21,3,5,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule.statementsAfter(ASTLocalVariableDeclaration node)",20,3,7,3,1
"net.sourceforge.pmd.cpd.GUI.setLabelFor(Match match)",18,3,14,3,1
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.getApexDocComment(ApexNode<?> node)",17,3,10,3,1
"net.sourceforge.pmd.cpd.GUI.setListDataFrom(List<Match> matches)",17,3,9,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule.visit(ASTIfStatement node, Object data)",17,3,6,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldDeclarationsShouldBeAtStartOfClassRule.skipAnnotations(Node child)",17,3,4,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.findOptionalStringValue(String[] args, String name, String defaultValue)",17,3,1,3,3
"net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantOfAnyType(final Class<?>... types)",17,3,1,3,1
"net.sourceforge.pmd.RuleChain.getRuleChainVisitor(Language language)",16,3,7,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.findClass(String name)",16,3,3,3,1
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTSwitchLabel node, Object data)",15,3,7,3,2
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.computeForType(MetricKey<T> key, T node, boolean force, MetricOptions options, MetricMemoizer<T> memoizer)",15,3,5,3,5
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.toString()",15,3,5,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.isTargetMethod(JavaNameOccurrence occ)",15,3,4,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.singleVariableName(ASTPrimaryExpression primaryExpression)",15,3,3,3,1
"com.concurrent_ruby.ext.SynchronizationLibrary.supportsFences()",15,3,2,3,0
"net.sourceforge.pmd.util.FileIterable$FileIterator.next()",15,3,1,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule.findUnique(Map<MethodNameDeclaration,List<NameOccurrence>> methods)",14,3,7,3,1
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.JavaTypeQualifiedName(ImmutableList<String> packages, ImmutableList<String> classes, ImmutableList<Integer> localIndices, ClassLoader classLoader)",14,3,6,3,4
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.isFirstStatementInBlock(Node node, ASTStatement loopBody)",14,3,5,3,2
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$ImportOnDemandResolver.resolve(String name)",14,3,4,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.getQualifiedName()",14,3,4,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.getQualifiedName()",14,3,4,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.getSuperClassTypeNode()",14,3,4,3,0
"net.sourceforge.pmd.benchmark.Benchmarker.findBooleanSwitch(String[] args, String name)",14,3,1,3,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.processResults(Object data)",13,3,9,3,1
"net.sourceforge.pmd.renderers.CodeClimateRenderer.getLocation(RuleViolation rv)",13,3,8,3,1
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.computeForOperation(MetricKey<O> key, O node, boolean force, MetricOptions options, MetricMemoizer<O> memoizer)",13,3,5,3,5
"net.sourceforge.pmd.util.ClasspathClassLoader.initURLs(String classpath)",13,3,4,3,1
"net.sourceforge.pmd.util.ClasspathClassLoader.addFileURLs(List<URL> urls, URL fileURL)",12,3,8,3,2
"net.sourceforge.pmd.cpd.GUI.formatTime(long minutes, long seconds)",12,3,6,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTStatementExpression node, Object data)",12,3,6,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTVariableDeclarator node, Object data)",12,3,6,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.getSuperInterfacesTypeNodes()",12,3,6,3,0
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.end(RuleContext ctx)",12,3,5,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.processInsecureEndpoint(ASTMethodCallExpression node, Object data)",12,3,4,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.flagAuthorizationHeaders(final ASTMethodCallExpression node, Object data)",12,3,4,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule.hasReferencesIn(ASTBlockStatement block, String varName)",12,3,3,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.toString()",11,3,9,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.buildGuardStatementMap(List<String> logLevels, List<String> guardMethods)",11,3,8,3,2
"net.sourceforge.pmd.cpd.SourceCode.getSlice(int startLine, int endLine)",11,3,5,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.getParentsOfType(final Class<T> parentType)",11,3,5,3,1
"net.sourceforge.pmd.lang.java.multifile.ClassStats.countMatchingFieldSigs(JavaFieldSigMask sigMask)",11,3,5,3,1
"net.sourceforge.pmd.lang.java.multifile.ClassStats.countMatchingOpSigs(JavaOperationSigMask sigMask)",11,3,5,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.getMethodCallName(ASTPrimaryPrefix prefix)",11,3,4,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtAddChild(final Node child, final int index)",11,3,2,3,2
"net.sourceforge.pmd.util.filter.FileExtensionFilter.FileExtensionFilter(boolean ignoreCase, String... extensions)",11,3,1,3,2
"net.sourceforge.pmd.ant.PMDTask.getNestedRuleSetFiles()",10,3,8,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.findChildrenOfType(final Class<T> targetType)",10,3,5,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.getFirstChildOfType(final Class<T> childType)",10,3,4,3,1
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.getCode()",10,3,3,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.indexOf(Object o)",10,3,1,3,1
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestShouldNotUseSeeAllDataTrueRule.visit(final ASTUserClass node, final Object data)",9,3,5,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.isParent(Node possibleParent, Node node)",9,3,4,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.checkVariableDeclarators(List<String> prefixes, List<String> suffixes, Node root, boolean isStatic, boolean isFinal, Object data)",9,3,3,3,6
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.getCodeSlice(int startLine, int endLine)",9,3,3,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.isAuthorizationLiteral(final ASTLiteralExpression literal)",9,3,3,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.reverse()",9,3,3,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getDataFlowNode()",9,3,1,3,0
"net.sourceforge.pmd.lang.java.rule.performance.BooleanInstantiationRule.visit(ASTImportDeclaration decl, Object data)",8,3,5,3,2
"net.sourceforge.pmd.lang.vm.rule.bestpractices.UnusedMacroParameterRule.checkForParameter(final Set<String> paramNames, final String nameToSearch)",8,3,4,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.fromArray(E[] arr)",8,3,2,3,1
"net.sourceforge.pmd.lang.java.symboltable.LocalScope.addDeclaration(NameDeclaration nameDecl)",8,3,2,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$ExplicitImportResolver.resolve(String name)",8,3,2,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.childrenAccept(PLSQLParserVisitor visitor, Object data)",8,3,1,3,2
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.childrenAccept(final VmParserVisitor visitor, final Object data)",8,3,1,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.containsAll(Collection<?> c)",8,3,1,3,1
"org.sonar.plugins.scala.language.Comment.toString()",7,3,13,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.checkVariable(Object data, Set<String> loopVariables, AbstractNode node)",7,3,4,3,3
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.hasPrefixesOrSuffixes()",7,3,3,3,0
"net.sourceforge.pmd.lang.vm.rule.bestpractices.UnusedMacroParameterRule.containsAny(final String text, final String[] formatNameVariations)",7,3,1,3,2
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.addDeclaration(NameDeclaration variableDecl)",7,3,1,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.jjtOpen()",7,3,1,3,0
"net.sourceforge.pmd.renderers.XMLRenderer.maybeAdd(String attr, String value, StringBuilder buf)",6,3,6,3,3
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.containsWord(String name, String word)",6,3,6,3,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidHardcodingIdRule.checksum(String part)",6,3,5,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkGetters(ASTMethodDeclaration node, Object data, String nameOfMethod)",6,3,4,3,3
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.checkSetters(ASTMethodDeclaration node, Object data, String nameOfMethod)",6,3,4,3,3
"net.sourceforge.pmd.lang.plsql.symboltable.LocalScope.addDeclaration(NameDeclaration declaration)",6,3,4,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.addDeclaration(NameDeclaration declaration)",6,3,4,3,1
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegister.openTag(ASTElement elm)",6,3,3,3,1
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegister.openTag(ASTElement elm)",6,3,3,3,1
"net.sourceforge.pmd.renderers.CodeClimateRenderer.getPmdPropertiesURL()",6,3,2,3,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.getNextAttribute()",6,3,0,3,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.jjtOpen()",6,3,0,3,0
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.compute(ASTProgramUnit node)",5,3,3,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.findFieldLiterals(final ASTField fDecl)",4,3,6,3,1
"net.sourceforge.pmd.docs.SidebarGenerator.generateRuleReferenceSection(Map<Language,List<RuleSet>> sortedRulesets)",32,3,26,2,1
"net.sourceforge.pmd.cpd.LanguageFactory.LanguageFactory()",31,3,13,2,0
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferLengthRule.isViolation(ASTName decl)",31,3,9,2,1
"com.cb4.common.utils.MapUtilsTest.testPutUniqueValues()",30,3,14,2,0
"net.sourceforge.pmd.lang.LanguageRegistry.LanguageRegistry()",30,3,12,2,0
"net.sourceforge.pmd.util.viewer.gui.MainFrame.actionPerformed(ActionEvent e)",29,3,22,2,1
"net.sourceforge.pmd.benchmark.TextTimingReportRenderer.renderHeader(final String displayName, final Writer writer)",28,3,23,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFullyQualifiedType()",28,3,17,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.assertNode(Node node, String toString, int childs, Object... atts)",28,3,15,2,4
"net.sourceforge.pmd.lang.java.ast.CommentUtil.javadocTagsIn(String comment)",28,3,7,2,1
"net.sourceforge.pmd.util.ClassUtil.methodFor(Class<?> clasz, String methodName, Class<?>[] paramTypes)",27,3,2,2,3
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNestedClassFieldAndParameter()",26,3,25,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.addExample(String example)",26,3,5,2,1
"net.sourceforge.pmd.docs.EscapeUtils.escapeSingleLine(String line)",24,3,19,2,1
"org.sonar.plugins.scala.cpd.ScalaTokenizer.tokenize(SourceCode source, Tokens cpdTokens)",24,3,12,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveChildOfRootNode(final int childIndex)",24,3,12,2,1
"net.sourceforge.pmd.renderers.CSVWriter.writeData(Writer writer, Iterator<T> items)",23,3,13,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveRootNode()",23,3,9,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTSwitchStatement node, Object data)",23,3,5,2,2
"net.sourceforge.pmd.util.CollectionUtil.addWithoutDuplicates(T[] values, T newValue)",23,3,5,2,2
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.displayRuleViolation(RuleViolation vio)",22,3,19,2,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.isGetterOrSetter(ASTMethodDeclaration node)",22,3,17,2,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameterTest.testVarargs()",22,3,15,2,0
"net.sourceforge.pmd.lang.apex.rule.design.CyclomaticComplexityRule.visit(ASTUserClass node, Object data)",22,3,10,2,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule.validateStaticIVorKey(ASTMethodCallExpression methodCall, Object data)",22,3,7,2,2
"net.sourceforge.pmd.benchmark.TextTimingReportRenderer.renderMeasurement(final String label, final TimedResult timedResult, final Writer writer)",21,3,21,2,3
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.getLongestPackagePrefix(String acc, int i)",21,3,5,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameFactory.ofClass(Class<?> clazz)",21,3,4,2,1
"net.sourceforge.pmd.util.CollectionUtil.addWithoutDuplicates(Collection<T> source, Collection<T> target)",21,3,2,2,2
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.hashCode()",20,3,12,2,0
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityRule.visit(ASTAnyTypeDeclaration node, Object data)",20,3,8,2,2
"net.sourceforge.pmd.cpd.CPPTokenizer.setProperties(Properties properties)",20,3,5,2,1
"net.sourceforge.pmd.RuleSets.apply(List<Node> acuList, RuleContext ctx, Language language)",20,3,4,2,3
"net.sourceforge.pmd.renderers.TextColorRenderer.getLine(String sourceFile, int line)",20,3,4,2,2
"net.sourceforge.pmd.util.filter.Filters.filter(Filter<T> filter, Collection<T> collection)",20,3,2,2,2
"net.sourceforge.pmd.util.CollectionUtil.arraysAreEqual(Object value, Object otherValue)",20,3,1,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.getOperationString(ASTMethod node)",19,3,17,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredTest.allCommentTypesIgnored()",19,3,11,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTAnyTypeDeclaration node, Object data)",19,3,10,2,2
"net.sourceforge.pmd.docs.EscapeUtils.escapeBackticks(StringBuilder escaped, String linePart)",19,3,9,2,2
"net.sourceforge.pmd.util.ClassUtil.asMethodGroupsByTypeName(List<Method> methods)",19,3,7,2,1
"net.sourceforge.pmd.processor.AbstractPMDProcessor.removeBrokenRules(final RuleSets ruleSets)",19,3,5,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.getChildren()",19,3,4,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.countMatchingFieldSigs(ASTAnyTypeDeclaration classNode, JavaFieldSigMask mask)",19,3,3,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.countMatchingOpSigs(ASTAnyTypeDeclaration classNode, JavaOperationSigMask mask)",19,3,3,2,2
"net.sourceforge.pmd.util.ClassUtil.getTypeFor(String shortName)",19,3,3,2,1
"net.sourceforge.pmd.util.CollectionUtil.mapFrom(K[] keys, V[] values)",19,3,1,2,2
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.getParameterDisplaySignature()",18,3,13,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.equals(Object o)",18,3,11,2,1
"net.sourceforge.pmd.lang.java.rule.design.NcssCountRule.visit(ASTAnyTypeDeclaration node, Object data)",18,3,9,2,2
"net.sourceforge.pmd.rules.RuleFactory.setPropertyValues(Rule rule, Element propertiesElt)",18,3,8,2,2
"net.sourceforge.pmd.util.ClassUtil.asMethodGroupsByTypeName(Method[] methods)",18,3,6,2,1
"net.sourceforge.pmd.util.filter.RegexStringFilter.optimize()",18,3,5,2,0
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolation.isSupressed(Node node, Rule rule)",18,3,4,2,2
"net.sourceforge.pmd.renderers.TextColorRenderer.initializeColorsIfSupported()",18,3,4,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.multiplyChildrenComplexities(JavaNode node, Object data)",18,3,3,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.sumChildrenComplexities(JavaNode node, Object data)",18,3,3,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.RuleReference(RuleReference ref)",18,3,3,2,1
"net.sourceforge.pmd.RuleSets.usesMultifile(Language language)",18,3,1,2,1
"net.sourceforge.pmd.properties.GenericMultiValuePropertyDescriptor.errorFor(List<V> values)",18,3,1,2,1
"net.sourceforge.pmd.jaxen.AttributeTest.testConstructor()",17,3,13,2,0
"com.cb4.common.utils.MapUtilsTest.testFilterByEntry()",17,3,11,2,0
"net.sourceforge.pmd.benchmark.TextReport.generate(Set<RuleDuration> stressResults, PrintStream stream)",17,3,10,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.overLengthLineIndicesIn(Comment comment)",17,3,7,2,1
"net.sourceforge.pmd.RuleSetFactoryCompatibility.determineEncoding(byte[] bytes)",17,3,6,2,1
"net.sourceforge.pmd.Report.getSummary()",17,3,6,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.hashCode()",17,3,4,2,0
"net.sourceforge.pmd.lang.vf.ast.AbstractVfNodesTest.getNodesOfType(Class<T> clazz, Set<VfNode> allNodes)",17,3,3,2,2
"net.sourceforge.pmd.RuleSets.usesTypeResolution(Language language)",17,3,1,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.isCompare(Node equality)",16,3,7,2,1
"net.sourceforge.pmd.properties.MethodPropertyTest.testAsMethodOn()",16,3,7,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.ElementNode(DocumentNode document, IdGenerator idGenerator, ElementNode parent, Node node, int siblingPosition)",16,3,5,2,5
"net.sourceforge.pmd.lang.rule.RuleReference.useDefaultValueFor(PropertyDescriptor<?> desc)",16,3,4,2,1
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNodesTst.getNodesOfType(Class<T> clazz, Set<JspNode> allNodes)",16,3,3,2,2
"net.sourceforge.pmd.RuleSets.usesDFA(Language language)",16,3,1,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.childIndicesOf(DataFlowNode node, String separator)",15,3,12,2,2
"net.sourceforge.pmd.lang.java.ast.FormalComment.findJavadocs()",15,3,11,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.toString()",15,3,9,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTClassOrInterfaceDeclaration node, Object data)",15,3,8,2,2
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testEmptyOperationMask()",15,3,8,2,0
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.getNextToken()",15,3,6,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.useThisOrSuper()",15,3,6,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTIfStatement node, Object data)",15,3,5,2,2
"net.sourceforge.pmd.lang.rule.XPathRule.evaluate(final Node node, final RuleContext data)",15,3,5,2,2
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.getStdDev()",15,3,5,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.start(RuleContext ctx)",15,3,4,2,1
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.childrenAccept(EcmascriptParserVisitor visitor, Object data)",15,3,1,2,2
"net.sourceforge.pmd.RuleSets.applies(File file)",15,3,1,2,1
"net.sourceforge.pmd.cpd.VSRenderer.render(Iterator<Match> matches, Writer writer)",14,3,17,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.ofMethod(ASTMethod node)",14,3,14,2,1
"net.sourceforge.pmd.cpd.LanguageFactory.createLanguage(String language, Properties properties)",14,3,7,2,2
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getSuperTypeSet(Set<JavaTypeDefinition> destinationSet)",14,3,7,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.valueFrom(String valueString)",14,3,7,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.getMethodOrAttributeName(ASTPrimaryExpression node)",14,3,6,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.configureImports(final List<ASTImportDeclaration> imports)",14,3,5,2,1
"net.sourceforge.pmd.rules.RuleBuilder.language(String languageName)",14,3,4,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitLdcInsn(Object cst)",14,3,2,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.valueErrorFor(String value)",14,3,2,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.errorMsgFor(List<String> badWords)",13,3,16,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testFactorySingleValue()",13,3,15,2,0
"net.sourceforge.pmd.cpd.SimpleRenderer.render(Iterator<Match> matches, Writer writer)",13,3,9,2,2
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testFinalFields()",13,3,9,2,0
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testStaticFields()",13,3,9,2,0
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestMethodShouldHaveIsTestAnnotationRule.checkForAssertStatements(final ASTMethod testMethod, final Object data)",13,3,6,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.setUpSampleNodeTree()",13,3,5,2,0
"net.sourceforge.pmd.Report.getCountSummary()",13,3,3,2,0
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.maxWidthOf(String[] strings, FontMetrics fm)",13,3,2,2,2
"net.sourceforge.pmd.lang.vm.rule.design.NoInlineJavaScriptRule.visit(final ASTText node, final Object data)",12,3,10,2,2
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferLengthRule.isEqualsViolation(Node parent)",12,3,10,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil$Collector.invoke(Object proxy, Method method, Object[] params)",12,3,8,2,3
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst$Collector.invoke(Object proxy, Method method, Object[] params)",12,3,7,2,3
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.addType(Type t)",12,3,6,2,1
"net.sourceforge.pmd.RulesetsFactoryUtils.printRuleNamesInDebug(RuleSets rulesets)",12,3,4,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.getIndexOfChild(Object parent, Object child)",12,3,3,2,2
"net.sourceforge.pmd.renderers.CSVRenderer.activeColumns()",12,3,3,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomSigma(int minimum)",12,3,2,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.getEnclosingTypeDeclaration()",12,3,2,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.childrenAccept(ApexParserVisitor visitor, Object data)",12,3,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",12,3,1,2,2
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.errorFor(List<V> values)",12,3,1,2,1
"net.sourceforge.pmd.cpd.CPDTask.tokenizeFiles(CPD cpd)",11,3,8,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTFieldDeclaration decl, Object data)",11,3,6,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTAssertStatement node, Object data)",11,3,5,2,2
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getErasedSuperTypeSet(Class<?> clazz, Set<Class<?>> destinationSet)",11,3,5,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.visitField(int access, String name, String desc, String sig, Object value)",11,3,4,2,5
"net.sourceforge.pmd.lang.LanguageRegistry.getLanguages()",11,3,4,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration.toString()",11,3,4,2,0
"net.sourceforge.pmd.lang.symboltable.AbstractScope.getEnclosingScope(Class<T> clazz)",11,3,3,2,1
"net.sourceforge.pmd.util.filter.RegexStringFilter.filter(String obj)",11,3,3,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.getType()",11,3,2,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.childrenAndGrandChildrenIndexes()",11,3,2,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.childrenAccept(JavaParserVisitor visitor, Object data)",11,3,1,2,2
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.childrenAccept(JspParserVisitor visitor, Object data)",11,3,1,2,2
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.childrenAccept(VfParserVisitor visitor, Object data)",11,3,1,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.canUseUnsafeCHM()",11,3,1,2,0
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.getColumnNumber()",11,3,0,2,0
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.getLineNumber()",11,3,0,2,0
"net.sourceforge.pmd.lang.symboltable.AbstractScope.addNameOccurrence(NameOccurrence occurrence)",10,3,10,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTCompilationUnit node, final Object data)",10,3,9,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTUserEnum node, Object data)",10,3,7,2,2
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testColumnsOnQualifiedName()",10,3,7,2,0
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.update(ThreadContext context, Block block)",10,3,6,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTMethodDeclaration decl, Object data)",10,3,6,2,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isLocalVariableTypeInferred()",10,3,6,2,0
"net.sourceforge.pmd.lang.DummyLanguageModule$DummyRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",10,3,5,2,2
"net.sourceforge.pmd.lang.java.SuppressWarningsTest$BarRule.visit(ASTCompilationUnit cu, Object ctx)",10,3,5,2,2
"net.sourceforge.pmd.test.lang.DummyLanguageModule$DummyRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",10,3,5,2,2
"net.sourceforge.pmd.lang.rule.XPathRule.getRuleChainVisits()",10,3,5,2,0
"net.sourceforge.pmd.lang.apex.ast.DumpFacade.visit(ApexNode<?> node, Object data)",10,3,4,2,2
"net.sourceforge.pmd.lang.ecmascript.ast.DumpFacade.visit(EcmascriptNode<?> node, Object data)",10,3,4,2,2
"net.sourceforge.pmd.lang.java.rule.design.NcssCountRule.visit(ASTMethodOrConstructorDeclaration node, Object data)",10,3,4,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.setProperty(PropertyDescriptor<T> propertyDescriptor, T value)",10,3,4,2,2
"net.sourceforge.pmd.lang.xml.ast.DumpFacade.visit(XmlNode node, Object data)",10,3,4,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.maybeWrap(String filename, String line)",10,3,4,2,2
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtGetChildIndex()",10,3,4,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.checkChildren()",10,3,4,2,0
"net.sourceforge.pmd.cpd.LanguageFactory.getLanguageByExtension(String extension)",10,3,3,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getChildIndex(AbstractReportNode child)",10,3,3,2,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.applyMinimumValue(SortedSet<DataPoint> pointSet, double minValue)",10,3,2,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",10,3,2,2,2
"net.sourceforge.pmd.properties.AbstractMultiPackagedProperty.valueErrorFor(T value)",10,3,2,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.getMethodParameterTypes()",10,3,2,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.getBeginColumn()",10,3,2,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.getBeginLine()",10,3,2,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.getEndColumn()",10,3,2,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.getEndLine()",10,3,2,2,0
"net.sourceforge.pmd.properties.GenericPropertyDescriptor.errorFor(T value)",10,3,1,2,1
"net.sourceforge.pmd.util.filter.AndFilter.filter(T obj)",10,3,1,2,1
"net.sourceforge.pmd.util.filter.OrFilter.filter(T obj)",10,3,1,2,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.hasDefaultCase()",10,3,1,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTForStatement node, Object data)",9,3,6,2,2
"net.sourceforge.pmd.lang.java.rule.SymbolTableTestRule.visit(ASTFieldDeclaration node, Object data)",9,3,6,2,2
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.logRulesUsed(RuleSets rules)",9,3,6,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.getDefaultLanguage()",9,3,6,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractInfixEcmascriptNode.AbstractInfixEcmascriptNode(T infixExpression, boolean setImage)",9,3,5,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.MethodWithSameNameAsEnclosingClassRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",9,3,5,2,2
"net.sourceforge.pmd.lang.LanguageRegistry.commaSeparatedTerseNamesForLanguage(List<Language> languages)",9,3,5,2,1
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isA(TypedNameDeclaration vnd, String className)",9,3,4,2,2
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getNextSibling(Node contextNode)",9,3,4,2,1
"net.sourceforge.pmd.lang.xpath.MatchesFunction.matches(String s, String... patterns)",9,3,3,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.hasWebServices(ApexNode<?> node)",9,3,3,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getPreviousSibling(Node contextNode)",9,3,3,2,1
"com.cb4.common.utils.MapUtilsTest.testPutUniqueValuesForNoSource()",9,3,3,2,0
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.get_and_set(ThreadContext context, IRubyObject newValue)",9,3,2,2,2
"net.sourceforge.pmd.properties.AbstractPropertySource.dysfunctionReason()",9,3,2,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.errorFor(List<E> values)",9,3,1,2,1
"net.sourceforge.pmd.util.CompoundIterator.getNextIterator()",9,3,1,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.isAnnotatedOverride(ASTMethodDeclaration decl)",8,3,5,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.withDimensions(int numDimensions)",8,3,5,2,1
"net.sourceforge.pmd.lang.symboltable.AbstractScope.contains(NameOccurrence occ)",8,3,5,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.findByExtension(String extension)",8,3,4,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.countRule(RuleSets rs, String ruleName)",8,3,3,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.importsPackage(ASTCompilationUnit node, String packageName)",8,3,3,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.setDescription(String description)",8,3,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setExternalInfoUrl(String externalInfoUrl)",8,3,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setLanguage(Language language)",8,3,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion)",8,3,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setMessage(String message)",8,3,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion)",8,3,3,2,1
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolation.ApexRuleViolation(Rule rule, RuleContext ctx, Node node, String message)",8,3,2,2,4
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getGenericTypeIndex(TypeVariable<?>[] typeParameters, final String parameterName)",8,3,2,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.hasRestAnnotation(ASTModifierNode modifierNode)",8,3,2,2,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.hasSuppressWarningsAnnotationFor(Rule rule)",8,3,2,2,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.get(ASTMethodDeclaration node)",8,3,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.addVariablesToSet(Set<Variable> variables)",8,3,2,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setPriority(RulePriority priority)",8,3,2,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.getPropertyDescriptor(String name)",8,3,2,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.isAnyAnnotationPresent(Collection<String> annotQualifiedNames)",8,3,1,2,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedLocalVariableRule.actuallyUsed(List<NameOccurrence> usages)",8,3,1,2,1
"net.sourceforge.pmd.rules.RuleFactory.checkRequiredAttributesArePresent(Element ruleElement)",8,3,1,2,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getArrayDepth()",7,3,6,2,0
"net.sourceforge.pmd.dcd.graph.UsageGraph.defineMethod(String className, String name, String desc)",7,3,5,2,3
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodArgumentCouldBeFinalRule.visit(ASTMethodDeclaration meth, Object data)",7,3,5,2,2
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visitAttributeNodes(XmlNode node, Node domNode, RuleContext ctx)",7,3,4,2,3
"net.sourceforge.pmd.lang.LanguageRegistry.findLanguageByTerseName(String terseName)",7,3,4,2,1
"net.sourceforge.pmd.util.datasource.ZipDataSource.hashCode()",7,3,4,2,0
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.checkForNonExistentAnnotation(final AbstractApexNode<?> node, final ASTModifierNode modifierNode, final Object data)",7,3,3,2,3
"net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule.reportIfHardCoded(Object data, Object potentialIV)",7,3,3,2,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule.visit(ASTUserClass node, Object data)",7,3,3,2,2
"net.sourceforge.pmd.renderers.IDEAJRenderer$SourcePath.clipPath(String fullFilename)",7,3,3,2,1
"net.sourceforge.pmd.dcd.graph.ClassNode.getType()",7,3,3,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTFormalParameter.getTypeNode()",7,3,3,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.addUse(MemberNode use)",7,3,2,2,1
"net.sourceforge.pmd.dcd.graph.MemberNode.addUser(MemberNode user)",7,3,2,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setName(String name)",7,3,2,2,1
"net.sourceforge.pmd.cpd.CPDTask.createRenderer()",7,3,2,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.hashCode()",7,3,2,2,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.containsIgnoreCase(Set<String> set, String str)",7,3,1,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.contains(Collection<String> collection, String s1)",7,3,1,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTAnnotationTypeDeclaration decl, final Object data)",6,3,6,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTEnumDeclaration decl, final Object data)",6,3,6,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.checkMethodOrConstructorComment(AbstractJavaAccessNode decl, Object data)",6,3,4,2,2
"net.sourceforge.pmd.lang.plsql.symboltable.Search.Search(PLSQLNameOccurrence occ)",6,3,3,2,1
"net.sourceforge.pmd.lang.java.symboltable.Search.Search(JavaNameOccurrence occ)",6,3,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.parseClassName(String[] names)",6,3,1,2,1
"JumbledIncrementer.foo()",6,3,1,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.jjtOpen()",6,3,0,2,0
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.jjtOpen()",6,3,0,2,0
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.jjtOpen()",6,3,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.hashCode()",5,3,10,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.trimIfPrefix(String img)",5,3,3,2,1
"net.sourceforge.pmd.dcd.graph.UsageGraph.checkClassName(String className)",5,3,2,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getChildAt(int arg0)",5,3,2,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.dysfunctionReason()",3,3,5,2,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.visibilityTest()",39,3,23,1,0
"net.sourceforge.pmd.util.designer.CreateXMLRulePanel.actionPerformed(ActionEvent exception)",38,3,32,1,1
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.fieldPoolTest()",31,3,16,1,0
"net.sourceforge.pmd.RuleContext.setAttribute(String name, Object value)",30,3,1,1,2
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.operationPoolTest()",29,3,16,1,0
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.asStringOn(Method method, StringBuilder sb)",28,3,13,1,2
"net.sourceforge.pmd.lang.metrics.AbstractMetricsFacade.computeForOperation(MetricKey<O> key, O node, MetricOptions options)",26,3,9,1,3
"net.sourceforge.pmd.ReportTest.testTreeIterator()",25,3,14,1,0
"net.sourceforge.pmd.lang.metrics.AbstractMetricsFacade.computeForType(MetricKey<T> key, T node, MetricOptions options)",25,3,9,1,3
"net.sourceforge.pmd.PMDConfiguration.prependClasspath(String classpath)",24,3,1,1,1
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsProviderTest.testComputeAllMetrics()",23,3,13,1,0
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule.visit(ASTSwitchStatement node, Object data)",23,3,9,1,2
"net.sourceforge.pmd.util.TypeMap.add(Class<?> type)",23,3,6,1,1
"net.sourceforge.pmd.RuleSetTest.verifyRuleSet(RuleSet ruleset, int size, Set<RuleViolation> values)",22,3,18,1,3
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(AbstractApexNodeBase node, Object data)",21,3,11,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(JavaNode node, Object data)",21,3,11,1,2
"net.sourceforge.pmd.util.TypeMap.storeShortest(Map<Class<?>,String> map, Class<?> key, String value)",21,3,5,1,3
"net.sourceforge.pmd.AbstractLanguageVersionTest.AbstractLanguageVersionTest(String name, String terseName, String version, LanguageVersion expected)",21,3,1,1,4
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testNestedEmptyPackage()",20,3,13,1,0
"net.sourceforge.pmd.cpd.CPDTest.prepareSymLinks()",19,3,8,1,0
"net.sourceforge.pmd.testframework.PMDTestRunner.filter(Filter filter)",19,3,2,1,1
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveNodeCountRule.visit(AbstractApexNodeBase node, Object data)",18,3,10,1,2
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveNodeCountRule.visit(JavaNode node, Object data)",18,3,10,1,2
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveNodeCountRule.visit(PLSQLNode node, Object data)",18,3,10,1,2
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testNestedClass()",18,3,8,1,0
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getParentAxisIterator(Object contextNode)",18,3,3,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.toString()",17,3,20,1,0
"net.sourceforge.pmd.lang.plsql.rule.PLSQLRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",17,3,13,1,3
"net.sourceforge.pmd.it.BinaryDistributionIT.testZipFileContent()",17,3,10,1,0
"net.sourceforge.pmd.lang.vm.util.LogUtil.formatFileString(String template, final int linenum, final int colnum)",17,3,1,1,3
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.toString()",16,3,13,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.toCollection(Supplier<C> emptyCollSupplier)",16,3,7,1,1
"net.sourceforge.pmd.lang.java.metrics.ParameterizedMetricKeyTest.testIdentity()",15,3,10,1,0
"net.sourceforge.pmd.lang.java.metrics.ParameterizedMetricKeyTest.testVersioning()",15,3,10,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.call(Context context, List args)",15,3,8,1,2
"net.sourceforge.pmd.util.log.ScopedLogHandlersManager.ScopedLogHandlersManager(Level level, Handler... handlers)",15,3,8,1,2
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$NotThreadSafeRule.apply(List<? extends Node> nodes, RuleContext ctx)",15,3,7,1,2
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.getPackageName()",15,3,4,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.equals(Object other)",15,3,2,1,1
"net.sourceforge.pmd.lang.dfa.Structure.dump()",14,3,10,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.FormalParameterNamingConventionsRule.visit(ASTParameter node, Object data)",14,3,5,1,2
"net.sourceforge.pmd.benchmark.TimeTracker.finishThread()",14,3,4,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.MetricOptions(Set<? extends MetricOption> opts)",13,3,6,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.PropertyNamingConventionsRule.visit(ASTField node, Object data)",13,3,5,1,2
"net.sourceforge.pmd.lang.java.ast.AbstractTypeBodyDeclaration.getDeclarationNode()",13,3,3,1,0
"net.sourceforge.pmd.util.database.ResourceResolver.resolve(String href, String base)",13,3,2,1,2
"net.sourceforge.pmd.lang.metrics.MetricOptions$MetricOptionsBuilder.build()",12,3,5,1,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.getIndexForDocumentOperation(final DocumentOperation documentOperation)",12,3,3,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule.visit(ASTUserClass node, Object data)",11,3,7,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryAnnotationValueElementRule.visit(ASTAnnotation node, Object data)",11,3,6,1,2
"net.sourceforge.pmd.lang.java.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTIfStatement node, Object data)",11,3,3,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",10,3,5,1,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexUnitTestRule.visit(final ASTUserClass node, final Object data)",10,3,4,1,2
"net.sourceforge.pmd.util.database.ResourceLoader.getResourceStream(String path)",10,3,4,1,1
"net.sourceforge.pmd.lang.java.rule.design.ExcessivePublicCountRule.visit(ASTFieldDeclaration node, Object data)",10,3,3,1,2
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.cleanup(String message, Object[] args)",10,3,2,1,2
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getParentNode(Object arg0)",10,3,2,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.equals(Object obj)",10,3,1,1,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.visit(ASTEnumDeclaration node, Object data)",9,3,5,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTClassOrInterfaceBody node, Object data)",9,3,5,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration.getName()",9,3,5,1,0
"net.sourceforge.pmd.lang.java.rule.design.NPathComplexityRule.visit(ASTMethodOrConstructorDeclaration node, Object data)",9,3,4,1,2
"net.sourceforge.pmd.util.log.ScopedLogHandlersManager.close()",9,3,4,1,0
"net.sourceforge.pmd.benchmark.RuleDuration.compareTo(RuleDuration other)",9,3,3,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getDocumentNode(Object contextNode)",9,3,3,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault)",9,3,1,1,3
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getTypeNode()",8,3,9,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.getMetric(Node n, String metricKeyName)",8,3,5,1,2
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.addPathToChild(DataFlowNode child)",8,3,5,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNumberLiteral.getNormalizedImage()",8,3,5,1,0
"net.sourceforge.pmd.dcd.graph.FieldNode.getMember()",8,3,4,1,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizer.getTokenImage(GenericToken token)",8,3,3,1,1
"net.sourceforge.pmd.properties.PropertyBuilder.PropertyBuilder(String name)",8,3,3,1,1
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.columnFromOffset(int lineNumber, int offset)",8,3,0,1,2
"net.sourceforge.pmd.lang.java.symboltable.AbstractJavaScope.glomNames(Set<T> s)",7,3,7,1,1
"net.sourceforge.pmd.FooRule.apply(Node node, RuleContext ctx)",7,3,6,1,2
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions$DocumentOperationNonOverlappingRegionsComparator.doesFirstRegionEndBeforeSecondRegionBegins(final RegionByLine r1, final RegionByLine r2)",7,3,6,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidFieldNameMatchingTypeNameRule.visit(ASTFieldDeclaration node, Object data)",7,3,5,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.DontImportSunRule.visit(ASTImportDeclaration node, Object data)",7,3,5,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.rubyFixnumToNonNegativeInt(IRubyObject value, String paramName)",7,3,4,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.rubyFixnumToPositiveInt(IRubyObject value, String paramName)",7,3,4,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.rubyNumericToLong(IRubyObject value, String paramName)",7,3,4,1,2
"net.sourceforge.pmd.lang.java.ast.ASTBreakStatement.getImage()",7,3,4,1,0
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationKey.hashCode()",7,3,2,1,0
"net.sourceforge.pmd.cli.PMDParameters$RulePriorityConverter.validate(String value)",7,3,1,1,1
"net.sourceforge.pmd.lang.java.symboltable.DeclarationFinderFunction.isDeclaredBefore(NameDeclaration nameDeclaration)",6,3,6,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTReferenceExpression.getImage()",6,3,6,1,0
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitUsers(MemberNode memberNode, Object data)",6,3,4,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitUses(MemberNode memberNode, Object data)",6,3,4,1,2
"net.sourceforge.pmd.lang.apex.multifile.ApexProjectMirror.getClassStats(ApexQualifiedName qname, boolean createIfNotFound)",6,3,4,1,2
"net.sourceforge.pmd.lang.apex.rule.design.ExcessivePublicCountRule.visit(ASTFieldDeclarationStatements node, Object data)",6,3,4,1,2
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isFinal()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isPackagePrivate()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isPrivate()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isProtected()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isPublic()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isStatic()",6,3,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.getPackageDeclaration()",6,3,2,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.convertRubyBooleanToJavaBoolean(IRubyObject newValue)",6,3,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNumberLiteral.normalizeHexIntegerLiteral(String image)",5,3,5,1,1
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.checkDecl()",5,3,5,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getAccessNodeParent()",5,3,5,1,0
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.typeErrorFor(T value)",5,3,4,1,1
"net.sourceforge.pmd.it.BinaryDistributionIT.cleanupTempDirectory()",5,3,4,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.checkType()",5,3,4,1,0
"net.sourceforge.pmd.cli.PMDParameters$RulePriorityValidator.validate(String name, Integer value)",5,3,0,1,2
"net.sourceforge.pmd.lang.java.symboltable.AbstractJavaScope.checkForDuplicatedNameDeclaration(NameDeclaration declaration)",4,3,3,1,1
"ParserCornerCases.bitwiseOperator()",4,3,1,1,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.code(Visibility visibility, boolean isStatic, boolean isFinal)",3,3,1,1,3
"SwitchStatements.myMethod()",19,3,1,0,0
"Test.main(String[] args)",10,3,0,0,1
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.visit(ASTCompilationUnit compilationUnit, Object data)",8,2,2,10,2
"net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,10,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.nullCheckIfCondition(ASTBlock enclosingBlock, Node node, String varName)",27,2,3,9,3
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.hasNullInitializer(ASTLocalVariableDeclaration var)",12,2,3,9,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.toSimpleType(String fullyQualifiedClassName)",7,2,2,9,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.ck(Object data, String target, ASTThrowStatement throwStatement, Node baseNode)",5,2,2,9,4
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.entrySet()",19,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.entrySet()",19,2,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.SingletonClassReturningNewInstanceRule.getReturnVariableName(ASTMethodDeclaration node)",17,2,6,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",17,2,5,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.keySet(V mappedValue)",16,2,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.keySet(V mappedValue)",16,2,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.hashCode()",15,2,3,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.hashCode()",15,2,3,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.get(Object key)",15,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.get(Object key)",15,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.setValue(V value)",14,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.setValue(V value)",14,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.containsKey(Object key)",13,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.remove(Object key)",13,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.containsKey(Object key)",13,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.remove(Object key)",13,2,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.mappingCount()",12,2,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.mappingCount()",12,2,1,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.initCI()",11,2,3,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.keySet()",10,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.keySet()",10,2,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorInvocation.ConstructorInvocation(ASTExplicitConstructorInvocation eci)",9,2,6,8,1
"net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule.isInAssignment(Node potentialStatement)",8,2,5,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.values()",8,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.values()",8,2,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.compareNodes(Node n1, Node n2)",7,2,4,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.tryAcquire(int ignore)",6,2,3,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.tryAcquire(int ignore)",6,2,3,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.hashCode()",5,2,4,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.hashCode()",5,2,4,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.getCalledConstructor()",5,2,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.tryReleaseShared(int ignore)",4,2,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.tryReleaseShared(int ignore)",4,2,2,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntryIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeyIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValueIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntryIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeyIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValueIterator.split()",4,2,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Node.casHash(int cmp, int val)",3,2,3,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Node.casHash(int cmp, int val)",3,2,3,8,2
"net.sourceforge.pmd.util.database.DBMSMetadata.findSourceObjectFromMetaData(DatabaseMetaData metadata, String schema, String sourceCodeName)",73,2,11,7,3
"net.sourceforge.pmd.util.database.DBMSMetadata.findSourceObjects(PreparedStatement sourceCodeObjectsStatement, String language, String schema, String sourceCodeType, String sourceCodeName)",49,2,17,7,5
"net.sourceforge.pmd.util.database.DBMSMetadata.DBMSMetadata(String user, String password, DBURI dbURI)",32,2,10,7,3
"net.sourceforge.pmd.lang.java.rule.performance.RedundantFieldInitializerRule.isRef(ASTFieldDeclaration fieldDeclaration, ASTVariableDeclarator variableDeclarator)",32,2,4,7,2
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.evaluate(final Node node, final RuleContext data)",17,2,9,7,2
"net.sourceforge.pmd.util.database.DBMSMetadata.getSourceObjectList()",15,2,6,7,0
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.addQueryToNode(final XPath xPath, final String nodeName)",13,2,3,7,2
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.getXPathsForNodeOrDefault(final String nodeName)",13,2,2,7,1
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.add(RuleSet ruleSet, Rule rule)",10,2,4,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.visit(ASTClassOrInterfaceType node, Object data)",8,2,3,7,2
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.indexNode(Node node)",8,2,3,7,1
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.clear()",8,2,2,7,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,7,2
"com.concurrent_ruby.ext.jsr166e.Striped64$HashCode.HashCode()",3,2,1,7,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64$HashCode.HashCode()",3,2,1,7,0
"net.sourceforge.pmd.docs.RuleDocGenerator.getRuleSetSourceFilepath(RuleSet ruleset)",33,2,11,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.getRuleClassSourceFilepath(String ruleClass)",24,2,9,6,1
"net.sourceforge.pmd.docs.DeadLinksChecker.computeHttpResponse(String url)",23,2,13,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.parameterizeInvocation(JavaTypeDefinition context, Method method, ASTArgumentList argList)",17,2,4,6,3
"net.sourceforge.pmd.RuleSetWriter.createPropertyDefinitionElementBR(PropertyDescriptor<?> propertyDescriptor)",14,2,13,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.setIncludePatterns(final Collection<String> theIncludePatterns)",14,2,3,6,1
"net.sourceforge.pmd.RuleSet.RuleSet(final RuleSet rs)",14,2,3,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.getRuleSetLanguage(RuleSet ruleset)",13,2,6,6,1
"net.sourceforge.pmd.RuleSetWriter.createPropertyValueElement(PropertyDescriptor propertyDescriptor, Object value)",12,2,8,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(final ASTVariableDeclaration node, Object data)",12,2,8,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.setExcludePatterns(final Collection<String> theExcludePatterns)",12,2,3,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addExcludePattern(final String aPattern)",12,2,2,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addIncludePattern(final String aPattern)",12,2,2,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.mapLanguageForHighlighting(String languageTersename)",12,2,2,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.findConstructorlMethods()",11,2,10,6,0
"net.sourceforge.pmd.RuleSet.end(RuleContext ctx)",11,2,1,6,1
"net.sourceforge.pmd.RuleSet.start(RuleContext ctx)",11,2,1,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.getTypesFromSOQLQuery(final ASTSoqlExpression node)",10,2,13,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(final ASTProperty node, Object data)",10,2,7,6,2
"net.sourceforge.pmd.docs.DeadLinksChecker.getCachedFutureResponse(String url)",10,2,7,6,1
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.visit(ASTElement node, Object data)",10,2,5,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.getSimpleType(final String type)",10,2,4,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.innerAddParametrizedClassToMapping(final ASTFieldDeclaration node, final ClassTypeRef innerClassRef)",8,2,9,6,2
"net.sourceforge.pmd.RuleSetWriter.createRuleSetReferenceElement(RuleSetReference ruleSetReference)",8,2,6,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(final ASTAssignmentExpression node, Object data)",8,2,2,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(final ASTReturnStatement node, Object data)",8,2,2,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.getType(final ASTMethodCallExpression methodNode)",7,2,15,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isMethodConvertible(JavaTypeDefinition parameter, ASTExpression argument)",6,2,5,6,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isSubtypeable(JavaTypeDefinition parameter, ASTExpression argument)",6,2,5,6,2
"net.sourceforge.pmd.docs.RuleDocGenerator.getRuleSetKeywords(RuleSet ruleset)",6,2,5,6,1
"net.sourceforge.pmd.util.datasource.FileDataSource.hashCode()",6,2,1,6,0
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.isJsonParse(ASTText prevText)",5,2,10,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getNextSibling(Node current)",5,2,6,6,1
"net.sourceforge.pmd.cpd.CsTokenizer.setProperties(Properties properties)",4,2,3,6,1
"net.sourceforge.pmd.RuleSetWriter.setIfNonNull(Object value, Element target, String id)",4,2,2,6,3
"net.sourceforge.pmd.util.datasource.FileDataSource.trimAnyPathSep(String name)",3,2,2,6,1
"net.sourceforge.pmd.testframework.RuleTst.runTestFromString(String code, Rule rule, Report report, LanguageVersion languageVersion, boolean isUseAuxClasspath)",20,2,13,5,5
"net.sourceforge.pmd.util.FileUtil.collectFiles(String fileLocations, FilenameFilter filenameFilter)",20,2,2,5,2
"net.sourceforge.pmd.testframework.RuleTst.extractTestsFromXml(Rule rule, String testsFileName, String baseDirectory)",19,2,4,5,3
"net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader.loadClass(String name)",18,2,4,5,1
"net.sourceforge.pmd.testframework.RuleTst.findRule(String ruleSet, String ruleName)",17,2,6,5,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.createNodeAdapter(T node)",17,2,5,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTTypeBound node, Object data)",16,2,6,5,2
"net.sourceforge.pmd.util.FileUtil.getFileNameWithoutExtension(String fileName)",16,2,2,5,1
"net.sourceforge.pmd.testframework.RuleTst.getCleanRuleName(Rule rule)",14,2,10,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTWildcardBounds node, Object data)",13,2,8,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.phase1()",12,2,4,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.loadClass(String fullyQualifiedClassName)",12,2,3,5,1
"net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader.getInstance(ClassLoader parent)",12,2,1,5,1
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.build(T astNode)",11,2,4,5,1
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.getVariableNames(Iterable<ASTVariableDeclaratorId> iterable)",10,2,8,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTTypeArgument node, Object data)",10,2,5,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTTypeParameter node, Object data)",10,2,5,5,2
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.visit(ASTLabelledStatement node, Object data)",9,2,8,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",9,2,5,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.checkForViolation(Node node, Object data, int concurrentCount)",9,2,2,5,3
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.isMethodType(ASTMethodDeclaration node, String methodType)",8,2,2,5,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.visit(AstNode node)",8,2,2,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getEnclosingTypeDeclarationClass(Node node)",8,2,2,5,1
"net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule.skipAnnotations(Node p)",7,2,3,5,1
"net.sourceforge.pmd.testframework.RuleTst.runTests(TestDescriptor[] tests)",7,2,1,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,5,2
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.visit(ASTClassOrInterfaceDeclaration clz, Object data)",6,2,2,5,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.isAppendingStringLiteral(Node node)",6,2,2,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getArgumentList(ASTArguments args)",6,2,1,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.getArgumentListArity(ASTArgumentList argList)",6,2,1,5,1
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.dysfunctionReason()",6,2,1,5,0
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.getLastChildNode(DefaultMutableTreeNode node)",5,2,2,5,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.addVariable(ASTVariableExpression node)",4,2,2,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.checkAll(Object context, ASTFormalParameter[] arrs, List<ASTBlockStatement> bs)",4,2,1,5,3
"net.sourceforge.pmd.coverage.PMDCoverageTest.runPmd(String commandLine)",42,2,28,4,1
"net.sourceforge.pmd.util.designer.Designer.createMenuBar()",36,2,12,4,0
"net.sourceforge.pmd.RuleSetFactory.createNewRuleSet(String name, String description, String fileName, Collection<String> excludePatterns, Collection<String> includePatterns, Collection<Rule> rules)",31,2,7,4,6
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.getName()",28,2,15,4,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.validateAgainstDtd(InputStream inputStream)",28,2,12,4,1
"net.sourceforge.pmd.RuleSetFactory.getRegisteredRuleSets()",27,2,10,4,0
"net.sourceforge.pmd.RuleSetFactory.createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)",25,2,4,4,2
"net.sourceforge.pmd.RuleSetFactory.createSingleRuleRuleSet(final Rule rule)",21,2,13,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.createSourceFileScope(ASTInput node)",21,2,4,4,1
"net.sourceforge.pmd.RuleSetFactory.createRuleSet(String referenceString)",20,2,4,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.children()",20,2,2,4,0
"net.sourceforge.pmd.PMD.parserFor(LanguageVersion languageVersion, PMDConfiguration configuration)",19,2,5,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.getRuleSetFileNames(String language)",18,2,7,4,1
"net.sourceforge.pmd.util.StringUtil.lpad(String s, int length)",18,2,6,4,2
"net.sourceforge.pmd.RuleSetReferenceId.checkRulesetExists(final String name)",18,2,1,4,1
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.isJustReturnsBooleanAfter(ASTIfStatement ifNode)",17,2,8,4,1
"net.sourceforge.pmd.util.StringUtil.escapeWhitespace(Object o)",17,2,4,4,1
"net.sourceforge.pmd.RuleSetFactory.createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds)",17,2,2,4,1
"net.sourceforge.pmd.PMD.sortFiles(final PMDConfiguration configuration, final List<DataSource> files)",16,2,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.createClassScope(PLSQLNode node)",16,2,3,4,1
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTSubqueryOperation node, Object data)",15,2,12,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.resolveEntity(String publicId, String systemId)",15,2,5,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.testDtd()",15,2,3,4,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.testXmlSchema()",15,2,3,4,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.testReadWriteRoundTrip()",15,2,2,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule.visit(ASTMethodDeclaration node, Object data)",14,2,3,4,2
"net.sourceforge.pmd.util.database.DBType.getResourceBundleAsProperties(ResourceBundle resourceBundle)",14,2,3,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.TypeSet(ClassLoader classLoader)",14,2,2,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visit(int version, int access, String name, String signature, String superName, String[] interfaces)",13,2,9,4,6
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTCompilationUnit cu, Object data)",13,2,3,4,2
"net.sourceforge.pmd.lang.dfa.Linker.computeWhile(int first, int last)",12,2,13,4,2
"net.sourceforge.pmd.ant.Formatter.end(Report errorReport)",12,2,5,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.MoreThanOneLoggerRule.init(JavaNode node, Object data)",12,2,4,4,2
"net.sourceforge.pmd.ant.Formatter.getNativeConsoleEncoding()",12,2,3,4,0
"net.sourceforge.pmd.lang.dfa.Linker.computeIf(int first, int last)",11,2,12,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index)",11,2,7,4,6
"net.sourceforge.pmd.lang.dfa.Linker.dump(String description, List<StackObject> stackList)",11,2,6,4,2
"net.sourceforge.pmd.cpd.CPDConfiguration.setRendererEncoding(Object renderer, String encoding)",11,2,3,4,2
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$CurrentPackageResolver.qualifyName(final String name)",11,2,2,4,1
"net.sourceforge.pmd.util.designer.Designer.getXmlTreeCode(Node cu)",11,2,2,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getMentionedVariables(List<Bound> bounds)",11,2,1,4,1
"net.sourceforge.pmd.RuleSetFactory.RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority, final boolean warnDeprecated, final boolean enableCompatibility)",11,2,0,4,4
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitFrame(int type, int local, Object[] local2, int stack, Object[] stack2)",10,2,8,4,5
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitInnerClass(String name, String outerName, String innerName, int access)",10,2,6,4,4
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.readFullyToString(InputStream inputStream)",10,2,5,4,1
"net.sourceforge.pmd.cache.AbstractAnalysisCache.getCachedViolations(final File sourceFile)",10,2,4,4,1
"net.sourceforge.pmd.lang.dfa.Linker.computeDo(int first, int last)",9,2,12,4,2
"net.sourceforge.pmd.ant.Formatter.unknownRendererMessage(String userSpecifiedType)",9,2,8,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitTableSwitchInsn(int min, int max, Label dflt, Label... labels)",9,2,6,4,4
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitTryCatchBlock(Label start, Label end, Label handler, String type)",9,2,5,4,4
"net.sourceforge.pmd.ant.Formatter.createRenderer()",9,2,5,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitParameterAnnotation(int parameter, String desc, boolean visible)",9,2,4,4,3
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ExplicitImportResolver.resolve(final String name)",9,2,2,4,1
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.createKids()",9,2,2,4,0
"net.sourceforge.pmd.cpd.MatchAlgorithm.MatchAlgorithm(Map<String,SourceCode> sourceCode, Tokens tokens, int min, CPDListener listener)",9,2,1,4,4
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels)",8,2,6,4,3
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getAttributes()",8,2,5,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitOuterClass(String owner, String name, String desc)",8,2,4,4,3
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.getRuleSetFileNames()",8,2,4,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitAnnotation(String desc, boolean visible)",8,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitAnnotation(String desc, boolean visible)",8,2,3,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.validateAgainstDtd(String fileName)",8,2,3,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.validateAgainstSchema(String fileName)",8,2,3,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations$CombinationsIterator.advanceToNextK()",8,2,2,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.getSimpleForUpdateXpath(String itName)",8,2,0,4,1
"net.sourceforge.pmd.util.designer.CodeEditorTextPane.select(Node node)",7,2,11,4,1
"net.sourceforge.pmd.lang.vm.rule.design.CollapsibleIfStatementsRule.visit(final ASTElseIfStatement node, final Object data)",7,2,5,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.isAllowedMethod(ASTMethodDeclaration methodDeclaration)",7,2,5,4,1
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.setBeginLocation(Node n, int index)",7,2,4,4,2
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.setEndLocation(Node n, int index)",7,2,4,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitSource(String source, String debug)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitIincInsn(int var, int increment)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitIntInsn(int opcode, int operand)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitJumpInsn(int opcode, Label label)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitLineNumber(int line, Label start)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitMaxs(int maxStack, int maxLocals)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitMultiANewArrayInsn(String desc, int dims)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitTypeInsn(int opcode, String desc)",7,2,3,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitVarInsn(int opcode, int var)",7,2,3,4,2
"net.sourceforge.pmd.RuleSetReferenceId.isHttpUrl(String name)",7,2,3,4,1
"net.sourceforge.pmd.util.designer.Designer.loadSymbolTableTreeData(TreeNode rootNode)",7,2,3,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree.size()",7,2,3,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.visit(final ASTResource node, final Object data)",7,2,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.getReturnType(ASTReturnStatement node)",7,2,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$CurrentPackageResolver.resolve(String name)",7,2,2,4,1
"net.sourceforge.pmd.dcd.graph.ConstructorNode.toStringLong()",7,2,2,4,0
"net.sourceforge.pmd.util.designer.CodeEditorTextPane.getLine(int number)",7,2,1,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.ASTTreeNode(Node theNode)",7,2,1,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.getVariables(ASTMethodDeclaration method)",6,2,5,4,1
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.visit(ASTImportDeclaration node, Object o)",6,2,3,4,2
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.setStatusCodeOrExit(int status)",6,2,3,4,1
"net.sourceforge.pmd.ant.Formatter.createProperties()",6,2,3,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.getImage()",6,2,3,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule.visit(ASTArguments node, Object data)",6,2,2,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,4,2
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule.visit(final ASTClassOrInterfaceDeclaration node, final Object data)",6,2,2,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitAttribute(Attribute attr)",6,2,2,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitAttribute(Attribute attr)",6,2,2,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitInsn(int opcode)",6,2,2,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitLabel(Label label)",6,2,2,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitLdcInsn(Object cst)",6,2,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isNotLiteral(ASTPrimaryExpression expression)",6,2,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$PrimitiveTypeResolver.resolve(String name)",6,2,2,4,1
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.isExitAfterRunSet()",6,2,2,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$VoidResolver.resolve(String name)",6,2,1,4,1
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.ExceptionNode(Object theItem)",6,2,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitAnnotationDefault()",6,2,1,4,0
"net.sourceforge.pmd.util.designer.Designer.copyXmlToClipboard()",5,2,4,4,0
"net.sourceforge.pmd.cpd.AbstractTokenizer.getCommentToken(StringBuilder token, int loc)",5,2,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.getLastChild(Node node)",5,2,3,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule.isCloneMethod(final ASTMethodDeclarator method)",5,2,3,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule.validateLiteralPresence(ASTMethodCallExpression methodCall, Object data)",5,2,2,4,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParser.EcmascriptParser(EcmascriptParserOptions parserOptions)",5,2,2,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.tokenizer()",5,2,1,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.visitEnd()",5,2,1,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitCode()",5,2,1,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.visitEnd()",5,2,1,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getScope()",5,2,1,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.checkIndentation(Object data, Node node, int indentation, String name)",4,2,2,4,4
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.formatUnnecessaryModifiers(Set<Modifier> set)",4,2,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.toString()",4,2,0,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.dysfunctionReason()",3,2,1,4,0
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.getChildCount()",3,2,0,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.asList(Object[] array)",2,2,1,4,1
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule$Entry.getComplexityAverage()",2,2,1,4,0
"net.sourceforge.pmd.cpd.GUI.makeSettingsPanel(JButton browseButton, JButton goButton, JButton cxButton)",64,2,47,3,3
"net.sourceforge.pmd.cpd.GUI.makeMatchList()",39,2,8,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.expandBuff(boolean wrapAround)",38,2,9,3,1
"net.sourceforge.pmd.util.database.DBMSMetadataTest.testGetSourceObjectList()",35,2,29,3,0
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.evaluate(final Node node, final RuleContext data)",26,2,8,3,2
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.testReportMultipleViolations()",25,2,23,3,0
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.getDocumentNodeForRootNode(final Node node)",20,2,3,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getVariableName()",19,2,2,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getType()",19,2,1,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.extractParameters(PMDParameters arguments, String[] args, String progName)",18,2,13,3,3
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.countPlaceholders(final ASTExpression node)",18,2,4,3,1
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyAttrVolatile.InstanceVariableSetVolatile(ThreadContext context, IRubyObject self, IRubyObject name, IRubyObject value)",18,2,3,3,4
"com.concurrent_ruby.ext.SynchronizationLibrary.defineClass(Ruby runtime, RubyModule namespace, String parentName, String name, Class javaImplementation, ObjectAllocator allocator)",17,2,6,3,6
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.createNodeAdapter(T node)",17,2,5,3,1
"net.sourceforge.pmd.renderers.XMLRenderer.start()",16,2,11,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.basicEquivalence(Node node1, Node node2, String varName1, String varName2)",16,2,9,3,4
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.ignoreNode(Node node, ASTStatement loopBody, IgnoreFlags... ignoreFlags)",16,2,5,3,3
"net.sourceforge.pmd.util.database.DBMSMetadataTest.getStringFromReader(Reader reader)",16,2,5,3,1
"net.sourceforge.pmd.RuleChain.apply(List<Node> nodes, RuleContext ctx, Language language)",16,2,2,3,3
"net.sourceforge.pmd.docs.RuleSetResolverTest.resolveAllRulesets()",15,2,10,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTForInit node, Object data)",15,2,5,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyAttrVolatile.instanceVariableGetVolatile(ThreadContext context, IRubyObject self, IRubyObject name)",14,2,3,3,3
"net.sourceforge.pmd.RuleChain.add(RuleSet ruleSet, Rule rule)",13,2,3,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyAttrVolatile.fullMemoryBarrier(ThreadContext context, IRubyObject self)",13,2,2,3,2
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.loadType()",13,2,2,3,0
"net.sourceforge.pmd.renderers.CodeClimateRenderer.renderFileViolations(Iterator<RuleViolation> violations)",12,2,11,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.getCaughtExceptionsAsString(ASTCatchStatement stmt)",12,2,8,3,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.VariableNamingConventionsRule()",12,2,8,3,0
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.load()",12,2,6,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.shuffleAndApplyOperations(List<DocumentOperation> documentOperations)",12,2,3,3,1
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.GetSuffix(int len)",12,2,3,3,1
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.getRootNode(final Node node)",12,2,2,3,1
"net.sourceforge.pmd.cpd.GUI.sortOnColumn(int columnIndex)",11,2,10,3,1
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTForUpdate node, Object data)",11,2,5,3,2
"net.sourceforge.pmd.lang.java.multifile.ClassStats.addField(String name, JavaFieldSignature sig)",11,2,4,3,2
"net.sourceforge.pmd.lang.java.multifile.ClassStats.addOperation(String name, JavaOperationSignature sig)",11,2,4,3,2
"net.sourceforge.pmd.renderers.CodeClimateRenderer.getCategories()",11,2,3,3,0
"net.sourceforge.pmd.RuleChain.add(RuleSet ruleSet)",11,2,2,3,1
"net.sourceforge.pmd.cpd.GUI.populateResultArea()",10,2,8,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTBreakStatement node, Object data)",10,2,5,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTContinueStatement node, Object data)",10,2,5,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTReturnStatement node, Object data)",10,2,5,3,2
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTThrowStatement node, Object data)",10,2,5,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.analyzeToken(final GenericToken currentToken)",10,2,5,3,1
"net.sourceforge.pmd.cpd.GUI.deleteMatchlistSelections()",10,2,5,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testTrigger()",10,2,5,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTSwitchStatement node, Object data)",10,2,4,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.remove()",10,2,4,3,0
"net.sourceforge.pmd.util.FileIterable.finalize()",10,2,2,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.zip(ImmutableList<T> right)",9,2,9,3,1
"net.sourceforge.pmd.SourceCodeProcessor.usesTypeResolution(LanguageVersion languageVersion, Node rootNode, RuleSets ruleSets, Language language)",9,2,6,3,4
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.visit(ASTVariableDeclaration node, Object data)",9,2,4,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.findInsecureEndpoints(AbstractApexNode<?> node)",9,2,4,3,1
"net.sourceforge.pmd.properties.CharacterMultiProperty.valueFrom(String valueString)",9,2,4,3,1
"net.sourceforge.pmd.cpd.SourceCode$FileCodeLoader.getReader()",9,2,4,3,0
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.isAllocatedStringBuffer(ASTAdditiveExpression node)",9,2,3,3,1
"net.sourceforge.pmd.lang.java.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, JavaNode node)",9,2,2,3,4
"net.sourceforge.pmd.lang.plsql.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, PLSQLNode node)",9,2,2,3,4
"net.sourceforge.pmd.cpd.GUI.addSaveOptionsTo(JMenu menu)",9,2,2,3,1
"net.sourceforge.pmd.cpd.GUI$BrowseListener.actionPerformed(ActionEvent e)",8,2,7,3,1
"net.sourceforge.pmd.SourceCodeProcessor.usesMultifile(Node rootNode, LanguageVersionHandler languageVersionHandler, RuleSets ruleSets, Language language)",8,2,4,3,4
"net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule.isReference(String shortName, String compoundName)",8,2,4,3,2
"net.sourceforge.pmd.util.ClasspathClassLoader.fileToURL(List<File> files)",8,2,4,3,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.visit(ASTParameter node, Object data)",8,2,3,3,2
"org.sonar.plugins.scala.language.Comment.equals(Object obj)",8,2,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getEndColumn()",8,2,3,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getEndLine()",8,2,3,3,0
"net.sourceforge.pmd.lang.java.symboltable.NameFinder.toString()",8,2,3,3,0
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",8,2,2,3,3
"net.sourceforge.pmd.lang.java.ast.DumpFacade.visit(JavaNode node, Object data)",8,2,2,3,2
"net.sourceforge.pmd.lang.plsql.ast.DumpFacade.visit(PLSQLNode node, Object data)",8,2,2,3,2
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.next()",8,2,2,3,0
"net.sourceforge.pmd.renderers.CodeClimateRenderer.getRemediationPoints()",8,2,2,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.backup(int amount)",8,2,0,3,1
"net.sourceforge.pmd.SourceCodeProcessor.usesDFA(LanguageVersion languageVersion, Node rootNode, RuleSets ruleSets, Language language)",7,2,5,3,4
"net.sourceforge.pmd.util.ClasspathClassLoader.addClasspathURLs(final List<URL> urls, final String classpath)",7,2,5,3,2
"net.sourceforge.pmd.SourceCodeProcessor.determineLanguage(RuleContext ctx)",7,2,4,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.getFirstParentOfType(final Class<T> parentType)",7,2,4,3,1
"net.sourceforge.pmd.lang.jsp.rule.design.NoInlineStyleInformationRule.visit(ASTAttribute node, Object data)",7,2,3,3,2
"net.sourceforge.pmd.lang.jsp.rule.design.NoInlineStyleInformationRule.visit(ASTElement node, Object data)",7,2,3,3,2
"net.sourceforge.pmd.cpd.SourceCode.getCodeBuffer()",7,2,3,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getValueAsLong()",7,2,3,3,0
"net.sourceforge.pmd.lang.apex.rule.ApexRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",7,2,2,3,3
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestShouldNotUseSeeAllDataTrueRule.visit(ASTMethod node, Object data)",7,2,2,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(AstNode node)",7,2,2,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.toList()",7,2,2,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.GetImage()",7,2,0,3,0
"net.sourceforge.pmd.lang.java.symboltable.NameFinder.add(JavaNameOccurrence name)",6,2,5,3,1
"net.sourceforge.pmd.cpd.MatchCollector.countDuplicateTokens(TokenEntry mark1, TokenEntry mark2)",6,2,3,3,2
"net.sourceforge.pmd.cli.PMDCommandLineInterface.setStatusCodeOrExit(int status)",6,2,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclaration.getImage()",6,2,3,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.OnlyOneReturnRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.visit(ASTLocalVariableDeclaration node, Object data)",6,2,2,3,2
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$PrimitiveTypeResolver.resolve(String name)",6,2,2,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.isExitAfterRunSet()",6,2,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getArrayDimensionOnType()",6,2,2,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.buildReverse()",6,2,2,3,0
"net.sourceforge.pmd.lang.java.xpath.TypeOfFunction.nagDeprecatedFunction()",6,2,2,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.hashCode()",6,2,2,3,0
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getParameterTypes(String... parameterTypeNames)",6,2,1,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$VoidResolver.resolve(String name)",6,2,1,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getValueAsInt()",6,2,1,3,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.getScope()",6,2,1,3,0
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.sum(List<Double> values)",6,2,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTField.getValue()",5,2,5,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.tryToLog(String tag, NodeType type, Node node)",5,2,4,3,3
"net.sourceforge.pmd.cpd.MatchCollector.hasPreviousDupe(TokenEntry mark1, TokenEntry mark2)",5,2,4,3,2
"net.sourceforge.pmd.lang.apex.multifile.ApexClassStats.addOperation(String name, ApexOperationSignature sig)",5,2,4,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclaration.getType()",5,2,4,3,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.getName()",5,2,4,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.buildFormalComment(AstNode node)",5,2,3,3,1
"net.sourceforge.pmd.cpd.GUI$SaveListener.error(String message, Exception e)",5,2,2,3,2
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.compute(ASTMethodDeclaration node)",5,2,2,3,1
"net.sourceforge.pmd.ant.PMDTask.createAuxClasspath()",5,2,2,3,0
"net.sourceforge.pmd.ant.PMDTask.createClasspath()",5,2,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getValueAsDouble()",5,2,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.getValueAsFloat()",5,2,2,3,0
"net.sourceforge.pmd.ant.PMDTask.setMaxRuleViolations(int max)",5,2,0,3,1
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.addDeclarations(SortedMap<Integer,Node> map, List<? extends Node> nodes)",4,2,3,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.lastIndexOf(Object o)",4,2,3,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.ListNode(E head, AbstractImmutableList<E> tail)",4,2,2,3,2
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.compute(ASTMethodDeclaration node)",4,2,2,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.compute(ASTTypeMethod node)",4,2,2,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.getExpectedMessage(final List<ASTExpression> params, final int expectedArguments)",3,2,1,3,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.dysfunctionReason()",3,2,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.getTypeKind()",3,2,1,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.dysfunctionReason()",3,2,1,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetNumChildren()",3,2,0,3,0
"net.sourceforge.pmd.cpd.GUI$ColumnSpec.sorter()",2,2,1,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule$Entry.getComplexityAverage()",2,2,1,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.extensions()",0,2,4,3,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getXPathAttributesIterator()",43,2,8,2,0
"net.sourceforge.pmd.util.ResourceLoader.loadResourceAsStream(final String name)",37,2,8,2,1
"ParserCornerCases17.theTryWithResourcesStatement()",29,2,11,2,0
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest.testCachingMemoryConsumption()",29,2,9,2,0
"net.sourceforge.pmd.RulesetsFactoryUtils.getRuleSets(String rulesets, RuleSetFactory factory)",28,2,5,2,2
"net.sourceforge.pmd.cpd.GroovyTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",27,2,16,2,2
"net.sourceforge.pmd.lang.apex.ast.CompilerService.callAdditionalPassVisitor(ApexCompiler compiler)",27,2,7,2,1
"com.cb4.common.utils.MapUtilsTest.testEqualPropertiesCaseSensitiveName()",26,2,9,2,0
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.parseWithContinuation()",25,2,50,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodInitialConstraints()",25,2,19,2,0
"com.cb4.common.utils.MapUtilsTest.testEqualPropertiesCaseSensitiveValue()",25,2,9,2,0
"com.cb4.common.utils.MapUtilsTest.testClearAndReplace()",25,2,5,2,0
"net.sourceforge.pmd.cpd.AntlrTokenizer.tokenize(final SourceCode sourceCode, final Tokens tokenEntries)",23,2,14,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.renderBody(Writer writer, Report report)",23,2,11,2,2
"net.sourceforge.pmd.benchmark.TextTimingReportRenderer.renderCategoryMeasurements(final TimedOperationCategory category, final Map<String,TimedResult> labeledMeasurements, final Writer writer)",22,2,13,2,3
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testDemo()",21,2,19,2,0
"net.sourceforge.pmd.cpd.CPD.add(DBURI dburi)",21,2,9,2,1
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.getNextIndexFromHistogram(Map<T,Integer> histogram, T key, int startIndex)",21,2,3,2,3
"net.sourceforge.pmd.cpd.JSPTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",20,2,19,2,2
"net.sourceforge.pmd.cpd.VfTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",20,2,19,2,2
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.parseWithContinuationCppTokenManager()",20,2,11,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTCaseStatement node, Object data)",20,2,8,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTCaseWhenClause node, Object data)",20,2,8,2,2
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getGenericType(final int index)",20,2,4,2,1
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.loadClass(final ClassLoader nullableClassLoader, final String clazzName)",20,2,2,2,2
"net.sourceforge.pmd.testframework.TestDescriptor.inRegressionTestMode()",20,2,2,2,0
"com.cb4.common.utils.MapUtilsTest.testFlip()",19,2,10,2,0
"com.cb4.common.utils.MapUtilsTest.testValueExtractor()",19,2,6,2,0
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.setupResourceLoader()",19,2,6,2,0
"net.sourceforge.pmd.processor.AbstractPMDProcessor.createRuleSets(RuleSetFactory factory, Report report)",19,2,5,2,2
"net.sourceforge.pmd.util.database.DBTypeTest.setUp()",18,2,10,2,0
"com.cb4.common.utils.MapUtilsTest.testKeyExtractor()",18,2,5,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.countNodeChildren(Node node, Object data)",18,2,4,2,2
"net.sourceforge.pmd.renderers.XSLTRenderer.prepareTransformer(InputStream xslt)",18,2,3,2,1
"net.sourceforge.pmd.properties.GenericPropertyDescriptor.GenericPropertyDescriptor(String name, String description, float uiOrder, T defaultValue, Set<PropertyConstraint<? super T>> constraints, ValueParser<T> parser, boolean isDefinedExternally, Class<T> type)",18,2,1,2,8
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testMethodUsageSeen()",17,2,17,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testMethodUsageSeenWithThis()",17,2,17,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTMethodDeclaration node, Object data)",17,2,13,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTProgramUnit node, Object data)",17,2,13,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTTriggerTimingPointSection node, Object data)",17,2,13,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTTriggerUnit node, Object data)",17,2,13,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTTypeMethod node, Object data)",17,2,13,2,2
"net.sourceforge.pmd.processor.AbstractPMDProcessor.processFiles(RuleSetFactory ruleSetFactory, List<DataSource> files, RuleContext ctx, List<Renderer> renderers)",17,2,10,2,4
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testValueFrom()",17,2,10,2,0
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isA(final TypeNode n, final String clazzName)",17,2,6,2,2
"net.sourceforge.pmd.RuleSets.getRuleByName(String ruleName)",17,2,4,2,1
"net.sourceforge.pmd.util.ResourceLoader.loadClassPathResourceAsStream(final String name)",17,2,4,2,1
"net.sourceforge.pmd.util.CollectionUtil.isCollectionType(Class<?> clazzType, boolean includeInterfaces)",17,2,2,2,2
"net.sourceforge.pmd.util.CollectionUtil.isCollectionType(String typeName, boolean includeInterfaces)",17,2,2,2,2
"net.sourceforge.pmd.docs.RuleSetUtils.resolveRuleReferences(Rule rule)",17,2,1,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM()",16,2,11,2,0
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isExactlyA(final TypeNode n, final String clazzName)",16,2,6,2,2
"net.sourceforge.pmd.renderers.XSLTRenderer.end()",16,2,6,2,0
"net.sourceforge.pmd.util.CollectionUtil.toList(Iterator<T> it)",16,2,3,2,1
"net.sourceforge.pmd.properties.GenericMultiValuePropertyDescriptor.GenericMultiValuePropertyDescriptor(String name, String description, float uiOrder, Collection<V> defaultValue, Set<PropertyConstraint<? super C>> listValidators, ValueParser<V> parser, char delim, Class<V> type)",16,2,1,2,8
"net.sourceforge.pmd.cpd.internal.JavaCCTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",15,2,11,2,2
"net.sourceforge.pmd.lang.vm.ast.TokenMgrError.lexicalError(final boolean eofSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar)",15,2,3,2,6
"net.sourceforge.pmd.lang.apex.ast.ApexParser.parse(final Reader reader)",15,2,3,2,1
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.visit(ASTMethodDeclaration node, Object data)",14,2,12,2,2
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.renderPackage(PackageNode pnode)",14,2,7,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.hashCode()",14,2,7,2,0
"net.sourceforge.pmd.document.DocumentFile.getLineLengthWithLineSeparator(final Scanner scanner)",14,2,5,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.getSourceFromClass(Class<?> clazz)",14,2,5,2,1
"net.sourceforge.pmd.Report.addMetric(Metric metric)",14,2,2,2,1
"net.sourceforge.pmd.util.CollectionUtil.getCollectionTypeFor(String shortName)",14,2,2,2,1
"net.sourceforge.pmd.util.ResourceLoader.loadClassPathResourceAsStreamOrThrow(final String name)",14,2,1,2,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.buildFor(ASTMethodOrConstructorDeclaration node)",13,2,11,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldNamingConventionsRule.visit(ASTEnumConstant node, Object data)",13,2,8,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTAllocationExpression node, Object data)",13,2,7,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTEnumConstant node, Object data)",13,2,7,2,2
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityRule.visit(MethodLikeNode node, Object data)",13,2,6,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.NullAssignmentRule.isBadTernary(ASTConditionalExpression ternary)",13,2,6,2,1
"net.sourceforge.pmd.renderers.IDEAJRenderer.renderFileViolations(Iterator<RuleViolation> violations)",13,2,6,2,1
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.execute()",13,2,6,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.complexityMultipleOf(PLSQLNode node, int npathStart, Object data)",13,2,5,2,3
"net.sourceforge.pmd.util.CollectionUtil.invertedMapFrom(Map<K,V> source)",13,2,5,2,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.calculateLineNumbers(SourceCodePositioner positioner, int startOffset, int endOffset)",13,2,4,2,3
"net.sourceforge.pmd.PMDVersion.getNextMajorRelease()",13,2,3,2,0
"net.sourceforge.pmd.document.DocumentFile.writeUntilOffsetReached(final int nextOffsetToRead)",13,2,2,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.getDeclaringType(Node node)",13,2,2,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.getQualifiedTypeNames()",13,2,1,2,0
"net.sourceforge.pmd.renderers.IDEAJRenderer.renderDirectoy(Writer writer, Iterator<RuleViolation> violations)",12,2,21,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.isMainMethod(ASTAnyTypeBodyDeclaration bodyDeclaration)",12,2,14,2,1
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.visit(ASTProgramUnit node, Object data)",12,2,11,2,2
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.visit(ASTTriggerTimingPointSection node, Object data)",12,2,11,2,2
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.visit(ASTTypeMethod node, Object data)",12,2,11,2,2
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT()",12,2,11,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM()",12,2,11,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS()",12,2,11,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetReferenceWithDeprecatedRule()",12,2,10,2,0
"com.cb4.common.utils.MapUtilsTest.testGetMandatoryValue()",12,2,7,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.calculateLineNumbers(SourceCodePositioner positioner)",12,2,6,2,1
"net.sourceforge.pmd.util.IOUtil.skipBOM(Reader source)",12,2,3,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.addDeclaration(NameDeclaration declaration)",12,2,1,2,1
"net.sourceforge.pmd.RuleSets.getChecksum()",12,2,1,2,0
"net.sourceforge.pmd.testframework.RuleTestRunner.describeChild(TestDescriptor testCase)",11,2,10,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.definePropertyDescriptor(PropertyDescriptor<?> propertyDescriptor)",11,2,7,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.getScope()",11,2,7,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NcssObjectCountRule.visit(OracleObject node, Object data)",11,2,6,2,2
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.hashCode()",11,2,6,2,0
"net.sourceforge.pmd.dcd.graph.UsageGraph.defineClass(String className)",11,2,4,2,1
"net.sourceforge.pmd.lang.java.metrics.SigMaskTest.testEmptyFieldMask()",11,2,4,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.AbstractNcssCountRule(Class<?> nodeClass)",11,2,3,2,1
"net.sourceforge.pmd.util.ClassUtil.asShortestName(Class<?> type)",11,2,2,2,1
"net.sourceforge.pmd.RuleSets.getAllRules()",11,2,2,2,0
"net.sourceforge.pmd.RuleSets.ruleCount()",11,2,2,2,0
"net.sourceforge.pmd.Report.addConfigError(ConfigurationError error)",11,2,1,2,1
"net.sourceforge.pmd.Report.addError(ProcessingError error)",11,2,1,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.expectedSigma(double sigma)",11,2,1,2,1
"net.sourceforge.pmd.renderers.IDEAJRenderer.renderFile(Writer writer, Iterator<RuleViolation> violations)",10,2,17,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.visitPosition(Node node, int count)",10,2,11,2,2
"com.cb4.common.utils.MapUtilsTest.testSubMapWithEmptyMaps()",10,2,10,2,0
"net.sourceforge.pmd.renderers.CSVWriter.writeTitles(Writer writer)",10,2,9,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testMultipleRules()",10,2,9,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM()",10,2,7,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST()",10,2,7,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS()",10,2,7,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.booleanPropertyFor(String id, String label)",10,2,6,2,2
"net.sourceforge.pmd.renderers.HTMLRenderer.end()",10,2,6,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.getProperty(PropertyDescriptor<T> propertyDescriptor)",10,2,4,2,1
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.merge_pair(final ThreadContext context, final IRubyObject key, final IRubyObject value, final Block block)",10,2,3,2,4
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.compare_and_set(ThreadContext context, IRubyObject expectedValue, IRubyObject newValue)",10,2,3,2,3
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.compute(final ThreadContext context, final IRubyObject key, final Block block)",10,2,3,2,3
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.compute_if_present(final ThreadContext context, final IRubyObject key, final Block block)",10,2,3,2,3
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomTopScore(double target)",10,2,3,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.definePropertyDescriptor(PropertyDescriptor<?> propertyDescriptor)",10,2,2,2,1
"net.sourceforge.pmd.util.ClassUtil.withoutPackageName(String fullTypeName)",10,2,2,2,1
"ParserCornerCases17.catchingMultipleExceptionTypes()",10,2,2,2,0
"com.cb4.common.utils.MapUtilsTest.testPutUniqueValuesWithDuplicates()",9,2,10,2,0
"net.sourceforge.pmd.util.designer.DFAPanel.resetTo(List<DFAGraphMethod> newNodes, LineGetter lines)",9,2,7,2,2
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS()",9,2,7,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT()",9,2,7,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM()",9,2,7,2,0
"net.sourceforge.pmd.docs.RuleSetUtils.getRuleSetClasspath(RuleSet ruleset)",9,2,6,2,1
"net.sourceforge.pmd.docs.SidebarGenerator.writeSidebar(Map<String,Object> sidebar)",9,2,6,2,1
"net.sourceforge.pmd.document.DocumentFile.close()",9,2,5,2,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.isVarargs()",9,2,5,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getComponentType()",9,2,5,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.RuleSetFilter(String refPattern, String replacement, String logMessage)",9,2,4,2,3
"net.sourceforge.pmd.ant.internal.PMDTaskImpl.setupClassLoader()",9,2,4,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTLocalVariableDeclaration node, Object data)",9,2,3,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.getNameImage(ASTPrimaryExpression node)",9,2,3,2,1
"net.sourceforge.pmd.lang.metrics.BasicProjectMemoizer.getClassMemoizer(QualifiedName qname)",9,2,3,2,1
"net.sourceforge.pmd.lang.metrics.BasicProjectMemoizer.getOperationMemoizer(QualifiedName qname)",9,2,3,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.checkValidPropertyDescriptor(PropertyDescriptor<?> propertyDescriptor)",9,2,3,2,1
"net.sourceforge.pmd.document.DocumentFile.mapLinesToOffsets()",9,2,3,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getTypeNameNode()",9,2,3,2,0
"net.sourceforge.pmd.lang.apex.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, ApexNode<?> node)",9,2,2,2,4
"net.sourceforge.pmd.lang.ecmascript.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, EcmascriptNode<?> node)",9,2,2,2,4
"net.sourceforge.pmd.lang.jsp.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, JspNode node)",9,2,2,2,4
"net.sourceforge.pmd.lang.vf.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, VfNode node)",9,2,2,2,4
"net.sourceforge.pmd.lang.xml.ast.DumpFacade.initializeWith(Writer writer, String prefix, boolean recurse, XmlNode node)",9,2,2,2,4
"net.sourceforge.pmd.renderers.CSVRenderer.CSVRenderer(ColumnDescriptor<RuleViolation>[] columns, String theSeparator, String theCR)",9,2,2,2,3
"net.sourceforge.pmd.processor.AbstractPMDProcessor.renderReports(final List<Renderer> renderers, final Report report)",9,2,2,2,2
"org.sonar.plugins.scala.util.StringUtils.convertStringToListOfLines(String string)",9,2,2,2,1
"net.sourceforge.pmd.properties.MethodPropertyTest.testAsStringOn()",9,2,2,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTExpression node, Object data)",9,2,1,2,2
"net.sourceforge.pmd.RuleSets.removeDysfunctionalRules(Collection<Rule> collector)",9,2,1,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.asString(V value)",9,2,1,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.valueErrorFor(V value)",9,2,1,2,1
"net.sourceforge.pmd.util.viewer.gui.MainFrame.setStatus(String string)",9,2,1,2,1
"net.sourceforge.pmd.cpd.ApexTokenizerTest.testTokenize()",8,2,10,2,0
"net.sourceforge.pmd.cpd.ApexTokenizerTest.testTokenizeCaseSensitive()",8,2,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.findVariableHere(JavaNameOccurrence occ)",8,2,9,2,1
"net.sourceforge.pmd.lang.apex.rule.design.TooManyFieldsRule.bumpCounterFor(ASTUserClass clazz)",8,2,6,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.TooManyFieldsRule.bumpCounterFor(PLSQLNode clazz)",8,2,6,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTDoStatement node, Object data)",8,2,5,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTIfStatement node, Object data)",8,2,5,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.defaultProp(String name, String displayName)",8,2,5,2,2
"net.sourceforge.pmd.testframework.RuleTestRunner.runChild(TestDescriptor testCase, RunNotifier notifier)",8,2,5,2,2
"net.sourceforge.pmd.lang.java.ParserTstUtil.dumpNodes(List<E> list)",8,2,5,2,1
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.dumpNodes(List<E> list)",8,2,5,2,1
"net.sourceforge.pmd.lang.symboltable.AbstractScope.addDeclaration(NameDeclaration declaration)",8,2,5,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTIfStatement node, Object data)",8,2,4,2,2
"net.sourceforge.pmd.properties.AbstractPropertySource.setProperty(PropertyDescriptor<T> propertyDescriptor, T value)",8,2,4,2,2
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitClassType(String name)",8,2,4,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.imagesOf(List<? extends Node> nodes)",8,2,4,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM()",8,2,4,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS()",8,2,4,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT()",8,2,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.visitMethod(int access, String name, String desc, String sig, String[] exceptions)",8,2,3,2,5
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitParameterType()",8,2,3,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitReturnType()",8,2,3,2,0
"net.sourceforge.pmd.lang.jsp.ast.DumpFacade.visit(JspNode node, Object data)",8,2,2,2,2
"net.sourceforge.pmd.lang.vf.ast.DumpFacade.visit(VfNode node, Object data)",8,2,2,2,2
"net.sourceforge.pmd.lang.symboltable.AbstractScope.getDeclarations(Class<T> clazz)",8,2,2,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getFirstChild()",8,2,2,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.dysfunctionReason()",8,2,2,2,0
"net.sourceforge.pmd.util.CompoundIterator.next()",8,2,2,2,0
"net.sourceforge.pmd.util.CompoundIterator.remove()",8,2,2,2,0
"net.sourceforge.pmd.lang.rule.XPathRule.apply(List<? extends Node> nodes, RuleContext ctx)",8,2,1,2,2
"net.sourceforge.pmd.RuleSets.RuleSets(final RuleSets ruleSets)",8,2,1,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.next()",8,2,1,2,0
"net.sourceforge.pmd.cpd.TokenEntry.setImage(String image)",7,2,7,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTFieldDeclaration decl, final Object data)",7,2,6,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTMethodDeclaration decl, final Object data)",7,2,6,2,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.subclasses(TypeNode n, Class<?> clazz)",7,2,6,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NcssObjectCountRule.getViolationParameters(DataPoint point)",7,2,6,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTConditionalExpression node, Object data)",7,2,5,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTWhileStatement node, Object data)",7,2,5,2,2
"net.sourceforge.pmd.util.IOUtil.createWriter(String reportFile)",7,2,5,2,1
"net.sourceforge.pmd.cpd.CPD.addDirectory(File dir, boolean recurse)",7,2,4,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitTypeInsn(int opcode, String desc)",7,2,4,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.isMethodCall(ASTPrimaryExpression node)",7,2,4,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.visit(int version, int access, String name, String sig, String superName, String[] interfaces)",7,2,3,2,6
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.rubyFixnumToLong(IRubyObject value)",7,2,3,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.hasRealText(String line)",7,2,3,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.equals(Object o)",7,2,3,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.NameFinder.toString()",7,2,3,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.setExclusionPattern(String oldName, String newName)",7,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestClassShouldHaveAssertsRule.visit(ASTMethod node, Object data)",7,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.ApexUnitTestMethodShouldHaveIsTestAnnotationRule.visit(final ASTMethod node, final Object data)",7,2,2,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.visit(ASTBreakStatement node, Object data)",7,2,2,2,2
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.applyTopScore(SortedSet<DataPoint> points, int topScore)",7,2,2,2,2
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitTypeArgument(char wildcard)",7,2,2,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.niceDoubleString(double val)",7,2,2,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createMultipleBadValues(int count)",7,2,2,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createMultipleValues(int count)",7,2,2,2,1
"net.sourceforge.pmd.Report.configErrors()",7,2,2,2,0
"net.sourceforge.pmd.Report.errors()",7,2,2,2,0
"net.sourceforge.pmd.lang.symboltable.AbstractScope.getDeclarations()",7,2,2,2,0
"net.sourceforge.pmd.RuleSets.end(RuleContext ctx)",7,2,1,2,1
"net.sourceforge.pmd.RuleSets.start(RuleContext ctx)",7,2,1,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitArrayType()",7,2,1,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.getClassName()",7,2,1,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.csvWriter()",7,2,1,2,0
"net.sourceforge.pmd.cpd.TokenEntry.equals(Object o)",7,2,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getJavaType(int index)",7,2,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.addRuleChainVisit(Class<? extends Node> nodeClass)",6,2,6,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.Search.execute()",6,2,6,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.assertChildTypeArgsEqualTo(Node node, int childIndex, Class<?>... classes)",6,2,5,2,3
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.visit(final ASTConstructorDeclaration decl, Object data)",6,2,5,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.getViolationParameters(DataPoint point)",6,2,5,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.NameFinder.add(PLSQLNameOccurrence name)",6,2,5,2,1
"net.sourceforge.pmd.lang.java.symboltable.Search.execute()",6,2,5,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.getVarargComponentType()",6,2,5,2,0
"net.sourceforge.pmd.dcd.graph.UsageGraph.usageField(String className, String name, String desc, MemberNode usingMemberNode)",6,2,4,2,4
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.each_pair(ThreadContext context, Block block)",6,2,4,2,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.loadClassWithNodeClassloader(final TypeNode n, final String clazzName)",6,2,4,2,2
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isFirstDoStatement(DataFlowNode inode)",6,2,4,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.Search.execute(Scope startingScope)",6,2,4,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.buildValueLabels()",6,2,4,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testExpectedMinimum()",6,2,4,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTStatementExpression node, Object data)",6,2,3,2,2
"net.sourceforge.pmd.cpd.CPD.add(SourceCode sourceCode)",6,2,3,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getLastChild(Node contextNode)",6,2,3,2,1
"net.sourceforge.pmd.lang.java.symboltable.Search.execute(Scope startingScope)",6,2,3,2,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.getArgTypeIncludingVararg(int index)",6,2,3,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.findAllVersions()",6,2,3,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.hashCode()",6,2,3,2,0
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlDeleteStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlInsertStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlMergeStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlUndeleteStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlUpdateStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.visit(ASTDmlUpsertStatement node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule.visit(ASTMethod node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidFieldNameMatchingMethodNameRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.lang.java.rule.performance.AbstractOptimizationRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.convertList(List<Node> nodes, Class<T> target)",6,2,2,2,2
"net.sourceforge.pmd.RuleSetFactoryCompatibility.applyAllFilters(String ruleset)",6,2,2,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitFormalTypeParameter(String name)",6,2,2,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitInnerClassType(String name)",6,2,2,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitTypeVariable(String name)",6,2,2,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getFirstChild(Node contextNode)",6,2,2,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitEnd()",6,2,2,2,0
"net.sourceforge.pmd.document.DocumentFile.writeUntilEOF()",6,2,2,2,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.getArrayDepth()",6,2,2,2,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.isArray()",6,2,2,2,0
"net.sourceforge.pmd.dcd.graph.UsageGraph.accept(NodeVisitor visitor, Object data)",6,2,1,2,2
"net.sourceforge.pmd.cpd.LanguageFactory.languageAliases(String language)",6,2,1,2,1
"net.sourceforge.pmd.dcd.graph.ClassNode.equals(Object obj)",6,2,1,2,1
"net.sourceforge.pmd.rules.RuleBuilder.className(String className)",6,2,1,2,1
"net.sourceforge.pmd.cpd.Mark.hashCode()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.getFieldType()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.getMethodReturnType()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitClassBound()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitExceptionType()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitInterface()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitInterfaceBound()",6,2,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitSuperclass()",6,2,1,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.getScope()",6,2,1,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.dysfunctionReason()",6,2,1,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.dysfunctionReason()",6,2,1,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getName()",6,2,1,2,0
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.newCHM(int initialCapacity, float loadFactor)",6,2,0,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.getIntRange(final int exclusiveLimit)",6,2,0,2,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.makeViolations(RuleContext ctx, Set<DataPoint> p)",5,2,4,2,2
"net.sourceforge.pmd.renderers.CSVWriter.quote(StringBuilder buffer, String s)",5,2,3,2,2
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.childrenAccept(ReportVisitor visitor)",5,2,3,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.getFirstChildOrThis(Node node)",5,2,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.addTypes(String desc)",5,2,2,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.addRuleChainVisit(String astNodeName)",5,2,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDAnnotationVisitor.visit(String name, Object value)",5,2,1,2,2
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.visitTypeArgument()",5,2,1,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.setDeprecated(boolean deprecated)",5,2,0,2,1
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.ofOuterClass(ASTUserClassOrInterface astUserClass)",4,2,6,2,1
"net.sourceforge.pmd.cpd.ApexTokenizerTest.printTokens(Tokens tokens)",4,2,4,2,1
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.printTokens(Tokens tokens)",4,2,4,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.toString()",4,2,4,2,0
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.get_and_set(IRubyObject key, IRubyObject value)",4,2,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.op_aref(ThreadContext context, IRubyObject key)",4,2,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.put_if_absent(IRubyObject key, IRubyObject value)",4,2,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.replace_if_exists(IRubyObject key, IRubyObject value)",4,2,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.delete(IRubyObject key)",4,2,3,2,1
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.key(IRubyObject value)",4,2,3,2,1
"net.sourceforge.pmd.renderers.IDEAJRenderer$SourcePath.SourcePath(String sourcePathString)",4,2,3,2,1
"net.sourceforge.pmd.util.viewer.model.ViewerModel.fireViewerModelEvent(ViewerModelEvent e)",4,2,3,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.propertyErrorFor(Rule rule)",4,2,2,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtGetParent()",4,2,2,2,0
"net.sourceforge.pmd.cpd.CPD.add(List<File> files)",4,2,1,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.extractSignature(String sig)",4,2,1,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.checkDefaults(List<E> defaults)",4,2,1,2,1
"net.sourceforge.pmd.rules.RuleBuilder.since(String sinceStr)",4,2,1,2,1
"net.sourceforge.pmd.util.IOUtil.tryCloseClassLoader(ClassLoader classLoader)",4,2,1,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.fireTreeModelEvent(TreeModelEvent e)",4,2,1,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenPropertyDescriptors()",4,2,1,2,0
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.has_key_p(IRubyObject key)",3,2,5,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.withRules(final TestDescriptor testCase, Statement statement)",3,2,4,2,2
"net.sourceforge.pmd.Report.keyFor(RuleViolation rv)",3,2,4,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getElementType()",3,2,4,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(JavaNode localNode, Object data)",3,2,3,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.kindDisplayName(ASTAnyTypeDeclaration node, PropertyDescriptor<Pattern> descriptor)",3,2,3,2,2
"net.sourceforge.pmd.testframework.RuleTestRunner.withAfters(Statement statement)",3,2,3,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.withBefores(Statement statement)",3,2,3,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtGetNumChildren()",3,2,3,2,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.code(Visibility visibility, Role role, boolean isAbstract)",3,2,2,2,3
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.asOperationNode(Node anyNode)",3,2,2,2,1
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.asTypeNode(Node anyNode)",3,2,2,2,1
"net.sourceforge.pmd.lang.rule.XPathRule.dysfunctionReason()",3,2,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getImage()",3,2,1,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenPropertiesByPropertyDescriptor()",3,2,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getElementTypeRec(Class<?> arrayType)",2,2,3,2,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.get(ASTMethodOrConstructorDeclaration node)",2,2,1,2,1
"net.sourceforge.pmd.lang.rule.XPathRule.initRuleQueryBasedOnVersion(final String version)",2,2,1,2,1
"net.sourceforge.pmd.dcd.graph.ClassNode.getConstructorNodes()",2,2,1,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.getFieldNodes()",2,2,1,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.getMethodNodes()",2,2,1,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.getUsers()",2,2,1,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.getUses()",2,2,1,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule$Entry.getComplexityAverage()",2,2,1,2,0
"net.sourceforge.pmd.RuleViolationComparatorTest.testComparator()",44,2,19,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptionsTest.testEqualsHashcode()",39,2,19,1,0
"ParserCornerCases18.lambdas()",38,2,33,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptionsTest.testEqualsHashcode()",32,2,14,1,0
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.testBothClassesOperationsAreThere()",27,2,13,1,0
"net.sourceforge.pmd.util.viewer.gui.SourceCodePanel.viewerModelChanged(ViewerModelEvent e)",27,2,3,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinderTest.testJava8LambdaScoping()",26,2,28,1,0
"net.sourceforge.pmd.cpd.JSPTokenizerTest.scriptletWithString()",26,2,15,1,0
"SuperTest.iterator()",25,2,1,1,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.isAbstractOperationTest()",23,2,13,1,0
"net.sourceforge.pmd.PMDConfiguration.getLanguageVersionOfFile(String fileName)",23,2,3,1,1
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testLamdaParameterTypeImage()",22,2,23,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedTagsWithELWithin()",22,2,15,1,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.isFinalFieldTest()",22,2,13,1,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.isStaticFieldTest()",22,2,13,1,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.operationRoleTest()",22,2,13,1,0
"net.sourceforge.pmd.properties.AbstractNumericProperty.AbstractNumericProperty(String theName, String theDescription, T lower, T upper, T theDefault, float theUIOrder, boolean isDefinedExternally)",22,2,1,1,7
"net.sourceforge.pmd.docs.SidebarGeneratorTest.testSidebar()",21,2,24,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testXPathMultiProperty()",21,2,14,1,0
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.testBothClassesFieldsAreThere()",21,2,9,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.isExplicitDefaultConstructor(Node node)",21,2,8,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.createSourceFileScope(ASTCompilationUnit node)",21,2,7,1,1
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.equals(Object o)",21,2,3,1,1
"net.sourceforge.pmd.properties.AbstractMultiNumericProperty.AbstractMultiNumericProperty(String theName, String theDescription, T lower, T upper, List<T> theDefault, float theUIOrder, boolean isDefinedExternally)",21,2,1,1,7
"net.sourceforge.pmd.cpd.ApexCpdTest.testIssue427()",20,2,15,1,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.createClassScope(JavaNode node)",20,2,6,1,1
"net.sourceforge.pmd.properties.PropertyBuilder.desc(String desc)",20,2,1,1,1
"net.sourceforge.pmd.properties.PropertyBuilder.defaultValue(T val)",20,2,0,1,1
"net.sourceforge.pmd.renderers.SummaryHTMLRenderer.renderSummary()",19,2,15,1,0
"net.sourceforge.pmd.benchmark.TimeTracker.stopGlobalTracking()",19,2,6,1,0
"net.sourceforge.pmd.properties.ValueParserConstants.parsePrimitives(String toParse, char delimiter, ValueParser<U> extractor)",19,2,3,1,3
"net.sourceforge.pmd.lang.metrics.ParameterizedMetricKey.getInstance(MetricKey<N> key, MetricOptions options)",19,2,3,1,2
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.getVariableName()",19,2,2,1,0
"net.sourceforge.pmd.lang.vm.ast.ASTReference.setLiteral(final String literal)",19,2,0,1,1
"net.sourceforge.pmd.cpd.CPDTest.testFileOrderRelevance()",18,2,14,1,0
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.countNodeChildren(Node node, Object data)",18,2,4,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.countNodeChildren(Node node, Object data)",18,2,4,1,2
"net.sourceforge.pmd.lang.metrics.MetricOptions.ofOptions(MetricOption option, MetricOption... options)",18,2,3,1,2
"net.sourceforge.pmd.properties.AbstractProperty.AbstractProperty(String theName, String theDescription, float theUIOrder, boolean isDefinedExternally)",18,2,2,1,4
"net.sourceforge.pmd.renderers.TextPadRenderer.renderFileViolations(Iterator<RuleViolation> violations)",17,2,19,1,1
"net.sourceforge.pmd.RuleSetTest.testAddRuleSetByReferenceAllRule()",17,2,19,1,0
"net.sourceforge.pmd.RuleSetTest.testAddRuleSetByReferenceSingleRule()",17,2,19,1,0
"net.sourceforge.pmd.ant.AbstractAntTestHelper.setUp()",17,2,14,1,0
"net.sourceforge.pmd.lang.java.rule.design.DataClassRule.visit(ASTAnyTypeDeclaration node, Object data)",17,2,10,1,2
"net.sourceforge.pmd.AbstractLanguageVersionTest.testFindVersionsForLanguageNameAndVersion()",17,2,7,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testArrayMethod()",17,2,7,1,0
"net.sourceforge.pmd.lang.plsql.rule.PLSQLRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",17,2,5,1,2
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.testFieldsAreThere()",17,2,5,1,0
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getDefaultLanguageVersionForFile(String fileName)",17,2,4,1,1
"net.sourceforge.pmd.cpd.CPDFilelistTest.testFilelist()",16,2,12,1,0
"net.sourceforge.pmd.cpd.CPDFilelistTest.testFilelistMultipleLines()",16,2,12,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrCrLf()",16,2,10,1,0
"net.sourceforge.pmd.util.TypeMap.asInverseWithShortName()",16,2,8,1,0
"net.sourceforge.pmd.PMDConfiguration.createRenderer(boolean withReportWriter)",16,2,4,1,1
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrEmpty()",15,2,10,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithJspEL()",15,2,10,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.noQuoteAttrEmpty()",15,2,10,1,0
"net.sourceforge.pmd.lang.jsp.rule.JspRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",15,2,3,1,2
"net.sourceforge.pmd.lang.vm.rule.VmRuleChainVisitor.indexNodes(final List<Node> nodes, final RuleContext ctx)",15,2,3,1,2
"net.sourceforge.pmd.stat.DataPoint.compareTo(DataPoint rhs)",15,2,3,1,1
"net.sourceforge.pmd.it.PMDExecutor.runPMDRules(Path tempDir, String sourceDirectory, String ruleset)",15,2,2,1,3
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTLocalVariableDeclaration node, Object data)",15,2,2,1,2
"net.sourceforge.pmd.lang.java.rule.JavaRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",15,2,1,1,2
"net.sourceforge.pmd.lang.java.xpath.TypeIsExactlyFunction.typeIsExactly(final Node n, final String fullTypeName)",15,2,1,1,2
"net.sourceforge.pmd.lang.java.xpath.TypeIsFunction.typeIs(final Node n, final String fullTypeName)",15,2,1,1,2
"net.sourceforge.pmd.properties.ValueParserConstants.enumerationParser(final Map<String,T> mappings)",15,2,1,1,1
"net.sourceforge.pmd.lang.vm.ast.ASTReference.literal()",15,2,1,1,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNode.equalsNode(AbstractReportNode arg0)",14,2,21,1,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.parseAndTypeResolveForClass(Class<?> clazz, String version)",14,2,18,1,2
"net.sourceforge.pmd.cpd.CPDConfigurationTest.testCPDRenderers()",14,2,12,1,0
"net.sourceforge.pmd.cpd.CPDConfigurationTest.testRenderers()",14,2,12,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.render(Iterator<Match> matches, Writer writer)",14,2,11,1,2
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseLambdaName()",14,2,10,1,0
"net.sourceforge.pmd.lang.java.metrics.ProjectMemoizerTest.forceMemoizationTest()",14,2,10,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testConstructor()",14,2,8,1,0
"net.sourceforge.pmd.junit.JavaUtilLoggingRule.JavaUtilLoggingRule(String loggerName)",14,2,5,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSignature.of(ASTMethod node)",14,2,5,1,1
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.setDefaultLanguageVersion(LanguageVersion languageVersion)",14,2,4,1,1
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.analyzeLineOffsets(String sourceCode)",14,2,3,1,1
"net.sourceforge.pmd.lang.xml.ast.XmlParser.wrapDomNode(Node domNode)",14,2,2,1,1
"net.sourceforge.pmd.properties.StringPropertyTest.newString()",14,2,2,1,0
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.nextDouble(double least, double bound)",14,2,1,1,2
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.nextInt(int least, int bound)",14,2,1,1,2
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.nextLong(long least, long bound)",14,2,1,1,2
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.iterateAxis(byte axisNumber, NodeTest nodeTest)",14,2,1,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilder.desc(String desc)",14,2,1,1,1
"net.sourceforge.pmd.renderers.TextRenderer.renderFileViolations(Iterator<RuleViolation> violations)",13,2,16,1,1
"net.sourceforge.pmd.lang.java.bugs.InterfaceMethodTest.parseAndTypeResolveForClass(Class<?> clazz)",13,2,15,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testEnumMethodMember()",13,2,14,1,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.buildFor(ASTFieldDeclaration node)",13,2,10,1,1
"net.sourceforge.pmd.lang.java.symboltable.STBBaseTst.parseForClass(final Class<?> clazz)",13,2,8,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testConstructorWithParams()",13,2,8,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testMethod()",13,2,8,1,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssCountImportsDecorator.visit(ASTClassOrInterfaceDeclaration node, Object data)",13,2,7,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTAssertStatement node, Object data)",13,2,6,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.parse(String snippet, boolean skipBlocks, String skipPattern, Tokens tokens)",13,2,5,1,4
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.getClassDecl(String[] access)",13,2,5,1,1
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.getMethodDecl(String[] access)",13,2,5,1,1
"net.sourceforge.pmd.it.ExecutionResult.assertExecutionResult(int expectedExitCode, String expectedOutput)",13,2,4,1,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.getArgumentCount()",13,2,4,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.getArgumentCount()",13,2,4,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.getObjectName()",13,2,3,1,0
"net.sourceforge.pmd.benchmark.TimeTracker.startOperation(final TimedOperationCategory category, final String label)",13,2,2,1,2
"net.sourceforge.pmd.it.CpdExecutor.runCpd(Path tempDir, String... arguments)",13,2,2,1,2
"net.sourceforge.pmd.it.PMDExecutor.runPMD(Path tempDir, String... arguments)",13,2,2,1,2
"net.sourceforge.pmd.PMDConfiguration.setClassLoader(ClassLoader classLoader)",13,2,2,1,1
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getDefaultLanguageVersion(Language language)",13,2,2,1,1
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.nextDouble(double n)",13,2,1,1,1
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.lineNumberFromOffset(int offset)",13,2,1,1,1
"net.sourceforge.pmd.lang.vm.directive.RuntimeMacro.RuntimeMacro(String macroName)",13,2,1,1,1
"net.sourceforge.pmd.properties.builders.SinglePackagedPropertyBuilder.legalPackageNames(Collection<String> packs)",13,2,1,1,1
"net.sourceforge.pmd.properties.builders.SinglePackagedPropertyBuilder.legalPackageNames(String... packs)",13,2,1,1,1
"net.sourceforge.pmd.renderers.EmacsRenderer.renderFileViolations(Iterator<RuleViolation> violations)",12,2,16,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testEnum()",12,2,10,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testNestedEnum()",12,2,10,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testPackage()",12,2,10,1,0
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest.forceMemoizationTest()",12,2,9,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.toString()",12,2,9,1,0
"net.sourceforge.pmd.util.log.ConsoleLogHandler.publish(LogRecord logRecord)",12,2,7,1,1
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTEnumDeclaration node, Object data)",12,2,5,1,2
"net.sourceforge.pmd.cli.PMDParameters$PropertyConverter.convert(String value)",12,2,4,1,1
"net.sourceforge.pmd.lang.apex.ast.ApexLexerTest.testLexer()",12,2,4,1,0
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.isAnonymousClass()",12,2,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.getCaughtExceptionTypes()",12,2,3,1,0
"net.sourceforge.pmd.util.DateTimeUtilTest.testConversions()",12,2,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.getGuardExpressionNode()",12,2,2,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclaration.getMethodName()",12,2,2,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.getMethodName()",12,2,2,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeMethod.getMethodName()",12,2,2,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.DuplicateImportsTest.assertTrue(String message, boolean condition)",12,2,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.ExcessivePublicCountRule.getTallyOnAccessType(AccessNode node)",12,2,1,1,1
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.addDeclaration(NameDeclaration declaration)",12,2,1,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.toString()",12,2,1,1,0
"net.sourceforge.pmd.PMDConfiguration.setAnalysisCache(final AnalysisCache cache)",12,2,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.getEntityResolver()",12,2,0,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testEmptyPackage()",11,2,12,1,0
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveLengthRule.visit(AbstractApexNodeBase node, Object data)",11,2,9,1,2
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveLengthRule.visit(JavaNode node, Object data)",11,2,9,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTForStatement node, Object data)",11,2,5,1,2
"net.sourceforge.pmd.cli.BaseCLITest.setUp()",11,2,5,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement.handleSourceCode(final String source)",11,2,4,1,1
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.getImportedSimpleName()",11,2,3,1,0
"net.sourceforge.pmd.lang.apex.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTIfBlockStatement node, Object data)",11,2,2,1,2
"net.sourceforge.pmd.PMDConfiguration.setDefaultLanguageVersions(List<LanguageVersion> languageVersions)",11,2,1,1,1
"net.sourceforge.pmd.cpd.XMLRenderer.addFilesToDuplicationElement(Document doc, Element duplication, Match match)",10,2,10,1,3
"net.sourceforge.pmd.jaxen.RegexpAcceptanceTest.testSimple()",10,2,6,1,0
"net.sourceforge.pmd.lang.java.xpath.TypeIsExactlyFunction.call(final Context context, final List args)",10,2,5,1,2
"net.sourceforge.pmd.lang.java.xpath.TypeIsFunction.call(final Context context, final List args)",10,2,5,1,2
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.NumericPropertyModule(T lowerLimit, T upperLimit)",10,2,4,1,2
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.setupCacheWithFiles(final File cacheFile, final RuleSets ruleSets, final ClassLoader classLoader, final File... files)",10,2,3,1,4
"net.sourceforge.pmd.lang.java.AbstractJavaParser.createJavaParser(Reader source)",10,2,3,1,1
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTIfStatement node, Object data)",10,2,2,1,2
"net.sourceforge.pmd.PMDConfiguration.setAnalysisCacheLocation(final String cacheLocation)",10,2,1,1,1
"net.sourceforge.pmd.util.TypeMap.add(Class<?>... types)",10,2,1,1,1
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.setSeed(long seed)",10,2,0,1,1
"net.sourceforge.pmd.lang.cpp.CppCharStreamTest.assertStream(CppCharStream stream, String token)",9,2,12,1,2
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.creationTest()",9,2,12,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.checkMatches(T node, PropertyDescriptor<Pattern> regex, Object data)",9,2,8,1,3
"ParserCornerCases18$X.lambaWithIf()",9,2,6,1,0
"ParserCornerCases18$X.lambaWithIf2()",9,2,6,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.LocalVariableNamingConventionsRule.visit(ASTVariableDeclaration node, Object data)",9,2,5,1,2
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getType()",9,2,4,1,0
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidLogicInTriggerRule.visit(ASTUserTrigger node, Object data)",9,2,3,1,2
"net.sourceforge.pmd.lang.java.javadoc.JavadocTag.JavadocTag(String theLabel, String theDescription)",9,2,2,1,2
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule.visit(ASTStatement statement, Object data)",9,2,2,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTStatementExpression node, Object data)",9,2,1,1,2
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.asString(T value)",9,2,1,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.valueErrorFor(T value)",9,2,1,1,1
"net.sourceforge.pmd.testframework.PMDTestRunner.PMDTestRunner(final Class<? extends SimpleAggregatorTst> klass)",9,2,1,1,1
"net.sourceforge.pmd.benchmark.TimeTracker.initThread()",9,2,1,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.hashCode()",9,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk7PrivateMethodInnerClassInterface1()",8,2,7,1,0
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.serializedTypeIdOn(Class<?> type, StringBuilder sb)",8,2,6,1,2
"net.sourceforge.pmd.testframework.PMDTestRunner.getDescription()",8,2,6,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.addCodeSnippet(Document doc, Element duplication, Match match)",8,2,5,1,3
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidCatchingThrowableRule.visit(ASTCatchStatement node, Object data)",8,2,5,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTIfStatement node, Object data)",8,2,4,1,2
"net.sourceforge.pmd.lang.java.rule.design.NPathComplexityRule.getReportLevel()",8,2,4,1,0
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.visit(ASTUserClass node, Object data)",8,2,3,1,2
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.visit(ASTUserInterface node, Object data)",8,2,3,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",8,2,3,1,2
"net.sourceforge.pmd.cache.CachedRuleMapper.initialize(final RuleSets rs)",8,2,3,1,1
"net.sourceforge.pmd.cpd.Match.getMark(int index)",8,2,3,1,1
"net.sourceforge.pmd.lang.LanguageVersion.getName()",8,2,3,1,0
"net.sourceforge.pmd.lang.LanguageVersion.getShortName()",8,2,3,1,0
"net.sourceforge.pmd.lang.LanguageVersion.getTerseName()",8,2,3,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeAxisIterator.advance()",8,2,3,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getArrayDepth()",8,2,3,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isArray()",8,2,3,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getType()",8,2,3,1,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",8,2,2,1,3
"net.sourceforge.pmd.lang.jsp.rule.JspRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",8,2,2,1,3
"net.sourceforge.pmd.lang.vf.rule.VfRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",8,2,2,1,3
"net.sourceforge.pmd.lang.vm.rule.VmRuleChainVisitor.visit(final Rule rule, final Node node, final RuleContext ctx)",8,2,2,1,3
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTLocalVariableDeclaration node, Object data)",8,2,2,1,2
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule.visit(ASTSwitchLabel switchLabel, Object data)",8,2,2,1,2
"net.sourceforge.pmd.lang.vm.rule.design.AvoidDeeplyNestedIfStmtsRule.handleIf(AbstractVmNode node, Object data)",8,2,2,1,2
"net.sourceforge.pmd.internal.util.IteratorUtil.count(Iterator<?> it)",8,2,2,1,1
"net.sourceforge.pmd.processor.MonoThreadProcessor.collectReports(List<Renderer> renderers)",8,2,2,1,1
"net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler.actionPerformed(ActionEvent e)",8,2,2,1,1
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationImpl.close(int extraDataCounter)",8,2,1,1,1
"net.sourceforge.pmd.RuleSetWriterTest.cleanupStream()",8,2,1,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.JavaTypeDefinitionUpper(TypeDefinitionType defType, JavaTypeDefinition... typeList)",8,2,0,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression.getFullMethodName()",7,2,10,1,0
"net.sourceforge.pmd.lang.java.metrics.ParameterizedMetricKeyTest.testToString()",7,2,10,1,0
"net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu.init()",7,2,9,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.AbstractNamingConventionsRule.checkMatches(PropertyDescriptor<Pattern> propertyDescriptor, ApexNode<?> node, Object data)",7,2,8,1,3
"net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu.init()",7,2,6,1,0
"net.sourceforge.pmd.cpd.Match.compareTo(Match other)",7,2,5,1,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.calculateLineNumbers(SourceCodePositioner positioner)",7,2,5,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.AbstractDataFlowNode(List<DataFlowNode> dataFlow)",7,2,5,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTUnaryExpression.ASTUnaryExpression(UnaryExpression unaryExpression)",7,2,5,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.hashCode()",7,2,5,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.AvoidDollarSignsRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",7,2,4,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.AvoidDollarSignsRule.visit(ASTMethodDeclarator node, Object data)",7,2,4,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.AvoidDollarSignsRule.visit(ASTVariableDeclaratorId node, Object data)",7,2,4,1,2
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest.toMap(AttributeAxisIterator it)",7,2,4,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.reverseParentPathsTo(DataFlowNode destination)",7,2,4,1,1
"net.sourceforge.pmd.lang.java.rule.documentation.HeaderCommentsRule.labels()",7,2,4,1,0
"net.sourceforge.pmd.renderers.CodeClimateRule.categoryMap()",7,2,4,1,0
"net.sourceforge.pmd.ReportTest.getNode(int line, int column, boolean nextLine)",7,2,3,1,3
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.rubyFixnumInt(IRubyObject value, String paramName)",7,2,3,1,2
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveClassLengthRule.visit(ASTUserClass node, Object data)",7,2,3,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTSwitchLabel node, Object data)",7,2,3,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryReturnRule.visit(ASTMethodDeclaration node, Object data)",7,2,3,1,2
"net.sourceforge.pmd.lang.jsp.rule.security.NoUnsanitizedJSPExpressionRule.visit(ASTElExpression node, Object data)",7,2,3,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",7,2,3,1,2
"net.sourceforge.pmd.lang.vf.rule.VfRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",7,2,3,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(String key, org.w3c.dom.Node node)",7,2,3,1,2
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.equals(Object o)",7,2,3,1,1
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.setVersion(String version)",7,2,3,1,1
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.getNextToken()",7,2,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.getArrayDepth()",7,2,3,1,0
"net.sourceforge.pmd.lang.apex.rule.design.NcssConstructorCountRule.visit(ASTMethod node, Object data)",7,2,2,1,2
"net.sourceforge.pmd.lang.apex.rule.design.NcssMethodCountRule.visit(ASTMethod node, Object data)",7,2,2,1,2
"net.sourceforge.pmd.benchmark.BenchmarkResult.compareTo(BenchmarkResult benchmarkResult)",7,2,2,1,1
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getExtension(String fileName)",7,2,2,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.setVariableAccess(List<VariableAccess> variableAccess)",7,2,2,1,1
"net.sourceforge.pmd.lang.dfa.report.PackageNode.equalsNode(AbstractReportNode arg0)",7,2,2,1,1
"net.sourceforge.pmd.lang.symboltable.ImageFinderFunction.applyTo(NameDeclaration nameDeclaration)",7,2,2,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.errorFor(T value)",7,2,2,1,1
"net.sourceforge.pmd.ant.AbstractAntTestHelper.currentTempFile()",7,2,2,1,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.apply()",7,2,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getTypeImage()",7,2,2,1,0
"net.sourceforge.pmd.ant.AbstractAntTestHelper.AbstractAntTestHelper()",7,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.getSignature()",7,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.getType()",7,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration.getSignature()",7,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractTypeBodyDeclaration.getKind()",7,2,1,1,0
"net.sourceforge.pmd.cpd.Tokens.getLineCount(TokenEntry mark, Match match)",6,2,8,1,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.AbstractNamingConventionsRule.checkMatches(PropertyDescriptor<Pattern> propertyDescriptor, Pattern overridePattern, ApexNode<?> node, Object data)",6,2,7,1,4
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.populate(T builder, Map<PropertyDescriptorField,String> fields)",6,2,6,1,2
"net.sourceforge.pmd.it.BinaryDistributionIT.setupTempDirectory()",6,2,6,1,0
"net.sourceforge.pmd.lang.apex.DefaultRulesetTest.cleanup()",6,2,6,1,0
"net.sourceforge.pmd.lang.java.QuickstartRulesetTest.cleanup()",6,2,6,1,0
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.getArgumentCount()",6,2,5,1,0
"net.sourceforge.pmd.FooRule.visit(ASTClassOrInterfaceDeclaration c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.FooRule.visit(ASTVariableDeclaratorId c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.lang.apex.FooRule.visit(ASTField c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.lang.apex.FooRule.visit(ASTParameter c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.lang.apex.FooRule.visit(ASTUserClass c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.lang.apex.FooRule.visit(ASTVariableDeclaration c, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest$BarRule.visit(ASTUserClass clazz, Object ctx)",6,2,4,1,2
"net.sourceforge.pmd.testframework.PMDTestRunner.createChildrenDescriptions(Runner runner, String suiteName)",6,2,4,1,2
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.getClassMetricKey(String s)",6,2,4,1,1
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.getOperationMetricKey(String s)",6,2,4,1,1
"net.sourceforge.pmd.lang.java.ast.ASTType.getTypeImage()",6,2,4,1,0
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitUse(MemberNode use, Object data)",6,2,3,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitUser(MemberNode user, Object data)",6,2,3,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTStatementExpression node, Object data)",6,2,3,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.visit(XmlNode node, RuleContext ctx)",6,2,3,1,2
"net.sourceforge.pmd.internal.util.IteratorUtil.toList(Iterator<T> it)",6,2,3,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTVariableExpression.getImage()",6,2,3,1,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.getLocation()",6,2,3,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLetNode.getBody()",6,2,3,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$PMDRuleSetEntityResolver.resolveEntity(String publicId, String systemId)",6,2,2,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitConstructors(ClassNode classNode, Object data)",6,2,2,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitFields(ClassNode classNode, Object data)",6,2,2,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitMethods(ClassNode classNode, Object data)",6,2,2,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitUsers(MemberNode memberNode, Object data)",6,2,2,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitUses(MemberNode memberNode, Object data)",6,2,2,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidFieldNameMatchingTypeNameRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",6,2,2,1,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.convertList(List<Node> nodes, Class<T> target)",6,2,2,1,2
"net.sourceforge.pmd.benchmark.StringBuilderCR.appendLn(String... chunks)",6,2,2,1,1
"net.sourceforge.pmd.cpd.JSPTokenizerTest.getTokenImage(TokenEntry token)",6,2,2,1,1
"net.sourceforge.pmd.lang.dfa.report.ClassNode.equalsNode(AbstractReportNode arg0)",6,2,2,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.getParam(int index)",6,2,2,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.getStatement(int index)",6,2,2,1,1
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.getNextTokenFromAnyChannel()",6,2,2,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.atomize()",6,2,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.getExpression()",6,2,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableInitializer.getInitializer()",6,2,2,1,0
"net.sourceforge.pmd.cpd.CPDTest$NoFileAssertListener.addedFile(int fileCount, File file)",6,2,1,1,2
"net.sourceforge.pmd.cpd.XMLRenderer.setEncoding(String encoding)",6,2,1,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.getVersion(String versionName)",6,2,1,1,1
"net.sourceforge.pmd.properties.builders.MultiPackagedPropertyBuilder.legalPackages(String[] packs)",6,2,1,1,1
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.choiceFrom(String label)",6,2,1,1,1
"LocalVariableTypeInferenceForLoopEnhanced2.arrayMethod()",6,2,1,1,0
"LocalVariableTypeInferenceForLoopEnhanced2.listMethod()",6,2,1,1,0
"net.sourceforge.pmd.cli.PMDParameters.getProperties()",6,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.hashCode()",6,2,1,1,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentInOperandRule.dysfunctionReason()",6,2,1,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.getDefaultValue()",6,2,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setModifier(boolean enable, int mask)",6,2,0,1,2
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.makeAccessJavaCode(String[] access)",6,2,0,1,1
"net.sourceforge.pmd.lang.dfa.Structure.tryToLog(String tag, DataFlowNode node)",5,2,7,1,2
"net.sourceforge.pmd.properties.AbstractProperty.toString()",5,2,5,1,0
"Java9Interface$SampleTool.use()",5,2,4,1,0
"net.sourceforge.pmd.cli.PMDParameters.getVersion()",5,2,4,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.getName()",5,2,3,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTCatchBlockStatement.getVariableName()",5,2,3,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.getFinallyBlock()",5,2,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTArguments.getArgumentCount()",5,2,3,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTArguments.getArgumentCount()",5,2,3,1,0
"net.sourceforge.pmd.dcd.asm.PrintVisitor.println(int level, String s)",5,2,2,1,2
"net.sourceforge.pmd.cli.BaseCLITest.checkStatusCode(int expectedExitCode)",5,2,2,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.getCatchClause(int index)",5,2,2,1,1
"net.sourceforge.pmd.lang.metrics.MetricOptions$MetricOptionsBuilder.addAll(Collection<? extends MetricOption> options)",5,2,2,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.getValue()",5,2,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTElementGet.getElement()",5,2,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTElementGet.getTarget()",5,2,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.getFunctionName()",5,2,2,1,0
"net.sourceforge.pmd.FooRule.apply(List<? extends Node> nodes, RuleContext ctx)",5,2,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",5,2,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",5,2,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visitAll(final List<? extends Node> nodes, final RuleContext ctx)",5,2,1,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.visitAll(List<? extends Node> nodes, RuleContext ctx)",5,2,1,1,2
"net.sourceforge.pmd.properties.AbstractProperty.checkNotEmpty(String arg, PropertyDescriptorField argId)",5,2,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundCondition.setType(String type)",5,2,1,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilder.PropertyDescriptorBuilder(String name)",5,2,1,1,1
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.checkNumber(T number)",5,2,1,1,1
"net.sourceforge.pmd.properties.PropertyBuilder.getDescription()",5,2,1,1,0
"net.sourceforge.pmd.document.RegionByLineImp.requireNonNegative(final int value)",5,2,0,1,1
"net.sourceforge.pmd.document.RegionByOffsetImp.requireNonNegative(final int value)",5,2,0,1,1
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule$SwitchDensity.getDensity()",5,2,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.toString()",4,2,4,1,0
"net.sourceforge.pmd.lang.symboltable.Applier.apply(SearchFunction<E> f, Iterator<? extends E> i)",4,2,3,1,2
"net.sourceforge.pmd.lang.java.ast.NodeChildrenIterator.moveToNext()",4,2,3,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.VariableAccess(int accessType, String varName)",4,2,2,1,2
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.propertyErrorFor(Rule rule)",4,2,2,1,1
"net.sourceforge.pmd.lang.metrics.MetricOptions$MetricOptionsBuilder.add(MetricOption option)",4,2,1,1,1
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.checkValue(E value)",4,2,1,1,1
"File1.dup()",4,2,1,1,0
"File2.dup()",4,2,1,1,0
"LocalVariableTypeInferenceForLoop.aMethod()",4,2,1,1,0
"LocalVariableTypeInferenceForLoopEnhanced.aMethod()",4,2,1,1,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.assertOperationsHaveNotBeenApplied()",4,2,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.requireLinesCorrectlyOrdered()",4,2,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.legalPackageNamesIn(Map<PropertyDescriptorField,String> valuesById, char delimiter)",3,2,3,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.getNumStatements()",3,2,3,1,0
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.shortestNameFor(Class<?> cls)",3,2,2,1,1
"net.sourceforge.pmd.lang.ParserOptions.hashCode()",3,2,1,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getShortName()",3,2,0,1,0
"DefaultIterator.skip(int i)",2,2,2,1,1
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.errorFor(E value)",2,2,2,1,1
"net.sourceforge.pmd.cli.PMDParameters.getLanguage()",2,2,2,1,0
"net.sourceforge.pmd.cpd.FileReporter.getOutputStream()",2,2,2,1,0
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.asString(Method method)",2,2,1,1,1
"Test.foo(List list)",2,2,0,1,1
"EmptyIfStatement.foo()",2,2,0,1,0
"net.sourceforge.pmd.lang.vm.util.DirectiveMapper.DirectiveMapper()",0,2,12,1,0
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatement.getFirstClassOrInterfaceTypeImage()",16,2,2,0,0
"Bug1429.getAttributeTuples()",15,2,3,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.getLocalName()",8,2,2,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.getLocalName()",8,2,2,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.getLocalName()",8,2,2,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.getLocalName()",8,2,2,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.getNamespacePrefix()",7,2,2,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.getNamespacePrefix()",7,2,2,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.getNamespacePrefix()",7,2,2,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.getNamespacePrefix()",7,2,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.getDetailMessageNode()",6,2,2,0,0
"SwitchWithFallthrough.myMethod()",6,2,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.getPublicId()",6,2,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.getPublicId()",6,2,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.getElseBranch()",5,2,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.getInitializer()",5,2,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.getParameterCount()",4,2,6,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createBadValue()",4,2,3,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBreakStatement.ASTBreakStatement(BreakStatement breakStatement)",3,2,4,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTContinueStatement.ASTContinueStatement(ContinueStatement continueStatement)",3,2,4,0,1
"net.sourceforge.pmd.properties.FloatPropertyTest.createBadValue()",3,2,3,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createBadValue()",3,2,3,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createBadValue()",3,2,3,0,0
"net.sourceforge.pmd.properties.FileProperty.createFrom(String propertyString)",3,2,1,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty.asString(Class value)",3,2,1,0,1
"net.sourceforge.pmd.properties.TypeProperty.asString(Class value)",3,2,1,0,1
"net.sourceforge.pmd.lang.ast.AbstractTokenManager.getFileName()",3,2,1,0,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.getType()",3,2,1,0,0
"net.sourceforge.pmd.lang.dfa.StartOrEndDataFlowNode.toString()",3,2,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAstRoot.getNumComments()",2,2,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.getRequiresModifier()",2,2,1,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getValueOrEmpty(final String value)",2,2,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.SetterDetection.value(int x)",2,2,0,0,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SuspiciousOctalEscapeRule.isDecimal(char c)",2,1,0,10,1
"net.sourceforge.pmd.lang.java.rule.errorprone.SuspiciousOctalEscapeRule.isOctal(char c)",2,1,0,10,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.CloseResourceRule()",4,1,3,9,0
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.visit(ASTConstructorDeclaration node, Object data)",4,1,2,9,2
"net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule.visit(ASTMethodDeclaration node, Object data)",4,1,2,9,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule.isFillInStackTraceCalled(final String target, final ASTVariableInitializer initializer)",3,1,2,9,2
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveAppendsShouldReuseRule.isFirstChild(Node node, Class<?> clazz)",2,1,4,9,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.getUnsafe()",26,1,3,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Spliterator.split()",18,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Spliterator.split()",18,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.contains(Object value)",17,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.contains(Object value)",17,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity, float loadFactor)",17,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.ConcurrentHashMapV8(int initialCapacity, float loadFactor)",17,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.spread(int h)",16,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.spread(int h)",16,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.newKeySet(int initialCapacity)",13,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.newKeySet(int initialCapacity)",13,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.iterator()",12,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.iterator()",12,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.iterator()",12,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.iterator()",12,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.iterator()",10,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.iterator()",10,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.ConcurrentHashMapV8(Map<? extends K,? extends V> m)",9,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.putAll(Map<? extends K,? extends V> m)",9,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.ConcurrentHashMapV8(Map<? extends K,? extends V> m)",9,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.putAll(Map<? extends K,? extends V> m)",9,1,1,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.MethodInvocation(ASTPrimaryExpression ape, List<String> qualifierNames, List<String> referenceNames, String name, int argumentSize, List<String> argumentTypes, boolean superCall)",9,1,0,8,7
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.newKeySet()",9,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.newKeySet()",9,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$EvalPackage.EvalPackage(String className)",8,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.elements()",8,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.keys()",8,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.elements()",8,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.keys()",8,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.contains(Object o)",7,1,4,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.equals(Object o)",7,1,4,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.contains(Object o)",7,1,4,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.equals(Object o)",7,1,4,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.addCalledMethodsOfNode(Node node, List<MethodInvocation> calledMethods, String className)",7,1,2,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.getMappedValue()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.entrySpliterator()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.keySpliterator()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.valueSpliterator()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.getMappedValue()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.entrySpliterator()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.keySpliterator()",7,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.valueSpliterator()",7,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$NullEvalPackage.NullEvalPackage()",6,1,4,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.remove(Object o)",6,1,3,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.remove(Object o)",6,1,3,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.equals(Object o)",5,1,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.equals(Object o)",5,1,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.equals(Object o)",5,1,2,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.putEvalPackage(EvalPackage ep)",5,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.clear()",5,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.isEmpty()",5,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.clear()",5,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.isEmpty()",5,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Node.Node(int hash, Object key, Object val, Node next)",5,1,0,8,4
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Node.Node(int hash, Object key, Object val, Node next)",5,1,0,8,4
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.getMap()",5,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.ConcurrentHashMapV8()",5,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.getMap()",5,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.ConcurrentHashMapV8()",5,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visit(ASTCompilationUnit node, Object data)",4,1,2,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.tryRelease(int ignore)",4,1,2,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.tryRelease(int ignore)",4,1,2,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.MapEntry(K key, V val, ConcurrentHashMapV8<K,V> map)",4,1,0,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.MapEntry(K key, V val, ConcurrentHashMapV8<K,V> map)",4,1,0,8,3
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.visit(ASTEnumDeclaration node, Object data)",4,1,0,8,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolderComparator.compare(ConstructorHolder o1, ConstructorHolder o2)",3,1,3,8,2
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolderComparator.compare(MethodHolder o1, MethodHolder o2)",3,1,3,8,2
"net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule.SingularFieldRule()",3,1,2,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.getTreeNode(int h, Object k, TreeNode p)",3,1,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.putTreeNode(int h, Object k, Object v)",3,1,1,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.getTreeNode(int h, Object k, TreeNode p)",3,1,1,8,3
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.putTreeNode(int h, Object k, Object v)",3,1,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeNode.TreeNode(int hash, Object key, Object val, Node next, TreeNode parent)",3,1,0,8,5
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeNode.TreeNode(int hash, Object key, Object val, Node next, TreeNode parent)",3,1,0,8,5
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.KeySetView(ConcurrentHashMapV8<K,V> map, V value)",3,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.KeySetView(ConcurrentHashMapV8<K,V> map, V value)",3,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.Traverser(ConcurrentHashMapV8<K,V> map)",3,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.Traverser(ConcurrentHashMapV8<K,V> map)",3,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.setTabAt(AtomicReferenceArray<Node> tab, int i, Node v)",2,1,2,8,3
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.getCurrentEvalPackage()",2,1,2,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.removeCurrentEvalPackage()",2,1,2,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.casTabAt(Node[] tab, int i, Node c, Node v)",2,1,1,8,4
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.casTabAt(AtomicReferenceArray<Node> tab, int i, Node c, Node v)",2,1,1,8,4
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.setTabAt(Node[] tab, int i, Node v)",2,1,1,8,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8.tabAt(Node[] tab, int i)",2,1,1,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8.tabAt(AtomicReferenceArray<Node> tab, int i)",2,1,1,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.hasNext()",2,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.hasNext()",2,1,1,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule.clearEvalPackages()",2,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntryIterator.EntryIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeyIterator.KeyIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValueIterator.ValueIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.add(V e)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.addAll(Collection<? extends V> c)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntryIterator.EntryIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeyIterator.KeyIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValueIterator.ValueIterator(Traverser<K,V,Object> it)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.add(V e)",2,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.addAll(Collection<? extends V> c)",2,1,0,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.ConstructorHolder(ASTConstructorDeclaration cd)",2,1,0,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.setDangerous(boolean dangerous)",2,1,0,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.MethodHolder(ASTMethodDeclarator amd)",2,1,0,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.setCalledMethod(String name)",2,1,0,8,1
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.getASTConstructorDeclaration()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorHolder.isDangerous()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorInvocation.getASTExplicitConstructorInvocation()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorInvocation.getArgumentCount()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorInvocation.getArgumentTypes()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$ConstructorInvocation.getName()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.getASTMethodDeclarator()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.getCalled()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.isDangerous()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodHolder.setDangerous()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getASTPrimaryExpression()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getArgumentCount()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getArgumentTypes()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getName()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getQualifierNames()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.getReferenceNames()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$MethodInvocation.isSuper()",2,1,0,8,0
"net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule$EvalPackage.EvalPackage()",1,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.hashCode()",0,1,2,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.hashCode()",0,1,2,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.contains(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeySetView.remove(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.contains(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.contains(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeySetView.remove(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.contains(Object o)",0,1,1,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.clear()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.isEmpty()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.size()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeyIterator.nextElement()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.hasMoreElements()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$TreeBin.isHeldExclusively()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValueIterator.nextElement()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.clear()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.isEmpty()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.size()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeyIterator.nextElement()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.hasMoreElements()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$TreeBin.isHeldExclusively()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValueIterator.nextElement()",0,1,1,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$BiAction.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$DoubleByDoubleToDouble.apply(double a, double b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$IntByIntToInt.apply(int a, int b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$LongByLongToLong.apply(long a, long b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectByObjectToDouble.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectByObjectToInt.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectByObjectToLong.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$BiAction.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$DoubleByDoubleToDouble.apply(double a, double b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$IntByIntToInt.apply(int a, int b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$LongByLongToLong.apply(long a, long b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectByObjectToDouble.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectByObjectToInt.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectByObjectToLong.apply(A a, B b)",0,1,0,8,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Action.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.CHMView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.contains(Object o)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.remove(Object o)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$DoubleToDouble.apply(double a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntryIterator.EntryIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$EntrySetView.EntrySetView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$IntToInt.apply(int a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$KeyIterator.KeyIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$LongToLong.apply(long a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectToDouble.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectToInt.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ObjectToLong.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Segment.Segment(float lf)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.setRawResult(Object x)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValueIterator.ValueIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$ValuesView.ValuesView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Action.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.CHMView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.contains(Object o)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.remove(Object o)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$DoubleToDouble.apply(double a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntryIterator.EntryIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$EntrySetView.EntrySetView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$IntToInt.apply(int a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$KeyIterator.KeyIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$LongToLong.apply(long a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectToDouble.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectToInt.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ObjectToLong.apply(A a)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Segment.Segment(float lf)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.setRawResult(Object x)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValueIterator.ValueIterator(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$ValuesView.ValuesView(ConcurrentHashMapV8<K,V> map)",0,1,0,8,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$CHMView.iterator()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Generator.apply()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.getKey()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.getValue()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$MapEntry.toString()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.exec()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMapV8$Traverser.getRawResult()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$CHMView.iterator()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Generator.apply()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.getKey()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.getValue()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$MapEntry.toString()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.exec()",0,1,0,8,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.ConcurrentHashMapV8$Traverser.getRawResult()",0,1,0,8,0
"net.sourceforge.pmd.util.database.DBMSMetadata.DBMSMetadata(DBURI dbURI)",30,1,6,7,1
"com.concurrent_ruby.ext.jsr166e.Striped64.getUnsafe()",26,1,3,7,0
"net.sourceforge.pmd.util.database.DBMSMetadata.getSourceCode(SourceObject sourceObject)",10,1,4,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.declarationMatches(ASTImportDeclaration decl, String name)",9,1,5,7,2
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.getRuleChainVisits()",9,1,2,7,0
"com.concurrent_ruby.ext.jsr166e.Striped64.fn(long currentValue, long newValue)",9,1,0,7,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.fn(long currentValue, long newValue)",9,1,0,7,2
"net.sourceforge.pmd.util.database.DBMSMetadata.DBMSMetadata(Connection c)",9,1,0,7,1
"net.sourceforge.pmd.util.database.DBMSMetadata.getConnection()",8,1,0,7,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.UnnecessaryFullyQualifiedNameRule()",6,1,5,7,0
"com.concurrent_ruby.ext.jsr166e.Striped64.casBase(long cmp, long val)",5,1,1,7,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.casBase(long cmp, long val)",5,1,1,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.visit(ASTCompilationUnit node, Object data)",5,1,1,7,2
"com.concurrent_ruby.ext.jsr166e.Striped64.casBusy()",5,1,1,7,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.casBusy()",5,1,1,7,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.visit(ASTClassOrInterfaceType node, Object data)",4,1,2,7,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedImportsRule.visit(ASTName node, Object data)",4,1,1,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.visit(ASTImportDeclaration node, Object data)",4,1,1,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.visit(ASTPackageDeclaration node, Object data)",4,1,1,7,2
"com.concurrent_ruby.ext.jsr166e.Striped64.Striped64()",4,1,0,7,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64.Striped64()",4,1,0,7,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.isAfter(Node n1, Node n2)",3,1,6,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule.isSamePackage(AbstractJavaTypeNode node)",3,1,4,7,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.isNotAnnotated(VariableNameDeclaration variableDeclaration)",3,1,2,7,1
"net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery.isSupportedVersion(String version)",3,1,1,7,1
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",3,1,0,7,3
"net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.indexNodes(List<Node> nodes, RuleContext ctx)",3,1,0,7,2
"com.concurrent_ruby.ext.jsr166e.Striped64$Cell.cas(long cmp, long val)",2,1,4,7,2
"net.sourceforge.pmd.lang.java.rule.performance.RedundantFieldInitializerRule.addViolation(Object data, ASTVariableDeclarator variableDeclarator)",2,1,3,7,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64$Cell.cas(long cmp, long val)",2,1,1,7,2
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule.UnnecessaryLocalBeforeReturnRule()",2,1,1,7,0
"net.sourceforge.pmd.lang.java.rule.performance.RedundantFieldInitializerRule.RedundantFieldInitializerRule()",2,1,1,7,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64$ThreadHashCode.initialValue()",0,1,4,7,0
"com.concurrent_ruby.ext.jsr166e.Striped64$ThreadHashCode.initialValue()",0,1,2,7,0
"com.concurrent_ruby.ext.jsr166e.Striped64$Cell.Cell(long x)",0,1,0,7,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.Striped64$Cell.Cell(long x)",0,1,0,7,1
"net.sourceforge.pmd.RuleSetWriter.write(RuleSet ruleSet)",34,1,14,6,1
"net.sourceforge.pmd.RuleSet.applies(Rule rule, LanguageVersion languageVersion)",19,1,7,6,2
"net.sourceforge.pmd.RuleSet.RuleSet(final RuleSetBuilder builder)",18,1,6,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isMethodApplicable(Method method, String methodName, int argArity, Class<?> accessingClass, List<JavaTypeDefinition> typeArguments)",17,1,13,6,5
"net.sourceforge.pmd.docs.RuleDocGenerator.getShortRuleDescription(Rule rule)",16,1,8,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.ClassScope(final ClassNameDeclaration classNameDeclaration)",16,1,3,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleSetByReference(final RuleSet ruleSet, final boolean allRules)",15,1,1,6,2
"net.sourceforge.pmd.docs.RuleDocGenerator.generate(Iterator<RuleSet> registeredRulesets, List<String> additionalRulesets)",14,1,6,6,2
"net.sourceforge.pmd.RuleSet.applies(File file)",14,1,1,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addRuleSet(final RuleSet ruleSet)",10,1,3,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addExcludePatterns(final Collection<String> someExcludePatterns)",10,1,1,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.addIncludePatterns(final Collection<String> someIncludePatterns)",10,1,1,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.RuleSetBuilder(final RuleSet original)",9,1,12,6,1
"net.sourceforge.pmd.docs.DeadLinksChecker.listMdFiles(Path pagesDirectory)",9,1,7,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.getSortedRules(RuleSet ruleset)",9,1,2,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.isMethodAGetter(final ASTMethod method)",7,1,13,6,1
"net.sourceforge.pmd.util.datasource.FileDataSource.toString()",7,1,6,6,0
"net.sourceforge.pmd.RuleSet.size()",7,1,1,6,0
"net.sourceforge.pmd.RuleSet.getRules()",7,1,0,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.convertToSimpleType(ASTClassOrInterfaceType t)",6,1,8,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.getRuleSetDescriptionSingleLine(RuleSet ruleset)",6,1,4,6,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule.visit(final ASTCompilationUnit node, final Object data)",6,1,3,6,2
"net.sourceforge.pmd.docs.DeadLinksChecker.fileToString(Path mdFile)",6,1,3,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.isAdditive(Node n)",6,1,2,6,1
"net.sourceforge.pmd.util.datasource.FileDataSource.FileDataSource(File file)",6,1,0,6,1
"net.sourceforge.pmd.docs.DeadLinksChecker.main(String[] args)",5,1,4,6,1
"net.sourceforge.pmd.RuleSetWriter.createCDATASectionElement(String name, String value)",5,1,3,6,2
"net.sourceforge.pmd.RuleSetWriter.createTextElement(String name, String value)",5,1,3,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTDmlUpsertStatement node, Object data)",5,1,2,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.visit(ASTHtmlScript node, Object data)",5,1,2,6,2
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.containsSafeFields(final AbstractVFNode expression)",5,1,2,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.resolveMethodCalls(final ASTMethodCallExpression node)",4,1,15,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.ClassScope(final String className, final ClassNameDeclaration classNameDeclaration)",4,1,3,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.ApexCRUDViolationRule()",4,1,3,6,0
"net.sourceforge.pmd.RuleSetWriter.createExcludeElement(String exclude)",4,1,2,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTDmlDeleteStatement node, Object data)",4,1,1,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTDmlInsertStatement node, Object data)",4,1,1,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTDmlMergeStatement node, Object data)",4,1,1,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTDmlUpdateStatement node, Object data)",4,1,1,6,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.visit(ASTMethodCallExpression node, Object data)",4,1,1,6,2
"net.sourceforge.pmd.cpd.CsTokenizer$Tokenizer.Tokenizer(String sourceCode)",4,1,1,6,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule.getReturnType(final ASTMethod method)",3,1,12,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.isDeprecated(PropertyDescriptor<?> propertyDescriptor)",3,1,4,6,1
"net.sourceforge.pmd.RuleSet.hashCode()",3,1,4,6,0
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.doesElContainAnyUnescapedIdentifiers(final ASTElExpression elExpression, Escaping escape)",3,1,2,6,2
"net.sourceforge.pmd.util.datasource.FileDataSource.getInputStream()",3,1,2,6,0
"net.sourceforge.pmd.util.datasource.FileDataSource.getNiceFileName(boolean shortNames, String inputFileName)",3,1,1,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.withDescription(final String description)",3,1,1,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.withName(final String name)",3,1,1,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.generateSidebar(Map<Language,List<RuleSet>> sortedRulesets)",3,1,1,6,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule.end(RuleContext ctx)",3,1,1,6,1
"net.sourceforge.pmd.cpd.CsTokenizer$Tokenizer.close()",3,1,1,6,0
"net.sourceforge.pmd.cpd.CsTokenizer$Token.Token(String image, int lineNumber)",3,1,0,6,2
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.withFileName(final String fileName)",3,1,0,6,1
"net.sourceforge.pmd.RuleSet.getChecksum()",3,1,0,6,0
"net.sourceforge.pmd.lang.vf.rule.security.VfUnescapeElRule.toString()",3,1,0,6,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isSubtypeable(Class<?> parameter, Class<?> argument)",2,1,3,6,2
"net.sourceforge.pmd.RuleSetWriter.createPriorityElement(RulePriority priority)",2,1,3,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.resolveType(final String name)",2,1,3,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.boxPrimitive(JavaTypeDefinition def)",2,1,3,6,1
"net.sourceforge.pmd.docs.DeadLinksChecker.addDeadLink(Map<Path,List<Future<String>>> fileToDeadLinks, Path file, Future<String> line)",2,1,2,6,3
"net.sourceforge.pmd.docs.RuleDocGenerator.getAbsoluteOutputPath(String filename)",2,1,2,6,1
"net.sourceforge.pmd.docs.RuleDocGenerator.toLines(String s)",2,1,2,6,1
"net.sourceforge.pmd.lang.java.rule.performance.InsufficientStringBufferDeclarationRule.isStringOrCharLiteral(ASTLiteral literal)",2,1,2,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.clipClassName(String s)",2,1,2,6,1
"net.sourceforge.pmd.RuleSetWriter.createDescriptionElement(String description)",2,1,1,6,1
"net.sourceforge.pmd.RuleSetWriter.createExampleElement(String example)",2,1,1,6,1
"net.sourceforge.pmd.RuleSetWriter.createExcludePatternElement(String excludePattern)",2,1,1,6,1
"net.sourceforge.pmd.RuleSetWriter.createIncludePatternElement(String includePattern)",2,1,1,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getArity(Method method)",2,1,1,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isGeneric(Class<?> clazz)",2,1,1,6,1
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isGeneric(Method method)",2,1,1,6,1
"net.sourceforge.pmd.RuleSetWriter.close()",2,1,1,6,0
"net.sourceforge.pmd.RuleSetWriter.createPropertiesElement()",2,1,1,6,0
"net.sourceforge.pmd.RuleSetWriter.createRuleElement()",2,1,1,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getClassDeclarations()",2,1,1,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getMethodDeclarations()",2,1,1,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getVariableDeclarations()",2,1,1,6,0
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.RuleSetBuilder(final long checksum)",2,1,0,6,1
"net.sourceforge.pmd.RuleSetWriter.RuleSetWriter(OutputStream outputStream)",2,1,0,6,1
"net.sourceforge.pmd.cpd.CsTokenizer.setIgnoreUsings(boolean ignoreUsings)",2,1,0,6,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.setIsEnum(boolean isEnum)",2,1,0,6,1
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.build()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.getName()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet$RuleSetBuilder.hasDescription()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet.getDescription()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet.getExcludePatterns()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet.getFileName()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet.getIncludePatterns()",2,1,0,6,0
"net.sourceforge.pmd.RuleSet.getName()",2,1,0,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getClassDeclaration()",2,1,0,6,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScope.getClassName()",2,1,0,6,0
"net.sourceforge.pmd.RuleViolationComparator.RuleViolationComparator()",1,1,0,6,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.MethodTypeResolution()",0,1,28,6,0
"net.sourceforge.pmd.testframework.RuleTst.RuleTst()",29,1,8,5,0
"net.sourceforge.pmd.testframework.RuleTst.printReport(TestDescriptor test, Report report)",19,1,19,5,2
"net.sourceforge.pmd.util.FileUtil.readFilelist(File filelist)",15,1,4,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.classNameExists(String fullyQualifiedClassName)",13,1,1,5,1
"net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader.couldResolve(String name)",12,1,1,5,1
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.visit(ASTCompilationUnit node, Object data)",10,1,3,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.hasLombokAnnotation(Annotatable node)",10,1,1,5,1
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.hasClassLombokAnnotation()",10,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer.renderViolationRow(String name, String value)",9,1,9,5,2
"net.sourceforge.pmd.testframework.RuleTst.reinitializeRule(Rule rule)",9,1,3,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTConditionalExpression node, Object data)",9,1,2,5,2
"net.sourceforge.pmd.testframework.RuleTst.extractTestsFromXml(Rule rule)",9,1,2,5,1
"net.sourceforge.pmd.cache.FileAnalysisCache.FileAnalysisCache(final File cache)",9,1,1,5,1
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.calculateLineNumbers(EcmascriptNode<?> node)",9,1,1,5,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.visit(ASTConstructorDeclaration node, Object data)",8,1,4,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule.AccessorClassGenerationRule()",8,1,2,5,0
"net.sourceforge.pmd.lang.java.rule.AbstractPoorMethodCall.isViolationArgument(Node arg)",8,1,0,5,1
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.LoosePackageCouplingRule()",7,1,5,5,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.defaultSuppressionAnnotations()",7,1,4,5,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.register(Class<T> nodeType, Class<? extends EcmascriptNode<T>> nodeAdapterType)",7,1,2,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",7,1,2,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.visit(ASTEnumDeclaration node, Object data)",7,1,2,5,2
"net.sourceforge.pmd.testframework.RuleTst.runTests(Rule rule, String testsFileName)",7,1,2,5,2
"net.sourceforge.pmd.testframework.RuleTst.runTests(Rule rule)",7,1,2,5,1
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.toString()",7,1,1,5,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule.visit(ASTMethodDeclaration node, Object data)",6,1,4,5,2
"net.sourceforge.pmd.lang.java.rule.multithreading.NonThreadSafeSingletonRule.visit(ASTCompilationUnit node, Object data)",6,1,4,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPrimaryPrefix node, Object data)",6,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTShiftExpression node, Object data)",6,1,2,5,2
"net.sourceforge.pmd.lang.vm.ast.ASTMethod.ASTMethod(final VmParser p, final int id)",6,1,0,5,2
"net.sourceforge.pmd.lang.java.rule.AbstractPoorMethodCall.methodNames()",6,1,0,5,0
"net.sourceforge.pmd.lang.vm.ast.ASTMethod.getMethodName()",6,1,0,5,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.ApexOpenRedirectRule()",5,1,4,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTAdditiveExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTAndExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTAnnotation node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTCastExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTExclusiveOrExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTFieldDeclaration node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTInclusiveOrExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTMarkerAnnotation node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTMultiplicativeExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTNormalAnnotation node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPostfixExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPreDecrementExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPreIncrementExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTSingleMemberAnnotation node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTStatementExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTType node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTTypeDeclaration node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTUnaryExpression node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTVariableDeclarator node, Object data)",5,1,2,5,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule.end(final RuleContext ctx)",5,1,2,5,1
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.UselessOverridingMethodRule()",5,1,2,5,0
"net.sourceforge.pmd.testframework.RuleTst.runTestFromString(String code, Rule rule, Report report, LanguageVersion languageVersion)",5,1,1,5,4
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.DAAPathFinder(DataFlowNode rootNode, Executable shim, int maxPaths, int maxLoops)",5,1,0,5,4
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.DAAPathFinder(DataFlowNode rootNode, Executable shim, int maxPaths)",5,1,0,5,3
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.DAAPathFinder(DataFlowNode rootNode, Executable shim)",5,1,0,5,2
"net.sourceforge.pmd.lang.vm.ast.ASTMethod.ASTMethod(final int id)",5,1,0,5,1
"net.sourceforge.pmd.lang.java.rule.AbstractPoorMethodCall.targetTypename()",5,1,0,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPrimitiveType node, Object data)",4,1,3,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addNode(DefaultMutableTreeNode level, PathElement element)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.visit(ASTCompilationUnit node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTBooleanLiteral node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTConditionalAndExpression node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTConditionalOrExpression node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTEqualityExpression node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTInstanceOfExpression node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTRelationalExpression node, Object data)",4,1,2,5,2
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.JavaRuleViolation(Rule rule, RuleContext ctx, JavaNode node, String message, int beginLine, int endLine)",4,1,1,5,6
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.visit(ASTCompilationUnit node, Object data)",4,1,1,5,2
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.visit(ASTPackageDeclaration node, Object data)",4,1,1,5,2
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.findFirstDegreeChildrenOfType(Node n, Class<T> targetType)",4,1,1,5,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidMultipleUnaryOperatorsRule.visit(ASTUnaryExpression node, Object data)",4,1,1,5,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidMultipleUnaryOperatorsRule.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",4,1,1,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTNullLiteral node, Object data)",4,1,1,5,2
"net.sourceforge.pmd.testframework.RuleTst.processUsingStringReader(TestDescriptor test, Rule rule)",4,1,1,5,2
"net.sourceforge.pmd.renderers.YAHTMLRenderer.YAHTMLRenderer()",4,1,1,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.visit(ASTPackageDeclaration node, Object data)",4,1,0,5,2
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.isContainingPackage(String pkg1, String pkg2)",3,1,6,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.populateClassName(ASTCompilationUnit node, String className)",3,1,4,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.hasMoreChildren()",3,1,4,5,0
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.checksNothing()",3,1,4,5,0
"net.sourceforge.pmd.cache.FileAnalysisCache.cacheExists()",3,1,3,5,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule.addVariable(ASTVariableDeclaration node)",3,1,2,5,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidMultipleUnaryOperatorsRule.AvoidMultipleUnaryOperatorsRule()",3,1,2,5,0
"net.sourceforge.pmd.lang.java.rule.multithreading.NonThreadSafeSingletonRule.NonThreadSafeSingletonRule()",3,1,2,5,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolation.suppresses(final Node node, Rule rule)",3,1,1,5,2
"net.sourceforge.pmd.lang.vm.ast.ASTMethod.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,5,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptTreeBuilder.EcmascriptTreeBuilder(String sourceCode, List<ParseProblem> parseProblems)",3,1,0,5,2
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.ReportNode(String packageName, String className)",3,1,0,5,2
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.ReportNode(String packageName)",3,1,0,5,1
"net.sourceforge.pmd.lang.java.rule.AbstractLombokAwareRule.defaultSuppressionAnnotations()",3,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer.defaultFileExtension()",3,1,0,5,0
"net.sourceforge.pmd.util.log.AntLogHandler.close()",3,1,0,5,0
"net.sourceforge.pmd.util.log.AntLogHandler.flush()",3,1,0,5,0
"net.sourceforge.pmd.testframework.RuleTst.runTestFromString(TestDescriptor test, Rule rule, Report report)",2,1,4,5,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule.isOK(String image)",2,1,3,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addNewPseudoPathElement(DefaultMutableTreeNode level, DataFlowNode ref)",2,1,2,5,2
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addNewPathElement(DefaultMutableTreeNode level)",2,1,2,5,1
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.hasInitializer(ASTVariableDeclaratorId node)",2,1,2,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.incChild()",2,1,2,5,0
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.addRefPseudoPathElement(DefaultMutableTreeNode level, PathElement ref)",2,1,1,5,2
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.populateType(TypeNode node, String className)",2,1,1,5,2
"net.sourceforge.pmd.testframework.RuleTst.extractTestsFromXml(Rule rule, String testsFileName)",2,1,1,5,2
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.hasArguments(ASTMethodDeclaration node)",2,1,1,5,1
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.ClassTypeResolver(ClassLoader classLoader)",2,1,1,5,1
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.addRuleViolation(RuleViolation violation)",2,1,1,5,1
"net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder.run()",2,1,1,5,0
"net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule.UseUtilityClassRule()",2,1,1,5,0
"net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule.init()",2,1,1,5,0
"net.sourceforge.pmd.lang.java.rule.performance.ConsecutiveLiteralAppendsRule.ConsecutiveLiteralAppendsRule()",2,1,1,5,0
"net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver.ClassTypeResolver()",2,1,1,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.getViolationCount()",2,1,1,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.hasViolations()",2,1,1,5,0
"net.sourceforge.pmd.testframework.RuleTst.getRules()",2,1,1,5,0
"net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader.PMDASMClassLoader(ClassLoader parent)",2,1,0,5,1
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinder.StatementAndBraceFinder(DataFlowHandler dataFlowHandler)",2,1,0,5,1
"net.sourceforge.pmd.util.log.AntLogHandler.AntLogHandler(Project project)",2,1,0,5,1
"net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule.getRestrictedPackages()",2,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.getClassName()",2,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.getPackageName()",2,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.getViolations()",2,1,0,5,0
"net.sourceforge.pmd.renderers.YAHTMLRenderer$ReportNode.incrementViolations()",2,1,0,5,0
"net.sourceforge.pmd.testframework.RuleTst.setUp()",2,1,0,5,0
"net.sourceforge.pmd.util.FileUtil.FileUtil()",1,1,0,5,0
"net.sourceforge.pmd.lang.vm.ast.NodeUtils.NodeUtils()",0,1,0,5,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.testRuleSet(String fileName)",56,1,26,4,1
"net.sourceforge.pmd.util.designer.Designer.makeTextComponentUndoable(JTextComponent textConponent)",37,1,10,4,1
"net.sourceforge.pmd.util.designer.Designer.saveSettings()",35,1,31,4,0
"net.sourceforge.pmd.RuleSetFactory.createDocumentBuilder()",35,1,9,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule.JUnitAssertionsShouldIncludeMessageRule()",22,1,11,4,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.init()",22,1,7,4,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParser.parseEcmascript(final String sourceCode, final List<ParseProblem> parseProblems)",21,1,13,4,2
"net.sourceforge.pmd.util.designer.Designer.createXPathQueryPanel()",20,1,14,4,0
"net.sourceforge.pmd.util.designer.Designer.createRuleXML()",20,1,13,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.foundAnyDML(final ApexNode<?> node)",19,1,12,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.isEscapingMethod(ASTMethodCallExpression methodNode)",18,1,15,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.createRuleSetReferenceId(final String ruleSetXml)",18,1,0,4,1
"net.sourceforge.pmd.util.designer.Designer.getXmlString(Node node)",17,1,6,4,1
"net.sourceforge.pmd.lang.java.rule.UselessAssignment.visit(ASTMethodDeclaration node, Object data)",17,1,4,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.addScope(Scope newScope, PLSQLNode node)",16,1,4,4,2
"net.sourceforge.pmd.PMD.newRuleContext(String sourceCodeFilename, File sourceCodeFile)",16,1,3,4,2
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.buildUsageText()",15,1,3,4,0
"net.sourceforge.pmd.RuleSetFactory.createRuleSets(String referenceString)",15,1,2,4,1
"net.sourceforge.pmd.RuleSetFactory.createRuleSetCopy(RuleSet original)",15,1,1,4,1
"net.sourceforge.pmd.util.StringUtil.toCamelCase(String name)",15,1,1,4,1
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.children()",15,1,0,4,0
"net.sourceforge.pmd.PMD.getApplicableFiles(PMDConfiguration configuration, Set<Language> languages)",14,1,2,4,2
"net.sourceforge.pmd.util.designer.Designer.createGoButton()",13,1,5,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.ClassScope()",13,1,3,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTEnumConstant node, Object data)",13,1,1,4,2
"net.sourceforge.pmd.util.StringUtil.isEmpty(String value)",13,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.visit(ASTMethodDeclaration methodDeclaration, Object data)",12,1,6,4,2
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.isIfJustReturnsBoolean(ASTIfStatement ifNode)",12,1,5,4,1
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.filterTypes(String variableType)",12,1,3,4,1
"net.sourceforge.pmd.util.designer.Designer$ShowListener.actionPerformed(ActionEvent ae)",12,1,3,4,1
"net.sourceforge.pmd.RuleSetFactory.createRuleSet(RuleSetReferenceId ruleSetReferenceId)",12,1,1,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.createLocalScope(PLSQLNode node)",12,1,1,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.createMethodScope(PLSQLNode node)",12,1,1,4,1
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.addSourceURIToCPD(String uri, CPD cpd)",11,1,10,4,2
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.isParentSignatureDeclaration(ASTName exception)",11,1,2,4,1
"net.sourceforge.pmd.util.StringUtil.isMissing(String value)",11,1,1,4,1
"net.sourceforge.pmd.RuleSetFactory.RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated)",11,1,0,4,2
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.SimpleTypedNameDeclaration(String typeImage, Class<?> type)",11,1,0,4,2
"net.sourceforge.pmd.RuleSetReferenceId.RuleSetReferenceId(final String id)",11,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.filterPrimitivesAndWrappers(String variableType)",10,1,10,4,1
"net.sourceforge.pmd.util.designer.Designer.createXPathResultPanel()",10,1,10,4,0
"net.sourceforge.pmd.util.designer.Designer.createCodeEditorPanel()",10,1,6,4,0
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.hasDeclaredExceptionInSignature(ASTName exception)",10,1,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.equals(Object obj)",10,1,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$FullyQualifiedNameResolver.couldResolve(String name)",10,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.UnnecessaryModifierRule()",9,1,8,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.MethodCall(ASTPrimaryExpression expression, ASTPrimaryPrefix prefix)",9,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.MethodCall(ASTPrimaryExpression expression, ASTPrimarySuffix suffix)",9,1,3,4,2
"net.sourceforge.pmd.util.StringUtil.isNotEmpty(String value)",9,1,1,4,1
"net.sourceforge.pmd.PMD.PMD(PMDConfiguration configuration)",9,1,0,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.TccMetric.maxMethodPairs(int methods)",9,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$AbstractResolver.AbstractResolver(final PMDASMClassLoader pmdClassLoader)",9,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$Resolver.couldResolve(String name)",9,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$Resolver.resolve(String name)",9,1,0,4,1
"net.sourceforge.pmd.PMD.getConfiguration()",9,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor.isMainMethod(MethodNode node)",8,1,14,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.buildResolvers()",8,1,7,4,0
"net.sourceforge.pmd.lang.java.metrics.impl.TccMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",8,1,4,4,2
"net.sourceforge.pmd.PMD.main(String[] args)",8,1,1,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.addImport(String importString)",8,1,1,4,1
"net.sourceforge.pmd.RuleSetFactory.RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority, final boolean warnDeprecated, final boolean enableCompatibility)",8,1,0,4,4
"net.sourceforge.pmd.cpd.CPDConfiguration.setRenderer(Renderer renderer)",8,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$FullyQualifiedNameResolver.FullyQualifiedNameResolver(PMDASMClassLoader pmdClassLoader)",8,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImplicitImportResolver.ImplicitImportResolver(PMDASMClassLoader pmdClassLoader)",8,1,0,4,1
"net.sourceforge.pmd.RuleSetFactory.getCompatibilityFilter()",8,1,0,4,0
"net.sourceforge.pmd.RuleSetReferenceId.getRuleSetFileName()",8,1,0,4,0
"net.sourceforge.pmd.RuleSetReferenceId.isAllRules()",8,1,0,4,0
"net.sourceforge.pmd.RuleSetReferenceId.isExternal()",8,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.maxNumberOfViolationsReached()",8,1,0,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.hasAuxclasspath()",8,1,0,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isMethodName(final ASTMethodCallExpression methodNode, final String className, final String methodName)",7,1,11,4,3
"net.sourceforge.pmd.util.designer.Designer.createASTPanel()",7,1,6,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTEnumDeclaration node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTPackageBody node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTPackageSpecification node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTTriggerTimingPointSection node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTTriggerUnit node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTTypeSpecification node, Object data)",7,1,5,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTCompilationUnit node, Object data)",7,1,4,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.getUninstantiatedVariables(List<Bound> bounds)",7,1,4,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.overriddenMethods(Class<?> exploredType)",7,1,3,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ImplicitImportResolver.couldResolve(String name)",7,1,3,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule.isStringTypeOrNull(ASTExpression node)",7,1,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$AbstractResolver.couldResolve(final String name)",7,1,2,4,1
"net.sourceforge.pmd.PMD.getSourceCodeProcessor()",7,1,0,4,0
"net.sourceforge.pmd.RuleSetReferenceId.getRuleName()",7,1,0,4,0
"net.sourceforge.pmd.cache.AbstractAnalysisCache.AbstractAnalysisCache()",7,1,0,4,0
"net.sourceforge.pmd.util.StringUtil.getEmptyStrings()",7,1,0,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(final ASTField variable)",6,1,9,4,1
"net.sourceforge.pmd.util.designer.Designer.getCompilationUnit(LanguageVersionHandler languageVersionHandler, String code)",6,1,8,4,2
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTBulkCollectIntoClause node, Object data)",6,1,7,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTVariableOrConstantDeclaratorId node, Object data)",6,1,4,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.validateAgainstSchema(InputStream inputStream)",6,1,4,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor.visit(UsageGraph usageGraph, Object data)",6,1,3,4,2
"net.sourceforge.pmd.util.designer.Designer.createNoImageTreeCellRenderer()",6,1,3,4,0
"net.sourceforge.pmd.util.database.DBType.DBType(String dbType)",6,1,1,4,1
"net.sourceforge.pmd.coverage.PMDCoverageTest.testPmdOptions()",6,1,1,4,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.start()",6,1,1,4,0
"net.sourceforge.pmd.PMD.PMD()",6,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getRenderer()",6,1,0,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(final ASTVariableDeclaration variable)",5,1,9,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getVariableType(final ASTField variable)",5,1,9,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(final ASTFieldDeclaration variable)",5,1,8,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(final ASTNewKeyValueObjectExpression variable)",5,1,8,4,1
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTSelectList node, Object data)",5,1,5,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.foundAnySOQLorSOSL(final ApexNode<?> node)",5,1,4,4,1
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.inLoopOrTry(Node node)",5,1,4,4,1
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.label()",5,1,4,4,0
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTCatchStatement node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTConditionalExpression node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTDoStatement node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTForStatement node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTIfStatement node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.visit(ASTWhileStatement node, Object data)",5,1,3,4,2
"net.sourceforge.pmd.cache.AbstractAnalysisCache.ruleViolationAdded(final RuleViolation ruleViolation)",5,1,3,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.AvoidUsingHardCodedIPRule()",5,1,3,4,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTAssignmentExpression node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTFieldDeclaration node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTMethodCallExpression node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.visit(ASTVariableDeclaration node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTCatchStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTConditionalExpression node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTDoStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTForStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTIfStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTThrowStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloBaseVisitor.visit(ASTWhileStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.isForUpdateSimpleEnough(ASTForUpdate update, String itName)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTBlock node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTForAllStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTForStatement node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTInput node, Object data)",5,1,2,4,2
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.toString()",5,1,1,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.TypeSet()",5,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$Assignment.Assignment(int line, boolean allocation, boolean iterator, boolean forLoop)",5,1,0,4,4
"net.sourceforge.pmd.lang.dfa.Linker.Linker(DataFlowHandler dataFlowHandler, List<StackObject> braceStack, List<StackObject> continueBreakReturnStack)",5,1,0,4,3
"net.sourceforge.pmd.util.database.DBType.getCharacterSet()",5,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getDriverClass()",5,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getLanguages()",5,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getPropertiesSource()",5,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getSourceCodeReturnType()",5,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getSourceCodeTypes()",5,1,0,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(ASTParameter p)",4,1,7,4,1
"net.sourceforge.pmd.lang.apex.rule.security.Helper.getFQVariableName(Parameter p)",4,1,7,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.log(String prefix, SAXParseException e)",4,1,4,4,2
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTFromClause node, Object data)",4,1,4,4,2
"net.sourceforge.pmd.cpd.CPDConfiguration.getRenderers()",4,1,4,4,0
"net.sourceforge.pmd.util.designer.Designer.loadASTTreeData(TreeNode rootNode)",4,1,3,4,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule.ApexSOQLInjectionRule()",4,1,3,4,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule.ApexXSSFromEscapeFalseRule()",4,1,3,4,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule.ApexXSSFromURLParamRule()",4,1,3,4,0
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule.StdCyclomaticComplexityRule()",4,1,3,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.LineLengthRule.LineLengthRule()",4,1,3,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getToolTipText()",4,1,3,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule.visit(ASTCompilationUnit node, Object data)",4,1,2,4,2
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTFormalParameter node, Object data)",4,1,2,4,2
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.visit(ASTLocalVariableDeclaration node, Object data)",4,1,2,4,2
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.visit(ASTInput node, Object data)",4,1,2,4,2
"net.sourceforge.pmd.lang.vm.rule.design.CollapsibleIfStatementsRule.visit(final ASTIfStatement node, final Object data)",4,1,2,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.ValidateDefaultHandler()",4,1,2,4,0
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.visit(ASTCompilationUnit node, Object o)",4,1,1,4,2
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.visit(ASTObjectDeclaration node, Object data)",4,1,1,4,2
"net.sourceforge.pmd.cpd.CPDConfiguration.setEncoding(String encoding)",4,1,1,4,1
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations.Combinations(List<Variable> permuteThis)",4,1,1,4,1
"net.sourceforge.pmd.lang.dfa.report.ReportTree$TreeIterator.hasNext()",4,1,1,4,0
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.SimpleTypedNameDeclaration(String typeImage, Class<?> type, SimpleTypedNameDeclaration next)",4,1,0,4,3
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.MyMethodVisitor(PrintVisitor parent, MemberNode usingMemberNode)",4,1,0,4,2
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.DOMLineNumbers(Document document, String xmlString)",4,1,0,4,2
"net.sourceforge.pmd.cache.AbstractAnalysisCache.cacheExists()",4,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$Assignment.toString()",4,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.hasOneBlockStmt(Node node)",3,1,6,4,1
"net.sourceforge.pmd.util.designer.Designer.getDefaultLanguageVersionSelectionIndex()",3,1,5,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.isMatch(Node node)",3,1,4,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.hasRealPrefix(ASTPrimaryExpression expr)",3,1,3,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.ClassScope(String className)",3,1,3,4,1
"net.sourceforge.pmd.util.designer.Designer$TreeWidget.expandAll(boolean expand)",3,1,3,4,1
"net.sourceforge.pmd.ant.Formatter.validRendererCodes()",3,1,3,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.reportUnnecessaryModifiers(Object data, Node node, Modifier unnecessaryModifier, String explanation)",3,1,2,4,4
"net.sourceforge.pmd.cache.AbstractAnalysisCache.analysisFailed(final File sourceFile)",3,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.isNotEquals(Node node)",3,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.isUnaryNot(Node node)",3,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.findAllConstructors(ASTClassOrInterfaceDeclaration node)",3,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.inAnonymousInnerClass(Node node)",3,1,2,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$CurrentPackageResolver.couldResolve(String name)",3,1,2,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ScopeAndDeclarationFinder.cont(PLSQLNode node)",3,1,2,4,1
"net.sourceforge.pmd.lang.vm.rule.design.CollapsibleIfStatementsRule.hasElseOrElseIf(final Node parentIfNode)",3,1,2,4,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotation.getImage()",3,1,2,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.toString()",3,1,2,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isNotBuilder()",3,1,2,4,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule.DataflowAnomalyAnalysisRule()",3,1,2,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.AvoidTabCharacterRule.AvoidTabCharacterRule()",3,1,2,4,0
"net.sourceforge.pmd.util.designer.CodeEditorTextPane.getLines()",3,1,2,4,0
"net.sourceforge.pmd.util.designer.Designer.createSymbolTableResultPanel()",3,1,2,4,0
"net.sourceforge.pmd.util.designer.Designer.getCompilationUnit()",3,1,2,4,0
"net.sourceforge.pmd.util.designer.Designer.getLanguageVersionHandler()",3,1,2,4,0
"net.sourceforge.pmd.RuleSetFactory.createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)",3,1,1,4,2
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotation.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,4,2
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.MoreThanOneLoggerRule.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.MoreThanOneLoggerRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.MoreThanOneLoggerRule.visit(ASTEnumDeclaration node, Object data)",3,1,1,4,2
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.error(SAXParseException e)",3,1,1,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.fatalError(SAXParseException e)",3,1,1,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.warning(SAXParseException e)",3,1,1,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.loadRuleSetByFileName(String ruleSetFileName)",3,1,1,4,1
"net.sourceforge.pmd.RuleSetReferenceId.isFullRuleSetName(String name)",3,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.analyze(ASTPrimarySuffix suffix)",3,1,1,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$ExplicitImportResolver.couldResolve(final String name)",3,1,1,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$PrimitiveTypeResolver.couldResolve(String name)",3,1,1,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet$VoidResolver.couldResolve(String name)",3,1,1,4,1
"net.sourceforge.pmd.util.designer.Designer$TreeWidget.TreeWidget(Object[] items)",3,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.UselessAssignment$Usage.toString()",3,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.ConfusingTernaryRule()",3,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule$Usage.toString()",3,1,1,4,0
"net.sourceforge.pmd.util.database.DBType.toString()",3,1,1,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getChildCount()",3,1,1,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.isLeaf()",3,1,1,4,0
"net.sourceforge.pmd.dcd.graph.ConstructorNode.ConstructorNode(ClassNode classNode, String name, String desc)",3,1,0,4,3
"net.sourceforge.pmd.dcd.graph.MethodNode.MethodNode(ClassNode classNode, String name, String desc)",3,1,0,4,3
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.Status(NodeType type, boolean lastStep)",3,1,0,4,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.visit(ASTConstructorDeclaration node, Object data)",3,1,0,4,2
"net.sourceforge.pmd.lang.java.rule.UselessAssignment$Usage.Usage(int accessType, DataFlowNode node)",3,1,0,4,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule$AssertionCall.AssertionCall(String assertionName, int argumentsCount)",3,1,0,4,2
"net.sourceforge.pmd.lang.java.rule.errorprone.DataflowAnomalyAnalysisRule$Usage.Usage(int accessType, DataFlowNode node)",3,1,0,4,2
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Sides.Sides(Side first, Side second)",3,1,0,4,2
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.ASTTreeNode(ASTTreeNode parent, Node theNode)",3,1,0,4,2
"net.sourceforge.pmd.util.designer.Designer.lostOwnership(Clipboard clipboard, Transferable contents)",3,1,0,4,2
"net.sourceforge.pmd.cache.AbstractAnalysisCache.metricAdded(final Metric metric)",3,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setCPDRenderer(CPDRenderer renderer)",3,1,0,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.UsageGraphBuilder(Filter<String> classFilter)",3,1,0,4,1
"net.sourceforge.pmd.lang.dfa.SequenceChecker.SequenceChecker(List<StackObject> bracesList)",3,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$Assignment.compareTo(Assignment o)",3,1,0,4,1
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.getChildAt(int childIndex)",3,1,0,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.resetValid()",3,1,0,4,0
"net.sourceforge.pmd.ant.Formatter.toString()",3,1,0,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.MyClassVisitor()",3,1,0,4,0
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.toString()",3,1,0,4,0
"net.sourceforge.pmd.lang.dfa.report.ReportTree$TreeIterator.remove()",3,1,0,4,0
"net.sourceforge.pmd.lang.dfa.report.ReportTree.iterator()",3,1,0,4,0
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.getType()",3,1,0,4,0
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclaration.getTypeImage()",3,1,0,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations$CombinationsIterator.hasNext()",3,1,0,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations$CombinationsIterator.remove()",3,1,0,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations.iterator()",3,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getProperties()",3,1,0,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getAllowsChildren()",3,1,0,4,0
"net.sourceforge.pmd.util.designer.Designer$ASTTreeNode.getParent()",3,1,0,4,0
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.getAllowsChildren()",3,1,0,4,0
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.getParent()",3,1,0,4,0
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.isLeaf()",3,1,0,4,0
"net.sourceforge.pmd.RuleSetFactory.isElementNode(Node node, String name)",2,1,3,4,2
"net.sourceforge.pmd.cpd.MatchAlgorithm.tokenAt(int offset, TokenEntry m)",2,1,2,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.ignore(String description, ClassNode classNode)",2,1,2,4,2
"net.sourceforge.pmd.dcd.UsageNodeVisitor.ignore(String description, MemberNode memberNode)",2,1,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isMethodName(final ASTMethodCallExpression m, final String methodName)",2,1,2,4,2
"net.sourceforge.pmd.lang.apex.rule.security.Helper.isMethodName(final MethodCallExpression m, final String methodName)",2,1,2,4,2
"net.sourceforge.pmd.cache.AbstractAnalysisCache.isClassPathWildcard(String entry)",2,1,2,4,1
"net.sourceforge.pmd.cpd.AbstractTokenizer.ignoreCharacter(char tok)",2,1,2,4,1
"net.sourceforge.pmd.cpd.AbstractTokenizer.isString(char tok)",2,1,2,4,1
"net.sourceforge.pmd.cpd.ApexTokenizer.setProperties(Properties properties)",2,1,2,4,1
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.setStatusCode(int statusCode)",2,1,2,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.sourceCodeFor(File file)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule.isSafeVarargs(final ASTMethodDeclaration node)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule.initializedWhenDeclared(VariableNameDeclaration field)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isForLoop(ASTVariableDeclarator declarator)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.PositionalIteratorRule.getVariableName(String exprName)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.isJUnitTest(Class<?> clazz)",2,1,2,4,1
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.terminatesInBooleanLiteral(Node node)",2,1,2,4,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.clipClassName(String s)",2,1,2,4,1
"net.sourceforge.pmd.util.designer.Designer.getCompilationUnit(LanguageVersionHandler languageVersionHandler)",2,1,2,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.AbstractRuleSetFactoryTest()",2,1,2,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotation.isResolved()",2,1,2,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isBoolean()",2,1,2,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.hasChosenAddressTypes()",2,1,2,4,0
"net.sourceforge.pmd.util.designer.Designer.getLanguageVersion()",2,1,2,4,0
"net.sourceforge.pmd.AbstractRuleSetFactoryTest.loadResourceAsStream(String resource)",2,1,1,4,1
"net.sourceforge.pmd.ant.Formatter.addConfiguredParam(Parameter parameter)",2,1,1,4,1
"net.sourceforge.pmd.cpd.AbstractTokenizer.isIgnorableString(String token)",2,1,1,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.getLanguageFromString(String languageString)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.println(String s)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyClassVisitor.printlnIndent(String s)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.println(String s)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder$MyMethodVisitor.printlnIndent(String s)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.getClassName(String name)",2,1,1,4,1
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.getResourceName(String name)",2,1,1,4,1
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.addStep(Status type)",2,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.isHexCharacter(char c)",2,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isNotAConstructorCall(ASTPrimaryExpression expression)",2,1,1,4,1
"net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule.isSimpleReturn(Node node)",2,1,1,4,1
"net.sourceforge.pmd.lang.vf.rule.security.VfCsrfRule.doesElContainIdentifiers(ASTElExpression value)",2,1,1,4,1
"net.sourceforge.pmd.util.designer.Designer.setCodeEditPaneText(String text)",2,1,1,4,1
"net.sourceforge.pmd.cpd.ApexTokenizer.ApexTokenizer()",2,1,1,4,0
"net.sourceforge.pmd.cpd.MatchAlgorithm.matches()",2,1,1,4,0
"net.sourceforge.pmd.dcd.graph.ConstructorNode.isInstanceInitializer()",2,1,1,4,0
"net.sourceforge.pmd.dcd.graph.ConstructorNode.isStaticInitializer()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.getLiteralType()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isDecimal()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isDouble()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isInteger()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isLong()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isNull()",2,1,1,4,0
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.isString()",2,1,1,4,0
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.hasMoreSteps()",2,1,1,4,0
"net.sourceforge.pmd.lang.ecmascript.rule.bestpractices.ConsistentReturnRule.ConsistentReturnRule()",2,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule.ForLoopCanBeForeachRule()",2,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule.CouplingBetweenObjectsRule()",2,1,1,4,0
"net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule.SignatureDeclareThrowsExceptionRule()",2,1,1,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.getImportsCount()",2,1,1,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Combinations$CombinationsIterator.CombinationsIterator()",2,1,1,4,0
"net.sourceforge.pmd.lang.plsql.rule.codestyle.CodeFormatRule.CodeFormatRule()",2,1,1,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.getClassDeclarations()",2,1,1,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.getMethodDeclarations()",2,1,1,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.getVariableDeclarations()",2,1,1,4,0
"net.sourceforge.pmd.lang.xml.ast.DOMLineNumbers.determine()",2,1,1,4,0
"net.sourceforge.pmd.util.designer.Designer$ExceptionNode.label()",2,1,1,4,0
"net.sourceforge.pmd.cpd.MatchAlgorithm.MatchAlgorithm(Map<String,SourceCode> sourceCode, Tokens tokens, int min)",2,1,0,4,3
"net.sourceforge.pmd.cpd.CPDConfiguration.sourceCodeFor(Reader reader, String sourceCodeName)",2,1,0,4,2
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.getNewMethodVisitor(PrintVisitor parent, MemberNode usingMemberNode)",2,1,0,4,2
"net.sourceforge.pmd.ant.Formatter.setShowSuppressed(boolean value)",2,1,0,4,1
"net.sourceforge.pmd.ant.Formatter.setToConsole(boolean toConsole)",2,1,0,4,1
"net.sourceforge.pmd.ant.Formatter.setToFile(File toFile)",2,1,0,4,1
"net.sourceforge.pmd.ant.Formatter.setType(String type)",2,1,0,4,1
"net.sourceforge.pmd.cpd.AbstractTokenizer.isComment(char tok)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setExcludes(List<File> excludes)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setFailOnViolation(boolean failOnViolation)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setFileListPath(String fileListPath)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setFiles(List<File> files)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setHelp(boolean help)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setIgnoreAnnotations(boolean ignoreAnnotations)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setIgnoreIdentifiers(boolean ignoreIdentifiers)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setIgnoreLiterals(boolean ignoreLiterals)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setIgnoreUsings(boolean ignoreUsings)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setLanguage(Language language)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setMinimumTileSize(int minimumTileSize)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setNoSkipBlocks(boolean noSkipBlocks)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setNonRecursive(boolean nonRecursive)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setRendererName(String rendererName)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setSkipBlocksPattern(String skipBlocksPattern)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setSkipDuplicates(boolean skipDuplicates)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setSkipLexicalErrors(boolean skipLexicalErrors)",2,1,0,4,1
"net.sourceforge.pmd.cpd.CPDConfiguration.setURI(String uri)",2,1,0,4,1
"net.sourceforge.pmd.cpd.MatchAlgorithm.setListener(CPDListener listener)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreClassAnonymous(boolean ignoreClassAnonymous)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreConstructorAllPrivate(boolean ignoreConstructorAllPrivate)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreConstructorSinglePrivateNoArg(boolean ignoreConstructorSinglePrivateNoArg)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreConstructorStaticInitializer(boolean ignoreConstructorStaticInitializer)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreFieldInlinable(boolean ignoreFieldInlinable)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreMethodAllOverride(boolean ignoreMethodAllOverride)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreMethodJavaLangObjectOverride(boolean ignoreMethodJavaLangObjectOverride)",2,1,0,4,1
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.setIgnoreMethodMain(boolean ignoreMethodMain)",2,1,0,4,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotation.ASTAnnotation(Annotation annotation)",2,1,0,4,1
"net.sourceforge.pmd.lang.apex.ast.ASTLiteralExpression.ASTLiteralExpression(LiteralExpression literalExpression)",2,1,0,4,1
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.Status(NodeType type)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.TccAttributeAccessCollector.TccAttributeAccessCollector(ASTAnyTypeDeclaration exploredClass)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule.isLatinDigit(char c)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule$AssertionCall.isException(ASTArguments node)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule$Entry.Entry(Node node)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule$Entry.bumpDecisionPoints(int size)",2,1,0,4,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.setASTCompilationUnitPackage(String pkg)",2,1,0,4,1
"net.sourceforge.pmd.util.designer.Designer.main(String[] args)",2,1,0,4,1
"net.sourceforge.pmd.AbstractRuleSetFactoryTest$ValidateDefaultHandler.isValid()",2,1,0,4,0
"net.sourceforge.pmd.RuleSetFactory.RuleSetFactory()",2,1,0,4,0
"net.sourceforge.pmd.ant.Formatter.getRenderer()",2,1,0,4,0
"net.sourceforge.pmd.ant.Formatter.isNoOutputSupplied()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getCPDRenderer()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getEncoding()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getExcludes()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getFileListPath()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getFiles()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getLanguage()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getMinimumTileSize()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getRendererName()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getSkipBlocksPattern()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.getURI()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isFailOnViolation()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isHelp()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isIgnoreAnnotations()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isIgnoreIdentifiers()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isIgnoreLiterals()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isIgnoreUsings()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isNoSkipBlocks()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isNonRecursive()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isSkipDuplicates()",2,1,0,4,0
"net.sourceforge.pmd.cpd.CPDConfiguration.isSkipLexicalErrors()",2,1,0,4,0
"net.sourceforge.pmd.cpd.MatchAlgorithm.getMinimumTileSize()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreClassAnonymous()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreConstructorAllPrivate()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreConstructorSinglePrivateNoArg()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreConstructorStaticInitializer()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreFieldInlinable()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreMethodAllOverride()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreMethodJavaLangObjectOverride()",2,1,0,4,0
"net.sourceforge.pmd.dcd.UsageNodeVisitor$Options.isIgnoreMethodMain()",2,1,0,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.getNewClassVisitor()",2,1,0,4,0
"net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.getUsageGraph()",2,1,0,4,0
"net.sourceforge.pmd.it.ZipFileExtractor.ZipFileExtractor()",2,1,0,4,0
"net.sourceforge.pmd.lang.apex.rule.security.Helper.Helper()",2,1,0,4,0
"net.sourceforge.pmd.lang.dfa.SequenceChecker$Status.isLastStep()",2,1,0,4,0
"net.sourceforge.pmd.lang.dfa.SequenceChecker.getFirstIndex()",2,1,0,4,0
"net.sourceforge.pmd.lang.dfa.SequenceChecker.getLastIndex()",2,1,0,4,0
"net.sourceforge.pmd.lang.dfa.report.ReportTree.getRootNode()",2,1,0,4,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParser.getSuppressMap()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.getExpression()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.getViolationReason()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule$MethodCall.isViolation()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityRule$Entry.bumpDecisionPoints()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.getASTCompilationUnitPackage()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSet.getExplicitImports()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver$Sides.copySwap()",2,1,0,4,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.TypeInferenceResolver.TypeInferenceResolver()",2,1,0,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.getClassName()",2,1,0,4,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassScope.getEnclosingClassScope()",2,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getDescription()",2,1,0,4,0
"net.sourceforge.pmd.util.database.DBType.getPropertyName()",2,1,0,4,0
"net.sourceforge.pmd.util.StringUtil.StringUtil()",1,1,0,4,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterface.CPDCommandLineInterface()",0,1,0,4,0
"net.sourceforge.pmd.renderers.RendererFactory.RendererFactory()",0,1,0,4,0
"net.sourceforge.pmd.cpd.GUI.tableModelFrom(final List<Match> items)",77,1,0,3,1
"net.sourceforge.pmd.cpd.GUI.GUI()",57,1,34,3,0
"net.sourceforge.pmd.util.database.DBMSMetadataTest.testGetSchemas()",46,1,34,3,0
"net.sourceforge.pmd.util.database.DBMSMetadataTest.testGetSourceCode()",41,1,18,3,0
"net.sourceforge.pmd.util.database.DBURI.DBURI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)",36,1,0,3,7
"net.sourceforge.pmd.cpd.XMLRendererTest.testRenderWithMultipleMatch()",30,1,22,3,0
"com.concurrent_ruby.ext.SynchronizationLibrary.load(Ruby runtime, boolean wrap)",27,1,9,3,2
"net.sourceforge.pmd.util.database.DBMSMetadataTest.testGetConnection()",22,1,16,3,0
"net.sourceforge.pmd.util.database.DBMSMetadataTest.testGetConnectionWithConnectionParameters()",21,1,16,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.insertAndDeleteVariousTokensShouldSucceed()",21,1,9,3,0
"net.sourceforge.pmd.SourceCodeProcessor.processSourceCode(InputStream sourceCode, RuleSets ruleSets, RuleContext ctx)",21,1,3,3,3
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.tagsIndicesIn(String comments)",20,1,2,3,1
"net.sourceforge.pmd.cpd.XMLRendererTest.testWithNoDuplication()",19,1,17,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.insertDeleteAndReplaceVariousTokensShouldSucceed()",18,1,11,3,0
"com.concurrent_ruby.ext.SynchronizationLibrary$JRuby.sleepInterruptibly(final ThreadContext context, IRubyObject receiver, final Block block)",18,1,3,3,3
"net.sourceforge.pmd.document.DocumentFileTest.insertDeleteAndReplaceVariousTokensShouldSucceed()",17,1,10,3,0
"net.sourceforge.pmd.document.DocumentFileTest.insertAndDeleteVariousTokensShouldSucceed()",17,1,8,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetThinDriverClass()",17,1,8,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.insertAndRemoveTokensShouldSucceed()",17,1,6,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.replaceATokenShouldSucceed()",17,1,6,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.VelocityCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize)",17,1,0,3,4
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testFindJavaDocTags()",16,1,13,3,0
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.orderedCommentsAndDeclarations(ASTCompilationUnit cUnit)",16,1,12,3,1
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.replaceVariousTokensShouldSucceed()",16,1,10,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetParameters()",16,1,6,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDefaultLanguagesList()",16,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDefaultSchemasList()",16,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDefaultSourceCodeNamesList()",16,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDefaultSourceCodeTypesList()",16,1,5,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getXPathNodeName()",16,1,3,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.split(String input, String regex)",16,1,1,3,2
"net.sourceforge.pmd.SourceCodeProcessor.processSource(Reader sourceCode, RuleSets ruleSets, RuleContext ctx)",15,1,12,3,3
"net.sourceforge.pmd.document.DocumentFileTest.replaceVariousTokensShouldSucceed()",15,1,9,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetParameters()",15,1,7,3,0
"net.sourceforge.pmd.document.DocumentFileTest.lineToOffsetMappingWithCarriageReturnFeedLineFeedShouldSucceed()",15,1,6,3,0
"net.sourceforge.pmd.document.DocumentFileTest.lineToOffsetMappingWithLineFeedShouldSucceed()",15,1,6,3,0
"net.sourceforge.pmd.document.DocumentFileTest.lineToOffsetMappingWithMixedLineSeparatorsShouldSucceed()",15,1,6,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.insertAtStartOfTheDocumentShouldSucceed()",15,1,5,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.removeTokenShouldSucceed()",15,1,5,3,0
"net.sourceforge.pmd.properties.CharacterMultiProperty.CharacterMultiProperty(String theName, String theDescription, Character[] defaultValues, float theUIOrder, char delimiter)",15,1,1,3,5
"net.sourceforge.pmd.cpd.GUI.createTimer()",15,1,1,3,0
"net.sourceforge.pmd.properties.CharacterMultiProperty.CharacterMultiProperty(String theName, String theDescription, List<Character> defaultValues, float theUIOrder, char delimiter)",15,1,0,3,5
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.LinguisticNamingRule()",14,1,13,3,0
"net.sourceforge.pmd.cpd.GUI.makeProgressPanel()",14,1,10,3,0
"net.sourceforge.pmd.cpd.XMLRendererTest.testRendererEncodedPath()",14,1,8,3,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.isAttributeAccessor(Method method)",14,1,6,3,1
"net.sourceforge.pmd.document.DocumentFileTest.insertAndRemoveTokensShouldSucceed()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testExplicitLanguagesList()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testExplicitSchemasList()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testExplicitSourceCodeNamesList()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testExplicitSourceCodeTypesList()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSchemasList()",14,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetDriverClass()",14,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSubnamePrefix()",14,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDefaultCharacterSet()",14,1,3,3,0
"net.sourceforge.pmd.util.FileFinder.findFilesFrom(File dir, FilenameFilter filter, boolean recurse)",14,1,1,3,3
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.getCanonicalImage(String image)",14,1,1,3,1
"net.sourceforge.pmd.renderers.VBHTMLRenderer.header()",13,1,19,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.VariableNamingConventionsRule()",13,1,12,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.init()",13,1,12,3,0
"net.sourceforge.pmd.document.DocumentFileTest.insertAtTheEndOfTheFileShouldSucceed()",13,1,5,3,0
"net.sourceforge.pmd.document.DocumentFileTest.insertVariousTokensIntoTheFileShouldSucceed()",13,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetLanguagesList()",13,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSourceCodeNamesList()",13,1,5,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSourceCodeTypesList()",13,1,5,3,0
"net.sourceforge.pmd.document.DocumentFileTest.removeTokenShouldSucceed()",13,1,4,3,0
"net.sourceforge.pmd.document.DocumentFileTest.replaceATokenShouldSucceed()",13,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetDbType()",13,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSubprotocol()",13,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetUri()",13,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetCharacterSet()",13,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSourceCodeType()",13,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSubnamePrefix()",13,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetSubprotocol()",13,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetUri()",13,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetDbType()",13,1,2,3,0
"net.sourceforge.pmd.util.database.DBURITest.testGetDbType2()",13,1,2,3,0
"net.sourceforge.pmd.cpd.GUI$GoListener.actionPerformed(ActionEvent e)",13,1,1,3,1
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getClassList()",13,1,1,3,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.init()",12,1,11,3,0
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.computeNow(Node node)",12,1,10,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.computeNow(Node node)",12,1,10,3,1
"net.sourceforge.pmd.ant.PMDTask.execute()",12,1,9,3,0
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.init()",12,1,9,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTForStatement node, Object data)",12,1,7,3,2
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInMultiLineNoAsteriskEmpty()",12,1,7,3,0
"net.sourceforge.pmd.document.DocumentFileTest.insertAtStartOfTheFileShouldSucceed()",12,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetLanguagesList()",12,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSchemasList()",12,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSourceCodeNamesList()",12,1,4,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSourceCodeTypesList()",12,1,4,3,0
"net.sourceforge.pmd.lang.java.ast.Comment.getFilteredComment()",12,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testDump()",12,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testExplicitCharacterSet()",12,1,3,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetCharacterSet()",12,1,2,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetDriverClass()",12,1,2,3,0
"net.sourceforge.pmd.util.database.DBURITest.testSetSourceCodeType()",12,1,2,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.make(E... elems)",12,1,1,3,1
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getBinaryName()",12,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getPackageList()",12,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.zip(ImmutableList<T> right)",12,1,0,3,1
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidHardcodingIdRule.validateChecksum(String literal)",11,1,9,3,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.suffixOrPrefixProperties()",11,1,8,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTCaseStatement node, Object data)",11,1,7,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTElsifClause node, Object data)",11,1,7,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTIfStatement node, Object data)",11,1,7,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTLoopStatement node, Object data)",11,1,7,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTWhileStatement node, Object data)",11,1,7,3,2
"net.sourceforge.pmd.cpd.GUI.makeResultsPanel()",11,1,7,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInMultiLine()",11,1,7,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInMultiLineCrLf()",11,1,7,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInMultiLineFormal()",11,1,7,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInMultiLineFormalCrLf()",11,1,7,3,0
"com.concurrent_ruby.ext.SynchronizationLibrary.loadUnsafe()",11,1,4,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getAsDocument()",11,1,4,3,0
"net.sourceforge.pmd.lang.java.rule.errorprone.CompareObjectsWithEqualsRule.isPartOfQualifiedName(Node node)",11,1,3,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.getComparisonTargets()",10,1,12,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$PrimitiveTypeResolver.PrimitiveTypeResolver()",10,1,8,3,0
"net.sourceforge.pmd.lang.java.rule.errorprone.CompareObjectsWithEqualsRule.isAllocation(Node n)",10,1,4,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.newRuleViolation(int endColumn, final String packageNameArg, final String classNameArg)",10,1,3,3,3
"net.sourceforge.pmd.benchmark.Benchmarker.mark(Benchmark type, long time, long count)",10,1,1,3,3
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.make()",10,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.emptyList()",10,1,0,3,0
"net.sourceforge.pmd.cpd.GUI.adjustLanguageControlsFor(LanguageConfig current)",9,1,14,3,1
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testTrimNotMiddle()",9,1,12,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testClass()",9,1,11,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testNestedClass()",9,1,11,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTInput node, Object data)",9,1,6,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTCaseWhenClause node, Object data)",9,1,5,3,2
"net.sourceforge.pmd.cpd.FileReporterTest.testReport()",9,1,5,3,0
"net.sourceforge.pmd.lang.jsp.rule.design.NoInlineStyleInformationRule.isStyleElement(ASTElement elementNode)",9,1,3,3,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isFunctionNodeName()",9,1,3,3,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isVariableDeclaration()",9,1,3,3,0
"net.sourceforge.pmd.cpd.CSVRenderer.render(Iterator<Match> matches)",9,1,2,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.getCanonicalImage()",9,1,2,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.hasDecendantOfAnyType(final Class<?>... types)",9,1,1,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.reset()",9,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.reset()",9,1,1,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.getWindowsExample()",9,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getTypeNode()",9,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.isTypeInferred()",9,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testMethodWithArguments()",8,1,11,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedNameTest.testSimpleMethod()",8,1,11,3,0
"net.sourceforge.pmd.cpd.FileReporterTest.testEmptyReport()",8,1,7,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.buildResolvers()",8,1,7,3,0
"net.sourceforge.pmd.cpd.GUI$AlignmentRenderer.getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)",8,1,5,3,6
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.isSharingPresent(ASTUserClass node)",8,1,4,3,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isFunctionCallName()",8,1,3,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.reInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)",8,1,1,3,4
"net.sourceforge.pmd.lang.LanguageFilenameFilter.LanguageFilenameFilter(Language language)",8,1,1,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.toString()",8,1,1,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.AbstractNode(final int id, final int theBeginLine, final int theEndLine, final int theBeginColumn, final int theEndColumn)",8,1,0,3,5
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.VelocityCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)",8,1,0,3,4
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.AbstractVmNode(final VmParser p, final int i)",8,1,0,3,2
"net.sourceforge.pmd.lang.LanguageFilenameFilter.LanguageFilenameFilter(Set<Language> languages)",8,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList.get(int i)",8,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList.prepend(E elem)",8,1,0,3,1
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.findOperations(T node)",8,1,0,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.AvoidDuplicateLiteralsRule()",7,1,6,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTExceptionHandler node, Object data)",7,1,5,3,2
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.addAMatch(Node node, Object data)",7,1,3,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath(final String xpathString)",7,1,3,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.main(String[] args)",7,1,2,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.checkAssignExceptIncrement(Object data, Set<String> loopVariables, ASTStatement loopBody, IgnoreFlags... ignoreFlags)",7,1,1,3,4
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.reInit(java.io.InputStream dstream, int startline, int startcolumn)",7,1,1,3,3
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.reInit(java.io.Reader dstream, int startline, int startcolumn)",7,1,1,3,3
"com.concurrent_ruby.ext.jsr166e.LongAdder.longValue()",7,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.longValue()",7,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.iterator()",7,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.isLocalClass()",7,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.isUnnamedPackage()",7,1,1,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.BeginToken()",7,1,1,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.VelocityCharStream(java.io.InputStream dstream, int startline, int startcolumn)",7,1,0,3,3
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.VelocityCharStream(java.io.Reader dstream, int startline, int startcolumn)",7,1,0,3,3
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.packageNameOf(T item)",7,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList.toList()",7,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getColumn()",7,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getLine()",7,1,0,3,0
"net.sourceforge.pmd.util.ClasspathClassLoader.toString()",6,1,11,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.hasTernaryNullCheck(ASTReturnStatement ret)",6,1,10,3,1
"net.sourceforge.pmd.SourceCodeProcessor.parse(RuleContext ctx, Reader sourceCode, Parser parser)",6,1,6,3,3
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testTrim()",6,1,6,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.visit(ASTLabeledStatement node, Object data)",6,1,5,3,2
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInSingleLine()",6,1,5,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInSingleLineFormal()",6,1,5,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testMultiLinesInSingleLineSimple()",6,1,5,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningParametersRule.visit(ASTConstructorDeclaration node, Object data)",6,1,4,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningParametersRule.visit(ASTMethodDeclarator node, Object data)",6,1,4,3,2
"net.sourceforge.pmd.renderers.CodeClimateRenderer.cleaned(String original)",6,1,4,3,1
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidHardcodingIdRule.AvoidHardcodingIdRule()",6,1,4,3,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule.ApexDangerousMethodsRule()",6,1,4,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.register(Class<T> nodeType, Class<? extends AbstractApexNode<T>> nodeAdapterType)",6,1,3,3,2
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.structurallyEquals(JavaQualifiedName qname)",6,1,3,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.isNewThrowable(ASTPrimaryExpression last)",6,1,3,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getTemporaryDirectory(String prefix)",6,1,3,3,1
"net.sourceforge.pmd.util.FileIterable.FileIterable(File file)",6,1,3,3,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.getAnnotationName()",6,1,3,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.isAnonymousClass()",6,1,3,3,0
"net.sourceforge.pmd.cpd.XMLRendererTest.createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code)",6,1,2,3,5
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTPackageSpecification node, Object data)",6,1,2,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTTypeSpecification node, Object data)",6,1,2,3,2
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.PackagedPropertyModule(String[] legalPackageNames, List<T> defaults)",6,1,2,3,2
"com.concurrent_ruby.ext.jsr166e.LongAdder.readObject(ObjectInputStream s)",6,1,2,3,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.readObject(ObjectInputStream s)",6,1,2,3,1
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getClass(String name)",6,1,2,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.toString()",6,1,2,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.toString()",6,1,2,3,0
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getConstructor(Class<?> type, String name, Class<?>... parameterTypes)",6,1,1,3,3
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getMethod(Class<?> type, String name, Class<?>... parameterTypes)",6,1,1,3,3
"net.sourceforge.pmd.dcd.ClassLoaderUtil.getField(Class<?> type, String name)",6,1,1,3,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.rule.performance.BooleanInstantiationRule.visit(ASTCompilationUnit decl, Object data)",6,1,1,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule.hasExit(ASTBlockStatement block)",6,1,1,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.toString(final String prefix)",6,1,1,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.doubleValue()",6,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.LongAdder.floatValue()",6,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.LongAdder.intValue()",6,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.doubleValue()",6,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.floatValue()",6,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.intValue()",6,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getClassSimpleName()",6,1,1,3,0
"net.sourceforge.pmd.properties.CharacterMultiProperty.named(String name)",6,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setURL(String jdbcURL)",6,1,0,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.getUnixExample()",6,1,0,3,0
"net.sourceforge.pmd.renderers.XMLRenderer.createVersionAttr(StringBuilder buffer)",5,1,9,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule.privateAndNotExcluded(NameDeclaration mnd)",5,1,7,3,1
"net.sourceforge.pmd.cpd.MatchCollector.addNewMatch(TokenEntry mark1, TokenEntry mark2, int dupes, Map<Integer,Match> matches)",5,1,5,3,4
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.ApexDocRule()",5,1,4,3,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule.ApexSuggestUsingNamedCredRule()",5,1,4,3,0
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.GenericClassCounterRule()",5,1,4,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testJavadocAfter()",5,1,3,3,0
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(Method node, AdditionalPassScope scope)",5,1,2,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(Property node, AdditionalPassScope scope)",5,1,2,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserClass node, AdditionalPassScope scope)",5,1,2,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserInterface node, AdditionalPassScope scope)",5,1,2,3,2
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.start(RuleContext ctx)",5,1,2,3,1
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testJavadocAfterOutOfBounds()",5,1,2,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode$NodeIterator.next()",5,1,2,3,0
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyLockableObject.rubySynchronize(ThreadContext context, Block block)",5,1,1,3,2
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.searchForAMatch(String matchType, Node node)",5,1,1,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.findDescendantsOfType(final Class<T> targetType)",5,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.newEquivClass(ASTCatchStatement stmt)",5,1,1,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.decrement()",5,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.LongAdder.increment()",5,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.decrement()",5,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.increment()",5,1,1,3,0
"net.sourceforge.pmd.cpd.FileReporterTest.testInvalidFile()",5,1,1,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getRenderer()",5,1,1,3,0
"net.sourceforge.pmd.cpd.GUI$ColumnSpec.ColumnSpec(String aLabel, int anAlignment, int aWidth, Comparator<Match> aSorter)",5,1,0,3,4
"net.sourceforge.pmd.lang.rule.ImportWrapper.ImportWrapper(String fullname, String name, Node node, boolean isStaticDemand)",5,1,0,3,4
"net.sourceforge.pmd.cpd.JavaTokenizer$ConstructorDetector.ConstructorDetector(boolean ignoreIdentifiers)",5,1,0,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.AbstractVmNode(final int i)",5,1,0,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.setFirstToken(final Token t)",5,1,0,3,1
"net.sourceforge.pmd.util.filter.FileExtensionFilter.FileExtensionFilter(String... extensions)",5,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.Nil()",5,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.head()",5,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.iterator()",5,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.tail()",5,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.Done()",5,1,0,3,0
"net.sourceforge.pmd.lang.xpath.Initializer.initialize()",5,1,0,3,0
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.itemTypeName()",5,1,0,3,0
"net.sourceforge.pmd.util.database.DBMSMetadataTest.DBMSMetadataTest()",5,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getURL()",5,1,0,3,0
"net.sourceforge.pmd.cpd.JavaTokenizer.setProperties(Properties properties)",4,1,6,3,1
"net.sourceforge.pmd.lang.cpp.CppCharStream.GetSuffix(int len)",4,1,5,3,1
"net.sourceforge.pmd.SourceCodeProcessor.resolveQualifiedNames(Node rootNode, LanguageVersionHandler handler)",4,1,4,3,2
"net.sourceforge.pmd.SourceCodeProcessor.symbolFacade(Node rootNode, LanguageVersionHandler languageVersionHandler)",4,1,4,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.getImage()",4,1,4,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.getImage()",4,1,4,3,0
"net.sourceforge.pmd.cpd.GUI.addedFile(int fileCount, File file)",4,1,3,3,2
"com.concurrent_ruby.ext.jsr166e.LongAdder.writeObject(java.io.ObjectOutputStream s)",4,1,3,3,1
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.writeObject(java.io.ObjectOutputStream s)",4,1,3,3,1
"net.sourceforge.pmd.cpd.GUI.setProgressControls(boolean isRunning)",4,1,3,3,1
"net.sourceforge.pmd.document.DocumentFileTest.writeContentToTemporaryFile(final String content)",4,1,3,3,1
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.ApexInsecureEndpointRule()",4,1,3,3,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule.ApexSharingViolationsRule()",4,1,3,3,0
"net.sourceforge.pmd.lang.cpp.CppCharStream.GetImage()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testFindJavaDocTagsEmpty()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testFindJavaDocTagsNull()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testTrimEmpty()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testTrimNull()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testWordAfter()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule.AvoidReassigningLoopVariablesRule()",4,1,3,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldDeclarationsShouldBeAtStartOfClassRule.FieldDeclarationsShouldBeAtStartOfClassRule()",4,1,3,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.CyclomaticComplexityRule()",4,1,3,3,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.visit(ASTUserClass node, Object data)",4,1,2,3,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.visit(ASTUserInterface node, Object data)",4,1,2,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.CheckResultSetRule.visit(ASTMethodDeclaration node, Object data)",4,1,2,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.visit(ASTCompilationUnit unit, Object data)",4,1,2,3,2
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.visit(ASTCompilationUnit node, Object data)",4,1,2,3,2
"net.sourceforge.pmd.lang.java.rule.design.GenericClassCounterRule.visit(ASTCompilationUnit node, Object data)",4,1,2,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,2,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.supportedVersions()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.getDeclarations()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getArrayDepth()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testJavadocAfterNull()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testWordAfterNull()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.CommentUtilTest.testWordAfterPositionOutOfBounds()",4,1,2,3,0
"net.sourceforge.pmd.lang.java.xpath.GetCommentOnFunction.registerSelfInSimpleContext()",4,1,2,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.findDescendantsOfType(final Class<T> targetType, final List<T> results, final boolean crossBoundaries)",4,1,1,3,3
"net.sourceforge.pmd.lang.xml.rule.XmlRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",4,1,1,3,3
"net.sourceforge.pmd.cpd.JavaTokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.visit(ASTUserClass node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule.visit(ASTUserInterface node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.visit(ASTAssignmentExpression node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.visit(ASTFieldDeclaration node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.visit(ASTMethodCallExpression node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule.visit(ASTVariableDeclaration node, Object data)",4,1,1,3,2
"net.sourceforge.pmd.lang.ast.AbstractNode.findDescendantsOfType(final Class<T> targetType, final boolean crossBoundaries)",4,1,1,3,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.visit(ASTConstructorDeclaration node, Object data)",4,1,1,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyLockableObject.nsBroadcast(ThreadContext context)",4,1,1,3,1
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyLockableObject.nsSignal(ThreadContext context)",4,1,1,3,1
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.writeContentToTemporaryFile(final String content)",4,1,1,3,1
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.ApexTreeBuilder(String sourceCode)",4,1,1,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.findChildNodesWithXPath(final String xpathString)",4,1,1,3,1
"net.sourceforge.pmd.lang.java.ast.Comment.Comment(Token t)",4,1,1,3,1
"net.sourceforge.pmd.lang.vm.rule.bestpractices.UnusedMacroParameterRule.formatNameVariations(final String param)",4,1,1,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$ConstructorDetector.pushTypeDeclaration()",4,1,1,3,0
"net.sourceforge.pmd.cpd.MatchCollector.getMatches()",4,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.isArray()",4,1,1,3,0
"net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule$ApexDocComment.ApexDocComment(boolean hasDescription, boolean hasReturn, List<String> params)",4,1,0,3,3
"net.sourceforge.pmd.cpd.GUI.main(String[] args)",4,1,0,3,1
"com.concurrent_ruby.ext.jsr166e.LongAdder.LongAdder()",4,1,0,3,0
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.LongAdder()",4,1,0,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.getWindowsLaunchCmd()",4,1,0,3,0
"net.sourceforge.pmd.cpd.FileReporterTest.testCreation()",4,1,0,3,0
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.isLanguageSpecificDiscarding()",4,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.isEmpty()",4,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.size()",4,1,0,3,0
"net.sourceforge.pmd.lang.java.rule.regex.RegexHelper.RegexHelper()",4,1,0,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.hasPrefix(String name, String prefix)",3,1,6,3,2
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.isCommentBefore(FormalComment n1, Node n2)",3,1,6,3,2
"net.sourceforge.pmd.renderers.XMLRenderer.createTimestampAttr(StringBuilder buffer)",3,1,4,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.normalizeLineSeparators(String s)",3,1,4,3,1
"net.sourceforge.pmd.lang.java.rule.performance.StringToStringRule.isNotA(NameOccurrence qualifier, Class<? extends AbstractJavaNode> type)",3,1,3,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.contains(Object o)",3,1,3,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.getTypeOfPrimaryPrefix(ASTPrimarySuffix node)",3,1,3,3,1
"net.sourceforge.pmd.lang.java.rule.performance.InefficientStringBufferingRule.isPrimitiveType(ASTName name)",3,1,3,3,1
"net.sourceforge.pmd.util.ClasspathClassLoader.createURLFromPath(String path)",3,1,3,3,1
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test1()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test10()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test11()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test12()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test13()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test14()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test15()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test16()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test17()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test18()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test19()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test2()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test20()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test21()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test22()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test23()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test24()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test25()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test26()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test27()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test28()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test29()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test3()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test30()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test4()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test6()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test7()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test8()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.test9()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule.getLineReader()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScope.toString()",3,1,3,3,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.toString()",3,1,3,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.toString()",3,1,3,3,0
"net.sourceforge.pmd.renderers.VBHTMLRenderer.start()",3,1,3,3,0
"org.sonar.plugins.scala.language.Comment.hashCode()",3,1,3,3,0
"net.sourceforge.pmd.cpd.GUI.phaseUpdate(int phase)",3,1,2,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.hasImageEqualTo(final String image)",3,1,2,3,1
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator$MethodWrapper.MethodWrapper(Method m)",3,1,2,3,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.ASTName(Name name)",3,1,2,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.toArray(T[] a)",3,1,2,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.hasTypeThrowable(ASTPrimaryExpression last)",3,1,2,3,1
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.isVariable(String name)",3,1,2,3,1
"net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery.isSupportedVersion(String version)",3,1,2,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getImage()",3,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.getImage()",3,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.isFindBoundary()",3,1,2,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.toArray()",3,1,2,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule.GuardLogStatementRule()",3,1,2,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.defaultSuppressionAnnotations()",3,1,2,3,0
"net.sourceforge.pmd.lang.java.xpath.TypeOfFunction.registerSelfInSimpleContext()",3,1,2,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.LocalScope.toString()",3,1,2,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.toString()",3,1,2,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.setUp()",3,1,2,3,0
"net.sourceforge.pmd.util.FileIterable$FileIterator.remove()",3,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTField.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclarationStatements.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclaration.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(Annotation node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(AnnotationParameter node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(AnonymousClass node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ArrayLoadExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ArrayStoreExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(AssignmentExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BinaryExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BindExpressions node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BooleanExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BreakStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(BridgeMethodCreator node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(CastExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(CatchBlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ClassRefExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ContinueStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlDeleteStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlInsertStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlMergeStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlUndeleteStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlUpdateStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DmlUpsertStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(DoLoopStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ExpressionStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(Field node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(FieldDeclaration node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(FieldDeclarationStatements node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ForEachStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ForLoopStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(IfBlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(IfElseBlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(InstanceOfExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(JavaMethodCallExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(JavaVariableExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(LiteralExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(MapEntryNode node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(MethodCallExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ModifierNode node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewKeyValueObjectExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewListInitExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewListLiteralExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewMapInitExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewMapLiteralExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewObjectExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewSetInitExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(NewSetLiteralExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(PackageVersionExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(Parameter node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(PostfixExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(PrefixExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ReferenceExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ReturnStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(RunAsBlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(SoqlExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(SoslExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(StandardCondition node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(SuperMethodCallExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(SuperVariableExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(TernaryExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ThisMethodCallExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ThisVariableExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(ThrowStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(TriggerVariableExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(TryCatchFinallyBlockStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserClassMethods node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserEnum node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserExceptionMethods node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(UserTrigger node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(VariableDeclaration node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(VariableDeclarationStatements node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(VariableExpression node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder.visit(WhileLoopStatement node, AdditionalPassScope scope)",3,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,3,2
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,3,2
"org.sonar.plugins.scala.language.Comment.Comment(String content, CommentType type)",3,1,1,3,2
"net.sourceforge.pmd.cpd.GUI$CancelListener.actionPerformed(ActionEvent e)",3,1,1,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.getFirstDescendantOfType(final Class<T> descendantType)",3,1,1,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantOfType(final Class<T> type)",3,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule.appliesToClassName(String name)",3,1,1,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$CurrentPackageResolver.resolve(String name)",3,1,1,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$FullyQualifiedNameResolver.resolve(String name)",3,1,1,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$ImplicitImportResolver.resolve(String name)",3,1,1,3,1
"net.sourceforge.pmd.properties.CharacterMultiProperty.createFrom(String toParse)",3,1,1,3,1
"net.sourceforge.pmd.renderers.XMLRenderer.XMLRenderer(String encoding)",3,1,1,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getExpectedError(ConfigurationError error)",3,1,1,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getExpectedError(ProcessingError error)",3,1,1,3,1
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.newRuleViolation(int endColumn)",3,1,1,3,1
"net.sourceforge.pmd.cpd.SourceCode$FileCodeLoader.getFileName()",3,1,1,3,0
"net.sourceforge.pmd.document.DocumentFileTest.setUpTemporaryFiles()",3,1,1,3,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegionsWithDocumentFileTest.setUpTemporaryFiles()",3,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTField.getImage()",3,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getQualifiedName()",3,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getSignature()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.isFindBoundary()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.ast.Comment.toString()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.testLabelledBreakLockup()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.dfa.AcceptanceTest.testbook()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode$NodeIterator.hasNext()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.hashCode()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.iterator()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.toList()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.buildHashCode()",3,1,1,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule.defaultSuppressionAnnotations()",3,1,1,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getDescription()",3,1,1,3,0
"net.sourceforge.pmd.renderers.XMLRenderer.XMLRenderer()",3,1,1,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.cleanUp()",3,1,1,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getExpectedEmpty()",3,1,1,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getExpectedMultiple()",3,1,1,3,0
"net.sourceforge.pmd.util.database.DBURI.toString()",3,1,1,3,0
"com.concurrent_ruby.ext.jsr166e.LongAdder.fn(long v, long x)",3,1,0,3,2
"com.concurrent_ruby.ext.jsr166e.nounsafe.LongAdder.fn(long v, long x)",3,1,0,3,2
"net.sourceforge.pmd.cpd.CSVRenderer.CSVRenderer(char separatorChar, boolean lineCountPerFile)",3,1,0,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer$JavaTokenFilter.JavaTokenFilter(final TokenManager tokenManager, final boolean ignoreAnnotations)",3,1,0,3,2
"net.sourceforge.pmd.cpd.SourceCode$FileCodeLoader.FileCodeLoader(File file, String encoding)",3,1,0,3,2
"net.sourceforge.pmd.cpd.SourceCode$ReaderCodeLoader.ReaderCodeLoader(Reader code, String name)",3,1,0,3,2
"net.sourceforge.pmd.cpd.SourceCode$StringCodeLoader.StringCodeLoader(String code, String name)",3,1,0,3,2
"net.sourceforge.pmd.lang.apex.ast.ApexTreeBuilder$ApexDocTokenLocation.ApexDocTokenLocation(int index, String token)",3,1,0,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.add(int index, E element)",3,1,0,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.addAll(int index, Collection<? extends E> c)",3,1,0,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.set(int index, E element)",3,1,0,3,2
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.subList(int fromIndex, int toIndex)",3,1,0,3,2
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.AbstractPLSQLNode(PLSQLParser p, int i)",3,1,0,3,2
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule.visit(ASTConditionalOrExpression node, Object data)",3,1,0,3,2
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setLines(int theBeginLine, int theEndLine)",3,1,0,3,2
"net.sourceforge.pmd.cpd.JavaTokenizer.getTokenFilter(TokenManager tokenManager)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetChild(final int index)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtSetChildIndex(final int index)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtSetParent(final Node parent)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.setDataFlowNode(final DataFlowNode dataFlowNode)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.setImage(final String image)",3,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.setUserData(final Object userData)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.add(E e)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.addAll(Collection<? extends E> c)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.listIterator(int index)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.prepend(E elem)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.remove(Object o)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.remove(int index)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.removeAll(Collection<?> c)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.retainAll(Collection<?> c)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.contains(Object item)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.containsAll(Collection<?> c)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.get(int i)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.indexOf(Object o)",3,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.lastIndexOf(Object o)",3,1,0,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.setScope(Scope scope)",3,1,0,3,1
"net.sourceforge.pmd.cpd.SourceCode$ReaderCodeLoader.getFileName()",3,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$ReaderCodeLoader.getReader()",3,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$StringCodeLoader.getFileName()",3,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$StringCodeLoader.getReader()",3,1,0,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.getTypeKind()",3,1,0,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.getTypeKind()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getBeginLine()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getEndColumn()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getEndLine()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getImage()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getUserData()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.getXPathAttributesIterator()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.isFindBoundary()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtClose()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetChildIndex()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetId()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetParent()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtOpen()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.hasNext()",3,1,0,3,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.remove()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.clear()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$AbstractImmutableList.listIterator()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode$NodeIterator.remove()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.head()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.isEmpty()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.iterator()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.size()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode.tail()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.head()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.isEmpty()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.reverse()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.size()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.tail()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$Nil.toString()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList.reverse()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.getClassName()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.isClass()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName.isOperation()",3,1,0,3,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.getXPathNodeName()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.toString()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getBeginColumn()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getBeginLine()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getClassName()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getEndColumn()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getEndLine()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getFilename()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getMethodName()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getPackageName()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getRule()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.getVariableName()",3,1,0,3,0
"net.sourceforge.pmd.lang.rule.ParametricRuleViolation.isSuppressed()",3,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getXPathNodeName()",3,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getBeginColumn()",3,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getBeginLine()",3,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getEndColumn()",3,1,0,3,0
"net.sourceforge.pmd.lang.vm.util.VelocityCharStream.getEndLine()",3,1,0,3,0
"net.sourceforge.pmd.properties.CharacterMultiProperty$CharacterMultiPBuilder.build()",3,1,0,3,0
"net.sourceforge.pmd.properties.CharacterMultiProperty.type()",3,1,0,3,0
"net.sourceforge.pmd.renderers.CodeClimateRenderer.defaultFileExtension()",3,1,0,3,0
"net.sourceforge.pmd.renderers.VBHTMLRenderer.defaultFileExtension()",3,1,0,3,0
"net.sourceforge.pmd.renderers.XMLRenderer.defaultFileExtension()",3,1,0,3,0
"net.sourceforge.pmd.renderers.YAHTMLRendererTest.getExpected()",3,1,0,3,0
"net.sourceforge.pmd.util.FileIterable$FileIterator.hasNext()",3,1,0,3,0
"net.sourceforge.pmd.util.FileIterable.iterator()",3,1,0,3,0
"net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule.areEquivalent(ASTCatchStatement st1, ASTCatchStatement st2)",2,1,5,3,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.isSuppressWarnings()",2,1,4,3,0
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit3Method(ASTMethodDeclaration method)",2,1,3,3,1
"net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule.isBooleanType(ASTType node)",2,1,3,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTField.getType()",2,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.stripFloatValue()",2,1,3,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getDecl()",2,1,3,3,0
"org.sonar.plugins.scala.language.Comment.getNumberOfLines()",2,1,3,3,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.VariableNamingConventionsRule.normalizeVariableName(String varName, List<String> prefixes, List<String> suffixes)",2,1,2,3,3
"net.sourceforge.pmd.lang.java.rule.codestyle.VariableNamingConventionsRule.normalizeVariableName(String varName, List<String> prefixes, List<String> suffixes)",2,1,2,3,3
"net.sourceforge.pmd.cpd.MatchCollector.matchEnded(TokenEntry token1, TokenEntry token2)",2,1,2,3,2
"net.sourceforge.pmd.ant.PMDTask.setAuxClasspathRef(Reference r)",2,1,2,3,1
"net.sourceforge.pmd.ant.PMDTask.setClasspathRef(Reference r)",2,1,2,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.run(String[] args)",2,1,2,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.setStatusCode(int statusCode)",2,1,2,3,1
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator.isConsideredReturnType(Class<?> klass)",2,1,2,3,1
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit4Method(ASTMethodDeclaration method)",2,1,2,3,1
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit5Method(ASTMethodDeclaration method)",2,1,2,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.CompareObjectsWithEqualsRule.hasName(Node n)",2,1,2,3,1
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegister.closeTag(ASTElement z)",2,1,2,3,1
"net.sourceforge.pmd.lang.metrics.AbstractMetricsComputer.average(List<Double> values)",2,1,2,3,1
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegister.closeTag(ASTElement z)",2,1,2,3,1
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",2,1,2,3,1
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.packageNamesIn(Map<PropertyDescriptorField,String> params)",2,1,2,3,1
"net.sourceforge.pmd.cli.PMDCommandLineInterface.getExamples()",2,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTField.getName()",2,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getReturnType()",2,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.isConstructor()",2,1,2,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.getType()",2,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.isAnonymousInnerClass()",2,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.isEnumChild()",2,1,2,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.getArrayDimensionOnDeclaratorId()",2,1,2,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.getName()",2,1,2,3,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.tryToLog(NodeType type, Node node)",2,1,1,3,2
"net.sourceforge.pmd.util.ClasspathClassLoader.ClasspathClassLoader(List<File> files, ClassLoader parent)",2,1,1,3,2
"net.sourceforge.pmd.util.ClasspathClassLoader.ClasspathClassLoader(String classpath, ClassLoader parent)",2,1,1,3,2
"net.sourceforge.pmd.ant.PMDTask.addFileset(FileSet set)",2,1,1,3,1
"net.sourceforge.pmd.ant.PMDTask.addFormatter(Formatter f)",2,1,1,3,1
"net.sourceforge.pmd.ant.PMDTask.addRuleset(RuleSetWrapper r)",2,1,1,3,1
"net.sourceforge.pmd.cpd.GUI.languageConfigFor(String label)",2,1,1,3,1
"net.sourceforge.pmd.dcd.ClassLoaderUtil.fromInternalForm(String internalForm)",2,1,1,3,1
"net.sourceforge.pmd.dcd.ClassLoaderUtil.toInternalForm(String internalForm)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.dfa.VariableAccessVisitor.compute(ASTConstructorDeclaration node)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit4Class(ASTCompilationUnit node)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.AbstractJUnitRule.isJUnit5Class(ASTCompilationUnit node)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractSunSecureRule.hasTernaryCondition(ASTReturnStatement ret)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule.filteredCommentIn(Comment comment)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.performance.StringToStringRule.isNotAMethodReference(NameOccurrence qualifier)",2,1,1,3,1
"net.sourceforge.pmd.lang.java.rule.performance.StringToStringRule.isNotAName(NameOccurrence qualifier)",2,1,1,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.toString(String prefix)",2,1,1,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.compute(ASTTriggerTimingPointSection node)",2,1,1,3,1
"net.sourceforge.pmd.lang.plsql.dfa.VariableAccessVisitor.compute(ASTTriggerUnit node)",2,1,1,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.addImport(String importString)",2,1,1,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.reset()",2,1,1,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.buildUsageText()",2,1,1,3,0
"net.sourceforge.pmd.cpd.SourceCode.getCode()",2,1,1,3,0
"net.sourceforge.pmd.cpd.SourceCode.getFileName()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTField.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclarationStatements.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.getModifiers()",2,1,1,3,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.getIdentifier()",2,1,1,3,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isGlobalName()",2,1,1,3,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTName.isLocalName()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule.UnusedFormalParameterRule()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.rule.errorprone.InvalidSlf4jMessageFormatRule.InvalidSlf4jMessageFormatRule()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.rule.security.HardCodedCryptoKeyRule.HardCodedCryptoKeyRule()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.rule.security.InsecureCryptoIvRule.InsecureCryptoIvRule()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScope.getVariableDeclarations()",2,1,1,3,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.getVariableDeclarations()",2,1,1,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.LocalScope.getVariableDeclarations()",2,1,1,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.getVariableDeclarations()",2,1,1,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.getImportsCount()",2,1,1,3,0
"net.sourceforge.pmd.lang.xpath.Initializer.initializeGlobal()",2,1,1,3,0
"net.sourceforge.pmd.properties.modules.PackagedPropertyModule.legalPackageNames()",2,1,1,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.ImportWrapper(String fullname, String name, Node node)",2,1,0,3,3
"com.concurrent_ruby.ext.SynchronizationLibrary$AbstractLockableObject.AbstractLockableObject(Ruby runtime, RubyClass metaClass)",2,1,0,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRuby.JRuby(Ruby runtime, RubyClass metaClass)",2,1,0,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyLockableObject.JRubyLockableObject(Ruby runtime, RubyClass metaClass)",2,1,0,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$JRubyObject.JRubyObject(Ruby runtime, RubyClass metaClass)",2,1,0,3,2
"com.concurrent_ruby.ext.SynchronizationLibrary$Object.Object(Ruby runtime, RubyClass metaClass)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.ASTAnnotation(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.ASTClassOrInterfaceBodyDeclaration(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.ASTClassOrInterfaceDeclaration(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.ASTLiteral(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.ASTLocalVariableDeclaration(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration.ASTTypeDeclaration(JavaParser p, int id)",2,1,0,3,2
"net.sourceforge.pmd.lang.rule.ImportWrapper.ImportWrapper(String fullname, String name)",2,1,0,3,2
"net.sourceforge.pmd.SourceCodeProcessor.SourceCodeProcessor(PMDConfiguration configuration)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.addConfiguredSourceLanguage(SourceLanguage version)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setAuxClasspath(Path auxClasspath)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setCacheLocation(String cacheLocation)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setClasspath(Path classpath)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setEncoding(String sourceEncoding)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setFailOnError(boolean fail)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setFailOnRuleViolation(boolean fail)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setFailuresPropertyName(String failuresPropertyName)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setMinimumPriority(int minPriority)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setNoCache(boolean noCache)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setNoRuleSetCompatibility(boolean noRuleSetCompatibility)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setRuleSetFiles(String ruleSets)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setShortFilenames(boolean reportShortNames)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setSuppressMarker(String suppressMarker)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.setThreads(int threads)",2,1,0,3,1
"net.sourceforge.pmd.cpd.CSVRenderer.CSVRenderer(boolean lineCountPerFile)",2,1,0,3,1
"net.sourceforge.pmd.cpd.CSVRenderer.CSVRenderer(char separatorChar)",2,1,0,3,1
"net.sourceforge.pmd.cpd.GUI$AlignmentRenderer.AlignmentRenderer(int[] theAlignments)",2,1,0,3,1
"net.sourceforge.pmd.cpd.GUI$SaveListener.SaveListener(CPDRenderer theRenderer)",2,1,0,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer$TypeDeclaration.TypeDeclaration(int indentationLevel)",2,1,0,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer.setIgnoreAnnotations(boolean ignoreAnnotations)",2,1,0,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer.setIgnoreIdentifiers(boolean ignore)",2,1,0,3,1
"net.sourceforge.pmd.cpd.JavaTokenizer.setIgnoreLiterals(boolean ignore)",2,1,0,3,1
"net.sourceforge.pmd.cpd.MatchCollector.MatchCollector(MatchAlgorithm ma)",2,1,0,3,1
"net.sourceforge.pmd.cpd.SourceCode$ReaderCodeLoader.ReaderCodeLoader(Reader code)",2,1,0,3,1
"net.sourceforge.pmd.cpd.SourceCode$StringCodeLoader.StringCodeLoader(String code)",2,1,0,3,1
"net.sourceforge.pmd.cpd.SourceCode.SourceCode(CodeLoader cl)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTField.ASTField(Field field)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclarationStatements.ASTFieldDeclarationStatements(FieldDeclarationStatements fieldDeclarationStatements)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethod.ASTMethod(Method method)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTParameter.ASTParameter(Parameter parameter)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserClass.ASTUserClass(UserClass userClass)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterface.ASTUserInterface(UserInterface userInterface)",2,1,0,3,1
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclaration.ASTVariableDeclaration(VariableDeclaration variableDeclaration)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.AbstractNode(final int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtSetFirstToken(final GenericToken token)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtSetLastToken(final GenericToken token)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.testingOnlySetBeginColumn(final int i)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.testingOnlySetBeginLine(int i)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.testingOnlySetEndColumn(final int i)",2,1,0,3,1
"net.sourceforge.pmd.lang.ast.AbstractNode.testingOnlySetEndLine(final int i)",2,1,0,3,1
"net.sourceforge.pmd.lang.cpp.CppCharStream.CppCharStream(Reader dstream)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotation.ASTAnnotation(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBodyDeclaration.ASTClassOrInterfaceBodyDeclaration(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.ASTClassOrInterfaceDeclaration(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.ASTLiteral(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration.ASTLocalVariableDeclaration(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration.ASTTypeDeclaration(int id)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder.StatementAndBraceFinder(DataFlowHandler dataFlowHandler)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory$ListNode$NodeIterator.NodeIterator(ImmutableList<E> start)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule$ExceptionParser.ExceptionParser(char delimiter)",2,1,0,3,1
"net.sourceforge.pmd.lang.java.symboltable.MethodScope.MethodScope(Node node)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.AbstractPLSQLNode(int i)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.jjtSetValue(Object value)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule$Entry.Entry(Node node)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule$Entry.bumpDecisionPoints(int size)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.MethodScope(Node node)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$CurrentPackageResolver.CurrentPackageResolver(String pkg)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$ExplicitImportResolver.ExplicitImportResolver(Set<String> importStmts)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$ImportOnDemandResolver.ImportOnDemandResolver(Set<String> importStmts)",2,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.setASTinputPackage(String pkg)",2,1,0,3,1
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.setInfo(final int info)",2,1,0,3,1
"net.sourceforge.pmd.properties.CharacterMultiProperty$CharacterMultiPBuilder.CharacterMultiPBuilder(String name)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setCharacterSet(String characterSet)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setDbType(DBType dbType)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setDriverClass(String driverClass)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setLanguagesList(List<String> languagesList)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setParameters(Map<String,String> parameters)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSchemasList(List<String> schemasList)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSourceCodeNamesList(List<String> sourceCodeNamesList)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSourceCodeType(int sourceCodeType)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSourceCodeTypesList(List<String> sourceCodeTypesList)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSubnamePrefix(String subnamePrefix)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setSubprotocol(String subprotocol)",2,1,0,3,1
"net.sourceforge.pmd.util.database.DBURI.setUri(URI uri)",2,1,0,3,1
"net.sourceforge.pmd.ant.PMDTask.getAuxClasspath()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getCacheLocation()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getClasspath()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getEncoding()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getFailuresPropertyName()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getFilesets()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getFormatters()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getMaxRuleViolations()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getMinimumPriority()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getNestedRules()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getRulesetFiles()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getSourceLanguage()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getSuppressMarker()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.getThreads()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.isFailOnError()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.isFailOnRuleViolation()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.isNoCache()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.isNoRuleSetCompatibility()",2,1,0,3,0
"net.sourceforge.pmd.ant.PMDTask.isShortFilenames()",2,1,0,3,0
"net.sourceforge.pmd.benchmark.Benchmarker.values()",2,1,0,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.jarName()",2,1,0,3,0
"net.sourceforge.pmd.cpd.CSVRenderer.CSVRenderer()",2,1,0,3,0
"net.sourceforge.pmd.cpd.FileReporterTest.suite()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$ColumnSpec.alignment()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$ColumnSpec.label()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$ColumnSpec.width()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.canIgnoreAnnotations()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.canIgnoreIdentifiers()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.canIgnoreLiterals()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.canIgnoreUsings()",2,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$FileCodeLoader.getEncoding()",2,1,0,3,0
"net.sourceforge.pmd.cpd.XMLRendererTest.suite()",2,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.isSingleLine()",2,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetFirstToken()",2,1,0,3,0
"net.sourceforge.pmd.lang.ast.AbstractNode.jjtGetLastToken()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.isInterface()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration.setInterface()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isCharLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.isStringLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.setCharLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.setFloatLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.setIntLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteral.setStringLiteral()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.qname.ImmutableList$ListFactory.ListFactory()",2,1,0,3,0
"net.sourceforge.pmd.lang.java.symboltable.NameFinder.getNames()",2,1,0,3,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode.jjtGetValue()",2,1,0,3,0
"net.sourceforge.pmd.lang.plsql.rule.design.CyclomaticComplexityRule$Entry.bumpDecisionPoints()",2,1,0,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodScope.getEnclosingMethodScope()",2,1,0,3,0
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet.getASTinputPackage()",2,1,0,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.getFullName()",2,1,0,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.getName()",2,1,0,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.getNode()",2,1,0,3,0
"net.sourceforge.pmd.lang.rule.ImportWrapper.isStaticOnDemand()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getColumn()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getFirstToken()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getInfo()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getLastToken()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getLine()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getTemplateName()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.getType()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.isInvalid()",2,1,0,3,0
"net.sourceforge.pmd.lang.vm.ast.AbstractVmNode.setInvalid()",2,1,0,3,0
"net.sourceforge.pmd.renderers.CodeClimateRenderer.CodeClimateRenderer()",2,1,0,3,0
"net.sourceforge.pmd.renderers.VBHTMLRenderer.VBHTMLRenderer()",2,1,0,3,0
"net.sourceforge.pmd.renderers.VBHTMLRenderer.footer()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getCharacterSet()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getDbType()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getDriverClass()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getLanguagesList()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getParameters()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSchemasList()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSourceCodeNamesList()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSourceCodeType()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSourceCodeTypesList()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSubnamePrefix()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getSubprotocol()",2,1,0,3,0
"net.sourceforge.pmd.util.database.DBURI.getUri()",2,1,0,3,0
"org.sonar.plugins.scala.language.Comment.isDocComment()",2,1,0,3,0
"org.sonar.plugins.scala.language.Comment.isHeaderComment()",2,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$LanguageConfig.languageFor(Properties p)",0,1,0,3,1
"net.sourceforge.pmd.cpd.GUI$SortingTableModel.sort(Comparator<E> comparator)",0,1,0,3,1
"net.sourceforge.pmd.cpd.GUI$SortingTableModel.sortColumn(int column)",0,1,0,3,1
"net.sourceforge.pmd.cpd.GUI$SortingTableModel.sortDescending(boolean flag)",0,1,0,3,1
"net.sourceforge.pmd.lang.plsql.symboltable.TypeSet$Resolver.resolve(String name)",0,1,0,3,1
"net.sourceforge.pmd.benchmark.Benchmarker.Benchmarker()",0,1,0,3,0
"net.sourceforge.pmd.cli.PMDCommandLineInterface.PMDCommandLineInterface()",0,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$SortingTableModel.sortColumn()",0,1,0,3,0
"net.sourceforge.pmd.cpd.GUI$SortingTableModel.sortDescending()",0,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.getFileName()",0,1,0,3,0
"net.sourceforge.pmd.cpd.SourceCode$CodeLoader.getReader()",0,1,0,3,0
"net.sourceforge.pmd.dcd.ClassLoaderUtil.ClassLoaderUtil()",0,1,0,3,0
"net.sourceforge.pmd.lang.xpath.Initializer.Initializer()",0,1,0,3,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testLiterals()",147,1,216,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testBinaryNumericPromotion()",69,1,152,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testRawGenericFieldAccess()",69,1,111,2,0
"net.sourceforge.pmd.util.viewer.gui.MainFrame.init()",63,1,45,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testSimpleGenericFieldAccess()",58,1,75,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTLambdaExpression node, Object data)",58,1,6,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccessSuper()",54,1,84,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testExcludeAndImportTwice()",52,1,13,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testPrimarySimpleGenericFieldAccess()",50,1,65,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testExtendedReferences()",50,1,49,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility.RuleSetFactoryCompatibility()",50,1,34,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testLineNumbers()",46,1,56,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccessStatic()",43,1,51,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testContainsNoInner()",43,1,6,2,0
"ParserCornerCases17.binaryLiterals()",41,1,0,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodPotentialApplicability()",39,1,57,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testReferencePriority()",39,1,54,2,0
"net.sourceforge.pmd.cpd.CPDTask.execute()",37,1,27,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testBoundsGenericFieldAccess()",35,1,51,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodSecondPhase()",34,1,57,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testUnaryNumericOperators()",34,1,33,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testThisExpression()",33,1,53,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingNotNamespaceAware()",33,1,43,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingDoNotExpandEntities()",33,1,37,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccess()",32,1,42,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccessShadow()",31,1,39,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testDefaultParsingNamespaces()",30,1,43,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingWithValidation()",30,1,23,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccessNested()",29,1,39,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodStaticAccess()",29,1,39,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameFactory.ofString(String name)",29,1,1,2,1
"net.sourceforge.pmd.lang.xml.XmlParserTest.testDefaultParsing()",28,1,33,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingCoalescingEnabled()",28,1,29,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingIgnoreComments()",28,1,29,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testParsingIgnoreElementContentWhitespace()",27,1,25,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getType()",27,1,1,2,0
"net.sourceforge.pmd.lang.DummyLanguageModule$Handler.getParser(ParserOptions parserOptions)",27,1,0,2,1
"net.sourceforge.pmd.test.lang.DummyLanguageModule$Handler.getParser(ParserOptions parserOptions)",27,1,0,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testParameterGenericFieldAccess()",26,1,27,2,0
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest.testCachingOfNotFoundClasses()",26,1,6,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testBinaryLogicalOperators()",25,1,44,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAssignmentOperators()",25,1,41,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodThirdPhase()",25,1,39,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodInitialBounds()",25,1,30,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodFirstPhase()",25,1,27,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testJavaTypeDefinitionEquals()",25,1,16,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testArrayTypes()",25,1,15,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.assertLineNumbersForTestCode(ApexNode<Compilation> rootNode)",25,1,9,2,1
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testDiamondUsageJava8()",25,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testGenericArrays()",24,1,20,2,0
"com.cb4.common.utils.MapUtilsTest.testByKeyComparator()",24,1,6,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.deepCopyValuesTo(AbstractRule otherRule)",24,1,4,2,1
"net.sourceforge.pmd.util.filter.Filters.toNormalizedFileFilter(final Filter<String> filter)",24,1,0,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testRefTypeFieldDecl(Node declaration)",23,1,33,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodMostSpecific()",23,1,30,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodTypeInferenceVarargsAsFixedArity()",23,1,18,2,0
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.renderClass(ClassNode cnode)",23,1,10,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleReferenceWithNameOverridden()",23,1,9,2,0
"net.sourceforge.pmd.util.filter.Filters.fromStringFilter(final Filter<String> filter)",23,1,0,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testPrimitiveTypeFieldDecl(Node declaration)",22,1,33,2,1
"net.sourceforge.pmd.util.designer.DFAPanel.DFAPanel()",22,1,11,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testSuperExpression()",21,1,31,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testParseEmptyStatements()",21,1,15,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testReferenceType()",21,1,12,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testEmptyRuleSetReferencedShouldNotBeDeprecated()",21,1,8,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testBinaryNumericOperators()",20,1,29,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testUnaryNumericPromotion()",20,1,26,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.assertTextNode(Node node, String text, String toString)",20,1,18,2,3
"com.cb4.common.utils.MapUtilsTest.testFilterByKey()",20,1,17,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.acceptanceTest()",19,1,39,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodAccessibility()",19,1,21,2,0
"com.cb4.common.utils.MapUtilsTest.testClearNullOrEmptyMap()",19,1,18,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testOverridePriorityLoadWithMinimum()",19,1,15,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.verifyEndLine()",19,1,11,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSingleDatapoint()",19,1,10,2,0
"net.sourceforge.pmd.util.viewer.gui.ASTPanel.init()",19,1,9,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.assertLineNumbers(Node node, int beginLine, int beginColumn, int endLine, int endColumn)",19,1,8,2,5
"net.sourceforge.pmd.Report.createReport(RuleContext ctx, String fileName)",19,1,6,2,2
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testMultipleExceptionCatching()",19,1,6,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.EnumeratedMultiProperty(String theName, String theDescription, String[] theLabels, E[] theChoices, int[] choiceIndices, Class<E> valueType, float theUIOrder)",19,1,2,2,7
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.TemplateParseException(final Token currentTokenVal, final int[][] expectedTokenSequencesVal, final String[] tokenImageVal)",19,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.withDimensions(int numDimensions)",19,1,0,2,1
"net.sourceforge.pmd.util.filter.Filters.toFileFilter(final FilenameFilter filter)",19,1,0,2,1
"net.sourceforge.pmd.util.filter.Filters.toFilenameFilter(final Filter<File> filter)",19,1,0,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodParameterization()",18,1,22,2,0
"com.cb4.common.utils.MapUtilsTest.testSubMapWithSubs()",18,1,19,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMetrics()",18,1,15,2,0
"net.sourceforge.pmd.lang.java.ast.CommentUtil.multiLinesIn(String comment)",18,1,3,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.ruleTestBlock(final TestDescriptor testCase)",18,1,3,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.EnumeratedMultiProperty(String theName, String theDescription, String[] theLabels, E[] theChoices, int[] choiceIndices, float theUIOrder)",18,1,2,2,6
"net.sourceforge.pmd.RuleSetFactoryTest.testWrongRuleNameExcluded()",18,1,2,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testBinaryStringPromotion()",17,1,20,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testFieldAccessGenericNested()",17,1,15,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveGrandChildNode(final int childIndex, final int grandChildIndex)",17,1,9,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.isSerialPersistentFields(final ASTFieldDeclaration field)",17,1,9,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testEmptyRuleSetFile()",17,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility.filterRuleSetFile(InputStream stream)",17,1,3,2,1
"net.sourceforge.pmd.RulesetsFactoryUtils.getRuleSetsWithBenchmark(String rulesets, RuleSetFactory factory)",17,1,2,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.testWrongRuleNameReferenced()",17,1,2,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.AbstractMultiValueProperty(String theName, String theDescription, List<V> theDefault, float theUIOrder, char delimiter, boolean isDefinedExternally)",17,1,1,2,6
"net.sourceforge.pmd.properties.StringMultiProperty.StringMultiProperty(String theName, String theDescription, String[] defaultValues, float theUIOrder, char delimiter)",17,1,1,2,5
"net.sourceforge.pmd.properties.StringMultiProperty.StringMultiProperty(String theName, String theDescription, List<String> defaultValues, float theUIOrder, char delimiter)",17,1,0,2,5
"ParserCornerCases17.underscoreInNumericLiterals()",17,1,0,2,0
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest.testClassWithImportInnerOnDemand()",16,1,20,2,0
"com.cb4.common.utils.MapUtilsTest.testGetSubMap()",16,1,15,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testInnerClass()",16,1,14,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testExcludeWithMinimumPriority()",16,1,12,2,0
"com.cb4.common.utils.MapUtilsTest.testNestedLen()",16,1,9,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testGetFirstChildNestedDeeper()",16,1,8,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveChildAtIndexOnNodeWithNoChildren(final int grandChildIndex)",16,1,5,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testBug1202()",16,1,2,2,0
"net.sourceforge.pmd.properties.AbstractMultiPackagedProperty.AbstractMultiPackagedProperty(String theName, String theDescription, List<T> theDefault, float theUIOrder, boolean isDefinedExternally, PackagedPropertyModule<T> module)",16,1,0,2,6
"net.sourceforge.pmd.Report$SuppressedViolation.SuppressedViolation(RuleViolation rv, boolean isNOPMD, String userMessage)",16,1,0,2,3
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.ofString(String toParse)",16,1,0,2,1
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testDeprecatedAttributeXPathQuery()",16,1,0,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testExternalReferenceOverride()",15,1,23,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testExtraTopLevelClass()",15,1,14,2,0
"com.cb4.common.utils.MapUtilsTest.testSort()",15,1,8,2,0
"com.cb4.common.utils.MapUtilsTest.testValuesSort()",15,1,8,2,0
"com.cb4.common.utils.MapUtilsTest.testClearNonEmptyMap()",15,1,6,2,0
"net.sourceforge.pmd.util.database.DBTypeTest.testGetIncludeProperties()",15,1,5,2,0
"net.sourceforge.pmd.util.database.DBTypeTest.testGetProperties()",15,1,5,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testInnerClassNotCompiled()",15,1,4,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.EnumeratedMultiProperty(String theName, String theDescription, Map<String,E> choices, List<E> defaultValues, Class<E> valueType, float theUIOrder)",15,1,0,2,6
"net.sourceforge.pmd.lang.apex.ast.CompilerService.CompilerService(SymbolProvider symbolProvider, AccessEvaluator accessEvaluator, QueryValidator queryValidator)",15,1,0,2,3
"net.sourceforge.pmd.RuleSetFactoryTest.testIncludeExcludePatterns()",14,1,26,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testParentMethods()",14,1,20,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.getOrderedNodes(Class<E> clazz, String javaCode)",14,1,15,2,2
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testFieldFinder()",14,1,15,2,0
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.getOrderedNodes(Class<E> clazz, String plsqlCode)",14,1,13,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAnonymousInnerClass()",14,1,11,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testEnumAnonymousInnerClass()",14,1,11,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testUnaryLogicalOperators()",14,1,11,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodTypeInferenceVarargsZeroArity()",14,1,9,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava(LanguageVersionHandler languageVersionHandler, String code)",14,1,8,2,2
"com.cb4.common.utils.MapUtilsTest.testSortKeys()",14,1,8,2,0
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.checkComparison(String operator, Node equality, int i)",14,1,7,2,3
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.stackOverflowDuringClassParsing()",14,1,6,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testMissingRuleSetNameIsWarning()",14,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testStringMultiPropertyDelimiter()",14,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.CommentUtil.trim(List<String> lines)",14,1,1,2,1
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testNullPointerEnumValueOfOverloaded()",14,1,1,2,0
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.TemplateParseException(final Token currentTokenVal, final int[][] expectedTokenSequencesVal, final String[] tokenImageVal, final String templateNameVal)",14,1,0,2,4
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testJavaTypeDefinitionGetSuperTypeSet()",13,1,18,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testFactoryMultiValueCustomDelimiter()",13,1,13,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodGenericExplicit()",13,1,12,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodTypeInference()",13,1,12,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTCompilationUnit node, Object data)",13,1,7,2,2
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testGetFirstChildNested()",13,1,7,2,0
"net.sourceforge.pmd.lang.rule.XPathRule.initXPathRuleQuery()",13,1,7,2,0
"net.sourceforge.pmd.util.database.DBTypeTest.testAsProperties()",13,1,6,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.understandsSimpleFile()",13,1,4,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testConstructors()",13,1,4,2,0
"net.sourceforge.pmd.util.database.DBTypeTest.testGetPropertiesFromFile()",13,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isTypeInferred()",13,1,3,2,0
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNodesTst.getNodes(Class<T> clazz, String source)",13,1,2,2,2
"net.sourceforge.pmd.lang.vf.ast.AbstractVfNodesTest.getNodes(Class<T> clazz, String source)",13,1,2,2,2
"net.sourceforge.pmd.lang.apex.ast.CompilerService.CompilerService()",13,1,1,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.AbstractMultiValueProperty(String theName, String theDescription, List<V> theDefault, float theUIOrder, boolean isDefinedExternally)",13,1,0,2,5
"com.cb4.common.utils.MapUtilsTest.testAddValuesToMap()",12,1,17,2,0
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.getComparisonTargets()",12,1,14,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testWithProcessingInstructions()",12,1,12,2,0
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest.testLoadClassWithImportOnDemand()",12,1,12,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testHeterogeneousArrayFieldDeclaration()",12,1,10,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetWithDeprecatedButRenamedRule()",12,1,8,2,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.MethodNamingConventionsRule()",12,1,8,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testReferenceInternalToExternalChain()",12,1,7,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testReferenceInternalToInternalChain()",12,1,7,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.makeReport(Rule rule)",12,1,6,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testMissingRuleSetDescriptionIsWarning()",12,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testStringMultiPropertyDefaultDelimiter()",12,1,5,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.testRemoveChildAtIndexWithInvalidIndex()",12,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.stringConcatentationShouldNotBeCast()",12,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGitHubBug257NonExistingCast()",12,1,4,2,0
"net.sourceforge.pmd.util.ClassUtil.computeClassShortNames()",12,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.isExplicitReceiverParameter()",12,1,2,2,0
"net.sourceforge.pmd.test.lang.DummyLanguageModule$RuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",12,1,1,2,6
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testLambdaBug1333()",12,1,1,2,0
"net.sourceforge.pmd.benchmark.TextReport.total(long[] timeTotals, Benchmark index, long count)",12,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getComponentType()",12,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getElementType()",12,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testCatchBlocks()",11,1,17,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseAndTypeResolveJava(String javaVersion, String sourceCode)",11,1,16,2,2
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testMethodDeclarationRecorded()",11,1,16,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testNestedAllocationExpressions()",11,1,16,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testTwoMethodsSameNameDiffArgs()",11,1,15,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.buildDFA(String javaCode)",11,1,12,2,1
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.buildDFA(String plsqlCode)",11,1,12,2,1
"net.sourceforge.pmd.lang.DummyLanguageModule.DummyLanguageModule()",11,1,9,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.ClassNamingConventionsRule()",11,1,9,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldNamingConventionsRule.FieldNamingConventionsRule()",11,1,9,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.allCommentsAreIgnored()",11,1,9,2,0
"net.sourceforge.pmd.test.lang.DummyLanguageModule.DummyLanguageModule()",11,1,9,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTForStatement node, Object data)",11,1,7,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTLoopStatement node, Object data)",11,1,7,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTWhileStatement node, Object data)",11,1,7,2,2
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testGetFirstChild()",11,1,6,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testContainsStaticVariablePrefixedWithClassName()",11,1,6,2,0
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityRule.visit(ASTCompilationUnit node, Object data)",11,1,4,2,2
"net.sourceforge.pmd.cpd.TokenEntry.TokenEntry(String image, String tokenSrcID, int beginLine)",11,1,3,2,3
"net.sourceforge.pmd.RuleSets.addRuleSet(RuleSet ruleSet)",11,1,2,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.supports(ASTAnyTypeDeclaration node)",11,1,2,2,1
"net.sourceforge.pmd.lang.DummyLanguageModule$RuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",11,1,1,2,6
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getTypeNode()",11,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testInnerOuterClass()",11,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.hasAuxclasspath()",11,1,1,2,0
"net.sourceforge.pmd.Report$ConfigurationError.ConfigurationError(Rule theRule, String theIssue)",11,1,0,2,2
"net.sourceforge.pmd.Report$ProcessingError.ProcessingError(Throwable error, String file)",11,1,0,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.createRuleSetReferenceId(final String ruleSetXml)",11,1,0,2,1
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.TemplateParseException()",11,1,0,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testProps()",10,1,18,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testJavaTypeDefinitionGetErasedSuperTypeSet()",10,1,13,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testNestedAnonymousClass()",10,1,12,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testParsersCases18()",10,1,11,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.CommentRequiredRule()",10,1,9,2,0
"com.concurrent_ruby.ext.AtomicReferenceLibrary.load(Ruby runtime, boolean wrap)",10,1,8,2,2
"net.sourceforge.pmd.cpd.ApexTokenizerTest.testTokenizeWithComments()",10,1,8,2,0
"com.cb4.common.utils.MapUtilsTest.testGetMandatoryDoubleValue()",10,1,6,2,0
"com.cb4.common.utils.MapUtilsTest.testGetMandatoryIntValue()",10,1,6,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.isArray()",10,1,6,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testAsDelimitedString()",10,1,5,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.parseInheritedSharingClass()",10,1,4,2,0
"net.sourceforge.pmd.rules.RuleFactory.getPropertyValue(Element propertyElement)",10,1,3,2,1
"net.sourceforge.pmd.util.filter.Filters.getFileExtensionOrDirectoryFilter(String... extensions)",10,1,2,2,1
"net.sourceforge.pmd.lang.xml.XmlParserTest.assertTextNode(Node node, String text)",10,1,1,2,2
"net.sourceforge.pmd.util.viewer.model.ViewerModel.appendToXPathExpression(String pathFragment, Object appender)",10,1,1,2,2
"net.sourceforge.pmd.util.viewer.model.ViewerModel.selectNode(Node node, Object selector)",10,1,1,2,2
"net.sourceforge.pmd.util.CollectionUtil.asSet(T[] items)",10,1,1,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.findWithRuleSupport()",10,1,1,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty$EnumMultiPBuilder.mappings(Map<String,E> map)",10,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isExplicitReceiverParameter()",10,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.copyPropertyValues()",10,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testInnerOuterClass()",9,1,15,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.parseAndTypeResolveForString(String source, String version)",9,1,14,2,2
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testEnum()",9,1,14,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testXPathNodeSelect()",9,1,12,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testUserData()",9,1,11,2,0
"net.sourceforge.pmd.cpd.CPD.addAndSkipLexicalErrors(SourceCode sourceCode)",9,1,10,2,1
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testClassLevelSuppression()",9,1,10,2,0
"net.sourceforge.pmd.util.datasource.ZipDataSource.toString()",9,1,9,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.getNodes(LanguageVersion languageVersion, Class<E> clazz, String javaCode)",9,1,8,2,3
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.getNodes(LanguageVersion languageVersion, Class<E> clazz, String plsqlCode)",9,1,8,2,3
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetWithDeprecatedRule()",9,1,6,2,0
"net.sourceforge.pmd.util.viewer.model.ViewerModel.commitSource(String source, LanguageVersion languageVersion)",9,1,5,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.testReferenceInternalToExternal()",9,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testReferenceInternalToInternal()",9,1,5,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTConditionalExpression node, Object data)",9,1,4,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTDoStatement node, Object data)",9,1,4,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTForStatement node, Object data)",9,1,4,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTWhileStatement node, Object data)",9,1,4,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.shouldReportTypeDeclaration(final AbstractJavaAccessNode decl)",9,1,4,2,1
"com.concurrent_ruby.ext.AtomicReferenceLibrary$UnsafeHolder.loadUnsafe()",9,1,4,2,0
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, RuleContext ctx)",9,1,3,2,2
"net.sourceforge.pmd.renderers.XSLTRenderer.transform(Document doc)",9,1,3,2,1
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.initializeWith(ClassLoader classLoader, ASTCompilationUnit rootNode)",9,1,2,2,2
"net.sourceforge.pmd.lang.jsp.rule.codestyle.DuplicateJspImportsRule.apply(List<? extends Node> nodes, RuleContext ctx)",9,1,2,2,2
"net.sourceforge.pmd.cpd.SimpleRenderer.render(Iterator<Match> matches)",9,1,2,2,1
"net.sourceforge.pmd.cpd.VSRenderer.render(Iterator<Match> matches)",9,1,2,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.containsDelimiter(String value)",9,1,2,2,1
"net.sourceforge.pmd.rules.RuleFactory.isPropertyDefinition(Element node)",9,1,2,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.expectedMinimum(double minimum)",9,1,2,2,1
"ParserCornerCases17.typeInferenceForGenericInstanceCreation()",9,1,2,2,0
"net.sourceforge.pmd.Report$ProcessingError.getDetail()",9,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getType()",9,1,2,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTTryStatement node, Object data)",9,1,1,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.RuleReference(Rule theRule, RuleSetReference theRuleSetReference)",9,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.getFields(ASTAnyTypeDeclaration node)",9,1,1,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaClassMetric.getMethodsAndConstructors(ASTAnyTypeDeclaration node)",9,1,1,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.resolveType(String name)",9,1,1,2,1
"net.sourceforge.pmd.util.ClassUtil.getPrimitiveTypeFor(String name)",9,1,1,2,1
"net.sourceforge.pmd.util.viewer.gui.ASTPanel.ASTPanel(ViewerModel model)",9,1,1,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.getClassDeclarations()",9,1,1,2,0
"net.sourceforge.pmd.util.datasource.ZipDataSource.ZipDataSource(ZipFile zipFile, ZipEntry zipEntry)",9,1,0,2,2
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.SimpleNodeTreeNodeAdapter(SimpleNodeTreeNodeAdapter parent, Node node)",9,1,0,2,2
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.analyzeToken(final T currentToken)",9,1,0,2,1
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.TemplateParseException(final String message)",9,1,0,2,1
"net.sourceforge.pmd.util.filter.Filters.getFileExtensionFilter(String... extensions)",9,1,0,2,1
"net.sourceforge.pmd.Report$SuppressedViolation.suppressedByAnnotation()",9,1,0,2,0
"net.sourceforge.pmd.Report$SuppressedViolation.suppressedByNOPMD()",9,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getParserOptions()",9,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.copyPropertyDescriptors()",9,1,0,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testSingleRule()",8,1,12,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testReferenceToDeprecatedRule()",8,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNestedClassDeclFound()",8,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNestedClassesResolution()",8,1,10,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.updateClassContext(String className, int localIndex)",8,1,7,2,2
"net.sourceforge.pmd.docs.EscapeUtils.escapeMarkdown(String unescaped)",8,1,7,2,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testContains()",8,1,7,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testFactoryMultiValueDefaultDelimiter()",8,1,7,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.visit(ASTCompilationUnit node, Object data)",8,1,6,2,2
"com.cb4.common.utils.MapUtilsTest.testFlipOnDuplicateKeys()",8,1,6,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetFileName()",8,1,6,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetReferencesADeprecatedRenamedRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.AbstractApexMetricTestRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.StdCyclomaticComplexityRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.AbstractMetricTestRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.rollbackClassContext()",8,1,6,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.MethodNamingConventionsRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.AvoidBranchingStatementAsLastInLoopRule()",8,1,6,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.commentRequiredViolation(Object data, AbstractJavaNode node, PropertyDescriptor<CommentRequirement> descriptor)",8,1,5,2,3
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolation(Object data, Node node, Object[] args)",8,1,5,2,3
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolation(Object data, Node node, String arg)",8,1,5,2,3
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.write(String filename, StringBuilder buf)",8,1,5,2,2
"net.sourceforge.pmd.lang.java.rule.design.NcssCountRule.visit(ASTCompilationUnit node, Object data)",8,1,5,2,2
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolation(Object data, Node node)",8,1,5,2,2
"com.cb4.common.utils.MapUtilsTest.testGetMandatoryValueWithoutValue()",8,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testFindDescendantsOfTypeRecurse()",8,1,5,2,0
"net.sourceforge.pmd.renderers.HTMLRenderer.start()",8,1,5,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolationWithMessage(Object data, Node node, String message, int beginLine, int endLine)",8,1,4,2,5
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolationWithMessage(Object data, Node node, String message, Object[] args)",8,1,4,2,4
"net.sourceforge.pmd.lang.rule.AbstractRule.addViolationWithMessage(Object data, Node node, String message)",8,1,4,2,3
"net.sourceforge.pmd.cpd.ApexTokenizerTest.tokenize(String code, boolean caseSensitive)",8,1,4,2,2
"net.sourceforge.pmd.cpd.CPPTokenizer.getLexerForSource(SourceCode sourceCode)",8,1,4,2,1
"net.sourceforge.pmd.renderers.TextColorRenderer.getReader(String sourceFile)",8,1,4,2,1
"net.sourceforge.pmd.renderers.XSLTRenderer.getDocument(String xml)",8,1,4,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isFormalParameter()",8,1,4,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testAnonymousInnerClassName()",8,1,4,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testErrorForCorrectMulti()",8,1,4,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.shouldReport(final AbstractJavaAccessNode decl)",8,1,3,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.defaultAsString()",8,1,3,2,0
"net.sourceforge.pmd.docs.RuleSetUtils.getRuleSetFilename(RuleSet ruleset)",8,1,2,2,1
"net.sourceforge.pmd.Report.treeIsEmpty()",8,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGenericsProblem()",8,1,2,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.isLeaf()",8,1,2,2,0
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.compute_if_absent(final ThreadContext context, final IRubyObject key, final Block block)",8,1,1,2,3
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ApexNode<?> node, Object data)",8,1,1,2,2
"net.sourceforge.pmd.Report.addListener(ThreadSafeReportListener listener)",8,1,1,2,1
"net.sourceforge.pmd.Report.addListeners(List<ThreadSafeReportListener> allListeners)",8,1,1,2,1
"net.sourceforge.pmd.RuleSets.RuleSets(RuleSet ruleSet)",8,1,1,2,1
"net.sourceforge.pmd.util.CollectionUtil.isNotEmpty(Object[] items)",8,1,1,2,1
"net.sourceforge.pmd.Report$ReadableDuration.getTime()",8,1,1,2,0
"net.sourceforge.pmd.Report.hasConfigErrors()",8,1,1,2,0
"net.sourceforge.pmd.Report.hasErrors()",8,1,1,2,0
"net.sourceforge.pmd.Report.hasMetrics()",8,1,1,2,0
"net.sourceforge.pmd.Report.start()",8,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.isTypeInferred()",8,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.AtLeastOneConstructorRule.defaultSuppressionAnnotations()",8,1,1,2,0
"net.sourceforge.pmd.Report$ReadableDuration.ReadableDuration(long duration)",8,1,0,2,1
"net.sourceforge.pmd.Report.suppress(Map<Integer,String> lines)",8,1,0,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.MethodNameDeclaration(ASTTriggerTimingPointSection node)",8,1,0,2,1
"net.sourceforge.pmd.util.CollectionUtil.isEmpty(Object[] items)",8,1,0,2,1
"net.sourceforge.pmd.util.CompoundIterator.CompoundIterator(Iterator<T>... iterators)",8,1,0,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.ASTModel(Node root)",8,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isArray()",8,1,0,2,0
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.isConstant()",8,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.ViewerModel.getLastEvaluationResults()",8,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNoParams()",7,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testOneParam()",7,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testOneParamVararg()",7,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testTwoParams()",7,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testTwoParamsVararg()",7,1,10,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testAddAttributesMulti()",7,1,10,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAnonymousClassFromInterface()",7,1,10,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testInitializer()",7,1,9,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testSetPriority()",7,1,8,2,0
"com.concurrent_ruby.ext.JRubyMapBackendLibrary.load(Ruby runtime, boolean wrap)",7,1,7,2,2
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.toString()",7,1,7,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testXPath()",7,1,6,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testFindDescendantsOfTypeMultiple()",7,1,5,2,0
"net.sourceforge.pmd.document.DocumentFile.replace(final RegionByLine regionByLine, final String textToReplace)",7,1,4,2,2
"net.sourceforge.pmd.document.DocumentFile.delete(final RegionByLine regionByOffset)",7,1,4,2,1
"net.sourceforge.pmd.lang.apex.rule.errorprone.MethodWithSameNameAsEnclosingClassRule.MethodWithSameNameAsEnclosingClassRule()",7,1,4,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testCantContainsSuperToString()",7,1,4,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testErrorForBadMulti()",7,1,4,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testErrorForBadSingle()",7,1,4,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testErrorForCorrectSingle()",7,1,4,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParser.parseApex(final String sourceCode)",7,1,3,2,1
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.equals(Object obj)",7,1,3,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isLambdaParameter()",7,1,3,2,0
"net.sourceforge.pmd.document.DocumentFile.insert(int beginLine, int beginColumn, final String textToInsert)",7,1,2,2,3
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getChildAt(int childIndex)",7,1,2,2,1
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getIndex(TreeNode node)",7,1,2,2,1
"net.sourceforge.pmd.docs.SidebarGenerator.loadSidebar()",7,1,2,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isThisOrSuper()",7,1,2,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.testMissingPackageNames()",7,1,2,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getChildCount()",7,1,2,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.EnumeratedMultiProperty(String theName, String theDescription, Map<String,E> choices, List<E> defaultValues, Class<E> valueType, float theUIOrder, boolean isDefinedExternally)",7,1,1,2,7
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTRSIGNEDSHIFT node, Object data)",7,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTRUNSIGNEDSHIFT node, Object data)",7,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.TooManyFieldsRule.visit(ASTInput node, Object data)",7,1,1,2,2
"net.sourceforge.pmd.lang.rule.XPathRule.setXPath(final String xPath)",7,1,1,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomMinimum(int minimum)",7,1,1,2,1
"net.sourceforge.pmd.Report.end()",7,1,1,2,0
"net.sourceforge.pmd.Report.metrics()",7,1,1,2,0
"net.sourceforge.pmd.Report.size()",7,1,1,2,0
"net.sourceforge.pmd.Report.treeIterator()",7,1,1,2,0
"net.sourceforge.pmd.Report.treeSize()",7,1,1,2,0
"net.sourceforge.pmd.RuleSets.getAllRuleSets()",7,1,1,2,0
"net.sourceforge.pmd.cpd.CPD.getSourcePaths()",7,1,1,2,0
"net.sourceforge.pmd.cpd.CPD.getSources()",7,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testBug206()",7,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.defaultSuppressionAnnotations()",7,1,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getAttributeIterator()",7,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testNPEInJavaTypeDefinitionToString()",7,1,1,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.children()",7,1,1,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule, LanguageVersion languageVersion)",7,1,0,2,5
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.BoundOrConstraint(JavaTypeDefinition leftProperType, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",7,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.BoundOrConstraint(JavaTypeDefinition leftProperType, Variable rightTypeVariable, InferenceRuleType ruleType)",7,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.BoundOrConstraint(Variable leftTypeVariable, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",7,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.BoundOrConstraint(Variable leftTypeVariable, Variable rightTypeVariable, InferenceRuleType ruleType)",7,1,0,2,3
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.setType(Class<?> type)",7,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.setTypeDefinition(JavaTypeDefinition type)",7,1,0,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.end(RuleContext ctx)",7,1,0,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.createFrom(String toParse)",7,1,0,2,1
"net.sourceforge.pmd.Report$ConfigurationError.issue()",7,1,0,2,0
"net.sourceforge.pmd.Report$ConfigurationError.rule()",7,1,0,2,0
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.isLanguageSpecificDiscarding()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.getNameSpace()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.defaultReportLevel()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.isReportClasses()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.isReportMethods()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.optionMappings()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.setVarargs()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.defaultReportLevel()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.isReportClasses()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.isReportMethods()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.optionMappings()",7,1,0,2,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.toString()",7,1,0,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.isVarargs()",7,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.RuleReference()",7,1,0,2,0
"net.sourceforge.pmd.lang.rule.XPathRule.xPathRuleQueryNeedsInitialization()",7,1,0,2,0
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.getTemplateName()",7,1,0,2,0
"net.sourceforge.pmd.util.filter.Filters.getDirectoryFilter()",7,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getSimpleNode()",7,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.ViewerModel.hasCompiledTree()",7,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.CompilerService.visitAstsFromStrings(List<String> sources, AstVisitor<AdditionalPassScope> visitor, CompilerStage compilerStage)",6,1,9,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.shallowString()",6,1,8,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testAddAttributes()",6,1,8,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testSwitchStatements()",6,1,7,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testSwitchWithFallthrough()",6,1,7,2,0
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.renderViolation(ViolationNode vnode)",6,1,6,2,1
"net.sourceforge.pmd.lang.vm.ast.TemplateParseException.appendTemplateInfo(final StringBuffer sb)",6,1,6,2,1
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testImportNestedClassesResolution()",6,1,6,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNestedClassesOfImportResolution()",6,1,6,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.getPropertyDescriptorValues()",6,1,6,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAnonymousExtendingObject()",6,1,6,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testClassNameExists()",6,1,6,2,0
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.assertToken(Token token, String image, int beginLine, int beginColumn, int endLine, int endColumn)",6,1,5,2,6
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testConstructorLevelSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testFieldLevelSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testInheritedSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testLocalVariableLevelSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testMethodLevelSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testNoSuppressionBlank()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testNoSuppressionSomethingElseS()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testParameterLevelSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppression()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionAtTopLevel()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionMulitpleValues1()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionMulitpleValues2()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionValue1()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionValue2()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSpecificSuppressionValue3()",6,1,5,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest.testSuppressAll()",6,1,5,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(PLSQLNode node, Object data)",6,1,4,2,2
"net.sourceforge.pmd.docs.SidebarGenerator.extractRuleReference(Map<String,Object> sidebar)",6,1,4,2,1
"net.sourceforge.pmd.lang.apex.rule.design.TooManyFieldsRule.TooManyFieldsRule()",6,1,4,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testBug1518()",6,1,4,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.accept(NodeVisitor visitor, Object data)",6,1,3,2,2
"net.sourceforge.pmd.rules.RuleBuilder.throwUnknownLanguageVersionException(String minOrMax, String unknownVersion)",6,1,3,2,2
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.loadTestResource(String name)",6,1,3,2,1
"net.sourceforge.pmd.util.viewer.gui.ASTPanel.valueChanged(TreeSelectionEvent e)",6,1,3,2,1
"com.cb4.common.utils.MapUtilsTest.testGetMandatoryValueWithEmptyMap()",6,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule.AvoidDmlStatementsInLoopsRule()",6,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule.AvoidSoqlInLoopsRule()",6,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoslInLoopsRule.AvoidSoslInLoopsRule()",6,1,3,2,0
"net.sourceforge.pmd.testframework.RuleTestRunner.createTestClass()",6,1,3,2,0
"net.sourceforge.pmd.testframework.RuleTestRunner.hasUnitTests()",6,1,3,2,0
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isNeither(TypedNameDeclaration vnd, Class<?> class1, Class<?> class2)",6,1,2,2,3
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.parse(String code)",6,1,2,2,1
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.readAsString(String resource)",6,1,2,2,1
"net.sourceforge.pmd.util.viewer.gui.MainFrame.viewerModelChanged(ViewerModelEvent e)",6,1,2,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isExceptionBlockParameter()",6,1,2,2,0
"net.sourceforge.pmd.lang.java.multifile.PackageStats.reset()",6,1,2,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.defaultSuppressionAnnotations()",6,1,2,2,0
"net.sourceforge.pmd.lang.rule.XPathRule.XPathRule()",6,1,2,2,0
"net.sourceforge.pmd.util.viewer.gui.MainFrame.MainFrame()",6,1,2,2,0
"net.sourceforge.pmd.properties.StringMultiProperty.StringMultiProperty(String theName, String theDescription, List<String> defaultValues, float theUIOrder, char delimiter, boolean isDefinedExternally)",6,1,1,2,6
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.ruleRemoved(String language, String ruleset, String name)",6,1,1,2,3
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isEither(TypedNameDeclaration vnd, Class<?> class1, Class<?> class2)",6,1,1,2,3
"net.sourceforge.pmd.lang.apex.rule.design.CyclomaticComplexityRule.visit(ASTUserTrigger node, Object data)",6,1,1,2,2
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,2,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isA(TypedNameDeclaration vnd, Class<?> clazz)",6,1,1,2,2
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,2,2
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,2,2
"net.sourceforge.pmd.util.viewer.model.ASTModel.getChild(Object parent, int index)",6,1,1,2,2
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.add(AbstractReportNode child)",6,1,1,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.addFirst(AbstractReportNode child)",6,1,1,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.hasOverriddenProperty(PropertyDescriptor<?> descriptor)",6,1,1,2,1
"net.sourceforge.pmd.lang.rule.XPathRule.XPathRule(final String xPath)",6,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.addTreeModelListener(TreeModelListener l)",6,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.getChildCount(Object parent)",6,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.isLeaf(Object node)",6,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ASTModel.removeTreeModelListener(TreeModelListener l)",6,1,1,2,1
"net.sourceforge.pmd.PMDVersion.isSnapshot()",6,1,1,2,0
"net.sourceforge.pmd.PMDVersion.isUnknown()",6,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getDecl()",6,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.getTestedExpression()",6,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.emptyFileJustComment()",6,1,1,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NcssObjectCountRule.NcssObjectCountRule()",6,1,1,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.toString()",6,1,1,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.toString()",6,1,1,2,0
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.AbstractLanguageMetricsProvider(Class<T> tClass, Class<O> oClass, MetricsComputer<T,O> computer)",6,1,0,2,3
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.ASTStringLiteral(final VmParser p, final int id)",6,1,0,2,2
"net.sourceforge.pmd.util.viewer.model.ASTModel.valueForPathChanged(TreePath path, Object newValue)",6,1,0,2,2
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.BaseTokenFilter(final TokenManager tokenManager)",6,1,0,2,1
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.shouldStopProcessing(T currentToken)",6,1,0,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.setRuleSetReference(RuleSetReference ruleSetReference)",6,1,0,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.named(String name)",6,1,0,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.named(String name)",6,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.setExplicitReceiverParameter()",6,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createBadProperty()",6,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.ASTModel.getRoot()",6,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getAllowsChildren()",6,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter.getParent()",6,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.assertPosition(Node node, int beginLine, int beginColumn, int endLine, int endColumn)",5,1,8,2,5
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.verifyNode(Node node, int beginLine, int beginCol, int endLine, int endCol)",5,1,8,2,5
"net.sourceforge.pmd.document.DocumentFile.DocumentFile(final File file, final Charset charset)",5,1,7,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.testExternalReferences()",5,1,7,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testClassName()",5,1,7,2,0
"net.sourceforge.pmd.document.DocumentFile.tryToReplaceInFile(final RegionByOffset regionByOffset, final String textToReplace)",5,1,6,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTConstructorDeclaration node, Object data)",5,1,6,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.visit(ASTMethodDeclaration node, Object data)",5,1,6,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.requirementPropertyBuilder(String name, String commentType)",5,1,6,2,2
"net.sourceforge.pmd.document.DocumentFile.mapToRegionByOffset(final RegionByLine regionByLine)",5,1,6,2,1
"net.sourceforge.pmd.lang.xml.XmlParserTest.parseXml(String xml)",5,1,6,2,1
"com.cb4.common.utils.MapUtilsTest.testFlipNullOrEmpty()",5,1,6,2,0
"net.sourceforge.pmd.cpd.TokenEntry$State.restore()",5,1,6,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testContainsNoInnerWithAnonInner()",5,1,6,2,0
"net.sourceforge.pmd.lang.apex.ast.CompilerService.compile(CompilationInput compilationInput, CompilerStage compilerStage)",5,1,5,2,2
"net.sourceforge.pmd.docs.SidebarGenerator.generateSidebar(Map<Language,List<RuleSet>> sortedRulesets)",5,1,5,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.isSerialVersionUID(ASTFieldDeclaration field)",5,1,5,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.propertyFor(String stmtName)",5,1,5,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testCreateEmptyRuleSet()",5,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testMaximumLanugageVersion()",5,1,5,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testMinimumLanugageVersion()",5,1,5,2,0
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.AbstractApexRule()",5,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testContainsChildOfType()",5,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testHasExplicitExtends()",5,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testHasExplicitImplements()",5,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testNoExplicitExtends()",5,1,5,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testNoExplicitImplements()",5,1,5,2,0
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary.load(Ruby runtime, boolean wrap)",5,1,4,2,2
"net.sourceforge.pmd.lang.java.multifile.PackageStats.hasMatchingSig(JavaOperationQualifiedName qname, JavaOperationSigMask sigMask)",5,1,4,2,2
"net.sourceforge.pmd.properties.AbstractPropertySource.setProperty(MultiValuePropertyDescriptor<V> propertyDescriptor, V... values)",5,1,4,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.testDeprecatedRuleSetReference()",5,1,4,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testDirectDeprecatedRule()",5,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testFindDescendantsOfType()",5,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testNoLookahead()",5,1,4,2,0
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityRule.CyclomaticComplexityRule()",5,1,4,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTDoLoopStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTForEachStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTForLoopStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTIfBlockStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTTernaryExpression node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTTryCatchFinallyBlockStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTWhileLoopStatement node, Object data)",5,1,3,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.isLiteral(Node equality, int child)",5,1,3,2,2
"net.sourceforge.pmd.cpd.CPDTask.analyzeCode(CPD cpd)",5,1,3,2,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.StatisticalRuleHelper(AbstractRule rule)",5,1,3,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testExternalReferenceOverrideNonExistent()",5,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRefs()",5,1,3,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.verifyLineColumNumbersWithWindowsLineEndings()",5,1,3,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.hasArrayType()",5,1,3,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGitHubBug309()",5,1,3,2,0
"net.sourceforge.pmd.renderers.IDEAJRenderer.IDEAJRenderer()",5,1,3,2,0
"net.sourceforge.pmd.renderers.XSLTRenderer.XSLTRenderer()",5,1,3,2,0
"net.sourceforge.pmd.lang.java.multifile.PackageStats.hasMatchingSig(JavaTypeQualifiedName qname, String fieldName, JavaFieldSigMask sigMask)",5,1,2,2,3
"net.sourceforge.pmd.dcd.graph.MemberNode.accept(NodeVisitor visitor, Object data)",5,1,2,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.ofNestedClass(ApexQualifiedName parent, ASTUserClassOrInterface astUserClass)",5,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTFieldDeclaration node, Object data)",5,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.visit(ASTCompilationUnit node, Object data)",5,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.isForeignGetterSetterCall(ASTPrimaryExpression node)",5,1,2,2,1
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferLengthRule.isLengthViolation(Node parent)",5,1,2,2,1
"net.sourceforge.pmd.processor.MultiThreadProcessor.MultiThreadProcessor(final PMDConfiguration configuration)",5,1,2,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getErasedSuperTypeSet()",5,1,2,2,0
"net.sourceforge.pmd.renderers.HTMLRenderer.HTMLRenderer()",5,1,2,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.NcssVisitor(MetricOptions options, JavaNode topNode)",5,1,1,2,2
"net.sourceforge.pmd.cpd.CPD.CPD(CPDConfiguration theConfiguration)",5,1,1,2,1
"net.sourceforge.pmd.util.ResourceLoader.ResourceLoader(final ClassLoader cl)",5,1,1,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.init()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getVariableDeclaratorId()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getVariableName()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isField()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isLocalVariable()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isResourceDeclaration()",5,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testbuz()",5,1,1,2,0
"net.sourceforge.pmd.renderers.TextColorRenderer.TextColorRenderer()",5,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomMinimum()",5,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomSigma()",5,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.randomTopScore()",5,1,1,2,0
"net.sourceforge.pmd.util.ResourceLoader.ResourceLoader()",5,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.ruleMoved(String language, String oldRuleset, String newRuleset, String ruleName)",5,1,0,2,4
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.build(Method method)",5,1,0,2,1
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.ASTStringLiteral(final int id)",5,1,0,2,1
"net.sourceforge.pmd.stat.StatisticalRuleTest.expectedTopScore(int target)",5,1,0,2,1
"net.sourceforge.pmd.RuleSets.RuleSets()",5,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.getClassKey()",5,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexMetricTestRule.getOpKey()",5,1,0,2,0
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getNumberOfViolations()",5,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.isVarargs()",5,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.getClassKey()",5,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractMetricTestRule.getOpKey()",5,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.leftHasMentionedVariable()",5,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.rightHasMentionedVariable()",5,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createBadValue()",5,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createProperty()",5,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createValue()",5,1,0,2,0
"com.cb4.common.utils.MapUtilsTest.testGetSubMapEmpty()",4,1,7,2,0
"net.sourceforge.pmd.cpd.CPD.addAndThrowLexicalError(SourceCode sourceCode)",4,1,6,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.checksNothing()",4,1,6,2,0
"net.sourceforge.pmd.renderers.IDEAJRenderer.getFullyQualifiedClassName(String fileName, SourcePath sourcePath)",4,1,5,2,2
"net.sourceforge.pmd.document.DocumentFile.tryToDeleteFromFile(final RegionByOffset regionByOffset)",4,1,5,2,1
"net.sourceforge.pmd.lang.java.rule.errorprone.NullAssignmentRule.isAssignmentToFinalField(ASTStatementExpression n)",4,1,5,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.findClassNameDeclaration(String name)",4,1,5,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.CycloVisitor(MetricOptions options, JavaNode topNode)",4,1,4,2,2
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.parseLanguage(LanguageVersion languageVersion, String code)",4,1,4,2,2
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.parsePLSQL(LanguageVersion languageVersion, String code)",4,1,4,2,2
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.decrement(IRubyObject value)",4,1,4,2,1
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.increment(IRubyObject value)",4,1,4,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.getViolationParameters(DataPoint point)",4,1,4,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",4,1,4,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testLanguage()",4,1,4,2,0
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.testContinuationInterToken()",4,1,4,2,0
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.testContinuationIntraToken()",4,1,4,2,0
"net.sourceforge.pmd.cpd.TokenEntry.clearImages()",4,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testMethodDiffLines()",4,1,4,2,0
"net.sourceforge.pmd.lang.java.ast.SimpleNodeTest.testMethodSameLine()",4,1,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitFieldInsn(int opcode, String owner, String name, String desc)",4,1,3,2,4
"net.sourceforge.pmd.document.DocumentFile.tryToInsertIntoFile(int beginLine, int beginColumn, final String textToInsert)",4,1,3,2,3
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.initialize(ThreadContext context, IRubyObject options)",4,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTUserClass node, final Object data)",4,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTUserEnum node, final Object data)",4,1,3,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTUserInterface node, final Object data)",4,1,3,2,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.addChild(final Node parent, final Node child)",4,1,3,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodArgumentCouldBeFinalRule.visit(ASTConstructorDeclaration constructor, Object data)",4,1,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.initialize(ThreadContext context)",4,1,3,2,1
"net.sourceforge.pmd.cpd.TokenEntry$State.State(List<TokenEntry> entries)",4,1,3,2,1
"net.sourceforge.pmd.RuleSetFactoryTest.testFacadesOffByDefault()",4,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testNoRuleSetFileName()",4,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testOverrideMessage()",4,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testOverrideMessageOneElem()",4,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.AvoidGlobalModifierRule()",4,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule.ApexBadCryptoRule()",4,1,3,2,0
"net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule.ApexCSRFRule()",4,1,3,2,0
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.AbstractJavaRule()",4,1,3,2,0
"net.sourceforge.pmd.lang.java.rule.design.NcssCountRule.NcssCountRule()",4,1,3,2,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.toString()",4,1,3,2,0
"net.sourceforge.pmd.lang.xml.XmlParserTest.testAutoclosingElementLength()",4,1,3,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)",4,1,2,2,5
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.ruleRenamed(String language, String ruleset, String oldName, String newName)",4,1,2,2,4
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitParameterAnnotation(int parameter, String desc, boolean visible)",4,1,2,2,3
"net.sourceforge.pmd.rules.RuleBuilder.RuleBuilder(String name, String clazz, String language)",4,1,2,2,3
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.setValue(ThreadContext context, IRubyObject newValue)",4,1,2,2,2
"net.sourceforge.pmd.RulesetsFactoryUtils.getRulesetFactory(final PMDConfiguration configuration, final ResourceLoader resourceLoader)",4,1,2,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTProperty node, final Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTCatchStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.CycloVisitor.visit(ASTThrowStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTAnnotationTypeDeclaration node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTAssertStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTCatchStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTConstructorDeclaration node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTDoStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTEnumDeclaration node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTFinallyStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTForStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTInitializer node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTLabeledStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTMethodDeclaration node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTSwitchLabel node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTSwitchStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTSynchronizedStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTThrowStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTWhileStatement node, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTClassOrInterfaceDeclaration decl, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTCompilationUnit cUnit, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTConstructorDeclaration decl, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.visit(ASTEnumDeclaration decl, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.performance.UseStringBufferLengthRule.visit(ASTMethodDeclaration acu, Object data)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDAnnotationVisitor.visitAnnotation(String name, String desc)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDFieldVisitor.visitAnnotation(String desc, boolean visible)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitAnnotation(String desc, boolean visible)",4,1,2,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.visitAnnotation(String desc, boolean visible)",4,1,2,2,2
"net.sourceforge.pmd.util.datasource.ZipDataSource.getNiceFileName(boolean shortNames, String inputFileName)",4,1,2,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.hasDescriptor(PropertyDescriptor<?> descriptor)",4,1,2,2,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.addDataPoint(DataPoint point)",4,1,2,2,1
"net.sourceforge.pmd.properties.AbstractMultiPackagedProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",4,1,2,2,1
"net.sourceforge.pmd.renderers.HTMLRenderer.renderFileViolations(Iterator<RuleViolation> violations)",4,1,2,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.RuleTestRunner(Class<? extends RuleTst> testClass)",4,1,2,2,1
"net.sourceforge.pmd.lang.apex.ast.ApexParserTest.verifyLineColumNumbers()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.isNested()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testBug1429ParseError()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testBug1530ParseError()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGitHubBug207()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGitHubBug208ParseError()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testLambdaBug1470()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testParsersCases15()",4,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testParsersCases17()",4,1,2,2,0
"net.sourceforge.pmd.lang.metrics.BasicProjectMemoizer.reset()",4,1,2,2,0
"net.sourceforge.pmd.lang.xpath.MatchesFunction.registerSelfInSimpleContext()",4,1,2,2,0
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolation.ApexRuleViolation(Rule rule, RuleContext ctx, Node node, String message, int beginLine, int endLine)",4,1,1,2,6
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.initialize(ThreadContext context, IRubyObject value)",4,1,1,2,2
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference8.get_and_set(ThreadContext context, IRubyObject newValue)",4,1,1,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.initialize_copy(ThreadContext context, IRubyObject other)",4,1,1,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.op_aset(IRubyObject key, IRubyObject value)",4,1,1,2,2
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.initialize(ThreadContext context, IRubyObject value)",4,1,1,2,2
"net.sourceforge.pmd.lang.apex.ast.CompilerService.createCompilationInput(List<SourceFile> sourceFiles, AstVisitor<AdditionalPassScope> visitor)",4,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(AbstractApexNodeBase node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTBreakStatement node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTContinueStatement node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTExplicitConstructorInvocation node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(ASTReturnStatement node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.internal.NcssVisitor.visit(JavaNode node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(JavaNode node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.visit(ASTAnnotationTypeDeclaration node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.visit(ASTEnumDeclaration node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.SourceFileScope(final ClassLoader classLoader, final String packageImage)",4,1,1,2,2
"net.sourceforge.pmd.lang.plsql.ast.ASTFormalParameter.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.plsql.dfa.DataFlowFacade.initializeWith(DataFlowHandler dataFlowHandler, ASTInput node)",4,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NcssObjectCountRule.visit(ASTFieldDeclaration node, Object data)",4,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(VfNode node, Object data)",4,1,1,2,2
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.initialize(ThreadContext context)",4,1,1,2,1
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.set(IRubyObject newValue)",4,1,1,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.TypeSignatureVisitor(PrintVisitor parent)",4,1,1,2,1
"net.sourceforge.pmd.dcd.graph.MemberNode.equals(S that)",4,1,1,2,1
"net.sourceforge.pmd.lang.java.ast.FormalComment.FormalComment(Token t)",4,1,1,2,1
"net.sourceforge.pmd.processor.MultiThreadProcessor.runAnalysis(PmdRunnable runnable)",4,1,1,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.useDefaultValueFor(PropertyDescriptor<?> desc)",4,1,1,2,1
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest$MockedClassLoader.findClass(String name)",4,1,1,2,1
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.clear()",4,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testRuleSetNotFound()",4,1,1,2,0
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.TypeSignatureVisitor()",4,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testVarArgsEmpty()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.setUsesDFA()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.setUsesMultifile()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.setUsesTypeResolution()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.usesDFA()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.usesMultifile()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.usesRuleChain()",4,1,1,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.usesTypeResolution()",4,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.ignoredProperties()",4,1,1,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.testFactoryMultiValueCustomDelimiter()",4,1,1,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.testFactoryMultiValueDefaultDelimiter()",4,1,1,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.testFactorySingleValue()",4,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM1()",4,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM2()",4,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM3()",4,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM4()",4,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTSM5()",4,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.stackOverflowTest()",4,1,1,2,0
"net.sourceforge.pmd.util.database.DBTypeTest.tearDown()",4,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility$RuleSetFilter.ruleRenamedMoved(String language, String ruleset, String oldName, String newName)",4,1,0,2,4
"net.sourceforge.pmd.dcd.graph.MemberNode.MemberNode(ClassNode classNode, String name, String desc)",4,1,0,2,3
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.ApexQualifiedName(String nameSpace, String[] classes, String operation)",4,1,0,2,3
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.JavaOperationSignature(Visibility visibility, Role role, boolean isAbstract)",4,1,0,2,3
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.MethodType(JavaTypeDefinition returnType, List<JavaTypeDefinition> argTypes, Method method)",4,1,0,2,3
"net.sourceforge.pmd.renderers.CSVWriter.CSVWriter(List<ColumnDescriptor<T>> theColumns, String theSeparator, String theLineSeparator)",4,1,0,2,3
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.initialize(ThreadContext context)",4,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getArrayDepth()",4,1,0,2,0
"net.sourceforge.pmd.lang.java.multifile.PackageStats.PackageStats()",4,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isRawType()",4,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getExamples()",4,1,0,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createBadMultiProperty()",4,1,0,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createBadProperty()",4,1,0,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createMultiProperty()",4,1,0,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createProperty()",4,1,0,2,0
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.compareAndSet(ThreadContext context, IRubyObject expect, IRubyObject update)",3,1,5,2,3
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.thirdChildHasDottedName(Node primaryExpression)",3,1,5,2,1
"net.sourceforge.pmd.RuleSetFactoryCompatibility.addFilterRuleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName)",3,1,4,2,5
"net.sourceforge.pmd.RuleSetFactoryTest.loadFirstRule(String ruleSetXml)",3,1,4,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.equivalent(JavaTypeDefinition def)",3,1,4,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isOnRightHandSide()",3,1,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isClassOrInterface()",3,1,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftProper()",3,1,4,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightProper()",3,1,4,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.selectNodes(String source, String version, Class<T> resultType, String xpath)",3,1,3,2,4
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.replace_pair(IRubyObject key, IRubyObject oldValue, IRubyObject newValue)",3,1,3,2,3
"net.sourceforge.pmd.cpd.AntlrTokenizer.processToken(final Tokens tokenEntries, final String fileName, final AntlrToken token)",3,1,3,2,3
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNodesTst.assertNumberOfNodes(Class<T> clazz, String source, int number)",3,1,3,2,3
"net.sourceforge.pmd.lang.vf.ast.AbstractVfNodesTest.assertNumberOfNodes(Class<T> clazz, String source, int number)",3,1,3,2,3
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.delete_pair(IRubyObject key, IRubyObject value)",3,1,3,2,2
"net.sourceforge.pmd.docs.SidebarGenerator.SidebarGenerator(FileWriter writer, Path basePath)",3,1,3,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.size(ThreadContext context)",3,1,3,2,1
"net.sourceforge.pmd.cpd.AntlrTokenizer.getCharStreamFromSourceCode(final SourceCode sourceCode)",3,1,3,2,1
"net.sourceforge.pmd.cpd.Mark.compareTo(Mark other)",3,1,3,2,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.compareOrder(NodeInfo other)",3,1,3,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.addMethodDesc(String desc)",3,1,3,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtGetChild(int index)",3,1,3,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.valueFrom(String valueString)",3,1,3,2,1
"net.sourceforge.pmd.renderers.CSVRenderer.renderFileViolations(Iterator<RuleViolation> violations)",3,1,3,2,1
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.decrement()",3,1,3,2,0
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.getValue()",3,1,3,2,0
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.increment()",3,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testDFAFlag()",3,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testSingleRuleWithPriority()",3,1,3,2,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.getXPathNodeName()",3,1,3,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isEndNode()",3,1,3,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isLambdaTypeInferred()",3,1,3,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.toString()",3,1,3,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testIsMultiValue()",3,1,3,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testIsMultiValueMulti()",3,1,3,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testType()",3,1,3,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.testTypeMulti()",3,1,3,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.start()",3,1,3,2,0
"net.sourceforge.pmd.typeresolution.PMDASMClassLoaderTest.setUp()",3,1,3,2,0
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.computeWithResultOption(MetricKey<O> key, T node, MetricOptions options, ResultOption option)",3,1,2,2,4
"net.sourceforge.pmd.dcd.graph.UsageGraph.defineConstructor(String className, String name, String desc)",3,1,2,2,3
"net.sourceforge.pmd.dcd.graph.UsageGraph.defineField(String className, String name, String desc)",3,1,2,2,3
"net.sourceforge.pmd.lang.DummyLanguageModule$DummyRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",3,1,2,2,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.forClass(TypeDefinitionType type, Class<?> clazz, JavaTypeDefinition... boundGenerics)",3,1,2,2,3
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDAnnotationVisitor.visitEnum(String name, String desc, String value)",3,1,2,2,3
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.computeForOperation(MetricKey<O> key, O node, MetricOptions options)",3,1,2,2,3
"net.sourceforge.pmd.lang.metrics.internal.AbstractLanguageMetricsProvider.computeForType(MetricKey<T> key, T node, MetricOptions options)",3,1,2,2,3
"net.sourceforge.pmd.test.lang.DummyLanguageModule$DummyRuleChainVisitor.visit(Rule rule, Node node, RuleContext ctx)",3,1,2,2,3
"net.sourceforge.pmd.dcd.graph.UsageGraph.usage(MemberNode use, MemberNode user)",3,1,2,2,2
"net.sourceforge.pmd.lang.apex.metrics.impl.CycloMetric.computeFor(ASTMethod node, MetricOptions options)",3,1,2,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTField node, final Object data)",3,1,2,2,2
"net.sourceforge.pmd.lang.apex.rule.errorprone.AvoidNonExistentAnnotationsRule.visit(final ASTMethod node, final Object data)",3,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.kindDisplayName(ASTMethodDeclaration node, PropertyDescriptor<Pattern> descriptor)",3,1,2,2,2
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitMultiANewArrayInsn(String desc, int dims)",3,1,2,2,2
"net.sourceforge.pmd.renderers.CSVWriter.quoteAndCommify(StringBuilder buffer, String s)",3,1,2,2,2
"net.sourceforge.pmd.RuleSetFactoryTest.loadRuleSet(String ruleSetXml)",3,1,2,2,1
"net.sourceforge.pmd.cpd.CPPTokenizerContinuationTest.load(String name)",3,1,2,2,1
"net.sourceforge.pmd.cpd.TokenEntry.compareTo(TokenEntry other)",3,1,2,2,1
"net.sourceforge.pmd.dcd.graph.UsageGraph.isClass(String className)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava10(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava10(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava13(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava13(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava14(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava14(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava15(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava15(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava17(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava17(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava18(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava18(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava9(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJava9(String code)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJavaDefaultVersion(Class<?> source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.parseJavaDefaultVersion(String source)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.setQualifiedName(JavaTypeQualifiedName qualifiedName)",3,1,2,2,1
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.withoutCommentMarkup(String text)",3,1,2,2,1
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.findTypeNameNode(Node node)",3,1,2,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveLengthRule.getViolationParameters(DataPoint point)",3,1,2,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.hasImageEqualTo(String image)",3,1,2,2,1
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.asDelimitedString(List<V> values)",3,1,2,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.asString(E item)",3,1,2,2,1
"net.sourceforge.pmd.testframework.RuleTestRunner.isIgnored(TestDescriptor child)",3,1,2,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setExpectedLineNumbers(List<Integer> expectedLineNumbers)",3,1,2,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setExpectedMessages(List<String> messages)",3,1,2,2,1
"com.cb4.common.utils.MapUtilsTest.testEmptyNestedLen()",3,1,2,2,0
"com.cb4.common.utils.MapUtilsTest.testNullNestedLen()",3,1,2,2,0
"net.sourceforge.pmd.cpd.CPD.go()",3,1,2,2,0
"net.sourceforge.pmd.cpd.TokenEntry.getEOF()",3,1,2,2,0
"net.sourceforge.pmd.lang.apex.rule.design.CyclomaticComplexityRule.CyclomaticComplexityRule()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.getTypeDefinition()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.getDeclaredAnnotations()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.rule.design.TooManyFieldsRule.TooManyFieldsRule()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.CommentContentRule()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule.hasDissallowedTerms()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule.CommentSizeRule()",3,1,2,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.hashCode()",3,1,2,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.toString()",3,1,2,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.AbstractRule()",3,1,2,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.isRuleChain()",3,1,2,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getXPathNodeName()",3,1,2,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.toString()",3,1,2,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createBadValue()",3,1,2,2,0
"net.sourceforge.pmd.lang.vm.ast.TokenMgrError.TokenMgrError(final boolean eofSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar, final int reason)",3,1,1,2,7
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitLocalVariable(String name, String desc, String sig, Label start, Label end, int index)",3,1,1,2,6
"net.sourceforge.pmd.lang.DummyLanguageModule$RuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,1,2,4
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitTryCatchBlock(Label start, Label end, Label handler, String type)",3,1,1,2,4
"net.sourceforge.pmd.test.lang.DummyLanguageModule$RuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,1,2,4
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.get_or_default(IRubyObject key, IRubyObject defaultValue)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.ast.ASTExpressionStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTAnnotationParameter node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTAnonymousClass node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTArrayLoadExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTArrayStoreExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTAssignmentExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBinaryExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBindExpressions node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBooleanExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBreakStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTBridgeMethodCreator node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTCastExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTCatchBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTClassRefExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTConstructorPreamble node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTConstructorPreambleStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTContinueStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlDeleteStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlInsertStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlMergeStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlUndeleteStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlUpdateStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDmlUpsertStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTDoLoopStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTExpressionStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTField node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTFieldDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTFieldDeclarationStatements node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTForEachStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTForLoopStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTFormalComment node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTIfBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTIfElseBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTIllegalStoreExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTInstanceOfExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTJavaMethodCallExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTJavaVariableExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTLiteralExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTMapEntryNode node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTMethod node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTMethodBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTMethodCallExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTModifier node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTModifierNode node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTModifierOrAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTMultiStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNestedExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNestedStoreExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewKeyValueObjectExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewListInitExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewListLiteralExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewMapInitExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewMapLiteralExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewObjectExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewSetInitExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTNewSetLiteralExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTPackageVersionExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTParameter node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTPostfixExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTPrefixExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTProperty node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTReferenceExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTReturnStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTRunAsBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTSoqlExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTSoslExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTStandardCondition node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTStatementExecuted node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTSuperMethodCallExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTSuperVariableExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTTernaryExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTThisMethodCallExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTThisVariableExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTThrowStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTTriggerVariableExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTTryCatchFinallyBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserClass node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserClassMethods node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserEnum node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserExceptionMethods node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserInterface node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTUserTrigger node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTVariableDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTVariableDeclarationStatements node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTVariableExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.visit(ASTWhileLoopStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolation.suppresses(final Node node, Rule rule)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.visit(ASTUserClass node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.visit(ASTUserInterface node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(ASTMethodOrConstructorDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NpathBaseVisitor.visit(JavaNode node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.contextOperationQName(String op, boolean isLambda)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAdditiveExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAllocationExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAndExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAnnotationMethodDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAnnotationTypeBody node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAnnotationTypeMemberDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTArgumentList node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTArguments node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTArrayDimsAndInits node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTArrayInitializer node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAssertStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTAssignmentOperator node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTBlock node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTBlockStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTBooleanLiteral node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTBreakStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTCastExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTCatchStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTClassOrInterfaceBody node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTClassOrInterfaceBodyDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTClassOrInterfaceType node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTCompilationUnit node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTConditionalAndExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTConditionalExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTConditionalOrExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTConstructorDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTContinueStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTDefaultValue node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTDoStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTEmptyStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTEnumBody node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTEnumConstant node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTEnumDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTEqualityExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTExclusiveOrExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTExplicitConstructorInvocation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTExtendsList node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTFieldDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTFinallyStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTForInit node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTForStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTForUpdate node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTFormalParameter node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTFormalParameters node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTIfStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTImplementsList node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTImportDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTInclusiveOrExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTInitializer node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTInstanceOfExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTLabeledStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTLambdaExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTLiteral node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTLocalVariableDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMarkerAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMemberSelector node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMemberValue node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMemberValueArrayInitializer node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMemberValuePair node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMemberValuePairs node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMethodDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMethodDeclarator node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMethodReference node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTModuleDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTModuleDirective node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTModuleName node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTMultiplicativeExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTName node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTNameList node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTNormalAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTNullLiteral node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPackageDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPostfixExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPreDecrementExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPreIncrementExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPrimaryExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPrimaryPrefix node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPrimarySuffix node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTPrimitiveType node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTReferenceType node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTRelationalExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTResource node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTResourceSpecification node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTResources node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTResultType node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTReturnStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTShiftExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSingleMemberAnnotation node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTStatementExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTStatementExpressionList node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchLabel node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchLabeledBlock node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchLabeledExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchLabeledThrowStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSwitchStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTSynchronizedStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTThrowStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTryStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTType node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeArgument node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeArguments node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeBound node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeParameter node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTTypeParameters node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTUnaryExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTVariableDeclarator node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTVariableDeclaratorId node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTVariableInitializer node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTWhileStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.visit(ASTWildcardBounds node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.visit(ASTContinueStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.visit(ASTReturnStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.migrating.UnnecessaryCastRule.visit(ASTFieldDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.rule.migrating.UnnecessaryCastRule.visit(ASTLocalVariableDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isA(TypeNode n, Class<?> clazz)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTCaseStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTCaseWhenClause node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTElseClause node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTElsifClause node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTExceptionHandler node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTForStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTIfStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTLabelledStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTLoopStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTReturnStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTWhileStatement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTArguments node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTAttribute node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTAttributeValue node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTCData node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTCompilationUnit node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTContent node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTDoctypeDeclaration node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTDoctypeExternalId node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTDotExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTElExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTElement node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTHtmlScript node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTIdentifier node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTLiteral node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTNegationExpression node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.visit(ASTText node, Object data)",3,1,1,2,2
"net.sourceforge.pmd.lang.vm.ast.ASTStringLiteral.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,2,2
"net.sourceforge.pmd.dcd.graph.ClassNode.compareTo(ClassNode that)",3,1,1,2,1
"net.sourceforge.pmd.lang.apex.ast.ApexParser.ApexParser(ApexParserOptions parserOptions)",3,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.displayName(String name)",3,1,1,2,1
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.addLast(DataFlowNode n)",3,1,1,2,1
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.AbstractEcmascriptNode(T node)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.isAnnotationPresent(String annotQualifiedName)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.multifile.PackageStats.getClassMirror(JavaTypeQualifiedName className)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.nameExtractor(ASTMethodDeclaration node)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.performance.InefficientEmptyStringCheckRule.appliesToClassName(String name)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.hasSameErasureAs(JavaTypeDefinition def)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.resolveTypeDefinition(final Type type)",3,1,1,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitClassType(String name)",3,1,1,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.addExample(String example)",3,1,1,2,1
"net.sourceforge.pmd.lang.rule.RuleReference.isPropertyOverridden(PropertyDescriptor<?> descriptor)",3,1,1,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.hasDescriptor(PropertyDescriptor<?> descriptor)",3,1,1,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.isPropertyOverridden(PropertyDescriptor<?> propertyDescriptor)",3,1,1,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.createFrom(String toParse)",3,1,1,2,1
"net.sourceforge.pmd.properties.GenericMultiValuePropertyDescriptor.createFrom(String toParse)",3,1,1,2,1
"net.sourceforge.pmd.properties.GenericPropertyDescriptor.createFrom(String toParse)",3,1,1,2,1
"net.sourceforge.pmd.util.filter.RegexStringFilter.RegexStringFilter(String regex)",3,1,1,2,1
"ParserCornerCases17.expressionInCastExpression()",3,1,1,2,0
"net.sourceforge.pmd.Report.iterator()",3,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testIncorrectExternalRef()",3,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testIncorrectLanguage()",3,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testIncorrectMaximumLanugageVersion()",3,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testIncorrectMinimumLanugageVersion()",3,1,1,2,0
"net.sourceforge.pmd.RuleSetFactoryTest.testInvertedMinimumMaximumLanugageVersions()",3,1,1,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.hashCode()",3,1,1,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getColumnNumber()",3,1,1,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getLineNumber()",3,1,1,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getLocalPart()",3,1,1,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.iterator()",3,1,1,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.getJsDoc()",3,1,1,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.getXPathNodeName()",3,1,1,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.hasSideEffects()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testCastLookaheadProblem()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ParserCornersTest.testGetFirstASTNameImageNull()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.hashCode()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.testClashingSymbols()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration.getType()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration.getTypeImage()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testEnumTypeParameter()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testEnumsClassScope()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassScopeTest.testNullType()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getSuperTypeSet()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.hashCode()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isArrayType()",3,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isPrimitive()",3,1,1,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.NPathComplexityRule()",3,1,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getBeginColumn()",3,1,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getBeginLine()",3,1,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getEndColumn()",3,1,1,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getEndLine()",3,1,1,2,0
"net.sourceforge.pmd.properties.AbstractMultiPackagedProperty.legalPackageNames()",3,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.getMultiFactory()",3,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.getSingleFactory()",3,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.getOverriddenPropertyDescriptors()",3,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.getPropertyDescriptors()",3,1,1,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.mappings()",3,1,1,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty.type()",3,1,1,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.createValue()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testM5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMS5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testMT5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testS5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSM5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSMT5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testST5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testSTM5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testT5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTM5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTMS5()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS1()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS2()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS3()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS4()",3,1,1,2,0
"net.sourceforge.pmd.stat.StatisticalRuleTest.testTS5()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAbstractMethodReturnType()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testAnnotatedTypeParams()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testLocalGenericClass()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodOverloaded()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodOverrides()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testMethodWildcardParam()",3,1,1,2,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.testVarArgsMethodUseCase()",3,1,1,2,0
"net.sourceforge.pmd.util.CompoundIterator.hasNext()",3,1,1,2,0
"net.sourceforge.pmd.util.datasource.ZipDataSource.getInputStream()",3,1,1,2,0
"net.sourceforge.pmd.util.designer.DFAPanel$ElementWrapper.toString()",3,1,1,2,0
"net.sourceforge.pmd.benchmark.TimingReport.TimingReport(final long wallClockMillis, final Map<TimedOperationKey,TimedResult> accumulatedResults)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParser$TopLevelVisitor.visitEnd(UserClass node, AdditionalPassScope scope)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParser$TopLevelVisitor.visitEnd(UserEnum node, AdditionalPassScope scope)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParser$TopLevelVisitor.visitEnd(UserInterface node, AdditionalPassScope scope)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.ast.ApexParser$TopLevelVisitor.visitEnd(UserTrigger node, AdditionalPassScope scope)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTBooleanExpression node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule.visit(ASTUserInterface node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.java.ParserTstUtil$Collector.Collector(Class<E> clazz, Collection<E> coll)",3,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.AbstractJavaNode(JavaParser parser, int id)",3,1,0,2,2
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.JavaNameOccurrence(JavaNode location, String image)",3,1,0,2,2
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.AbstractJspNode(JspParser parser, int id)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst$Collector.Collector(Class<E> clazz, Collection<E> coll)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTContinueStatement node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTExitStatement node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTGotoStatement node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.AbstractNcssCountRule.visit(ASTRaiseStatement node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.plsql.rule.design.NPathComplexityRule.visit(ASTConditionalOrExpression node, Object data)",3,1,0,2,2
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.AbstractVFNode(VfParser parser, int id)",3,1,0,2,2
"net.sourceforge.pmd.lang.vm.ast.TokenMgrError.TokenMgrError(final String message, final int reason)",3,1,0,2,2
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.XmlNodeWrapper(XmlParser parser, org.w3c.dom.Node domNode)",3,1,0,2,2
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtAddChild(Node child, int index)",3,1,0,2,2
"net.sourceforge.pmd.cpd.SimpleRenderer.SimpleRenderer(boolean trimLeadingWhitespace)",3,1,0,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.equalsNode(AbstractReportNode arg0)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.setScope(Scope scope)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSignature.equals(Object o)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.rule.multithreading.UnsynchronizedStaticFormatterRule.UnsynchronizedStaticFormatterRule(Class<?> formatterClassToCheck)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDAnnotationVisitor.PMDAnnotationVisitor(PMDASMVisitor visitor)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDAnnotationVisitor.visitArray(String name)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDFieldVisitor.PMDFieldVisitor(PMDASMVisitor visitor)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.PMDMethodVisitor(PMDASMVisitor visitor)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.PMDSignatureVisitor(PMDASMVisitor visitor)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitInnerClassType(String name)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitTypeArgument(char wildcard)",3,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.PMDASMVisitor(String outerName)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.end(RuleContext ctx)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setDeprecated(boolean deprecated)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setDescription(String description)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setDfa(boolean isDfa)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setExternalInfoUrl(String externalInfoUrl)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setMessage(String message)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setMultifile(boolean multifile)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setName(String name)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setPriority(RulePriority priority)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setRuleClass(String ruleClass)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setRuleSetName(String ruleSetName)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setSince(String since)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.setTypeResolution(boolean usingTypeResolution)",3,1,0,2,1
"net.sourceforge.pmd.lang.rule.AbstractRule.start(RuleContext ctx)",3,1,0,2,1
"net.sourceforge.pmd.lang.symboltable.AbstractScope.setParent(Scope parent)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtSetChildIndex(int index)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtSetParent(Node parent)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.removeChildAtIndex(int childIndex)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.setDataFlowNode(DataFlowNode dataFlowNode)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.setImage(String image)",3,1,0,2,1
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.setUserData(Object userData)",3,1,0,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty$EnumMultiPBuilder.type(Class<E> type)",3,1,0,2,1
"net.sourceforge.pmd.properties.StringMultiProperty.createFrom(String toParse)",3,1,0,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.computeDrawPos(int index)",3,1,0,2,1
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.get()",3,1,0,2,0
"net.sourceforge.pmd.cpd.CPDTask$FormatAttribute.getValues()",3,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.TokenEntry()",3,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.hashCode()",3,1,0,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.toString()",3,1,0,2,0
"net.sourceforge.pmd.lang.DummyLanguageModule$Handler.getRuleViolationFactory()",3,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.isClass()",3,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.isOperation()",3,1,0,2,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsComputer.getInstance()",3,1,0,2,0
"net.sourceforge.pmd.lang.apex.rule.AbstractApexRule.getParserOptions()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.hasNext()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.remove()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getDocumentRoot()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getNodeKind()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getParent()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getSiblingPosition()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getURI()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.getUnderlyingNode()",3,1,0,2,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.ElementNode.hasChildNodes()",3,1,0,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractEcmascriptNode.getNode()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.SuppressWarningsTest$BarRule.getName()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.iterator()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.bumpArrayDepth()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.getQualifiedName()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.getXPathNodeName()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.FormalComment.getXPathNodeName()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsComputer.getInstance()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.contextClassQName()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.defaultConvention()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.FieldNamingConventionsRule.defaultConvention()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.defaultConvention()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.getImage()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.getLocation()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isUpperBound()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isWildcard()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getEnclosingClass()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getJavaTypeCount()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.getTypeParameterCount()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isGeneric()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isIntersectionType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isNullType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionSimple.isRawType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDMethodVisitor.visitAnnotationDefault()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitArrayType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitClassBound()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitExceptionType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitInterface()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitInterfaceBound()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitParameterType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitReturnType()",3,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor$PMDSignatureVisitor.visitSuperclass()",3,1,0,2,0
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.getXPathNodeName()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getDescription()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getExternalInfoUrl()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getLanguage()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getMaximumLanguageVersion()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getMessage()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getMinimumLanguageVersion()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getName()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getPriority()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getPropertySourceType()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getRuleChainVisits()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getRuleClass()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getRuleSetName()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.getSince()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.isDeprecated()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.isDfa()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.isMultifile()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.isTypeResolution()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.deepCopy()",3,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.isDeprecated()",3,1,0,2,0
"net.sourceforge.pmd.lang.symboltable.AbstractScope.getParent()",3,1,0,2,0
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.getXPathNodeName()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getAsDocument()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getDataFlowNode()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getNode()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.getUserData()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.isFindBoundary()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtClose()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.jjtGetId()",3,1,0,2,0
"net.sourceforge.pmd.lang.xml.ast.XmlNodeWrapper.remove()",3,1,0,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.defaultValue()",3,1,0,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.isMultiValue()",3,1,0,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.multiValueDelimiter()",3,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.getOverriddenPropertiesByPropertyDescriptor()",3,1,0,2,0
"net.sourceforge.pmd.properties.EnumeratedMultiProperty$EnumMultiPBuilder.build()",3,1,0,2,0
"net.sourceforge.pmd.properties.GenericMultiValuePropertyDescriptor.type()",3,1,0,2,0
"net.sourceforge.pmd.properties.GenericPropertyDescriptor.type()",3,1,0,2,0
"net.sourceforge.pmd.properties.StringMultiProperty$StringMultiPBuilder.build()",3,1,0,2,0
"net.sourceforge.pmd.properties.StringMultiProperty.type()",3,1,0,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.defaultFileExtension()",3,1,0,2,0
"net.sourceforge.pmd.renderers.HTMLRenderer.defaultFileExtension()",3,1,0,2,0
"net.sourceforge.pmd.renderers.IDEAJRenderer.defaultFileExtension()",3,1,0,2,0
"net.sourceforge.pmd.renderers.TextColorRenderer.defaultFileExtension()",3,1,0,2,0
"net.sourceforge.pmd.renderers.XSLTRenderer.defaultFileExtension()",3,1,0,2,0
"net.sourceforge.pmd.test.lang.DummyLanguageModule$Handler.getRuleViolationFactory()",3,1,0,2,0
"net.sourceforge.pmd.util.filter.AndFilter.getOperator()",3,1,0,2,0
"net.sourceforge.pmd.util.filter.OrFilter.getOperator()",3,1,0,2,0
"net.sourceforge.pmd.util.filter.RegexStringFilter.toString()",3,1,0,2,0
"null.MyRootNode(int id)",2,1,10,2,1
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.renderViolationRow(StringBuilder sb, String fieldName, String fieldData)",2,1,5,2,3
"net.sourceforge.pmd.lang.java.rule.performance.AvoidInstantiatingObjectsInLoopsRule.fourthParentNotReturn(ASTAllocationExpression node)",2,1,4,2,1
"net.sourceforge.pmd.lang.java.rule.performance.AvoidInstantiatingObjectsInLoopsRule.fourthParentNotThrow(ASTAllocationExpression node)",2,1,4,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil.getNodes(Class<E> clazz, String javaCode)",2,1,3,2,2
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.getNodes(Class<E> clazz, String plsqlCode)",2,1,3,2,2
"net.sourceforge.pmd.rules.RuleFactory.hasAttributeSetTrue(Element element, String attributeId)",2,1,3,2,2
"net.sourceforge.pmd.lang.java.ParserTstUtil.getLanguageVersionHandler(String version)",2,1,3,2,1
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst.parsePLSQL(String code)",2,1,3,2,1
"net.sourceforge.pmd.processor.AbstractPMDProcessor.filenameFrom(DataSource dataSource)",2,1,3,2,1
"net.sourceforge.pmd.Report$ProcessingError.getMsg()",2,1,3,2,0
"net.sourceforge.pmd.Report.isEmpty()",2,1,3,2,0
"net.sourceforge.pmd.cpd.Mark.getSourceCodeSlice()",2,1,3,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isBranch()",2,1,3,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.getDefaultLanguageVersionHandler()",2,1,3,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getUsages()",2,1,3,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameResolver.updateContextForAnonymousClass()",2,1,3,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.getUsages()",2,1,3,2,0
"net.sourceforge.pmd.RuleSetFactoryCompatibility.addFilterRuleMoved(String language, String oldRuleset, String newRuleset, String ruleName)",2,1,2,2,4
"net.sourceforge.pmd.RuleSetFactoryCompatibility.addFilterRuleRenamed(String language, String ruleset, String oldName, String newName)",2,1,2,2,4
"net.sourceforge.pmd.testframework.TestDescriptor.TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule)",2,1,2,2,4
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.selectNodes(Class<?> source, String version, Class<T> resultType, String xpath)",2,1,2,2,4
"net.sourceforge.pmd.RuleSetFactoryCompatibility.addFilterRuleRemoved(String language, String ruleset, String name)",2,1,2,2,3
"net.sourceforge.pmd.cpd.internal.JavaCCTokenizer.processToken(Tokens tokenEntries, GenericToken currentToken, String filename)",2,1,2,2,3
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredTest.setPropertyValue(Rule rule, PropertyDescriptor<T> property, String value)",2,1,2,2,3
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isEither(TypeNode n, Class<?> class1, Class<?> class2)",2,1,2,2,3
"net.sourceforge.pmd.rules.RuleFactory.setRulePropertyCapture(Rule rule, PropertyDescriptor<T> descriptor, String value)",2,1,2,2,3
"net.sourceforge.pmd.dcd.graph.MemberNode.equals(String name, String desc)",2,1,2,2,2
"net.sourceforge.pmd.lang.apex.ast.CompilerService.visitAstFromString(String source, AstVisitor<AdditionalPassScope> visitor)",2,1,2,2,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule.hasPropertyValue(PropertyDescriptor<List<String>> property, String value)",2,1,2,2,2
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomDouble(double min, double max)",2,1,2,2,2
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomLong(long min, long max)",2,1,2,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.getChildType(Node node, int childIndex)",2,1,2,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.getChildTypeDef(Node node, int childIndex)",2,1,2,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.parseAndTypeResolveForClass(Class<?> clazz, String version)",2,1,2,2,2
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.selectNodes(Class<?> source, Class<T> resultType)",2,1,2,2,2
"net.sourceforge.pmd.cpd.ApexTokenizerTest.load(String name)",2,1,2,2,1
"net.sourceforge.pmd.docs.RuleSetUtils.getRuleSetFilename(String rulesetFileName)",2,1,2,2,1
"net.sourceforge.pmd.lang.LanguageRegistry.getLanguage(String languageName)",2,1,2,2,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.isOverriddenMethod(ASTMethod node)",2,1,2,2,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.isPropertyAccessor(ASTMethod node)",2,1,2,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.isQualifiedName(Node node)",2,1,2,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.ClassNamingConventionsRule.isNonPrivate(ASTAnyTypeBodyDeclaration decl)",2,1,2,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isCompoundAssignment(Node primaryExpression)",2,1,2,2,1
"net.sourceforge.pmd.properties.AbstractPropertySource.errorForPropCapture(PropertyDescriptor<T> descriptor)",2,1,2,2,1
"net.sourceforge.pmd.renderers.IDEAJRenderer.getSimpleFileName(String fileName)",2,1,2,2,1
"net.sourceforge.pmd.renderers.TextColorRenderer.isPropertyEnabled(String property)",2,1,2,2,1
"net.sourceforge.pmd.cpd.Mark.getEndLine()",2,1,2,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.toStringLong()",2,1,2,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.getLast()",2,1,2,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isDoBranchNode()",2,1,2,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isFirstDoStatement()",2,1,2,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.removeLast()",2,1,2,2,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.isAnonymousClass()",2,1,2,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.isAbstract()",2,1,2,2,0
"net.sourceforge.pmd.lang.rule.XPathRule.hasXPathExpression()",2,1,2,2,0
"net.sourceforge.pmd.lang.vf.rule.AbstractVfRule.AbstractVfRule()",2,1,2,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.build(JavaTypeDefinition returnType, List<JavaTypeDefinition> argTypes, Method method)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, CharacterData characterData, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Comment comment, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Document document, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, DocumentType documentType, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Element element, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Entity entity, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, EntityReference entityReference, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Notation notation, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, ProcessingInstruction processingInstruction, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Text text, RuleContext ctx)",2,1,1,2,3
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.selectNodes(Class<?> source, Class<T> resultType, String xpath)",2,1,1,2,3
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.selectNodes(String source, Class<T> resultType, String xpath)",2,1,1,2,3
"net.sourceforge.pmd.document.DocumentFile.mapToOffset(final int line, final int column)",2,1,1,2,2
"net.sourceforge.pmd.lang.apex.ast.CompilerService.visitAstsFromStrings(List<String> sources, AstVisitor<AdditionalPassScope> visitor)",2,1,1,2,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.isExactlyNone(TypedNameDeclaration vnd, Class<?>... clazzes)",2,1,1,2,2
"net.sourceforge.pmd.lang.rule.RuleReference.isSame(String s1, String s2)",2,1,1,2,2
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomFloat(float min, float max)",2,1,1,2,2
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomInt(int min, int max)",2,1,1,2,2
"net.sourceforge.pmd.benchmark.TextReport.report(Map<String,BenchmarkResult> benchmarksByName)",2,1,1,2,1
"net.sourceforge.pmd.cpd.ApexTokenizerTest.tokenize(String code)",2,1,1,2,1
"net.sourceforge.pmd.cpd.CPD.addAllInDirectory(File dir)",2,1,1,2,1
"net.sourceforge.pmd.cpd.CPD.addRecursively(File dir)",2,1,1,2,1
"net.sourceforge.pmd.cpd.CPD.main(String[] args)",2,1,1,2,1
"net.sourceforge.pmd.cpd.CPDTask.addFileset(FileSet set)",2,1,1,2,1
"net.sourceforge.pmd.cpd.CPDTask.setFormat(FormatAttribute formatAttribute)",2,1,1,2,1
"net.sourceforge.pmd.cpd.LanguageFactory.createLanguage(String language)",2,1,1,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.println(String s)",2,1,1,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.printlnIndent(String s)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNodeBase.AbstractApexNodeBase(Class<?> klass)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.isGlobal(ASTModifierNode modifierNode)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidGlobalModifierRule.isWebService(ASTModifierNode modifierNode)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.MethodNamingConventionsRule.isConstructor(ASTMethod node)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule.parentNotForEach(ASTSoqlExpression node)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule.parentNotReturn(ASTSoqlExpression node)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoslInLoopsRule.parentNotForEach(ASTSoslExpression node)",2,1,1,2,1
"net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoslInLoopsRule.parentNotReturn(ASTSoslExpression node)",2,1,1,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.NodeIterator(Node contextNode)",2,1,1,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.accept(ReportVisitor visitor)",2,1,1,2,1
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor.isAttributeAccess(ASTPrimaryExpression node)",2,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.isLiteralLeftHand(Node equality)",2,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.isLiteralRightHand(Node equality)",2,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractJavaRule.isSuppressed(Node node)",2,1,1,2,1
"net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsRule.isJunit4Test(ASTMethodDeclaration node)",2,1,1,2,1
"net.sourceforge.pmd.lang.rule.XPathRule.setVersion(final String version)",2,1,1,2,1
"net.sourceforge.pmd.properties.AbstractMultiPackagedProperty.packageNamesIn(Map<PropertyDescriptorField,String> params)",2,1,1,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomChar(char[] characters)",2,1,1,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomChoice(T[] items)",2,1,1,2,1
"net.sourceforge.pmd.rules.RuleBuilder.addExample(String example)",2,1,1,2,1
"net.sourceforge.pmd.rules.RuleBuilder.defineProperty(PropertyDescriptor<?> descriptor)",2,1,1,2,1
"net.sourceforge.pmd.rules.RuleBuilder.priority(int priorityString)",2,1,1,2,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverTest.parseAndTypeResolveForClass15(Class<?> clazz)",2,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ViewerModel.addViewerModelListener(ViewerModelListener l)",2,1,1,2,1
"net.sourceforge.pmd.util.viewer.model.ViewerModel.removeViewerModelListener(ViewerModelListener l)",2,1,1,2,1
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.newCHM()",2,1,1,2,0
"net.sourceforge.pmd.RuleSets.getRuleSetsIterator()",2,1,1,2,0
"net.sourceforge.pmd.cpd.CPD.getMatches()",2,1,1,2,0
"net.sourceforge.pmd.cpd.Mark.getBeginLine()",2,1,1,2,0
"net.sourceforge.pmd.cpd.Mark.getFilename()",2,1,1,2,0
"net.sourceforge.pmd.cpd.token.internal.BaseTokenFilter.isDiscarding()",2,1,1,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.getClasses()",2,1,1,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.childrenIndexes()",2,1,1,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.grandChildrenIndexes()",2,1,1,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.newDummyNode()",2,1,1,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.getLength()",2,1,1,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.isEmpty()",2,1,1,2,0
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getChildCount()",2,1,1,2,0
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.isLeaf()",2,1,1,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractInfixEcmascriptNode.getLeft()",2,1,1,2,0
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractInfixEcmascriptNode.getRight()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.isLambdaParamWithNoType()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.GenericLiteralCheckerRule.GenericLiteralCheckerRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedLocalVariableRule.UnusedLocalVariableRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.AtLeastOneConstructorRule.AtLeastOneConstructorRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule.CommentDefaultAccessModifierRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableCouldBeFinalRule.LocalVariableCouldBeFinalRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.BeanMembersShouldSerializeRule.BeanMembersShouldSerializeRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.errorprone.NullAssignmentRule.NullAssignmentRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.rule.multithreading.UnsynchronizedStaticFormatterRule.UnsynchronizedStaticFormatterRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.getParameterCount()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.getExplicitImports()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.isVararg()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftArray()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftClassOrInterface()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftNull()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftPrimitive()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightArray()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightClassOrInterface()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightNull()",2,1,1,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightPrimitive()",2,1,1,2,0
"net.sourceforge.pmd.lang.plsql.rule.design.TooManyFieldsRule.TooManyFieldsRule()",2,1,1,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.getParameterCount()",2,1,1,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOriginalName()",2,1,1,2,0
"net.sourceforge.pmd.properties.AbstractMultiValueProperty.defaultHasNullValue()",2,1,1,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.randomBool()",2,1,1,2,0
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule.visit(XmlNode node, Attr attr, RuleContext ctx)",2,1,0,2,3
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference.JRubyReference(Ruby runtime, RubyClass klass)",2,1,0,2,2
"com.concurrent_ruby.ext.AtomicReferenceLibrary$JRubyReference8.JRubyReference8(Ruby runtime, RubyClass klass)",2,1,0,2,2
"com.concurrent_ruby.ext.JRubyMapBackendLibrary$JRubyMapBackend.JRubyMapBackend(Ruby runtime, RubyClass klass)",2,1,0,2,2
"com.concurrent_ruby.ext.JavaAtomicFixnumLibrary$JavaAtomicFixnum.JavaAtomicFixnum(Ruby runtime, RubyClass metaClass)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.ASTClassOrInterfaceType(JavaParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.ASTFormalParameter(JavaParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.ASTSwitchStatement(JavaParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.ASTVariableDeclaratorId(JavaParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.AbstractAnyTypeDeclaration(JavaParser parser, int i)",2,1,0,2,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.AbstractJavaAnnotatableNode(JavaParser parser, int i)",2,1,0,2,2
"net.sourceforge.pmd.lang.plsql.ast.ASTFormalParameter.ASTFormalParameter(PLSQLParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.ASTVariableOrConstantDeclaratorId(PLSQLParser p, int id)",2,1,0,2,2
"net.sourceforge.pmd.cpd.AntlrTokenizer.getTokenFilter(final AntlrTokenManager tokenManager)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPD.setCpdListener(CPDListener cpdListener)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setEncoding(String encoding)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setIgnoreAnnotations(boolean value)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setIgnoreIdentifiers(boolean value)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setIgnoreLiterals(boolean value)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setIgnoreUsings(boolean value)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setLanguage(String language)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setMinimumTokenCount(int minimumTokenCount)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setOutputFile(File outputFile)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setSkipBlocks(boolean skipBlocks)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setSkipBlocksPattern(String skipBlocksPattern)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setSkipDuplicateFiles(boolean skipDuplicateFiles)",2,1,0,2,1
"net.sourceforge.pmd.cpd.CPDTask.setSkipLexicalErrors(boolean skipLexicalErrors)",2,1,0,2,1
"net.sourceforge.pmd.cpd.Mark.Mark(TokenEntry token)",2,1,0,2,1
"net.sourceforge.pmd.cpd.Mark.setLineCount(int lineCount)",2,1,0,2,1
"net.sourceforge.pmd.cpd.Mark.setSourceCode(SourceCode code)",2,1,0,2,1
"net.sourceforge.pmd.cpd.SimpleRenderer.SimpleRenderer(String theSeparator)",2,1,0,2,1
"net.sourceforge.pmd.cpd.TokenEntry.setHashCode(int hashCode)",2,1,0,2,1
"net.sourceforge.pmd.cpd.internal.JavaCCTokenizer.getTokenFilter(TokenManager tokenManager)",2,1,0,2,1
"net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor.pushType(int type)",2,1,0,2,1
"net.sourceforge.pmd.dcd.graph.ClassNode.ClassNode(String name)",2,1,0,2,1
"net.sourceforge.pmd.dcd.graph.UsageGraph.UsageGraph(Filter<String> classFilter)",2,1,0,2,1
"net.sourceforge.pmd.lang.apex.ast.ASTExpressionStatement.ASTExpressionStatement(ExpressionStatement expressionStatement)",2,1,0,2,1
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule$Entry.bumpDecisionPoints(int size)",2,1,0,2,1
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.addNumberOfViolation(int number)",2,1,0,2,1
"net.sourceforge.pmd.lang.dfa.report.ReportHTMLPrintVisitor.ReportHTMLPrintVisitor(String baseDir)",2,1,0,2,1
"net.sourceforge.pmd.lang.ecmascript.ast.AbstractInfixEcmascriptNode.AbstractInfixEcmascriptNode(T infixExpression)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ParserTstUtil$Collector.Collector(Class<E> clazz)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType.ASTClassOrInterfaceType(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameter.ASTFormalParameter(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement.ASTSwitchStatement(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.ASTVariableDeclaratorId(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.setNameDeclaration(VariableNameDeclaration decl)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration.AbstractAnyTypeDeclaration(int i)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAnnotatableNode.AbstractJavaAnnotatableNode(int i)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.AbstractJavaNode(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.comment(Comment theComment)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration.ClassNameDeclaration(JavaNode node)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.setArgumentCount(int count)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.setNameWhichThisQualifies(NameOccurrence qualifiedName)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.MethodNameDeclaration(ASTMethodDeclarator node)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.SourceFileScope(final ClassLoader classLoader)",2,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.JavaTypeDefinition(TypeDefinitionType definitionType)",2,1,0,2,1
"net.sourceforge.pmd.lang.jsp.ast.AbstractJspNode.AbstractJspNode(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst$Collector.Collector(Class<E> clazz)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.ast.ASTFormalParameter.ASTFormalParameter(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.ASTVariableOrConstantDeclaratorId(int id)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.setNameDeclaration(NameDeclaration decl)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveLengthRule.ExcessiveLengthRule(Class<?> nodeClass)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.MethodNameDeclaration(ASTMethodDeclarator node)",2,1,0,2,1
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.VariableNameDeclaration(ASTVariableOrConstantDeclaratorId node)",2,1,0,2,1
"net.sourceforge.pmd.lang.vf.ast.AbstractVFNode.AbstractVFNode(int id)",2,1,0,2,1
"net.sourceforge.pmd.processor.AbstractPMDProcessor.AbstractPMDProcessor(PMDConfiguration configuration)",2,1,0,2,1
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.AbstractPropertyDescriptorTester(String typeName)",2,1,0,2,1
"net.sourceforge.pmd.properties.EnumeratedMultiProperty$EnumMultiPBuilder.EnumMultiPBuilder(String name)",2,1,0,2,1
"net.sourceforge.pmd.properties.StringMultiProperty$StringMultiPBuilder.StringMultiPBuilder(String name)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.description(String description)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.externalInfoUrl(String externalInfoUrl)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.maximumLanguageVersion(String maximum)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.message(String message)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.minimumLanguageVersion(String minimum)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.setDeprecated(boolean deprecated)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.usesDFA(boolean usesDFA)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.usesMultifile(boolean usesMultifile)",2,1,0,2,1
"net.sourceforge.pmd.rules.RuleBuilder.usesTyperesolution(boolean usesTyperesolution)",2,1,0,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setNumberInDocument(int numberInDocument)",2,1,0,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setProperties(Properties properties)",2,1,0,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setRegressionTest(boolean isRegressionTest)",2,1,0,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setReinitializeRule(boolean reinitializeRule)",2,1,0,2,1
"net.sourceforge.pmd.testframework.TestDescriptor.setUseAuxClasspath(boolean useAuxClasspath)",2,1,0,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.setCode(LineGetter h)",2,1,0,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas.setMethod(Node node)",2,1,0,2,1
"net.sourceforge.pmd.util.designer.DFAPanel$ElementWrapper.ElementWrapper(DFAGraphMethod node)",2,1,0,2,1
"net.sourceforge.pmd.util.filter.AndFilter.AndFilter(Filter<T>... filters)",2,1,0,2,1
"net.sourceforge.pmd.util.filter.OrFilter.OrFilter(Filter<T>... filters)",2,1,0,2,1
"ParserCornerCases17.ParserCornerCases17()",2,1,0,2,0
"com.cb4.common.utils.MapUtilsTest.MapUtilsTest()",2,1,0,2,0
"net.sourceforge.pmd.PMDVersion.PMDVersion()",2,1,0,2,0
"net.sourceforge.pmd.Report$ProcessingError.getError()",2,1,0,2,0
"net.sourceforge.pmd.Report$ProcessingError.getFile()",2,1,0,2,0
"net.sourceforge.pmd.Report$SuppressedViolation.getRuleViolation()",2,1,0,2,0
"net.sourceforge.pmd.Report$SuppressedViolation.getUserMessage()",2,1,0,2,0
"net.sourceforge.pmd.Report.getElapsedTimeInMillis()",2,1,0,2,0
"net.sourceforge.pmd.Report.getListeners()",2,1,0,2,0
"net.sourceforge.pmd.Report.getSuppressedRuleViolations()",2,1,0,2,0
"net.sourceforge.pmd.Report.getViolationTree()",2,1,0,2,0
"net.sourceforge.pmd.benchmark.TimingReport.getWallClockMillis()",2,1,0,2,0
"net.sourceforge.pmd.cpd.Mark.getLineCount()",2,1,0,2,0
"net.sourceforge.pmd.cpd.Mark.getToken()",2,1,0,2,0
"net.sourceforge.pmd.cpd.SimpleRenderer.SimpleRenderer()",2,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.getBeginLine()",2,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.getIdentifier()",2,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.getIndex()",2,1,0,2,0
"net.sourceforge.pmd.cpd.TokenEntry.getTokenSrcID()",2,1,0,2,0
"net.sourceforge.pmd.dcd.graph.ClassNode.getName()",2,1,0,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.getClassNode()",2,1,0,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.getDesc()",2,1,0,2,0
"net.sourceforge.pmd.dcd.graph.MemberNode.getName()",2,1,0,2,0
"net.sourceforge.pmd.docs.EscapeUtils.EscapeUtils()",2,1,0,2,0
"net.sourceforge.pmd.docs.RuleSetUtils.RuleSetUtils()",2,1,0,2,0
"net.sourceforge.pmd.document.DocumentFile.getLineToOffset()",2,1,0,2,0
"net.sourceforge.pmd.jaxen.AttributeTest.suite()",2,1,0,2,0
"net.sourceforge.pmd.lang.LanguageRegistry.getInstance()",2,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParser$TopLevelVisitor.getTopLevel()",2,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexParser.getSuppressMap()",2,1,0,2,0
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiedName.getOperation()",2,1,0,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule$Entry.bumpDecisionPoints()",2,1,0,2,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTest.nextId()",2,1,0,2,0
"net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath.CurrentPath()",2,1,0,2,0
"net.sourceforge.pmd.lang.dfa.report.AbstractReportNode.getParent()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil$Collector.getCollection()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.ParserTstUtil.ParserTstUtil()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId.getNameDeclaration()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaNode.comment()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.qname.QualifiedNameFactory.QualifiedNameFactory()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.labels()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule.mappings()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.AcceptanceTest.suite()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration.getAccessNodeParent()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.getArgumentCount()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.getNameForWhichThisIsAQualifier()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isMethodOrConstructorInvocation()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isMethodReference()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.isPartOfQualifiedName()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.JavaNameOccurrence.setIsMethodOrConstructorInvocation()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration.getMethodNameDeclaratorNode()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.Search.getResult()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScope.getPackageName()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.getMethod()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.getParameterTypes()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.getReturnType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.MethodType.isParameterized()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.TypeHelper.TypeHelper()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getDefinitionType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isExactType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isLowerBound()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.getLeftMentionedVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.getRightMentionedVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isLeftVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.isRightVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.leftProper()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.leftVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.rightProper()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.rightVariable()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.ruleType()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.getInnerClasses()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.visitors.PMDASMVisitor.getPackages()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst$Collector.getCollection()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.bumpArrayDepth()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.getArrayDepth()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.getNameDeclaration()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclaratorId.isArray()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.MethodNameDeclaration.getMethodNameDeclaratorNode()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.NameFinder.getNames()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.Search.getResult()",2,1,0,2,0
"net.sourceforge.pmd.lang.plsql.symboltable.VariableNameDeclaration.getDeclaratorId()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.copyExamples()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.AbstractRule.copyRuleChainVisits()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenDescription()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenExamples()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenExternalInfoUrl()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenLanguage()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenMaximumLanguageVersion()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenMessage()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenMinimumLanguageVersion()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenName()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getOverriddenPriority()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.getRuleSetReference()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.RuleReference.isOverriddenDeprecated()",2,1,0,2,0
"net.sourceforge.pmd.lang.rule.stat.StatisticalRuleHelper.getMean()",2,1,0,2,0
"net.sourceforge.pmd.lang.vm.ast.TokenMgrError.TokenMgrError()",2,1,0,2,0
"net.sourceforge.pmd.properties.MethodPropertyTest.MethodPropertyTest()",2,1,0,2,0
"net.sourceforge.pmd.renderers.CSVRenderer.CSVRenderer()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.TestDescriptor()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getCode()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getDescription()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getExpectedLineNumbers()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getExpectedMessages()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getLanguageVersion()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getNumberInDocument()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getNumberOfProblemsExpected()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getProperties()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getReinitializeRule()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.getRule()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.isRegressionTest()",2,1,0,2,0
"net.sourceforge.pmd.testframework.TestDescriptor.isUseAuxClasspath()",2,1,0,2,0
"net.sourceforge.pmd.util.ClassUtil.getClassShortNames()",2,1,0,2,0
"net.sourceforge.pmd.util.IOUtil.createWriter()",2,1,0,2,0
"net.sourceforge.pmd.util.designer.DFAPanel$ElementWrapper.getNode()",2,1,0,2,0
"net.sourceforge.pmd.util.filter.AndFilter.AndFilter()",2,1,0,2,0
"net.sourceforge.pmd.util.filter.OrFilter.OrFilter()",2,1,0,2,0
"net.sourceforge.pmd.util.filter.RegexStringFilter.getEndsWith()",2,1,0,2,0
"net.sourceforge.pmd.util.filter.RegexStringFilter.getRegex()",2,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.ViewerModel.ViewerModel()",2,1,0,2,0
"net.sourceforge.pmd.util.viewer.model.ViewerModel.getRootNode()",2,1,0,2,0
"org.sonar.plugins.scala.util.StringUtils.StringUtils()",2,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.resolveTypeDefinition(Type type, Method method, List<JavaTypeDefinition> methodTypeArgs)",1,1,0,2,3
"ParserCornerCases17$MyClass.MyClass(T t)",1,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.equals(Object obj)",1,1,0,2,1
"net.sourceforge.pmd.RulesetsFactoryUtils.RulesetsFactoryUtils()",1,1,0,2,0
"net.sourceforge.pmd.dcd.graph.MemberNodeComparator.MemberNodeComparator()",1,1,0,2,0
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityRule$Entry.Entry()",1,1,0,2,0
"net.sourceforge.pmd.lang.java.ast.CommentUtil.CommentUtil()",1,1,0,2,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsComputer.JavaMetricsComputer()",1,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getType()",1,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.hashCode()",1,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.toString()",1,1,0,2,0
"net.sourceforge.pmd.util.ClassUtil.ClassUtil()",1,1,0,2,0
"net.sourceforge.pmd.util.CollectionUtil.CollectionUtil()",1,1,0,2,0
"net.sourceforge.pmd.util.IOUtil.IOUtil()",1,1,0,2,0
"com.concurrent_ruby.ext.AtomicReferenceLibrary$UnsafeHolder.UnsafeHolder()",0,1,1,2,0
"net.sourceforge.pmd.cpd.AntlrTokenizer.getLexerForSource(SourceCode sourceCode)",0,1,0,2,1
"net.sourceforge.pmd.cpd.internal.JavaCCTokenizer.getLexerForSource(SourceCode sourceCode)",0,1,0,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getFirstNode(Node contextNode)",0,1,0,2,1
"net.sourceforge.pmd.lang.ast.xpath.NodeIterator.getNextNode(Node contextNode)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.appliesToClassName(String name)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.rule.AbstractInefficientZeroCheck.isTargetMethod(JavaNameOccurrence occ)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getAsSuper(Class<?> superClazz)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getGenericType(String parameterName)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getGenericType(int index)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getJavaType(int index)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getSuperTypeSet(Set<JavaTypeDefinition> destinationSet)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.hasSameErasureAs(JavaTypeDefinition def)",0,1,0,2,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.resolveTypeDefinition(Type type)",0,1,0,2,1
"net.sourceforge.pmd.processor.AbstractPMDProcessor.collectReports(List<Renderer> renderers)",0,1,0,2,1
"net.sourceforge.pmd.processor.AbstractPMDProcessor.runAnalysis(PmdRunnable runnable)",0,1,0,2,1
"net.sourceforge.pmd.dcd.graph.MemberNode.getMember()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getEnclosingClass()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getErasedSuperTypeSet()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getJavaTypeCount()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getSuperTypeSet()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.getTypeParameterCount()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isArrayType()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isClassOrInterface()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isGeneric()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isIntersectionType()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isNullType()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.isPrimitive()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition.shallowString()",0,1,0,2,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.BoundOrConstraint.reduce()",0,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createBadMultiProperty()",0,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertyDescriptorTester.createMultiProperty()",0,1,0,2,0
"net.sourceforge.pmd.properties.AbstractPropertySource.getPropertySourceType()",0,1,0,2,0
"net.sourceforge.pmd.util.filter.Filters.Filters()",0,1,0,2,0
"net.sourceforge.pmd.util.designer.CreateXMLRulePanel.CreateXMLRulePanel(JTextArea xpathQueryArea, CodeEditorTextPane codeEditorPane)",70,1,20,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest.testVisit()",57,1,64,1,0
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclarationTest.jdk9ModuleInfo()",48,1,102,1,0
"net.sourceforge.pmd.RuleSetTest.testIncludeExcludeMultipleRuleSetWithRuleChainApplies()",46,1,38,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaCounterBelongsToClass()",46,1,31,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testImageOfPrimarySuffix()",44,1,26,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptionsTest.testSetters()",43,1,48,1,0
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getFollowingAxisIterator(Object contextNode)",41,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getPrecedingAxisIterator(Object contextNode)",41,1,0,1,1
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.nestedMultipleTags()",40,1,58,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.nestedMultipleTags()",39,1,58,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptionsTest.testConstructor()",38,1,56,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testFollowingSibling()",38,1,32,1,0
"net.sourceforge.pmd.RuleSetTest.ruleExceptionShouldNotStopProcessingFileWithRuleChain()",38,1,31,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedStartTagWithUnmatchedCloseOfDifferentTag()",37,1,49,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedStartTagWithUnmatchedCloseOfDifferentTag()",36,1,49,1,0
"net.sourceforge.pmd.testframework.RuleTstTest.shouldAssertLinenumbersSorted()",34,1,18,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testAttributeValueContainingHash()",33,1,23,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unmatchedTagDoesNotInfluenceStructure()",32,1,40,1,0
"net.sourceforge.pmd.RuleSetTest.testIncludeExcludeApplies()",32,1,30,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testAttributeValueContainingHash()",32,1,23,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unmatchedTagDoesNotInfluenceStructure()",31,1,40,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testLocalVarInferenceCanBeParsedJava10()",31,1,36,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedParentTagClosedBeforeChild()",30,1,40,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedParentTagClosedBeforeChild()",30,1,40,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdasInMethod()",30,1,13,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.nestedEmptyTags()",29,1,40,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.nestedEmptyTags()",29,1,40,1,0
"net.sourceforge.pmd.RuleSetTest.ruleExceptionShouldNotStopProcessingFile()",29,1,30,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testLocalVarInferenceBeforeJava10()",29,1,29,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.sortNodesByName(Set<ASTElement> elements)",29,1,2,1,1
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.sortNodesByName(Set<ASTElement> elements)",29,1,2,1,1
"net.sourceforge.pmd.internal.util.IteratorUtil.asReversed(final List<T> lst)",29,1,0,1,1
"net.sourceforge.pmd.RuleSetReferenceIdTest.testConstructorGivenHttpUrlSingleRuleInputStream()",28,1,50,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.mixedExpressions()",27,1,36,1,0
"net.sourceforge.pmd.RuleSetSchemaTest.generateRuleSet(String version)",27,1,3,1,1
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.sortByImage(Set<T> elements)",26,1,2,1,1
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest.visitWith(ApexNode<Compilation> acu, final boolean force)",25,1,3,1,2
"net.sourceforge.pmd.lang.java.metrics.ProjectMemoizerTest.visitWith(ASTCompilationUnit acu, final boolean force)",25,1,3,1,2
"net.sourceforge.pmd.RuleSetTest.testLanguageApplies()",24,1,34,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testElementAttributeAndNamespace()",24,1,29,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testElementAttributeAndNamespace()",24,1,29,1,0
"net.sourceforge.pmd.lang.xml.ast.XmlParser.parseDocument(Reader reader)",24,1,24,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinderTest.testAnnonInnerClassScoping()",24,1,20,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaAnonymousClassField()",24,1,19,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testLineNumbers()",23,1,27,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedEndOfDoc()",23,1,19,1,0
"net.sourceforge.pmd.RuleSetWriterTest.testRuleReferenceOverriddenName()",23,1,10,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaInInitializerAndConstructor()",23,1,9,1,0
"net.sourceforge.pmd.RuleSetTest.testAddExcludePatterns()",22,1,32,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testSwitchRules()",22,1,29,1,0
"net.sourceforge.pmd.RuleSetTest.ruleExceptionShouldBeReported()",22,1,26,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testWildcardClasspathContentsChangeInvalidatesCache()",22,1,22,1,0
"net.sourceforge.pmd.lang.metrics.AbstractMetricsFacade.computeWithResultOption(MetricKey<O> key, T node, MetricOptions options, ResultOption resultOption)",22,1,7,1,4
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testLineNumbersWithinEcmascriptRules()",22,1,0,1,0
"net.sourceforge.pmd.testframework.RuleTstTest.shouldCallStartAndEnd()",21,1,40,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testConstructorGivenHttpUrlInputStream()",21,1,38,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testAuxClasspathChangeInvalidatesCache()",21,1,27,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testAuxClasspathJarContentsChangeInvalidatesCache()",21,1,24,1,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.testThisExpression()",21,1,21,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLocalClassDeepNesting()",21,1,18,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.build()",21,1,4,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptionsTest.testDefaults()",20,1,29,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptionsTest.testConstructor()",20,1,24,1,0
"net.sourceforge.pmd.ReportTest.testMetric1()",20,1,21,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testClasspathContentsChangeInvalidatesCache()",20,1,18,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testSuppresionComment()",20,1,15,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest.dtdIsNotLookedUp()",20,1,10,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest.xsdIsNotLookedUp()",20,1,9,1,0
"net.sourceforge.pmd.lang.java.QuickstartRulesetTest.noDeprecations()",20,1,7,1,0
"net.sourceforge.pmd.docs.GenerateRuleDocsCmd.findAdditionalRulesets(Path basePath)",20,1,6,1,1
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.toList()",20,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getChildAxisIterator(Object contextNode)",20,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getFollowingSiblingAxisIterator(Object contextNode)",20,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getPrecedingSiblingAxisIterator(Object contextNode)",20,1,0,1,1
"net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler.init()",19,1,25,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testSwitchExpressionsBreak()",19,1,23,1,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest.testAttributeAxisIterator()",19,1,19,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testStorePersistsFilesWithViolations()",19,1,17,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testDoctype()",19,1,17,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testDoctype()",19,1,17,1,0
"net.sourceforge.pmd.RuleSetWriterTest.testWrite()",19,1,10,1,0
"net.sourceforge.pmd.RuleContext.getAttribute(String name)",19,1,1,1,1
"net.sourceforge.pmd.RuleContext.removeAttribute(String name)",19,1,1,1,1
"net.sourceforge.pmd.typeresolution.testdata.LocalGenericClass.localClassInGeneric()",19,1,0,1,0
"net.sourceforge.pmd.ReportTest.testSummary()",18,1,23,1,0
"net.sourceforge.pmd.ant.FormatterTest.testType()",18,1,18,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testWildcardClasspath()",18,1,18,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testNestedAnonymousClass()",18,1,12,1,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsProviderTest.testThereIsNoMemoisation()",18,1,9,1,0
"net.sourceforge.pmd.lang.apex.DefaultRulesetTest.loadQuickstartRuleset()",18,1,5,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTagMultipleLevels()",17,1,31,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedTagMultipleLevels()",17,1,31,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseLocalClasses()",17,1,16,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testClasspathChangeInvalidatesCache()",17,1,14,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testDescendantAxisIterator()",17,1,13,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testMultipleAnonymousClasses()",17,1,12,1,0
"net.sourceforge.pmd.it.BinaryDistributionIT.runCPD()",17,1,9,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaField()",17,1,9,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaInterfaceField()",17,1,9,1,0
"net.sourceforge.pmd.cpd.CPDTest.testFileAddedAsSymlinkAndReal()",17,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaInStaticInitializer()",17,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLambdaLocalClassField()",17,1,5,1,0
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.getMessage()",17,1,3,1,0
"net.sourceforge.pmd.RuleSetTest.testAddExcludePattern()",16,1,23,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testForLoopEnhancedWithVar2()",16,1,22,1,0
"net.sourceforge.pmd.lang.java.metrics.ParameterizedMetricKeyTest.testAdHocMetricKey()",16,1,15,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest.testRulesDysnfunctionalLog()",16,1,15,1,0
"net.sourceforge.pmd.RuleSetTest.copyConstructorDeepCopies()",16,1,13,1,0
"net.sourceforge.pmd.ReportTest.testSortedReportLine()",16,1,12,1,0
"net.sourceforge.pmd.RuleSetTest.ruleExceptionShouldBeThrownIfNotIgnored()",16,1,12,1,0
"net.sourceforge.pmd.ReportTest.testListener()",16,1,8,1,0
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigatorTest.getDocumentNode()",16,1,7,1,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.addScope(Scope newScope, JavaNode node)",16,1,4,1,2
"net.sourceforge.pmd.cpd.CPDTest.testFileSectionWithBrokenSymlinks()",16,1,4,1,0
"net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel.init()",16,1,4,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$RegexPropertyBuilder.defaultValue(String pattern, int flags)",16,1,2,1,2
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.testOperationsAreThere()",16,1,2,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.require(PropertyConstraint<? super T> constraint)",16,1,1,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.AbstractSingleValueProperty(String theName, String theDescription, T theDefault, float theUIOrder, boolean isDefinedExternally)",16,1,0,1,5
"net.sourceforge.pmd.properties.ValueParserConstants.multi(final ValueParser<U> parser, final char delimiter)",16,1,0,1,2
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.delim(char delim)",16,1,0,1,1
"net.sourceforge.pmd.RuleSetTest.testAddIncludePatterns()",15,1,24,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.textAfterOpenAndClosedTag()",15,1,19,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.textAfterOpenAndClosedTag()",15,1,19,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testSwitchExpressions()",15,1,18,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testAnonymousClass()",15,1,18,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testImportHtmlScript()",15,1,14,1,0
"net.sourceforge.pmd.ReportTest.testSortedReportFile()",15,1,12,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule.ClassNamingConventionsRule()",15,1,11,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLocalInAnonymousClass()",15,1,8,1,0
"net.sourceforge.pmd.cache.AnalysisResult.computeFileChecksum(final File sourceFile)",15,1,6,1,1
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWithExpectedException(String xpath, String code, Class<? extends Exception> expectedThrowable, String expectedMessage)",15,1,5,1,4
"net.sourceforge.pmd.benchmark.TimeTracker$TimedResult.accumulate(final TimerEntry timerEntry, final long extraData)",15,1,5,1,2
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.defaultValues(V head, V... tail)",15,1,5,1,2
"net.sourceforge.pmd.RuleSetReferenceIdTest.testInternalWithExternalRuleSet()",15,1,3,1,0
"PmdTestChild.PmdTestChild()",15,1,0,1,0
"net.sourceforge.pmd.RuleSetTest.testSetExcludePatterns()",14,1,21,1,0
"net.sourceforge.pmd.RuleSetTest.testSetIncludePatterns()",14,1,21,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseAnonymousClass()",14,1,14,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noSpacesBetweenTags()",14,1,11,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTagsWithELWithin()",14,1,11,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.noSpacesBetweenTags()",14,1,11,1,0
"net.sourceforge.pmd.renderers.SummaryHTMLRenderer.end()",14,1,11,1,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.testSuperExpression()",14,1,8,1,0
"net.sourceforge.pmd.it.BinaryDistributionIT.runPMD()",14,1,7,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest.setUpForTest(final String ruleset)",14,1,6,1,1
"net.sourceforge.pmd.cpd.CPDTest.testFileAddedWithRelativePath()",14,1,3,1,0
"net.sourceforge.pmd.RuleContext.setIgnoreExceptions(boolean ignoreExceptions)",14,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.isImportOnDemand()",14,1,0,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testAuxClasspathChangeWithoutDFAorTypeResolutionDoesNotInvalidatesCache()",13,1,15,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testAuxClasspathNonExistingAuxclasspathEntriesIgnored()",13,1,15,1,0
"net.sourceforge.pmd.docs.GenerateRuleDocsCmd.main(String[] args)",13,1,12,1,1
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testELInHtmlScript()",13,1,12,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testInlineCommentInEL()",13,1,12,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testQuotedELInHtmlScript()",13,1,12,1,0
"net.sourceforge.pmd.RuleSetTest.testRuleList()",13,1,11,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testMultipleRulesWithSpaces()",13,1,9,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.FieldNamingConventionsRule.FieldNamingConventionsRule()",13,1,9,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithBeanWriteTagAsValue()",13,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.quoteAttrWithBeanWriteTagAsValue()",13,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testInvalidLanguageVersion()",13,1,6,1,0
"net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu.SimpleNodeSubMenu(ViewerModel model, Node node)",13,1,4,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.AbstractNcssCountRule(Class<?> nodeClass)",13,1,4,1,1
"net.sourceforge.pmd.util.TypeMapTest.testAddClassOfQ()",13,1,3,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$RegexPropertyBuilder.defaultValue(String pattern)",13,1,2,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilder.uiOrder(float f)",13,1,0,1,1
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTag()",12,1,22,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTagAndNoQuotesForAttribute()",12,1,22,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedTag()",12,1,22,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedTagAndNoQuotesForAttribute()",12,1,22,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptionsTest.testDefaults()",12,1,13,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testHtmlScriptWithAttribute()",12,1,13,1,0
"net.sourceforge.pmd.RuleSetTest.testEquals4()",12,1,10,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testRulesetChangeInvalidatesCache()",12,1,9,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testELInTagValue()",12,1,9,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testELInTagValueWithCommentSQ()",12,1,9,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.haveSameAccessModifier(ASTClassOrInterfaceDeclaration node, ASTConstructorDeclaration cons)",12,1,8,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testLexicalErrorFilename()",12,1,8,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.singleQuoteAttrTab()",12,1,8,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.dumpDocToWriter(Document doc, Writer writer)",12,1,7,1,2
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithScriptletInValue()",12,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.textBetweenUnopenedTag()",12,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.textMultipleClosingTags()",12,1,7,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.build()",12,1,4,1,0
"net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler.ParseExceptionHandler(JFrame parent, Exception exc)",12,1,2,1,2
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getDefaultLanguageVersionForFile(File sourceFile)",12,1,2,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.createUnsupportedOperationException(String name)",12,1,2,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.TestAccessEvaluator()",12,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.isMulticatchStatement()",12,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.createLocalScope(JavaNode node)",12,1,1,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.createMethodScope(JavaNode node)",12,1,1,1,1
"net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel.EvaluationResultsPanel(ViewerModel model)",12,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.getOperation()",12,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testArrayAccess()",11,1,18,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseClass()",11,1,17,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testLocalClassNameClash()",11,1,14,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testHtmlScriptWithAttribute()",11,1,12,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testComplexHtmlScript()",11,1,11,1,0
"net.sourceforge.pmd.util.TypeMapTest.testTypeFor()",11,1,10,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testCaseAsIdentifier()",11,1,9,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testImportHtmlScript()",11,1,9,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testComplexHtmlScript()",11,1,9,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testELInTagValueWithCommentDQ()",11,1,9,1,0
"net.sourceforge.pmd.RuleSetTest.testEquals5()",11,1,8,1,0
"net.sourceforge.pmd.RuleSetTest.testEquals6()",11,1,8,1,0
"net.sourceforge.pmd.it.BinaryDistributionIT.getExpectedFileNames()",11,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrTab()",11,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithDollarSignInValue()",11,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithSharpSymbolInValue()",11,1,7,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest.testRulesThreadSafety()",11,1,7,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testCacheValidityWithNoChanges()",11,1,6,1,0
"net.sourceforge.pmd.RuleViolationComparatorTest.createJavaRuleViolation(Rule rule, String fileName, int beginLine, String description, int beginColumn, int endLine, int endColumn)",11,1,5,1,7
"net.sourceforge.pmd.lang.metrics.MetricOptions.ofOptions(Collection<? extends MetricOption> options)",11,1,2,1,1
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.defaultValue(Collection<? extends V> val)",11,1,2,1,1
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.requireEach(PropertyConstraint<? super V> constraint)",11,1,2,1,1
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.asStringFor(Method method)",11,1,2,1,1
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.testGetterDetection()",11,1,2,1,0
"net.sourceforge.pmd.lang.java.metrics.SignatureTest.testSetterDetection()",11,1,2,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.GenericCollectionPropertyBuilder(String name, ValueParser<V> parser, Supplier<C> emptyCollSupplier, Class<V> type)",11,1,0,1,4
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isAccessibleOrTrustedNamespace(final Namespace namespace)",11,1,0,1,1
"net.sourceforge.pmd.RuleSetTest.testAddIncludePattern()",10,1,16,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseMalformed()",10,1,16,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.XmlParserOptions()",10,1,16,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testVarKeywordWithIndirectReference()",10,1,14,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParsePackages()",10,1,13,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.quoteEL()",10,1,13,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testForLoopEnhancedWithVar()",10,1,12,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testForLoopWithVar()",10,1,12,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testTryWithResourcesWithVar()",10,1,12,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testMultipleCaseLabels()",10,1,12,1,0
"net.sourceforge.pmd.it.CpdExecutor.runCpdUnix(Path tempDir, String... arguments)",10,1,11,1,2
"net.sourceforge.pmd.it.CpdExecutor.runCpdWindows(Path tempDir, String... arguments)",10,1,11,1,2
"net.sourceforge.pmd.it.PMDExecutor.runPMDUnix(Path tempDir, String... arguments)",10,1,11,1,2
"net.sourceforge.pmd.it.PMDExecutor.runPMDWindows(Path tempDir, String... arguments)",10,1,11,1,2
"net.sourceforge.pmd.RuleSetTest.testAccessors()",10,1,11,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testDigitSeparators()",10,1,11,1,0
"net.sourceforge.pmd.RuleSetTest.testAddRuleSet()",10,1,9,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testFileIsNotUpToDateWhenEdited()",10,1,9,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testVariables()",10,1,9,1,0
"net.sourceforge.pmd.RuleSetSchemaTest.parseWithVersion2(String ruleset)",10,1,8,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testMethodOverload()",10,1,8,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.quoteAttrValue()",10,1,8,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testHtmlScript()",10,1,8,1,0
"net.sourceforge.pmd.util.TypeMapTest.testContainsClassOfQ()",10,1,8,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.getViolations(Rule rule, String code)",10,1,7,1,2
"net.sourceforge.pmd.RuleSetTest.testAddRuleSetByReferenceBad()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithJspExpression()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrWithMalformedJspExpression()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testCData()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testComment()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTagsWithDollar()",10,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.unclosedTagsWithJspExpressionWithin()",10,1,7,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testCData()",10,1,7,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.unclosedTagsWithDollar()",10,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.setDefaultCharset(String charsetName)",10,1,6,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.FormalParameterNamingConventionsRule.FormalParameterNamingConventionsRule()",10,1,6,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.LocalVariableNamingConventionsRule.LocalVariableNamingConventionsRule()",10,1,6,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.PropertyNamingConventionsRule.PropertyNamingConventionsRule()",10,1,6,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.addSetupEntityVisibleToType(final SObjectTypeInfo type, final String typeName)",10,1,5,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testTokenizerWithSkipBlocksPattern()",10,1,5,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testTokenizerWithoutSkipBlocks()",10,1,5,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.setUp()",10,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testSimpleLocalClass()",10,1,5,1,0
"net.sourceforge.pmd.properties.AbstractProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",10,1,4,1,1
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.NcssTypeCountRule()",10,1,4,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testVoidKeyword()",10,1,4,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTest.testXorAssignment()",10,1,4,1,0
"net.sourceforge.pmd.RuleContext.RuleContext(RuleContext ruleContext)",10,1,3,1,1
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getLanguagesForFile(String fileName)",10,1,2,1,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.hasRealLoc()",10,1,2,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.AntlrTokenManager(final Lexer lexer, final String fileName)",10,1,1,1,2
"net.sourceforge.pmd.util.viewer.gui.XPathPanel.XPathPanel(ViewerModel model)",10,1,1,1,1
"ParserCornerCases18.methodReferences()",10,1,1,1,0
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.rangeString(Number low, Number up)",10,1,0,1,2
"net.sourceforge.pmd.PMDConfiguration.setIgnoreIncrementalAnalysis(boolean noCache)",10,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setReportFormat(String reportFormat)",10,1,0,1,1
"net.sourceforge.pmd.RuleContext.setLanguageVersion(LanguageVersion languageVersion)",10,1,0,1,1
"net.sourceforge.pmd.RuleContext.setSourceCodeFile(File sourceCodeFile)",10,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.isStressTest()",10,1,0,1,0
"net.sourceforge.pmd.RuleContext.isIgnoreExceptions()",10,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.getQualifiedName()",10,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.getPackage()",10,1,0,1,0
"net.sourceforge.pmd.RuleSetSchemaTest.verifyVersion2()",9,1,11,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.assertRuleSetReferenceId(final boolean expectedExternal, final String expectedRuleSetFileName, final boolean expectedAllRules, final String expectedRuleName, final String expectedToString, final RuleSetReferenceId reference)",9,1,10,1,6
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testClassLevelSuppression()",9,1,10,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.XmlParserOptions(Rule rule)",9,1,8,1,1
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest.testAttributeAxisIteratorWithEnum()",9,1,8,1,0
"net.sourceforge.pmd.cli.BaseCLITest.runTest(String[] args, String testname, int expectedExitCode)",9,1,7,1,3
"net.sourceforge.pmd.lang.jsp.rule.security.NoUnsanitizedJSPExpressionRule.elOutsideTaglib(ASTElExpression node)",9,1,7,1,1
"net.sourceforge.pmd.RuleSetReferenceIdTest.testMultipleFullRuleSet()",9,1,7,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testRawStringLiteral()",9,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.noQuoteAttrValue()",9,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testHtmlScript()",9,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testTextInTag()",9,1,7,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testTextInTag()",9,1,7,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseLambdaInEnumConstant()",9,1,6,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testMappings()",9,1,6,1,0
"net.sourceforge.pmd.util.TypeMapTest.testContainsString()",9,1,6,1,0
"net.sourceforge.pmd.ReportTest.getNode(int line, int column)",9,1,5,1,2
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.getReportForTestString(Rule r, String test)",9,1,5,1,2
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testConstructorOverload()",9,1,5,1,0
"net.sourceforge.pmd.util.TypeMapTest.testSize()",9,1,5,1,0
"net.sourceforge.pmd.lang.plsql.PLSQLParser.parse(String fileName, Reader source)",9,1,4,1,2
"net.sourceforge.pmd.cpd.PLSQLTokenizer.setProperties(Properties properties)",9,1,4,1,1
"net.sourceforge.pmd.lang.apex.rule.design.NcssConstructorCountRule.NcssConstructorCountRule()",9,1,4,1,0
"net.sourceforge.pmd.lang.apex.rule.design.NcssMethodCountRule.NcssMethodCountRule()",9,1,4,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.hasDefaultConstructorInvocation(ASTConstructorDeclaration cons)",9,1,3,1,1
"net.sourceforge.pmd.benchmark.TimeTracker.startGlobalTracking()",9,1,3,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.render(Iterator<Match> matches)",9,1,2,1,1
"net.sourceforge.pmd.lang.LanguageVersionDiscoverer.getLanguagesForFile(File sourceFile)",9,1,2,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.isLocalClass()",9,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.isUnnamedPackage()",9,1,2,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.flush()",9,1,2,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.XMLRenderer(String encoding)",9,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.isSameNodeInfo(NodeInfo other)",9,1,1,1,1
"net.sourceforge.pmd.lang.dfa.Structure.createNewNode(Node node)",9,1,1,1,1
"net.sourceforge.pmd.properties.StringPropertyTest.randomCharIn(char[] chars)",9,1,1,1,1
"net.sourceforge.pmd.util.TypeMap.TypeMap(Class<?>... types)",9,1,1,1,1
"net.sourceforge.pmd.util.TypeMap.contains(Class<?> type)",9,1,1,1,1
"net.sourceforge.pmd.util.TypeMap.contains(String typeName)",9,1,1,1,1
"net.sourceforge.pmd.util.TypeMap.typeFor(String typeName)",9,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.getTypeDefinition()",9,1,1,1,0
"net.sourceforge.pmd.stat.DataPoint.DataPoint()",9,1,1,1,0
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.MacroParseException(final String msg, final String templateName, final Token currentToken)",9,1,0,1,3
"net.sourceforge.pmd.PMDConfiguration.setBenchmark(boolean benchmark)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setFailOnViolation(boolean failOnViolation)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setIgnoreFilePath(String ignoreFilePath)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setInputFilePath(String inputFilePath)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setRuleSetFactoryCompatibilityEnabled(boolean ruleSetFactoryCompatibilityEnabled)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setShowSuppressedViolations(boolean showSuppressedViolations)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setStressTest(boolean stressTest)",9,1,0,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.ScopeAndDeclarationFinder(ClassLoader classLoader)",9,1,0,1,1
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.isSupportedVersion(String version)",9,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.isBenchmark()",9,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.isRuleSetFactoryCompatibilityEnabled()",9,1,0,1,0
"net.sourceforge.pmd.lang.vm.directive.RuntimeMacro.getScopeName()",9,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testConstructor()",8,1,13,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testVarKeywordTypeImage()",8,1,13,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testVarKeywordWithPrimitiveTypeImage()",8,1,13,1,0
"net.sourceforge.pmd.it.ExecutionResult.toString()",8,1,10,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.noQuoteAttrWithJspEL()",8,1,8,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testMixRuleSet()",8,1,7,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testMultipleSimpleRuleSet()",8,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testFormatterEncodingWithXML()",8,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testFormatterEncodingWithXMLConsole()",8,1,7,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testIgnoreBetweenSpecialComments()",8,1,7,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testUnicodeSupport()",8,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.quoteTagInAttribute()",8,1,7,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.defineProperties()",8,1,7,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptionsTest.testSetters()",8,1,6,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk7PrivateMethodInnerClassInterface2()",8,1,6,1,0
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.tryAcquire(ThreadContext context, IRubyObject permits, IRubyObject timeout)",8,1,5,1,3
"net.sourceforge.pmd.cli.BaseCLITest.createTestOutputFile(String filename)",8,1,5,1,1
"net.sourceforge.pmd.util.database.SourceObject.getPseudoFileName()",8,1,5,1,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation(RuleContext ruleContext, Rule rule, Node node, String message, int beginLine, int endLine, Object[] args)",8,1,4,1,7
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTConditionalExpression node, Object data)",8,1,4,1,2
"net.sourceforge.pmd.RuleSetTest.makeCompilationUnits()",8,1,4,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testFormatterWithNoToFileAttribute()",8,1,4,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testNoRuleSets()",8,1,4,1,0
"net.sourceforge.pmd.lang.java.metrics.ProjectMemoizerTest.memoizationTest()",8,1,4,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.createDocument()",8,1,3,1,0
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest.memoizationTest()",8,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.getClasses()",8,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.getPackages()",8,1,3,1,0
"net.sourceforge.pmd.PMDConfiguration.setDefaultLanguageVersion(LanguageVersion languageVersion)",8,1,2,1,1
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.getCaughtExceptionTypeNodes()",8,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.getClassSimpleName()",8,1,2,1,0
"net.sourceforge.pmd.renderers.SummaryHTMLRenderer.SummaryHTMLRenderer()",8,1,2,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeAxisIterator.AttributeAxisIterator(ElementNode startNodeInfo)",8,1,1,1,1
"net.sourceforge.pmd.PMDConfiguration.createRenderer()",8,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.getType()",8,1,1,1,0
"net.sourceforge.pmd.util.TypeMap.size()",8,1,1,1,0
"net.sourceforge.pmd.processor.PmdRunnable.PmdRunnable(DataSource dataSource, String fileName, List<Renderer> renderers, RuleContext ruleContext, RuleSets ruleSets, SourceCodeProcessor sourceCodeProcessor)",8,1,0,1,6
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.AttributeNode(Attribute attribute, int id)",8,1,0,1,2
"net.sourceforge.pmd.PMDConfiguration.setInputPaths(String inputPaths)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setInputUri(String inputUri)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setMinimumPriority(RulePriority minimumPriority)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setReportFile(String reportFile)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setReportProperties(Properties reportProperties)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setReportShortNames(boolean reportShortNames)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setRuleSets(String ruleSets)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setSuppressMarker(String suppressMarker)",8,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.setThreads(int threads)",8,1,0,1,1
"net.sourceforge.pmd.RuleContext.setReport(Report report)",8,1,0,1,1
"net.sourceforge.pmd.RuleContext.setSourceCodeFilename(String filename)",8,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.structurallyEquals(JavaQualifiedName qname)",8,1,0,1,1
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.AbstractNcssCountRule(Class<?> nodeClass)",8,1,0,1,1
"net.sourceforge.pmd.util.TypeMap.TypeMap(int initialSize)",8,1,0,1,1
"GitHubBug208.testMethod()",8,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getLanguageVersionDiscoverer()",8,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getSuppressMarker()",8,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.isFailOnViolation()",8,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.isIgnoreIncrementalAnalysis()",8,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.isShowSuppressedViolations()",8,1,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.toString()",8,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getDocumentNumber()",8,1,0,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.emptyOptions()",8,1,0,1,0
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.getTemplateName()",8,1,0,1,0
"net.sourceforge.pmd.lang.vm.directive.RuntimeMacro.getName()",8,1,0,1,0
"net.sourceforge.pmd.lang.vm.directive.RuntimeMacro.getType()",8,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.STBBaseTst.parseCode(final String code, final LanguageVersion languageVersion)",7,1,13,1,2
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.parseAndVisitForClass(Class<?> clazz)",7,1,10,1,1
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testVariousParserBugs()",7,1,10,1,0
"net.sourceforge.pmd.util.viewer.gui.XPathPanel.init()",7,1,10,1,0
"net.sourceforge.pmd.RuleSetSchemaTest.validateOnly()",7,1,9,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testChildAxisIterator()",7,1,9,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testUnknownAndSimpleRuleSet()",7,1,7,1,0
"net.sourceforge.pmd.RuleSetTest.testIncludesRuleWithDFA()",7,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testAnalysisCache()",7,1,7,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testDisableIncrementalAnalysis()",7,1,7,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testFnPrefixOnSaxon()",7,1,7,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testNoFnPrefixOnSaxon()",7,1,7,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.testPluginname()",7,1,7,1,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTMethodDeclaration node, Object data)",7,1,6,1,2
"net.sourceforge.pmd.lang.vm.ast.MacroParseException.appendTemplateInfo(final StringBuffer sb)",7,1,6,1,1
"net.sourceforge.pmd.RuleSetReferenceIdTest.testFooRules()",7,1,6,1,0
"net.sourceforge.pmd.RuleSetTest.testEquals3()",7,1,6,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testDescendantAxisIterator2()",7,1,6,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testParseOperation()",7,1,6,1,0
"net.sourceforge.pmd.document.RegionByLineImp.RegionByLineImp(final int beginLine, final int endLine, final int beginColumn, final int endColumn)",7,1,5,1,4
"net.sourceforge.pmd.ReportTest.render(Renderer renderer, Report report)",7,1,5,1,2
"net.sourceforge.pmd.RuleSetReferenceIdTest.testFullRuleSetURLAndRule()",7,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testOneSimpleRuleSet()",7,1,5,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testFormatterWithProperties()",7,1,5,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testFileIsUpToDate()",7,1,5,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.FormalParameterNamingConventionsRule.FormalParameterNamingConventionsRule()",7,1,5,1,0
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTDoStatement node, Object data)",7,1,4,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTIfStatement node, Object data)",7,1,4,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTSwitchStatement node, Object data)",7,1,4,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloPathAwareDecorator.visit(ASTWhileStatement node, Object data)",7,1,4,1,2
"net.sourceforge.pmd.benchmark.TimeTracker$TimedResult.mergeTimes(final TimedResult timedResult)",7,1,4,1,1
"net.sourceforge.pmd.lang.vm.util.LogUtil.formatFileString(final AbstractVmNode node)",7,1,4,1,1
"net.sourceforge.pmd.lang.vm.util.LogUtil.formatFileString(final Directive directive)",7,1,4,1,1
"net.sourceforge.pmd.lang.apex.rule.design.AvoidDeeplyNestedIfStmtsRule.AvoidDeeplyNestedIfStmtsRule()",7,1,4,1,0
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveClassLengthRule.ExcessiveClassLengthRule()",7,1,4,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testBadCase()",7,1,4,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWellFormedClassMetricRule()",7,1,4,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWellFormedOperationMetricRule()",7,1,4,1,0
"net.sourceforge.pmd.lang.java.rule.design.DataClassRule.classRevealsDataAndLacksComplexity(ASTAnyTypeDeclaration node)",7,1,3,1,1
"net.sourceforge.pmd.cpd.CPDTest.setup()",7,1,3,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testInlineCss()",7,1,3,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testInlineCss()",7,1,3,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.emptyDefaultValue()",7,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclarationTest.loadSource(String name)",7,1,2,1,1
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.loadSource(String name)",7,1,2,1,1
"net.sourceforge.pmd.lang.java.ast.Java10Test.loadSource(String name)",7,1,2,1,1
"net.sourceforge.pmd.lang.java.ast.Java12Test.loadSource(String name)",7,1,2,1,1
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$NotThreadSafeRule.letTheOtherThreadRun(int millis)",7,1,2,1,1
"com.sample.test.pmdTest.testSuper()",7,1,2,1,0
"com.sample.test.pmdTest.testSuper2()",7,1,2,1,0
"net.sourceforge.pmd.AbstractLanguageVersionTest.testGetLanguageVersionForTerseName()",7,1,2,1,0
"net.sourceforge.pmd.cli.BaseCPDCLITest.setup()",7,1,2,1,0
"net.sourceforge.pmd.cpd.RubyTokenizerTest.getSampleCode()",7,1,2,1,0
"net.sourceforge.pmd.junit.JavaUtilLoggingRule.getLog()",7,1,2,1,0
"net.sourceforge.pmd.lang.apex.ast.ApexLexerTest.testParser()",7,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.NodeChildrenIterator.next()",7,1,2,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.isThisOrSuper()",7,1,2,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.BaseLanguageModule(String name, String shortName, String terseName, Class<?> ruleChainVisitorClass, String... extensions)",7,1,1,1,5
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest$TestRule.visit(ASTCompilationUnit node, Object data)",7,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTIfElseBlockStatement node, Object data)",7,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.documentation.HeaderCommentsRule.visit(ASTCompilationUnit cUnit, Object data)",7,1,1,1,2
"net.sourceforge.pmd.benchmark.TimeTracker.startOperation(final TimedOperationCategory category)",7,1,1,1,1
"net.sourceforge.pmd.cache.CachedRuleMapper.getRuleForClass(final String className)",7,1,1,1,1
"net.sourceforge.pmd.cli.PMDParameters.transformParametersIntoConfiguration(PMDParameters params)",7,1,1,1,1
"net.sourceforge.pmd.lang.metrics.MetricOptions.contains(MetricOption option)",7,1,1,1,1
"net.sourceforge.pmd.lang.plsql.PLSQLParser.createPLSQLParser(Reader source)",7,1,1,1,1
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.current()",7,1,1,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testConstructorGivenHttpUrlIdSucceedsAndProcessesIdCorrectly()",7,1,1,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testEmptyRuleSet()",7,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.iterator()",7,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTType.isArray()",7,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.NcssTypeCountRule()",7,1,1,1,0
"net.sourceforge.pmd.util.viewer.gui.SourceCodePanel.getSourceCode()",7,1,1,1,0
"net.sourceforge.pmd.internal.util.IteratorUtil.toIterable(final Iterator<T> it)",7,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setHasRemoteActionPerm(final boolean hasRemoteActionPerm)",7,1,0,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSignature.ApexOperationSignature(Visibility visibility)",7,1,0,1,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSignature.JavaSignature(Visibility visibility)",7,1,0,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.createFrom(String toParse)",7,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.renderFileViolations(Iterator<RuleViolation> violations)",7,1,0,1,1
"net.sourceforge.pmd.PMDConfiguration.getClassLoader()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getInputPaths()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getInputUri()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getMinimumPriority()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getReportFile()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getReportFormat()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getReportProperties()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getRuleSets()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getThreads()",7,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.isReportShortNames()",7,1,0,1,0
"net.sourceforge.pmd.RuleContext.getLanguageVersion()",7,1,0,1,0
"net.sourceforge.pmd.RuleContext.getReport()",7,1,0,1,0
"net.sourceforge.pmd.RuleContext.getSourceCodeFile()",7,1,0,1,0
"net.sourceforge.pmd.RuleContext.getSourceCodeFilename()",7,1,0,1,0
"net.sourceforge.pmd.RuleSetWriterTest.setupOutputStream()",7,1,0,1,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.toString()",7,1,0,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.getOptions()",7,1,0,1,0
"net.sourceforge.pmd.lang.vm.ast.ASTReference.getRootString()",7,1,0,1,0
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.defaultHasNullValue()",7,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.build()",7,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createMultiProperty()",7,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createProperty()",7,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testArrayIsReferenceType()",6,1,10,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testIsArray()",6,1,10,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testParamTypeImage()",6,1,10,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testPrimitiveType()",6,1,10,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testPrimitiveTypeImage()",6,1,10,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testRefTypeImage()",6,1,10,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testRawStringLiterals()",6,1,9,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.verifyFlags(ASTClassOrInterfaceDeclaration acd, boolean bPublic, boolean bAbstract, boolean bFinal, boolean bStrict)",6,1,8,1,5
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsKeywordVariantsSucceedWith14()",6,1,8,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue.populate(T builder, Map<PropertyDescriptorField,String> fields)",6,1,7,1,2
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testFollowingSiblingAxisIterator()",6,1,7,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testPrecedingSiblingAxisIterator()",6,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.quoteEL()",6,1,7,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.quoteExpression()",6,1,7,1,0
"net.sourceforge.pmd.util.viewer.gui.SourceCodePanel.init()",6,1,7,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue$Numeric.populate(T builder, Map<PropertyDescriptorField,String> fields)",6,1,6,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue$Numeric.populate(T builder, Map<PropertyDescriptorField,String> fields)",6,1,6,1,2
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest.parseAndVisitForString(String source)",6,1,6,1,1
"net.sourceforge.pmd.RuleSetTest.testNoDFA()",6,1,6,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testParentAxisIterator()",6,1,6,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testAbsolutePathRuleSet()",6,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testFullRuleSetAndRule()",6,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testOneFullRuleSet()",6,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testOneFullRuleSetURL()",6,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testOneReleaseRuleSet()",6,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testSimpleRuleSetAndRule()",6,1,5,1,0
"net.sourceforge.pmd.ant.FormatterTest.testNull()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testConstructorLevelSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testFieldLevelSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testInheritedSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testLocalVariableLevelSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testMethodLevelSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testNoSuppressionBlank()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testNoSuppressionSomethingElseS()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testParameterLevelSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testSpecificSuppression()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testSpecificSuppressionAtTopLevel()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testSpecificSuppressionMulitpleValues()",6,1,5,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest.testSuppressAll()",6,1,5,1,0
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.AbstractEcmascriptRule()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testFinal()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testStatic()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testTransient()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testVolatile()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testAbstract()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testFinal()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testNative()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testStrict()",6,1,5,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testSynchronized()",6,1,5,1,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation(RuleContext ruleContext, Rule rule, Node node, String message, Object[] args)",6,1,4,1,5
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTEnumDeclaration node, Object data)",6,1,4,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTVariableDeclaratorId node, Object data)",6,1,4,1,2
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.makeXpathRuleFromXPath(String xpath)",6,1,4,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.build(Map<PropertyDescriptorField,String> fields)",6,1,4,1,1
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.setUp()",6,1,4,1,0
"net.sourceforge.pmd.lang.apex.rule.design.ExcessivePublicCountRule.ExcessivePublicCountRule()",6,1,4,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testMultipleGenerics()",6,1,4,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableNamingConventionsRule.LocalVariableNamingConventionsRule()",6,1,4,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isReferenceType()",6,1,4,1,0
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visit(UsageGraph usageGraph, Object data)",6,1,3,1,2
"net.sourceforge.pmd.lang.apex.multifile.ApexProjectMirror.hasMatchingSig(ApexQualifiedName qname, ApexOperationSigMask mask)",6,1,3,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTUserClass node, Object data)",6,1,2,1,2
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.AbstractDataFlowNode(List<DataFlowNode> dataFlow, Node node)",6,1,2,1,2
"net.sourceforge.pmd.lang.java.rule.design.ExcessivePublicCountRule.visit(ASTMethodDeclarator node, Object data)",6,1,2,1,2
"net.sourceforge.pmd.lang.java.rule.design.NPathComplexityRule.visit(ASTCompilationUnit node, Object data)",6,1,2,1,2
"net.sourceforge.pmd.cpd.FileReporter.report(String content)",6,1,2,1,1
"net.sourceforge.pmd.junit.JavaUtilLoggingRule.clear()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.getBody()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.getImportedName()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testNonexistentMetric()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWrongMetricKeyForOperationDeclaration()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWrongMetricKeyForTypeDeclaration()",6,1,2,1,0
"net.sourceforge.pmd.lang.java.metrics.xpath.XPathMetricFunctionTest.testWrongNodeTypeGeneric()",6,1,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTElementGet.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLetNode.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNumberLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTUnaryExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableInitializer.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTArguments.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTExpression.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTType.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.parse(String snippet)",6,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.addManagedPackageNotInstalled(final Namespace namespace)",6,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isAccessibleSystemNamespace(final Namespace namespace)",6,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isManagedPackageInstalled(final Namespace namespace)",6,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.ofClass(Class<?> clazz)",6,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.ofString(String name)",6,1,1,1,1
"net.sourceforge.pmd.cli.BaseCPDCLITest.getOutput()",6,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTType.isArrayType()",6,1,1,1,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.ScopeAndDeclarationFinder()",6,1,1,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isLambdaTypelessParameter()",6,1,1,1,0
"net.sourceforge.pmd.lang.jsp.ast.JspDocStyleTest.testSimplestJsp()",6,1,1,1,0
"net.sourceforge.pmd.lang.vf.ast.VfDocStyleTest.testSimplestVf()",6,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.Attribute(Node parent, String name, String value)",6,1,0,1,3
"net.sourceforge.pmd.lang.vm.ast.ASTReference.ASTReference(final VmParser p, final int id)",6,1,0,1,2
"net.sourceforge.pmd.cli.PMDParameters.setUri(String uri)",6,1,0,1,1
"net.sourceforge.pmd.util.database.SourceObject.setName(String name)",6,1,0,1,1
"net.sourceforge.pmd.util.database.SourceObject.setRevision(String revision)",6,1,0,1,1
"net.sourceforge.pmd.util.database.SourceObject.setSchema(String schema)",6,1,0,1,1
"net.sourceforge.pmd.util.database.SourceObject.setType(String type)",6,1,0,1,1
"ParserCornerCases18$X.lambdaWithPropertyAssignment()",6,1,0,1,0
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.ThreadLocalRandom()",6,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.isStatic()",6,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.setImportOnDemand()",6,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.setStatic()",6,1,0,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.firstJavaType()",6,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilder.build()",6,1,0,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefix(String code, String expToken, int tokenIndex, int expNoTokens)",5,1,7,1,4
"net.sourceforge.pmd.cpd.XMLRenderer.createDuplicationElement(Document doc, Match match)",5,1,7,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testUTFwithBOM()",5,1,7,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.getFieldDecl(String[] access)",5,1,6,1,1
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.testExceptionBlkParam()",5,1,6,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isSetupEntityVisibleToType(final SObjectTypeInfo type, final TypeInfo referencingType)",5,1,5,1,2
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.defaultProp(String name, String displayName)",5,1,5,1,2
"net.sourceforge.pmd.RuleSetReferenceIdTest.testInternalRuleSetAndRule()",5,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testRelativePathRuleSet()",5,1,5,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testUnknownRuleSet()",5,1,5,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testTokenizerWithSkipBlocks()",5,1,5,1,0
"com.concurrent_ruby.ext.JavaSemaphoreLibrary.load(Ruby runtime, boolean wrap)",5,1,4,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue$Packaged.populate(T builder, Map<PropertyDescriptorField,String> fields)",5,1,4,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue$Packaged.populate(T builder, Map<PropertyDescriptorField,String> fields)",5,1,4,1,2
"net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu.AttributesSubMenu(ViewerModel model, Node node)",5,1,4,1,2
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.addDocumentOperation(DocumentOperation documentOperation)",5,1,4,1,1
"net.sourceforge.pmd.RuleSetTest.testEquals2()",5,1,4,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testMissingCacheLocation()",5,1,4,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testFollowingSiblingAxisIterator2()",5,1,4,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testPrecedingSiblingAxisIterator2()",5,1,4,1,0
"net.sourceforge.pmd.lang.apex.rule.bestpractices.AvoidLogicInTriggerRule.AvoidLogicInTriggerRule()",5,1,4,1,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentInOperandRule.AssignmentInOperandRule()",5,1,4,1,0
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.analyzeToken(final AntlrToken currentToken)",5,1,3,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.removePathToChild(DataFlowNode child)",5,1,3,1,1
"net.sourceforge.pmd.RuleSetTest.testGetRuleByName()",5,1,3,1,0
"net.sourceforge.pmd.RuleSetTest.testGetRuleByName2()",5,1,3,1,0
"net.sourceforge.pmd.RuleSetTest.testRuleSetRequiresDescription()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testAbstractNames()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testAbstractNamesInNestedRuleset()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testCommaInRulesetfiles()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testNestedRuleset()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testRelativeRulesets()",5,1,3,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testRelativeRulesetsInRulesetfiles()",5,1,3,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testStoreCreatesFile()",5,1,3,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testAsmWithAtSign()",5,1,3,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testParentAxisIterator2()",5,1,3,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testXPath()",5,1,3,1,0
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest.testXPath2()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testPrivate()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testProtected()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.FieldDeclTest.testPublic()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testTypeResNullPointer()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testVarAsIdentifier()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testPrivate()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testProtected()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.MethodDeclTest.testPublic()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.rule.XPathRuleTest.setUp()",5,1,3,1,0
"net.sourceforge.pmd.lang.java.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTCompilationUnit node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTAnnotationTypeDeclaration node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTCatchStatement node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTClassOrInterfaceDeclaration node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTCompilationUnit node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTConstructorDeclaration node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTForStatement node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTLambdaExpression node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTSwitchStatement node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.visit(ASTTryStatement node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.vm.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTprocess node, Object data)",5,1,2,1,2
"net.sourceforge.pmd.lang.metrics.ParameterizedMetricKey.equals(Object o)",5,1,2,1,1
"net.sourceforge.pmd.lang.xml.ast.XmlParser.parse(Reader reader)",5,1,2,1,1
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testStoreOnUnwritableFileShouldntThrow()",5,1,2,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testUnknownFileIsNotUpToDate()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.getExceptionName()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.testAbstract()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.testFinal()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.testPublic()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.testPublicFinal()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ClassDeclTest.testStrict()",5,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isRawType()",5,1,2,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule.visit(ASTUserEnum node, Object data)",5,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule.visit(ASTUserInterface node, Object data)",5,1,1,1,2
"net.sourceforge.pmd.cpd.RubyTokenizerTest.buildTokenizer()",5,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.getBlock()",5,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.isForeach()",5,1,1,1,0
"net.sourceforge.pmd.properties.AbstractProperty.attributeValuesById()",5,1,1,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testNoMappingForDefault()",5,1,1,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager$ANTLRSyntaxError.ANTLRSyntaxError(final String msg, final int line, final int column, final RecognitionException cause)",5,1,0,1,4
"net.sourceforge.pmd.util.database.SourceObject.SourceObject(String schema, String type, String name, String revision)",5,1,0,1,4
"net.sourceforge.pmd.lang.ast.xpath.Attribute.Attribute(Node parent, String name, Method m)",5,1,0,1,3
"net.sourceforge.pmd.lang.vm.ast.ASTReference.ASTReference(final int id)",5,1,0,1,1
"LocalVariableTypeInferenceTryWithResources.aMethod()",5,1,0,1,0
"ParserCornerCases18.methodWithReceiverParameter()",5,1,0,1,0
"net.sourceforge.pmd.RuleContext.RuleContext()",5,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testInteralWithExternal()",5,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getUri()",5,1,0,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.XMLRenderer()",5,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.buildHashCode()",5,1,0,1,0
"net.sourceforge.pmd.lang.metrics.AbstractMetricsFacade.getLanguageSpecificComputer()",5,1,0,1,0
"net.sourceforge.pmd.lang.metrics.AbstractMetricsFacade.getLanguageSpecificProjectMemoizer()",5,1,0,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.toString()",5,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.defaultAsString()",5,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.getName()",5,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilder.getName()",5,1,0,1,0
"net.sourceforge.pmd.util.database.SourceObject.getName()",5,1,0,1,0
"net.sourceforge.pmd.util.database.SourceObject.getRevision()",5,1,0,1,0
"net.sourceforge.pmd.util.database.SourceObject.getSchema()",5,1,0,1,0
"net.sourceforge.pmd.util.database.SourceObject.getType()",5,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.findVariableHere(NameOccurrence occ)",4,1,6,1,1
"net.sourceforge.pmd.util.database.SourceObject.toString()",4,1,5,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary.load(Ruby runtime, boolean wrap)",4,1,4,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.release(ThreadContext context, IRubyObject value)",4,1,4,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visit(ClassNode classNode, Object data)",4,1,4,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitConstructors(ClassNode classNode, Object data)",4,1,4,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitFields(ClassNode classNode, Object data)",4,1,4,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visitMethods(ClassNode classNode, Object data)",4,1,4,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue.populate(T builder, Map<PropertyDescriptorField,String> fields)",4,1,4,1,2
"net.sourceforge.pmd.lang.apex.rule.design.NcssMethodCountRule.getViolationParameters(DataPoint point)",4,1,4,1,1
"net.sourceforge.pmd.RuleSetTest.testEquals1()",4,1,4,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testNestedClassInMethodBug()",4,1,4,1,0
"net.sourceforge.pmd.lang.java.AbstractJavaParser.parse(String fileName, Reader source)",4,1,3,1,2
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.EnumeratedPropertyModule(Map<String,E> choicesByLabel, Class<E> valueType)",4,1,3,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.release(ThreadContext context)",4,1,3,1,1
"net.sourceforge.pmd.RuleSetTest.createRuleSetBuilder(String name)",4,1,3,1,1
"net.sourceforge.pmd.cpd.EcmascriptTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,3,1,1
"net.sourceforge.pmd.cpd.PLSQLTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,3,1,1
"net.sourceforge.pmd.internal.util.IteratorUtil.reverse(Iterator<T> it)",4,1,3,1,1
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.EcmascriptParserOptions(Rule rule)",4,1,3,1,1
"net.sourceforge.pmd.RuleSetReferenceIdTest.testNullRulesetString()",4,1,3,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.reset()",4,1,3,1,0
"net.sourceforge.pmd.RuleSetTest.testApply0Rules()",4,1,3,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testEmptyCharacter()",4,1,3,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testHexCharacter()",4,1,3,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testMultiLineMacros()",4,1,3,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testWhiteSpaceEscape()",4,1,3,1,0
"net.sourceforge.pmd.lang.apex.rule.AbstractApexUnitTestRule.AbstractApexUnitTestRule()",4,1,3,1,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest.testAttributeDeprecation()",4,1,3,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.EcmascriptParserOptions()",4,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.testGetType()",4,1,3,1,0
"net.sourceforge.pmd.lang.java.rule.documentation.HeaderCommentsRule.HeaderCommentsRule()",4,1,3,1,0
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.AbstractPLSQLRule()",4,1,3,1,0
"net.sourceforge.pmd.cpd.Match.Match(int tokenCount, Mark first, Mark second)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Attr attr, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, CharacterData characterData, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Comment comment, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Document document, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, DocumentType documentType, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Element element, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Entity entity, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, EntityReference entityReference, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Notation notation, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, ProcessingInstruction processingInstruction, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.visit(XmlNode node, Text text, RuleContext ctx)",4,1,2,1,3
"net.sourceforge.pmd.processor.PmdRunnable.addError(Report report, Exception e, String errorMessage)",4,1,2,1,3
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.setAtomic(ThreadContext context, IRubyObject newValue)",4,1,2,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.acquire(ThreadContext context, IRubyObject value)",4,1,2,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.reducePermits(ThreadContext context, IRubyObject reduction)",4,1,2,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visit(ConstructorNode constructorNode, Object data)",4,1,2,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visit(FieldNode fieldNode, Object data)",4,1,2,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.visit(MethodNode methodNode, Object data)",4,1,2,1,2
"net.sourceforge.pmd.document.RegionByOffsetImp.RegionByOffsetImp(final int offset, final int length)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.CycloMetric.computeFor(MethodLikeNode node, MetricOptions options)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTAnnotationTypeDeclaration node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTAssertStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTCatchStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTClassOrInterfaceDeclaration node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTConstructorDeclaration node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTDoStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTEnumDeclaration node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTFinallyStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTForStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTInitializer node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTLabeledStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTMethodDeclaration node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTSwitchLabel node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTSwitchStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTSynchronizedStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTThrowStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTWhileStatement node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidCallingFinalizeRule.visit(ASTCompilationUnit acu, Object ctx)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPackageBody node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPackageSpecification node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTProgramUnit node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTriggerTimingPointSection node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTriggerUnit node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTypeMethod node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTypeSpecification node, Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.vm.rule.errorprone.EmptyIfStmtRule.visit(final ASTElseIfStatement node, final Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.vm.rule.errorprone.EmptyIfStmtRule.visit(final ASTElseStatement node, final Object data)",4,1,2,1,2
"net.sourceforge.pmd.lang.vm.rule.errorprone.EmptyIfStmtRule.visit(final ASTIfStatement node, final Object data)",4,1,2,1,2
"net.sourceforge.pmd.cpd.DartTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,2,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer$KotlinTokenFilter.analyzeToken(final AntlrToken currentToken)",4,1,2,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,2,1,1
"net.sourceforge.pmd.lang.apex.rule.design.NcssConstructorCountRule.getViolationParameters(DataPoint point)",4,1,2,1,1
"net.sourceforge.pmd.lang.java.symboltable.AbstractJavaScope.addDeclaration(NameDeclaration declaration)",4,1,2,1,1
"net.sourceforge.pmd.processor.MonoThreadProcessor.runAnalysis(PmdRunnable runnable)",4,1,2,1,1
"net.sourceforge.pmd.properties.AbstractMultiNumericProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",4,1,2,1,1
"net.sourceforge.pmd.properties.AbstractNumericProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",4,1,2,1,1
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder.getDefaultValue(Collection<? extends V> list)",4,1,2,1,1
"net.sourceforge.pmd.testframework.PMDTestRunner.run(RunNotifier notifier)",4,1,2,1,1
"net.sourceforge.pmd.testframework.PMDTestRunner.sort(Sorter sorter)",4,1,2,1,1
"net.sourceforge.pmd.ReportTest.testMetric0()",4,1,2,1,0
"net.sourceforge.pmd.RuleSetTest.testRuleSetRequiresName()",4,1,2,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testExplicitRuleInRuleSet()",4,1,2,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testNoFormattersValidation()",4,1,2,1,0
"net.sourceforge.pmd.cli.BaseCLITest.tearDown()",4,1,2,1,0
"net.sourceforge.pmd.cli.BaseCPDCLITest.teardown()",4,1,2,1,0
"net.sourceforge.pmd.lang.apex.DefaultRulesetTest.loadDefaultRuleset()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isArray()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testVarAsAnnotationName()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testVarAsEnumName()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java10Test.testVarAsTypeIdentifier()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.NodeChildrenIterator.hasNext()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isVarargs()",4,1,2,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.registerSelfInSimpleContext()",4,1,2,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.copy(Receiver receiver, int whichNamespaces, boolean copyAnnotations, int locationId)",4,1,1,1,4
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.initialize(ThreadContext context, IRubyObject value)",4,1,1,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.initialize(ThreadContext context, IRubyObject value)",4,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(EcmascriptNode<?> node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTBreakStatement node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTContinueStatement node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTExplicitConstructorInvocation node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTFieldDeclaration node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.NcssBaseVisitor.visit(ASTReturnStatement node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(JspNode node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTArguments.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclaration.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeMethod.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(PLSQLNode node, Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTAddNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTAndNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTAssignment node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTBlock node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTDirective node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTDivNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTEQNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTElseIfStatement node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTElseStatement node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTExpression node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTFalse node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTForeachStatement node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTGENode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTGTNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTIdentifier node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTIfStatement node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTIndex node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTIntegerRange node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTLENode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTLTNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTMap node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTMethod node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTModNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTMulNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTNENode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTNotNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTObjectArray node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTOrNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTReference node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTSetDirective node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTSubtractNode node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTText node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTTrue node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTWord node, final Object data)",4,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final VmNode node, final Object data)",4,1,1,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.acquire(ThreadContext context)",4,1,1,1,1
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.DocumentOperationsApplierForNonOverlappingRegions(final Document document)",4,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.iterateAxis(byte axisNumber)",4,1,1,1,1
"net.sourceforge.pmd.properties.AbstractProperty.compareTo(PropertyDescriptor<?> otherProperty)",4,1,1,1,1
"ParserCornerCases18.toDoLater()",4,1,1,1,0
"net.sourceforge.pmd.RuleSetSchemaTest.setUp()",4,1,1,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testLoadFromEmptyFile()",4,1,1,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testLoadFromNonExistingFile()",4,1,1,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testLoadFromUnreadableFileShouldntThrow()",4,1,1,1,0
"net.sourceforge.pmd.cpd.ApexCpdTest.setUp()",4,1,1,1,0
"net.sourceforge.pmd.cpd.RubyTokenizerTest.tokenizeTest()",4,1,1,1,0
"net.sourceforge.pmd.lang.cpp.CppCharStreamTest.testBackup()",4,1,1,1,0
"net.sourceforge.pmd.lang.cpp.CppCharStreamTest.testContinuationUnix()",4,1,1,1,0
"net.sourceforge.pmd.lang.cpp.CppCharStreamTest.testContinuationWindows()",4,1,1,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testFactoryMultiValueCustomDelimiter()",4,1,1,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testFactoryMultiValueDefaultDelimiter()",4,1,1,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testFactorySingleValue()",4,1,1,1,0
"net.sourceforge.pmd.typeresolution.testdata.SuperExpression.foo()",4,1,1,1,0
"net.sourceforge.pmd.typeresolution.testdata.ThisExpression.foo()",4,1,1,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager$ErrorHandler.syntaxError(final Recognizer<?,?> recognizer, final Object offendingSymbol, final int line, final int charPositionInLine, final String msg, final RecognitionException ex)",4,1,0,1,6
"net.sourceforge.pmd.benchmark.BenchmarkResult.BenchmarkResult(Benchmark type, long time, long count)",4,1,0,1,3
"net.sourceforge.pmd.lang.LanguageVersion.LanguageVersion(Language language, String version, LanguageVersionHandler languageVersionHandler)",4,1,0,1,3
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.JavaFieldSignature(Visibility visibility, boolean isStatic, boolean isFinal)",4,1,0,1,3
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.BaseSinglePropertyBuilder(String name, ValueParser<T> parser, Class<T> type)",4,1,0,1,3
"net.sourceforge.pmd.lang.metrics.ParameterizedMetricKey.ParameterizedMetricKey(MetricKey<N> key, MetricOptions options)",4,1,0,1,2
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.initialize(ThreadContext context)",4,1,0,1,1
"InputJava9TryWithResources.main()",4,1,0,1,0
"SimpleBeanUser.SimpleBeanUser()",4,1,0,1,0
"SimpleBeanUser2.SimpleBeanUser2()",4,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testCommaInSingleId()",4,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testExternalWithExternal()",4,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testExternalWithInternal()",4,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.testInternalWithInternal()",4,1,0,1,0
"net.sourceforge.pmd.cli.BaseCLITest.setup()",4,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createBadMultiProperty()",4,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createBadProperty()",4,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.testDefaultIndexOutOfBounds()",4,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createBadMultiProperty()",4,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createMultiProperty()",4,1,0,1,0
"null.visit(ASTScope node, Object data)",3,1,11,1,2
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions$DocumentOperationNonOverlappingRegionsComparator.operationsStartAtTheSameOffsetAndHaveZeroLength(final RegionByLine r1, final RegionByLine r2)",3,1,8,1,2
"net.sourceforge.pmd.dcd.DumpNodeVisitor.printMember(MemberNode memberNode)",3,1,6,1,1
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.tryAcquire(ThreadContext context, IRubyObject permits)",3,1,4,1,2
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",3,1,4,1,1
"net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentInOperandRule.allowsAllAssignments()",3,1,4,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isPrimitiveType()",3,1,4,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.isOnRightHandSide()",3,1,4,1,0
"net.sourceforge.pmd.lang.apex.rule.codestyle.AbstractNamingConventionsRule.prop(String name, String displayName, Map<String,String> descriptorToDisplayNames)",3,1,3,1,3
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.availablePermits(ThreadContext context)",3,1,3,1,1
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.drainPermits(ThreadContext context)",3,1,3,1,1
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.tryAcquire(ThreadContext context)",3,1,3,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.compareTo(Language o)",3,1,3,1,1
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.packageNameOf(Method method)",3,1,3,1,1
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.isAtomicFalse()",3,1,3,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.isAtomicTrue()",3,1,3,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.makeFalse()",3,1,3,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.makeTrue()",3,1,3,1,0
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.value()",3,1,3,1,0
"net.sourceforge.pmd.it.BinaryDistributionIT.testFileExistence()",3,1,3,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isPackagePrivate()",3,1,3,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.AbstractXmlRule()",3,1,3,1,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizer.processToken(Tokens tokenEntries, GenericToken currentToken, String filename)",3,1,2,1,3
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.resolveTypeDefinition(Type type, Method method, List<JavaTypeDefinition> methodTypeArgs)",3,1,2,1,3
"net.sourceforge.pmd.ant.AbstractAntTestHelper.assertContains(String text, String toFind)",3,1,2,1,2
"net.sourceforge.pmd.ant.AbstractAntTestHelper.assertDoesntContain(String text, String toFind)",3,1,2,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ExecutableCode node, Object data)",3,1,2,1,2
"net.sourceforge.pmd.cli.BaseCPDCLITest.runCPD(String... args)",3,1,2,1,1
"net.sourceforge.pmd.cli.PMDParameters$RulePriorityConverter.convert(String value)",3,1,2,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasConnectDeserializer(final TypeInfo type)",3,1,2,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isGlobalComponent(final TypeInfo type)",3,1,2,1,1
"net.sourceforge.pmd.lang.apex.rule.AbstractApexUnitTestRule.isTestMethodOrClass(final ApexNode<?> node)",3,1,2,1,1
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.getViolationParameters(DataPoint point)",3,1,2,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.ASTFunctionNode(FunctionNode functionNode)",3,1,2,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNumberLiteral.ASTNumberLiteral(NumberLiteral numberLiteral)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.defaultProp(String displayName)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.getViolationParameters(DataPoint point)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.symboltable.AbstractJavaScope.contains(NameOccurrence occurrence)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder.cont(AbstractJavaNode node)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getAsSuper(Class<?> superClazz)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getGenericType(String parameterName)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getGenericType(int index)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getSuperTypeSet(Set<JavaTypeDefinition> destinationSet)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.hasSameErasureAs(JavaTypeDefinition def)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.resolveTypeDefinition(Type type)",3,1,2,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.withDimensions(int numDimensions)",3,1,2,1,1
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.AbstractXmlRule(Language language)",3,1,2,1,1
"ParserCornerCases.testGeneric()",3,1,2,1,0
"net.sourceforge.pmd.RuleSetTest.testRuleSetRequiresName2()",3,1,2,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.toString()",3,1,2,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.resetListeners()",3,1,2,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.toString()",3,1,2,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.getTypedValue()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9AnonymousDiamond()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9AnonymousDiamondInJava8()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9InvalidIdentifier()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9InvalidIdentifierInJava18()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9ModuleInfo()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9ModuleInfoInJava8()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9PrivateInterfaceMethods()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9PrivateInterfaceMethodsInJava18()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9TryWithResources()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.jdk9TryWithResourcesInJava8()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAnnotatedLocals()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAnnotatedModule()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAnnotatedParams()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsIdentifierSucceedsWith13()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsIdentifierSucceedsWith13Test2()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsKeywordFailsWith13()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsMethodNameIdentifierFailsWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testAssertAsVariableDeclIdentifierFailsWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testBinaryAndUnderscoresInNumericalLiterals()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testEnumAsIdentifierShouldFailWith15()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testEnumAsIdentifierShouldPassWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testEnumAsKeywordShouldFailWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testEnumAsKeywordShouldPassWith15()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testGenericDiamond()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testGenericINAnnotation()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testGenericReturnType()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testGenericsInMethodCall()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testJDK15ForLoopShouldFailWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testJDK15ForLoopSyntaxShouldPassWith15()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testJDK15ForLoopSyntaxWithModifiers()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testJDK15GenericsSyntaxShouldPassWith15()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testMulticatch()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testMulticatchWithAnnotations()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testStringInSwitch()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testTryWithResources()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testTryWithResourcesMulti()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testTryWithResourcesSemi()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testTryWithResourcesWithAnnotations()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testVarargsShouldFailWith14()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testVarargsShouldPassWith15()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testMultipleCaseLabelsJava11()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testSwitchExpressionsJava11()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.ast.Java12Test.testSwitchRulesJava11()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.rule.design.NPathComplexityRule.NPathComplexityRule()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getScope()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.hashCode()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.toString()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getComponentType()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getElementType()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getEnclosingClass()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getErasedSuperTypeSet()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getSuperTypeSet()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getTypeParameterCount()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isArrayType()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isClassOrInterface()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isGeneric()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isNullType()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isPrimitive()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.xpath.TypeIsExactlyFunction.registerSelfInSimpleContext()",3,1,2,1,0
"net.sourceforge.pmd.lang.java.xpath.TypeIsFunction.registerSelfInSimpleContext()",3,1,2,1,0
"net.sourceforge.pmd.lang.metrics.ParameterizedMetricKey.hashCode()",3,1,2,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.hashCode()",3,1,2,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.toString()",3,1,2,1,0
"net.sourceforge.pmd.dcd.graph.FieldNode.FieldNode(ClassNode classNode, String name, String desc)",3,1,1,1,3
"net.sourceforge.pmd.benchmark.StringBuilderCR.StringBuilderCR(String initialText, String theCR)",3,1,1,1,2
"net.sourceforge.pmd.benchmark.TimeTracker$TimerEntry.TimerEntry(final TimedOperationCategory category, final String label)",3,1,1,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visit(ClassNode classNode, Object data)",3,1,1,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visit(ConstructorNode constructorNode, Object data)",3,1,1,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visit(FieldNode fieldNode, Object data)",3,1,1,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visit(MethodNode methodNode, Object data)",3,1,1,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visit(UsageGraph usageGraph, Object data)",3,1,1,1,2
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest$TestRule.visit(ASTImportDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest$TestRule.visit(ASTPrimaryExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest$TestRule.visit(ASTPrimaryPrefix node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.jaxen.DocumentNavigatorTest$TestRule.visit(ASTStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTCatchBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTReferenceExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.ASTVariableExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.addValidPackageVersion(final Namespace namespace, final StructuredVersion version)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.allowPermGuard(final Namespace namespace, final String permGuard)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasPermissionForPermGuard(final Namespace referencingNamespace, final String orgPerm)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isReservedNamespace(final Namespace namespace, final boolean excludePackages)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isValidPackageVersion(final Namespace namespace, final StructuredVersion version)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest$RandomClassMetric.computeFor(ASTUserClassOrInterface<?> node, MetricOptions options)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.metrics.ApexProjectMirrorTest$RandomOperationMetric.computeFor(ASTMethod node, MetricOptions options)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTDoLoopStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTForEachStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTForLoopStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTIfBlockStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTReturnStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTThrowStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTTryCatchFinallyBlockStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTWhileLoopStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.visit(ASTUserEnum node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTArrayComprehension node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTArrayComprehensionLoop node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTArrayLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTAssignment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTAstRoot node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTBlock node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTBreakStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTCatchClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTComment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTConditionalExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTContinueStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTDoLoop node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTElementGet node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTEmptyExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTExpressionStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTForInLoop node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTForLoop node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTFunctionCall node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTFunctionNode node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTIfStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTInfixExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTKeywordLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTLabel node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTLabeledStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTLetNode node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTNewExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTNumberLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTObjectLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTObjectProperty node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTParenthesizedExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTPropertyGet node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTRegExpLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTReturnStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTScope node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTStringLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTSwitchCase node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTSwitchStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTThrowStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTTryStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTUnaryExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTVariableDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTVariableInitializer node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTWhileLoop node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTWithStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTXmlDotQuery node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTXmlExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTXmlMemberGet node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.visit(ASTXmlString node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTBreakStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.ProjectMemoizerTest$RandomClassMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.metrics.ProjectMemoizerTest$RandomOperationMetric.computeFor(MethodLikeNode node, MetricOptions options)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTCatchStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTDoStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTFinallyStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTForStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTLabeledStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTReturnStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTSwitchLabel node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTSwitchStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTSynchronizedStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTWhileStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTConstructorDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTInitializer node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTMethodDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTAttribute node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTAttributeValue node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTCData node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTCommentTag node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTCompilationUnit node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTContent node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTDoctypeDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTDoctypeExternalId node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTElExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTElement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTHtmlScript node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspComment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspDirective node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspDirectiveAttribute node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspExpressionInAttribute node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTJspScriptlet node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTText node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTUnparsedText node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.visit(ASTValueBinding node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundCondition.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAccessibleByClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAdditiveExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAlterTrigger node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAlterTypeSpec node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAnalyticClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTArgument node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTArgumentList node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTArguments node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAssignment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAttribute node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTAttributeDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTBetweenCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTBlock node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTBooleanLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTBulkCollectIntoClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCallSpecTail node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCaseExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCaseStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCaseWhenClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCloseStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCollectionDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCollectionName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCollectionTypeDefinition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCollectionTypeName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTColumn node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTColumnAlias node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTComment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTComparisonCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCompilationDataType node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCompilationDeclarationFragment node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCompilationExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCompoundCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCompoundTriggerBlock node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTConditionalAndExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTConditionalCompilationStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTConditionalInsertClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTConditionalOrExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTContinueStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCrossOuterApplyClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCursorBody node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCursorForLoopStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCursorSpecification node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTCursorUnit node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDDLCommand node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDDLEvent node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDMLTableExpressionClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDatabaseEvent node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDatabaseLink node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDatatype node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDatatypeDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDateTimeLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDeclarativeSection node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDeclarativeUnit node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDeleteStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTDirectory node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTElseClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTElsifClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTEmbeddedSqlStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTEqualityExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTErrorLoggingClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExceptionDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExceptionHandler node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExistsCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExitStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExpressionList node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExpressionListMultiple node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTExpressionListSingle node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFetchStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFieldDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFloatingPointCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTForAllIndex node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTForAllStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTForIndex node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTForStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFormalParameter node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFormalParameters node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFromClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFunctionCall node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTFunctionName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTGlobal node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTGotoStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTGroupByClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTGroupingExpressionList node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTGroupingSetsClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTHierarchicalQueryClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTHostArrayName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTID node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIfStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInlinePragma node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInnerCrossJoinClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInput node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInsertIntoClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTInsertStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIntoClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIsASetCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIsEmptyCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIsNullCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTIsOfTypeCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTJavaInterfaceClass node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTJoinClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTKEYWORD_UNRESERVED node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLabel node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLabelledStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLikeCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLikeExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTListaggOverflowClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTLoopStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMemberCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMethodDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMethodDeclarator node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMultiSetCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMultiTableInsert node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTMultiplicativeExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTNonDMLEvent node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTNonDMLTrigger node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTNullLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTNumericLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTObjectDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTObjectExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTObjectNameDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTOpenStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTOrderByClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTOutOfLineConstraint node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTOuterJoinClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTOuterJoinType node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTParallelClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPartitionExtensionClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPipelineStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPragma node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPragmaClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPrimaryExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPrimaryPrefix node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTPrimarySuffix node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTQualifiedID node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTQualifiedName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTQueryBlock node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTQueryPartitionClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRaiseStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRead2NextOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTReadPastNextOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTReferencesClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRegexpLikeCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRelationalExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTReturnStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTReturningClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRollupCubeClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTRowLimitingClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTScalarDataTypeName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSchemaName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSelectIntoStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSelectList node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSelectStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSimpleExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSingleTableInsert node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSkip2NextOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSkip2NextTerminator node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSkip2NextTokenOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSkipPastNextOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSkipPastNextTokenOccurrence node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSqlExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSqlPlusCommand node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSqlStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTStringExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTStringLiteral node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSubTypeDefinition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSubmultisetCondition node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSubqueryOperation node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSubqueryRestrictionClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTSynonym node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTable node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTableAlias node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTableCollectionExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTableColumn node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTableName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTableReference node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTrimExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTTypeKeyword node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUnaryExpression node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUnlabelledStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUnqualifiedID node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUpdateSetClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTUpdateStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTValuesClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTVariableName node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTVariableOrConstantDeclaration node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTVariableOrConstantDeclarator node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTVariableOrConstantDeclaratorId node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTVariableOrConstantInitializer node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTView node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTViewColumn node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTWhereClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTWhileStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTWindowingClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTWithinClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTWrappedObject node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLAttributesClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLElement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLExists node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLNamespacesClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLPassingClause node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLTable node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLTableColum node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.visit(ASTXMLTableOptions node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.ast.ASTReference.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.apply(final List<? extends Node> nodes, final RuleContext ctx)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTComment node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTEscape node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTEscapedDirective node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTFloatingPointLiteral node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTIntegerLiteral node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTStringLiteral node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTTextblock node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.visit(final ASTprocess node, final Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTElseIfStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.vm.rule.design.AvoidDeeplyNestedIfStmtsRule.visit(ASTIfStatement node, Object data)",3,1,1,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,1,2
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,1,2
"Child.Child(Outer o)",3,1,1,1,1
"Java9Interface.main(String... args)",3,1,1,1,1
"MyLocalClass.combine(MyLocalClass other)",3,1,1,1,1
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.error(SAXParseException exception)",3,1,1,1,1
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.fatalError(SAXParseException exception)",3,1,1,1,1
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.warning(SAXParseException exception)",3,1,1,1,1
"net.sourceforge.pmd.dcd.graph.FieldNode.compareTo(FieldNode that)",3,1,1,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.hasExtension(String extension)",3,1,1,1,1
"net.sourceforge.pmd.lang.BaseLanguageModule.hasVersion(String version)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.AbstractApexNode(T node)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.addPermission(final PlaceholderOrgPerm orgPerm)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.addReservedNamespace(final Namespace namespace)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasPermission(final PlaceholderOrgPerm orgPerm)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isReservedNamespace(final Namespace namespace)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setAccessibleSystemNamespace(final Namespace namespace)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setTypeWithConnectApiDeserializer(final String typeName)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule.displayName(String name)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.FieldNamingConventionsRule.displayName(String name)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.FormalParameterNamingConventionsRule.displayName(String name)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.LocalVariableNamingConventionsRule.displayName(String name)",3,1,1,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.PropertyNamingConventionsRule.displayName(String name)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getAttributeAxisIterator(Object arg0)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getAttributeName(Object arg0)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getAttributeQName(Object arg0)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getAttributeStringValue(Object arg0)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getElementName(Object node)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getElementQName(Object arg0)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.compareOrder(NodeInfo other)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.generateId(FastStringBuffer buffer)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getAttributeValue(int fingerprint)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getDeclaredNamespaces(int[] buffer)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.setSystemId(String systemId)",3,1,1,1,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.compareOrder(NodeInfo other)",3,1,1,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.isType(NodeType type)",3,1,1,1,1
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.setType(NodeType type)",3,1,1,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.getBody(int index)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setAbstract(boolean isAbstract)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setDefault(boolean isDefault)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setFinal(boolean isFinal)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setNative(boolean isNative)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setPrivate(boolean isPrivate)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setProtected(boolean isProtected)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setPublic(boolean isPublic)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setStatic(boolean isStatic)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setStrictfp(boolean isStrictfp)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setSynchronized(boolean isSynchronized)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setTransient(boolean isTransient)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setVolatile(boolean isVolative)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.setType(Class<?> type)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.nameExtractor(T node)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.rule.design.DataClassRule.interfaceRevealsData(ASTAnyTypeDeclaration node)",3,1,1,1,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getJavaType(int index)",3,1,1,1,1
"net.sourceforge.pmd.lang.plsql.PLSQLParser.createTokenManager(Reader source)",3,1,1,1,1
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleReportListener.ruleViolationAdded(RuleViolation ruleViolation)",3,1,1,1,1
"net.sourceforge.pmd.properties.AbstractMultiNumericProperty.valueErrorFor(T value)",3,1,1,1,1
"net.sourceforge.pmd.properties.AbstractNumericProperty.valueErrorFor(T value)",3,1,1,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.asDelimitedString(T value)",3,1,1,1,1
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.valueFrom(String valueString)",3,1,1,1,1
"net.sourceforge.pmd.util.viewer.gui.SourceCodePanel.SourceCodePanel(ViewerModel model)",3,1,1,1,1
"MyLocalClass.get()",3,1,1,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.setUp()",3,1,1,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testBasic()",3,1,1,1,0
"net.sourceforge.pmd.ant.PMDTaskTest.testClasspath()",3,1,1,1,0
"net.sourceforge.pmd.benchmark.StringBuilderCR.toString()",3,1,1,1,0
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationImpl.close()",3,1,1,1,0
"net.sourceforge.pmd.cache.FileAnalysisCacheTest.testLoadFromDirectoryShouldntThrow()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPDTest$NoFileAssertListener.verify()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testCharacterPrefixChar16()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testCharacterPrefixChar32()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testCharacterPrefixNoPrefix()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testCharacterPrefixWideCharacter()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testDollarSignInIdentifier()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testDollarSignStartingIdentifier()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testEOLCommentInPreprocessingDirective()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefixChar16()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefixChar32()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefixNoPrefix()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefixUtf8()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefixWideString()",3,1,1,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testWideCharacters()",3,1,1,1,0
"net.sourceforge.pmd.cpd.Match.iterator()",3,1,1,1,0
"net.sourceforge.pmd.cpd.Match.toString()",3,1,1,1,0
"net.sourceforge.pmd.docs.SidebarGeneratorTest.setup()",3,1,1,1,0
"net.sourceforge.pmd.junit.JavaUtilLoggingRule.after()",3,1,1,1,0
"net.sourceforge.pmd.junit.JavaUtilLoggingRule.before()",3,1,1,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getExtensions()",3,1,1,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getVersions()",3,1,1,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.LanguageVersion.toString()",3,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.getImage()",3,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration.getImage()",3,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator$AllowedPermGuard.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSignature.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.atomize()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getBaseURI()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getColumnNumber()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getConfiguration()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getDisplayName()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getDocumentRoot()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getFingerprint()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getLineNumber()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getLocalPart()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getNameCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getNamePool()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getNodeKind()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getParent()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getPrefix()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getRoot()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getSiblingPosition()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getStringValue()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getStringValueCS()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getSystemId()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getTypeAnnotation()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getTypedValue()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getURI()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.getUnderlyingNode()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.hasChildNodes()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.isId()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.isIdref()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AbstractNodeInfo.isNilled()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.getLocalPart()",3,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.getStringValueCS()",3,1,1,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getIndex()",3,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.isCatch()",3,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.isFinally()",3,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableInitializer.isDestructuring()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.AbstractJavaParser.getSuppressMap()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isAbstract()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isDefault()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isFinal()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isNative()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isPrivate()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isProtected()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isPublic()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isStatic()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isStrictfp()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isSynchronized()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isTransient()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isVolatile()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testNestedPrivateMethods()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.JDKVersionTest.testPrivateMethods()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.bugs.InterfaceMethodTest.shouldNotFail()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.resetMultifile()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.multifile.JavaMultifileVisitorTest.testPackageStatsNotNull()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule.defaultSuppressionAnnotations()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.design.ExcessivePublicCountRule.ExcessivePublicCountRule()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule.SwitchDensityRule()",3,1,1,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.shallowString()",3,1,1,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.lang.metrics.ParameterizedMetricKey.toString()",3,1,1,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.getName()",3,1,1,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeMethod.getName()",3,1,1,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$StringDataSource.getInputStream()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractMultiNumericProperty.lowerLimit()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractMultiNumericProperty.upperLimit()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractNumericProperty.lowerLimit()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractNumericProperty.upperLimit()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractProperty.hashCode()",3,1,1,1,0
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.defaultAsString()",3,1,1,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createValue()",3,1,1,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createValue()",3,1,1,1,0
"net.sourceforge.pmd.testframework.PMDTestRunner$EmptyRunner.getChildren()",3,1,1,1,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.interfaceMethodShouldBeParseable()",3,1,1,1,0
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.repeatableAnnotationsMethodShouldBeParseable()",3,1,1,1,0
"net.sourceforge.pmd.util.log.ConsoleLogHandler.flush()",3,1,1,1,0
"net.sourceforge.pmd.benchmark.BenchmarkResult.BenchmarkResult(Benchmark type, String name)",3,1,0,1,2
"net.sourceforge.pmd.benchmark.BenchmarkResult.update(long time, long count)",3,1,0,1,2
"net.sourceforge.pmd.benchmark.RuleDuration.RuleDuration(long elapsed, Rule rule)",3,1,0,1,2
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationKey.TimedOperationKey(final TimedOperationCategory category, final String label)",3,1,0,1,2
"net.sourceforge.pmd.cache.AnalysisResult.AnalysisResult(final long fileChecksum, final List<RuleViolation> violations)",3,1,0,1,2
"net.sourceforge.pmd.cpd.FileReporter.FileReporter(File reportFile, String encoding)",3,1,0,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitUse(MemberNode memberNode, Object data)",3,1,0,1,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter.visitUser(MemberNode memberNode, Object data)",3,1,0,1,2
"net.sourceforge.pmd.it.ExecutionResult.ExecutionResult(int theExitCode, String theOutput)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator$AllowedPermGuard.AllowedPermGuard(final Namespace namespace, final String permGuard)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTBreakStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTContinueStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTMethodCallExpression node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.rule.design.AbstractNcssCountRule.visit(ASTStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.apex.rule.design.NcssTypeCountRule.visit(ASTFieldDeclaration node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.NodeChildrenIterator.NodeChildrenIterator(Node parent, Class<T> targetChildType)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTBreakStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTContinueStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.rule.design.AbstractNcssCountRule.visit(ASTThrowStatement node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTExplicitConstructorInvocation node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.java.rule.design.NcssTypeCountRule.visit(ASTFieldDeclaration node, Object data)",3,1,0,1,2
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.PLSQLNameOccurrence(PLSQLNode location, String image)",3,1,0,1,2
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$DysfunctionalRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,0,1,2
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$StringDataSource.StringDataSource(String name, String data)",3,1,0,1,2
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$StringDataSource.getNiceFileName(boolean shortNames, String inputFileName)",3,1,0,1,2
"net.sourceforge.pmd.processor.PmdRunnable$ThreadContext.ThreadContext(RuleSets ruleSets, RuleContext ruleContext)",3,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue.MultiValue(Class<V> valueType, ValueParser<V> parser)",3,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue.SingleValue(Class<E> valueType, ValueParser<E> parser)",3,1,0,1,2
"net.sourceforge.pmd.renderers.AbstractRenderer.AbstractRenderer(String name, String description)",3,1,0,1,2
"net.sourceforge.pmd.testframework.PMDTestRunner$EmptyRunner.runChild(Object child, RunNotifier notifier)",3,1,0,1,2
"com.concurrent_ruby.ext.jsr166y.ThreadLocalRandom.next(int bits)",3,1,0,1,1
"net.sourceforge.pmd.ReportTest.metricAdded(Metric metric)",3,1,0,1,1
"net.sourceforge.pmd.ReportTest.ruleViolationAdded(RuleViolation ruleViolation)",3,1,0,1,1
"net.sourceforge.pmd.cpd.CPDTest$NoFileAssertListener.NoFileAssertListener(int expectedFilesCount)",3,1,0,1,1
"net.sourceforge.pmd.cpd.CPDTest$NoFileAssertListener.phaseUpdate(int phase)",3,1,0,1,1
"net.sourceforge.pmd.cpd.DartTokenizer.getTokenFilter(final AntlrTokenManager tokenManager)",3,1,0,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer.getTokenFilter(final AntlrTokenManager tokenManager)",3,1,0,1,1
"net.sourceforge.pmd.cpd.PLSQLTokenizer.setIgnoreComments(boolean ignore)",3,1,0,1,1
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.setFileName(String fileName)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasRemoteAction(final TypeInfo type)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isSecondGenerationPackagingNamespace(Namespace namespace)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isTrustedApplication(TypeInfo arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setHasApexGenericType(final boolean hasApexGenericTypes)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setHasInternalSfdc(final boolean hasInternalSfdc)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setHasLocalizedTranslation(final boolean hasLocalizedTranslation)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setHasPrivateApi(final boolean hasPrivateApi)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setIsReallyRunningTests(final boolean isReallyRunningTests)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setIsRunningTests(final boolean isRunningTests)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setIsSfdc(final boolean isSfdc)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setIsTrustedApplication(final boolean isTrustedApplication)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSignature.equals(Object obj)",3,1,0,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexSignature.ApexSignature(Visibility visibility)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getAttributeNamespaceUri(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getCommentStringValue(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getElementNamespaceUri(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getElementStringValue(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getNamespacePrefix(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getNamespaceStringValue(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.getTextStringValue(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isAttribute(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isComment(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isDocument(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isElement(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isNamespace(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isProcessingInstruction(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.isText(Object arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator.parseXPath(String arg0)",3,1,0,1,1
"net.sourceforge.pmd.lang.java.AbstractJavaParser.createTokenManager(Reader source)",3,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.setModifiers(int modifiers)",3,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.setTypeDefinition(JavaTypeDefinition typeDefinition)",3,1,0,1,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSignature.equals(Object o)",3,1,0,1,1
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.setProperties(Map<PropertyDescriptor<?>,Object> properties)",3,1,0,1,1
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.setXPath(final String xpath)",3,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.startFileAnalysis(DataSource dataSource)",3,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractRenderer.setDescription(String description)",3,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractRenderer.setName(String name)",3,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractRenderer.setShowSuppressedViolations(boolean showSuppressedViolations)",3,1,0,1,1
"net.sourceforge.pmd.renderers.AbstractRenderer.setWriter(Writer writer)",3,1,0,1,1
"net.sourceforge.pmd.testframework.PMDTestRunner$EmptyRunner.describeChild(Object child)",3,1,0,1,1
"InputJava7Multicatch.main()",3,1,0,1,0
"ParserCornerCases18.testMultiDimArrayWithAnnotations()",3,1,0,1,0
"ParserCornerCases18.typeAnnotations()",3,1,0,1,0
"net.sourceforge.pmd.FooRule.getDescription()",3,1,0,1,0
"net.sourceforge.pmd.FooRule.getMessage()",3,1,0,1,0
"net.sourceforge.pmd.FooRule.getName()",3,1,0,1,0
"net.sourceforge.pmd.FooRule.getRuleSetName()",3,1,0,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.toString()",3,1,0,1,0
"net.sourceforge.pmd.benchmark.TimeTracker$TimedOperationKey.toString()",3,1,0,1,0
"net.sourceforge.pmd.benchmark.TimeTracker$TimerEntry.toString()",3,1,0,1,0
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.isLanguageSpecificDiscarding()",3,1,0,1,0
"net.sourceforge.pmd.cpd.KotlinTokenizer$KotlinTokenFilter.isLanguageSpecificDiscarding()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.getBeginColumn()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.getBeginLine()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.getEndColumn()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByLineImp.getEndLine()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByOffsetImp.getLength()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByOffsetImp.getOffset()",3,1,0,1,0
"net.sourceforge.pmd.document.RegionByOffsetImp.getOffsetAfterEnding()",3,1,0,1,0
"net.sourceforge.pmd.jaxen.RegexpAcceptanceTest.setUp()",3,1,0,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getDefaultVersion()",3,1,0,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getName()",3,1,0,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getRuleChainVisitorClass()",3,1,0,1,0
"net.sourceforge.pmd.lang.BaseLanguageModule.getTerseName()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.FooRule.getName()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.SuppressWarningsTest$BarRule.getName()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.getNode()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasApexParameterizedTypes()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasInternalSfdc()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasLocalizedTranslation()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasPersonAccountApiAvailable()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasPrivateApi()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.hasRemoteActionPerm()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isReallyRunningTests()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isRunningTests()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.isSfdc()",3,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.useTestValueForAnonymousScriptLengthLimit()",3,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeAxisIterator.getAnother()",3,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.getNodeKind()",3,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.AttributeNode.getURI()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getChildren()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getFlow()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getLine()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getNode()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getParents()",3,1,0,1,0
"net.sourceforge.pmd.lang.dfa.AbstractDataFlowNode.getVariableAccess()",3,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule.getParserOptions()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.AbstractJavaParser.canParse()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.getModifiers()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.getTypeDefinition()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.buildToString()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.NodeChildrenIterator.remove()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.metrics.ParameterizedMetricKeyTest.valueName()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.metrics.impl.CycloMetric.valueName()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.FormalParameterNamingConventionsRule.defaultConvention()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableNamingConventionsRule.defaultConvention()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.getJavaTypeCount()",3,1,0,1,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionUpper.isIntersectionType()",3,1,0,1,0
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.setUsesTypeResolution()",3,1,0,1,0
"net.sourceforge.pmd.lang.plsql.PLSQLParser.canParse()",3,1,0,1,0
"net.sourceforge.pmd.lang.plsql.PLSQLParser.getSuppressMap()",3,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.getImage()",3,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.getLocation()",3,1,0,1,0
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.getRuleChainVisits()",3,1,0,1,0
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.setUsesTypeResolution()",3,1,0,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule.getParserOptions()",3,1,0,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$DysfunctionalRule.dysfunctionReason()",3,1,0,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleRenderer.defaultFileExtension()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.description()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.isDefinedExternally()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.name()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.preferredRowCount()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractProperty.uiOrder()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.defaultValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.AbstractSingleValueProperty.isMultiValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.createBadValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createBadProperty()",3,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createBadValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.createProperty()",3,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue.isMultiValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue.isMultiValue()",3,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.valueType()",3,1,0,1,0
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.itemTypeName()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.end()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.start()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.getDescription()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.getName()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.getPropertySourceType()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.getWriter()",3,1,0,1,0
"net.sourceforge.pmd.renderers.AbstractRenderer.isShowSuppressedViolations()",3,1,0,1,0
"net.sourceforge.pmd.renderers.CodeClimateRule.toString()",3,1,0,1,0
"net.sourceforge.pmd.renderers.EmacsRenderer.defaultFileExtension()",3,1,0,1,0
"net.sourceforge.pmd.renderers.SummaryHTMLRenderer.defaultFileExtension()",3,1,0,1,0
"net.sourceforge.pmd.renderers.TextPadRenderer.defaultFileExtension()",3,1,0,1,0
"net.sourceforge.pmd.renderers.TextRenderer.defaultFileExtension()",3,1,0,1,0
"net.sourceforge.pmd.testframework.PMDTestRunner$EmptyRunner.getDescription()",3,1,0,1,0
"net.sourceforge.pmd.util.log.ConsoleLogHandler.close()",3,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.getVersion()",2,1,11,1,0
"net.sourceforge.pmd.cpd.Match.getEndIndex()",2,1,4,1,0
"net.sourceforge.pmd.document.DocumentOperationsApplierForNonOverlappingRegions.areSiblingsEqual(final int index)",2,1,3,1,1
"net.sourceforge.pmd.lang.java.symboltable.DeclarationFinderFunction.isSameName(NameDeclaration nameDeclaration)",2,1,3,1,1
"net.sourceforge.pmd.lang.java.symboltable.STBBaseTst.parseCode(final String code)",2,1,3,1,1
"net.sourceforge.pmd.lang.java.symboltable.STBBaseTst.parseCode15(String code)",2,1,3,1,1
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.isValid()",2,1,3,1,0
"net.sourceforge.pmd.util.designer.CreateXMLRulePanel.appendLn(StringBuilder sb, String text)",2,1,2,1,2
"net.sourceforge.pmd.ant.AbstractAntTestHelper.assertOutputContaining(String text)",2,1,2,1,1
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.isQualifiedName(Node node)",2,1,2,1,1
"net.sourceforge.pmd.cli.BaseCLITest.getStatusCode()",2,1,2,1,0
"net.sourceforge.pmd.cpd.Match.getLineCount()",2,1,2,1,0
"net.sourceforge.pmd.cpd.Match.getSourceCodeSlice()",2,1,2,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTCatchBlockStatement.getExceptionType()",2,1,2,1,0
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.getLastLineColumn()",2,1,2,1,0
"net.sourceforge.pmd.lang.dfa.Structure.getLast()",2,1,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.getBody()",2,1,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.getNumParams()",2,1,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.isGetterOrSetter()",2,1,2,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.getNumCatchClause()",2,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isExceptionBlockParameter()",2,1,2,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.isTypeInferred()",2,1,2,1,0
"net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule.AbstractJspRule()",2,1,2,1,0
"net.sourceforge.pmd.lang.vm.rule.AbstractVmRule.AbstractVmRule()",2,1,2,1,0
"net.sourceforge.pmd.cpd.CPPTokenizerTest.parse(String snippet, boolean skipBlocks, Tokens tokens)",2,1,1,1,3
"net.sourceforge.pmd.cli.BaseCLITest.runTest(String[] args, String testname)",2,1,1,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testCharacterPrefix(String code, String expToken)",2,1,1,1,2
"net.sourceforge.pmd.cpd.CPPTokenizerTest.testStringPrefix(String code, String expToken)",2,1,1,1,2
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedNameTest.getNodes(Class<T> nodeType, String source)",2,1,1,1,2
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.getClassMetric(ASTAnyTypeDeclaration node, JavaClassMetricKey key)",2,1,1,1,2
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.getOpMetric(MethodLikeNode node, JavaOperationMetricKey key)",2,1,1,1,2
"ParserCornerCases18.doPrivileged(PrivilegedAction<String> action)",2,1,1,1,1
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore$JRubySemaphore.publicReducePermits(int i)",2,1,1,1,1
"net.sourceforge.pmd.ant.AbstractAntTestHelper.executeTarget(String target)",2,1,1,1,1
"net.sourceforge.pmd.cache.AnalysisResult.AnalysisResult(final File sourceFile)",2,1,1,1,1
"net.sourceforge.pmd.cache.AnalysisResult.addViolation(final RuleViolation ruleViolation)",2,1,1,1,1
"net.sourceforge.pmd.cache.AnalysisResult.addViolations(final List<RuleViolation> violations)",2,1,1,1,1
"net.sourceforge.pmd.cli.BaseCLITest.runPMDWith(String[] args)",2,1,1,1,1
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.skipNewLines(final AntlrToken currentToken)",2,1,1,1,1
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.skipSemicolons(final AntlrToken currentToken)",2,1,1,1,1
"net.sourceforge.pmd.cpd.FileReporter.FileReporter(File reportFile)",2,1,1,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer$KotlinTokenFilter.skipNewLines(final AntlrToken currentToken)",2,1,1,1,1
"net.sourceforge.pmd.cpd.Match.addTokenEntry(TokenEntry entry)",2,1,1,1,1
"net.sourceforge.pmd.cpd.Tokens.add(TokenEntry tokenEntry)",2,1,1,1,1
"net.sourceforge.pmd.cpd.Tokens.get(int index)",2,1,1,1,1
"net.sourceforge.pmd.dcd.asm.PrintVisitor.println(String s)",2,1,1,1,1
"net.sourceforge.pmd.dcd.asm.PrintVisitor.printlnIndent(String s)",2,1,1,1,1
"net.sourceforge.pmd.lang.apex.ast.TestAccessEvaluator.setGlobalComponent(final String globalComponent)",2,1,1,1,1
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSignature.code(Visibility visibility)",2,1,1,1,1
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.SourceCodePositioner(String sourceCode)",2,1,1,1,1
"net.sourceforge.pmd.lang.java.javadoc.JavadocTag.tagFor(String id)",2,1,1,1,1
"net.sourceforge.pmd.lang.symboltable.ImageFinderFunction.ImageFinderFunction(String img)",2,1,1,1,1
"net.sourceforge.pmd.lang.vm.util.DirectiveMapper.getDirective(String directiveName)",2,1,1,1,1
"net.sourceforge.pmd.lang.vm.util.DirectiveMapper.isDirective(String name)",2,1,1,1,1
"net.sourceforge.pmd.typeresolution.ClassTypeResolverJava8Test.parseAndTypeResolveForClass18(Class<?> clazz)",2,1,1,1,1
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.AbstractCompoundFilter(Filter<T>... filters)",2,1,1,1,1
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.addFilter(Filter<T> filter)",2,1,1,1,1
"DefaultIterator.staticInterfaceMethods()",2,1,1,1,0
"Java9Interface$Tool.determineNameStatic()",2,1,1,1,0
"Java9Interface$Tool.getName()",2,1,1,1,0
"Java9Interface$Tool.getStaticName()",2,1,1,1,0
"Outer$Inner.Inner()",2,1,1,1,0
"Outer.Outer()",2,1,1,1,0
"ParserCornerCases18.staticMethod()",2,1,1,1,0
"net.sourceforge.pmd.FooRule.FooRule()",2,1,1,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$PMDRuleSetEntityResolver.getSchemaVersion2()",2,1,1,1,0
"net.sourceforge.pmd.cli.PMDParameters.getMinimumPriority()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Match.getFirstMark()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Match.getMarkCount()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Match.getSecondMark()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Tokens.iterator()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Tokens.size()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.FooRule.FooRule()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.getBooleanValue()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression.getMethodName()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTReferenceExpression.getContext()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTReferenceExpression.getReferenceType()",2,1,1,1,0
"net.sourceforge.pmd.lang.apex.multifile.ApexProjectMirror.reset()",2,1,1,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.getLoggableAttributeName()",2,1,1,1,0
"net.sourceforge.pmd.lang.dfa.Structure.getFirst()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.isClosure()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.isGetter()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode.isSetter()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLetNode.getVariables()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLetNode.hasBody()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNumberLiteral.getNumber()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.isDefault()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.getTryBlock()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.hasCatch()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.hasFinally()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTUnaryExpression.getOperand()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTUnaryExpression.isPostfix()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTUnaryExpression.isPrefix()",2,1,1,1,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableInitializer.getTarget()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.declarationsAreInDefaultPackage()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.isSuper()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.isThis()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isAnnotationMember()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isSyntacticallyFinal()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isSyntacticallyPublic()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.isSyntacticallyStatic()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.getImportedNameNode()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.javadoc.JavadocTag.allTagIds()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryAnnotationValueElementRule.UnnecessaryAnnotationValueElementRule()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.design.AvoidDeeplyNestedIfStmtsRule.AvoidDeeplyNestedIfStmtsRule()",2,1,1,1,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidUsingOctalValuesRule.AvoidUsingOctalValuesRule()",2,1,1,1,0
"net.sourceforge.pmd.lang.metrics.MetricOptions.MetricOptions()",2,1,1,1,0
"net.sourceforge.pmd.lang.vm.rule.design.AvoidDeeplyNestedIfStmtsRule.AvoidDeeplyNestedIfStmtsRule()",2,1,1,1,0
"net.sourceforge.pmd.processor.PmdRunnable.reset()",2,1,1,1,0
"net.sourceforge.pmd.util.viewer.gui.XPathPanel.getXPathExpression()",2,1,1,1,0
"net.sourceforge.pmd.cpd.Match.Match(int tokenCount, TokenEntry first, TokenEntry second)",2,1,0,1,3
"net.sourceforge.pmd.properties.PropertyBuilder$GenericPropertyBuilder.GenericPropertyBuilder(String name, ValueParser<T> parser, Class<T> type)",2,1,0,1,3
"ParserCornerCases.ParserCornerCases(int a, int b)",2,1,0,1,2
"com.concurrent_ruby.ext.JavaAtomicBooleanLibrary$JavaAtomicBoolean.JavaAtomicBoolean(Ruby runtime, RubyClass metaClass)",2,1,0,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore$JRubySemaphore.JRubySemaphore(int permits, boolean value)",2,1,0,1,2
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore.JavaSemaphore(Ruby runtime, RubyClass metaClass)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.ASTAllocationExpression(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTArguments.ASTArguments(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTBreakStatement.ASTBreakStatement(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.ASTCatchStatement(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.ASTCompilationUnit(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.ASTExplicitConstructorInvocation(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTExpression.ASTExpression(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.ASTFieldDeclaration(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.ASTForStatement(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.ASTImportDeclaration(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.ASTPrimarySuffix(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.ASTType.ASTType(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.AbstractJavaAccessNode(JavaParser parser, int i)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.AbstractJavaAccessTypeNode(JavaParser parser, int i)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration.AbstractMethodOrConstructorDeclaration(JavaParser parser, int i)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.ast.AbstractTypeBodyDeclaration.AbstractTypeBodyDeclaration(JavaParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.java.dfa.JavaDataFlowNode.JavaDataFlowNode(List<DataFlowNode> dataFlow, Node node)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTArguments.ASTArguments(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundCondition.ASTCompoundCondition(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclaration.ASTMethodDeclaration(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.ASTPrimarySuffix(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.ASTProgramUnit(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeMethod.ASTTypeMethod(PLSQLParser p, int id)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.dfa.PLSQLDataFlowNode.PLSQLDataFlowNode(List<DataFlowNode> dataFlow, Node node)",2,1,0,1,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractPLSQLRule.importsPackage(ASTInput node, String packageName)",2,1,0,1,2
"net.sourceforge.pmd.lang.xml.ast.XmlParser$RootXmlNode.RootXmlNode(XmlParser parser, Node domNode)",2,1,0,1,2
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleRenderer.SimpleRenderer(String name, String description)",2,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue$Numeric.Numeric(Class<V> valueType, ValueParser<V> parser)",2,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$MultiValue$Packaged.Packaged(Class<V> valueType, ValueParser<V> parser)",2,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue$Numeric.Numeric(Class<V> valueType, ValueParser<V> parser)",2,1,0,1,2
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper$SingleValue$Packaged.Packaged(Class<E> valueType, ValueParser<E> parser)",2,1,0,1,2
"net.sourceforge.pmd.properties.modules.MethodPropertyModule.MethodPropertyModule(String[] legalPackageNames, List<Method> defaults)",2,1,0,1,2
"net.sourceforge.pmd.renderers.AbstractIncrementingRenderer.AbstractIncrementingRenderer(String name, String description)",2,1,0,1,2
"ParserCornerCases.ParserCornerCases(String title)",2,1,0,1,1
"ParserCornerCases.ParserCornerCases(int a)",2,1,0,1,1
"ParserCornerCases.thisGeneric(X x)",2,1,0,1,1
"ParserCornerCases18$PmdMethodReferenceTest.foo(int i)",2,1,0,1,1
"SimpleBeanUser.SimpleBeanUser(SimpleBean o)",2,1,0,1,1
"Superclass.doStuff(T s)",2,1,0,1,1
"com.concurrent_ruby.ext.JavaSemaphoreLibrary$JavaSemaphore$JRubySemaphore.JRubySemaphore(int permits)",2,1,0,1,1
"net.sourceforge.pmd.benchmark.StringBuilderCR.StringBuilderCR(String theCR)",2,1,0,1,1
"net.sourceforge.pmd.cpd.DartTokenizer$DartTokenFilter.DartTokenFilter(final AntlrTokenManager tokenManager)",2,1,0,1,1
"net.sourceforge.pmd.cpd.FileReporter.FileReporter(String encoding)",2,1,0,1,1
"net.sourceforge.pmd.cpd.KotlinTokenizer$KotlinTokenFilter.KotlinTokenFilter(final AntlrTokenManager tokenManager)",2,1,0,1,1
"net.sourceforge.pmd.cpd.Match.setLabel(String aLabel)",2,1,0,1,1
"net.sourceforge.pmd.cpd.Match.setMarkSet(Set<Mark> markSet)",2,1,0,1,1
"net.sourceforge.pmd.cpd.PLSQLTokenizer.setIgnoreIdentifiers(boolean ignore)",2,1,0,1,1
"net.sourceforge.pmd.cpd.PLSQLTokenizer.setIgnoreLiterals(boolean ignore)",2,1,0,1,1
"net.sourceforge.pmd.dcd.asm.PrintVisitor.PrintVisitor(PrintVisitor parent)",2,1,0,1,1
"net.sourceforge.pmd.dcd.asm.PrintVisitor.PrintVisitor(int level)",2,1,0,1,1
"net.sourceforge.pmd.lang.ParserOptions.setSuppressMarker(String suppressMarker)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnnotationParameter.ASTAnnotationParameter(AnnotationParameter annotationParameter)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement.ASTBlockStatement(BlockStatement blockStatement)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTCatchBlockStatement.ASTCatchBlockStatement(CatchBlockStatement catchBlockStatement)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration.ASTFieldDeclaration(FieldDeclaration fieldDeclaration)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression.ASTMethodCallExpression(MethodCallExpression methodCallExpression)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTReferenceExpression.ASTReferenceExpression(ReferenceExpression referenceExpression)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.ASTVariableExpression.ASTVariableExpression(VariableExpression variableExpression)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.ast.AbstractApexNode.handleSourceCode(String source)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveLengthRule.ExcessiveLengthRule(Class<?> nodeClass)",2,1,0,1,1
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveNodeCountRule.ExcessiveNodeCountRule(Class<?> nodeClass)",2,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest$DummyNodeWithEnum.DummyNodeWithEnum(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.ast.xpath.DocumentNavigatorTest$DummyRootNode.DummyRootNode(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.Structure.Structure(DataFlowHandler dataFlowHandler)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.Structure.createEndNode(int line)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.Structure.createStartNode(int line)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.VariableAccess.accessTypeMatches(int otherType)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.report.ClassNode.ClassNode(String className)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.report.PackageNode.PackageNode(String packageName)",2,1,0,1,1
"net.sourceforge.pmd.lang.dfa.report.ViolationNode.ViolationNode(RuleViolation violation)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.setRecordingComments(boolean recordingComments)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.setRecordingLocalJsDocComments(boolean recordingLocalJsDocComments)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.setRhinoLanguageVersion(Version rhinoLanguageVersion)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTElementGet.ASTElementGet(ElementGet elementGet)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLetNode.ASTLetNode(LetNode letNode)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchCase.ASTSwitchCase(SwitchCase switchCase)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatement.ASTTryStatement(TryStatement tryStatement)",2,1,0,1,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableInitializer.ASTVariableInitializer(VariableInitializer variableInitializer)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.AbstractJavaParser.AbstractJavaParser(ParserOptions parserOptions)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.ASTAllocationExpression(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression.setQualifiedName(JavaTypeQualifiedName qname)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTArguments.ASTArguments(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTBreakStatement.ASTBreakStatement(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTCatchStatement.ASTCatchStatement(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.ASTCompilationUnit(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.setClassTypeResolver(ClassTypeResolver classTypeResolver)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.setComments(List<Comment> comments)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.ASTExplicitConstructorInvocation(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTExpression.ASTExpression(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration.ASTFieldDeclaration(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTForStatement.ASTForStatement(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.ASTImportDeclaration(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration.setPackage(Package packge)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.ASTPrimarySuffix(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.ASTType.ASTType(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.AbstractJavaAccessNode(int i)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode.isModifier(int mask)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessTypeNode.AbstractJavaAccessTypeNode(int i)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration.AbstractMethodOrConstructorDeclaration(int i)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.ast.AbstractTypeBodyDeclaration.AbstractTypeBodyDeclaration(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveLengthRule.ExcessiveLengthRule(Class<?> nodeClass)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveNodeCountRule.ExcessiveNodeCountRule(Class<?> nodeClass)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule$SwitchDensity.addStatements(int stmtCount)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.symboltable.DeclarationFinderFunction.DeclarationFinderFunction(NameOccurrence occurrence)",2,1,0,1,1
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.VariableNameDeclaration(ASTVariableDeclaratorId node)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.PLSQLParser.PLSQLParser(ParserOptions parserOptions)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTArguments.ASTArguments(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundCondition.ASTCompoundCondition(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclaration.ASTMethodDeclaration(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.ASTPrimarySuffix(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit.ASTProgramUnit(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeMethod.ASTTypeMethod(int id)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveNodeCountRule.ExcessiveNodeCountRule(Class<?> nodeClass)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.setArgumentCount(int count)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.setNameWhichThisQualifies(PLSQLNameOccurrence qualifiedName)",2,1,0,1,1
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.SourceFileScope(String image)",2,1,0,1,1
"net.sourceforge.pmd.lang.symboltable.ImageFinderFunction.ImageFinderFunction(List<String> imageList)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setCoalescing(boolean coalescing)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setExpandEntityReferences(boolean expandEntityReferences)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setIgnoringComments(boolean ignoringComments)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setIgnoringElementContentWhitespace(boolean ignoringElementContentWhitespace)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setLookupDescriptorDoc(boolean lookupDescriptorDoc)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setNamespaceAware(boolean namespaceAware)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setValidating(boolean validating)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.XmlParserOptions.setXincludeAware(boolean xincludeAware)",2,1,0,1,1
"net.sourceforge.pmd.lang.xml.ast.XmlParser.XmlParser(XmlParserOptions parserOptions)",2,1,0,1,1
"net.sourceforge.pmd.processor.MonoThreadProcessor.MonoThreadProcessor(PMDConfiguration configuration)",2,1,0,1,1
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleReportListener.metricAdded(Metric metric)",2,1,0,1,1
"net.sourceforge.pmd.properties.PropertyBuilder$RegexPropertyBuilder.RegexPropertyBuilder(String name)",2,1,0,1,1
"net.sourceforge.pmd.properties.PropertyBuilder.setDefinedExternally(boolean bool)",2,1,0,1,1
"net.sourceforge.pmd.properties.builders.MultiPackagedPropertyBuilder.MultiPackagedPropertyBuilder(String name)",2,1,0,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.PropertyDescriptorBuilderConversionWrapper(Class<?> valueType)",2,1,0,1,1
"net.sourceforge.pmd.properties.builders.SinglePackagedPropertyBuilder.SinglePackagedPropertyBuilder(String name)",2,1,0,1,1
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.nonLegalValueMsgFor(E value)",2,1,0,1,1
"net.sourceforge.pmd.stat.DataPoint.setMessage(String message)",2,1,0,1,1
"net.sourceforge.pmd.stat.DataPoint.setNode(Node node)",2,1,0,1,1
"net.sourceforge.pmd.stat.DataPoint.setScore(double score)",2,1,0,1,1
"net.sourceforge.pmd.testframework.PMDTestRunner$EmptyRunner.EmptyRunner(Class<?> testClass)",2,1,0,1,1
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.setFilters(List<Filter<T>> filters)",2,1,0,1,1
"InputJava7TryWithResources.main()",2,1,0,1,0
"Java9Interface$Tool.determineName()",2,1,0,1,0
"ParserCornerCases.ParserCornerCases()",2,1,0,1,0
"ParserCornerCases.getByteArrayClass()",2,1,0,1,0
"ParserCornerCases18.createNonNullArray()",2,1,0,1,0
"ParserCornerCases18.getBytes()",2,1,0,1,0
"ParserCornerCases18.getEnum()",2,1,0,1,0
"ParserCornerCases18.getNullableEnum()",2,1,0,1,0
"ParserCornerCases18.testAnnotationsToArrayElements()",2,1,0,1,0
"ParserCornerCases18.testWildCardWithAnnotation()",2,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getIgnoreFilePath()",2,1,0,1,0
"net.sourceforge.pmd.PMDConfiguration.getInputFilePath()",2,1,0,1,0
"net.sourceforge.pmd.RuleSetReferenceIdTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.getErrors()",2,1,0,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.getFatalErrors()",2,1,0,1,0
"net.sourceforge.pmd.RuleSetSchemaTest$CollectingErrorHandler.getWarnings()",2,1,0,1,0
"net.sourceforge.pmd.RuleViolationComparatorTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.benchmark.BenchmarkResult.getCount()",2,1,0,1,0
"net.sourceforge.pmd.benchmark.BenchmarkResult.getTime()",2,1,0,1,0
"net.sourceforge.pmd.benchmark.TimeTracker.TimeTracker()",2,1,0,1,0
"net.sourceforge.pmd.cache.AnalysisResult.getFileChecksum()",2,1,0,1,0
"net.sourceforge.pmd.cache.AnalysisResult.getViolations()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getAuxclasspath()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getEncoding()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getFileListPath()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getFormat()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getIgnoreListPath()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getReportfile()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getRulesets()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getSourceDir()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getSuppressmarker()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.getThreads()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isBenchmark()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isDebug()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isFailOnViolation()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isHelp()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isIgnoreIncrementalAnalysis()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isShortnames()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isShowsuppressed()",2,1,0,1,0
"net.sourceforge.pmd.cli.PMDParameters.isStress()",2,1,0,1,0
"net.sourceforge.pmd.cpd.Match.getLabel()",2,1,0,1,0
"net.sourceforge.pmd.cpd.Match.getMarkSet()",2,1,0,1,0
"net.sourceforge.pmd.cpd.Match.getTokenCount()",2,1,0,1,0
"net.sourceforge.pmd.cpd.Tokens.getTokens()",2,1,0,1,0
"net.sourceforge.pmd.cpd.XMLRenderer.getEncoding()",2,1,0,1,0
"net.sourceforge.pmd.dcd.asm.PrintVisitor.PrintVisitor()",2,1,0,1,0
"net.sourceforge.pmd.docs.GenerateRuleDocsCmd.GenerateRuleDocsCmd()",2,1,0,1,0
"net.sourceforge.pmd.internal.util.IteratorUtil.IteratorUtil()",2,1,0,1,0
"net.sourceforge.pmd.it.BinaryDistributionIT.getBinaryDistribution()",2,1,0,1,0
"net.sourceforge.pmd.it.CpdExecutor.CpdExecutor()",2,1,0,1,0
"net.sourceforge.pmd.it.PMDExecutor.PMDExecutor()",2,1,0,1,0
"net.sourceforge.pmd.lang.LanguageVersion.getLanguage()",2,1,0,1,0
"net.sourceforge.pmd.lang.LanguageVersion.getLanguageVersionHandler()",2,1,0,1,0
"net.sourceforge.pmd.lang.LanguageVersion.getVersion()",2,1,0,1,0
"net.sourceforge.pmd.lang.ParserOptions.getSuppressMarker()",2,1,0,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager$ANTLRSyntaxError.getColumn()",2,1,0,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager$ANTLRSyntaxError.getLine()",2,1,0,1,0
"net.sourceforge.pmd.lang.antlr.AntlrTokenManager.getFileName()",2,1,0,1,0
"net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement.hasCurlyBrace()",2,1,0,1,0
"net.sourceforge.pmd.lang.ast.SourceCodePositioner.getLastLine()",2,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.getName()",2,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.Attribute.getParent()",2,1,0,1,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIteratorTest$DummyNodeWithEnum.getEnum()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.Structure.getBraceStack()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.Structure.getContinueBreakReturnStack()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.getAccessType()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.getVariableName()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.isDefinition()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.isReference()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.VariableAccess.isUndefinition()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.report.ClassNode.getClassName()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.report.PackageNode.getPackageName()",2,1,0,1,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNode.getRuleViolation()",2,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.getLabel()",2,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.getRhinoLanguageVersion()",2,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.isRecordingComments()",2,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions.isRecordingLocalJsDocComments()",2,1,0,1,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptionsTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.getClassTypeResolver()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit.getComments()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.setIsSuper()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation.setIsThis()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.isArguments()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.isArrayDereference()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.setIsArguments()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix.setIsArrayDereference()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule$SwitchDensity.addStatement()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule$SwitchDensity.addSwitchLabel()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule$SwitchDensity.getStatementCount()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.DeclarationFinderFunction.getDecl()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration.getDeclaratorId()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclarationTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.badClassMetricKeyMessage()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.badMetricKeyArgMessage()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.badOperationMetricKeyMessage()",2,1,0,1,0
"net.sourceforge.pmd.lang.java.xpath.MetricFunction.genericBadNodeMessage()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundCondition.getType()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.isArguments()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.isArrayDereference()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.setIsArguments()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimarySuffix.setIsArrayDereference()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.getArgumentCount()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.getNameForWhichThisIsAQualifier()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.isMethodOrConstructorInvocation()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.isPartOfQualifiedName()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.PLSQLNameOccurrence.setIsMethodOrConstructorInvocation()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.SourceFileScope()",2,1,0,1,0
"net.sourceforge.pmd.lang.plsql.symboltable.SourceFileScope.getPackageName()",2,1,0,1,0
"net.sourceforge.pmd.lang.symboltable.Applier.Applier()",2,1,0,1,0
"net.sourceforge.pmd.lang.symboltable.ImageFinderFunction.getDecl()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isCoalescing()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isExpandEntityReferences()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isIgnoringComments()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isIgnoringElementContentWhitespace()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isLookupDescriptorDoc()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isNamespaceAware()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isValidating()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptions.isXincludeAware()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.XmlParserOptionsTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRuleTest$MyRule.MyRule()",2,1,0,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleRenderer.end()",2,1,0,1,0
"net.sourceforge.pmd.processor.MultiThreadProcessorTest$SimpleRenderer.getReport()",2,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.getParser()",2,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$BaseSinglePropertyBuilder.getType()",2,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.getConstraints()",2,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder.isDefaultValueSet()",2,1,0,1,0
"net.sourceforge.pmd.properties.SimpleEnumeratedPropertyTest.SimpleEnumeratedPropertyTest()",2,1,0,1,0
"net.sourceforge.pmd.properties.StringPropertyTest.StringPropertyTest()",2,1,0,1,0
"net.sourceforge.pmd.properties.ValueParserConstants.ValueParserConstants()",2,1,0,1,0
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.getChoicesByLabel()",2,1,0,1,0
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.getLabelsByChoice()",2,1,0,1,0
"net.sourceforge.pmd.properties.modules.EnumeratedPropertyModule.getValueType()",2,1,0,1,0
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.getLowerLimit()",2,1,0,1,0
"net.sourceforge.pmd.properties.modules.NumericPropertyModule.getUpperLimit()",2,1,0,1,0
"net.sourceforge.pmd.renderers.EmacsRenderer.EmacsRenderer()",2,1,0,1,0
"net.sourceforge.pmd.renderers.TextPadRenderer.TextPadRenderer()",2,1,0,1,0
"net.sourceforge.pmd.renderers.TextRenderer.TextRenderer()",2,1,0,1,0
"net.sourceforge.pmd.stat.DataPoint.getMessage()",2,1,0,1,0
"net.sourceforge.pmd.stat.DataPoint.getNode()",2,1,0,1,0
"net.sourceforge.pmd.stat.DataPoint.getScore()",2,1,0,1,0
"net.sourceforge.pmd.typeresolution.testdata.LocalGenericClass$Optional.empty()",2,1,0,1,0
"net.sourceforge.pmd.typeresolution.testdata.ThisExpression$PrimaryThisInterface.foo()",2,1,0,1,0
"net.sourceforge.pmd.util.DateTimeUtilTest.suite()",2,1,0,1,0
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.AbstractCompoundFilter()",2,1,0,1,0
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.getFilters()",2,1,0,1,0
"null.foo()",2,1,0,1,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",1,1,0,1,6
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.kindDisplayName(T node, PropertyDescriptor<Pattern> descriptor)",1,1,0,1,2
"net.sourceforge.pmd.lang.rule.xpath.AbstractXPathRuleQuery.evaluate(Node node, RuleContext data)",1,1,0,1,2
"MyFoo.MyFoo(FooBlock b)",1,1,0,1,1
"MyLocalClass.accept(T t)",1,1,0,1,1
"ParserCornerCases18.filterFiles(FileFilter[] filters)",1,1,0,1,1
"Superclass.Superclass(Class<V> clazz)",1,1,0,1,1
"Superclass.Superclass()",1,1,0,1,0
"net.sourceforge.pmd.dcd.graph.ClassNodeComparator.ClassNodeComparator()",1,1,0,1,0
"net.sourceforge.pmd.lang.apex.multifile.ApexProjectMirror.ApexProjectMirror()",1,1,0,1,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiedName.getClassName()",1,1,0,1,0
"net.sourceforge.pmd.lang.java.rule.codestyle.AbstractNamingConventionRule.defaultConvention()",1,1,0,1,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.isMultiValue()",1,1,0,1,0
"net.sourceforge.pmd.util.DateTimeUtil.DateTimeUtil()",1,1,0,1,0
"ParserCornerCases18$TriConsumer.accept(A a, B b, C c)",0,1,1,1,3
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",0,1,0,1,4
"ParserCornerCases18.methodWithReceiverAndOtherParameters(String other)",0,1,0,1,1
"ParserCornerCases18.methodWithReceiverParameterWithAnnotation(String other)",0,1,0,1,1
"PmdTestParent.PmdTestParent(Object obj)",0,1,0,1,1
"net.sourceforge.pmd.lang.apex.rule.codestyle.AbstractNamingConventionsRule.displayName(String name)",0,1,0,1,1
"net.sourceforge.pmd.lang.java.symboltable.AbstractJavaScope.findVariableHere(JavaNameOccurrence occurrence)",0,1,0,1,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorBuilderConversionWrapper.newBuilder(String name)",0,1,0,1,1
"net.sourceforge.pmd.typeresolution.testdata.LocalGenericClass$MyCombiner.combine(T t)",0,1,0,1,1
"net.sourceforge.pmd.typeresolution.testdata.LocalGenericClass$MyConsumer.accept(R r)",0,1,0,1,1
"DefaultIterator.hasNext()",0,1,0,1,0
"DefaultIterator.next()",0,1,0,1,0
"DefaultIterator.remove()",0,1,0,1,0
"Java9Interface$Tool.use()",0,1,0,1,0
"ParserCornerCases18$Inner.Inner()",0,1,0,1,0
"ParserCornerCases18.monitorTemperature()",0,1,0,1,0
"net.sourceforge.pmd.lang.vm.util.LogUtil.LogUtil()",0,1,0,1,0
"net.sourceforge.pmd.properties.PropertyBuilder$GenericCollectionPropertyBuilder$Supplier.get()",0,1,0,1,0
"net.sourceforge.pmd.typeresolution.testdata.LocalGenericClass$MySupplier.get()",0,1,0,1,0
"net.sourceforge.pmd.util.filter.AbstractCompoundFilter.getOperator()",0,1,0,1,0
"ant.java.PMDTaskTestExample.veryLongMethod()",101,1,0,0,0
"net.sourceforge.pmd.dcd.DCD.main(String[] args)",82,1,0,0,1
"net.sourceforge.pmd.RuleReferenceTest.testNotOverride()",67,1,84,0,0
"net.sourceforge.pmd.RuleReferenceTest.validateOverridenValues(final StringProperty propertyDescriptor1, final StringProperty propertyDescriptor2, RuleReference ruleReference)",55,1,89,0,3
"net.sourceforge.pmd.properties.constraints.ConstraintFactory.fromPredicate(final Predicate<? super U> pred, final String constraintDescription)",54,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest.testCountOpSigs()",51,1,61,0,0
"net.sourceforge.pmd.lang.ParserOptionsTest.verifyOptionsEqualsHashcode(ParserOptions options1, ParserOptions options2, ParserOptions options3, ParserOptions options4)",51,1,48,0,4
"net.sourceforge.pmd.typeresolution.testdata.Promotion.binaryNumericPromotion()",51,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclarationTest.testEquals()",46,1,113,0,0
"net.sourceforge.pmd.lang.metrics.MetricKeyUtil.of(final String name, final Metric<T> metric)",43,1,0,0,2
"net.sourceforge.pmd.RuleReferenceTest.testDeepCopyOverride()",34,1,31,0,0
"net.sourceforge.pmd.RuleReferenceTest.testOverride()",34,1,30,0,0
"net.sourceforge.pmd.RuleContextTest.testSharedAttributes()",31,1,37,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericSimple.foo(GenericClass<Integer,Character> param)",31,1,0,0,1
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.testEndsWith()",30,1,25,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testDirective()",30,1,22,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.testTemplateStrings()",30,1,5,0,0
"net.sourceforge.pmd.cpd.MatchAlgorithmTest.testSimple()",29,1,28,0,0
"net.sourceforge.pmd.cpd.MatchTest.testSimple()",29,1,23,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreIdentifiersDontAffectConstructors()",29,1,21,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.openedIsolatedTag()",28,1,24,0,0
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.openedIsolatedTag()",27,1,24,0,0
"net.sourceforge.pmd.cli.PMDFilelistTest.testGetApplicatbleFilesWithDirAndIgnores()",27,1,23,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericRaw.foo()",27,1,0,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testFilter()",26,1,16,0,0
"net.sourceforge.pmd.stat.Metric.Metric(String name, int count, double total, double low, double high, double mean, double stddev)",26,1,0,0,7
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.interleavedTags()",25,1,20,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.interleavedTags()",25,1,20,0,0
"net.sourceforge.pmd.lang.jsp.ast.XPathJspRuleTest.testExpressionMatching()",25,1,17,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessPrimaryGenericSimple.foo(GenericClass<Integer,Character> param)",25,1,0,0,1
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testSimpleCaseStmtHasCorrectTypes()",24,1,47,0,0
"net.sourceforge.pmd.docs.RuleDocGeneratorTest.testSingleRuleset()",24,1,35,0,0
"net.sourceforge.pmd.lang.ast.SourceCodePositionerTest.testLineNumberFromOffset()",24,1,20,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.loadFromStream(final DataInputStream stream, final String fileName, final CachedRuleMapper mapper)",24,1,10,0,3
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.unopenedTags()",23,1,20,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.unopenedTags()",23,1,20,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testIncorporationEqualityAndEquality()",23,1,20,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testIncorporationEqualityAndSubtypeLeftVariable()",23,1,20,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testIncorporationEqualityAndSubtypeRightVariable()",23,1,20,0,0
"net.sourceforge.pmd.cpd.MatchAlgorithmTest.testIgnore()",23,1,17,0,0
"net.sourceforge.pmd.lang.java.ast.FormalCommentTest.testJavadocTagsAsChildren()",23,1,8,0,0
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.getExpectedMultiple()",23,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.GeneralFiddlingTest.test1()",22,1,36,0,0
"net.sourceforge.pmd.cpd.RubyTokenizer.RubyTokenizer()",22,1,11,0,0
"net.sourceforge.pmd.cpd.FortranTokenizer.FortranTokenizer()",22,1,8,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.iterateIds(Node parent)",22,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.FieldAccess.foo(FieldAccess param)",22,1,0,0,1
"net.sourceforge.pmd.AbstractRuleTest.testDeepCopyRule()",21,1,46,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.parseStringNotAsMultiline()",21,1,30,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreIdentifiersHandlesEnums()",21,1,16,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testEncodingOption()",21,1,14,0,0
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitorTest.testOperationsAreThere()",21,1,4,0,0
"net.sourceforge.pmd.properties.PropertyFactory.longIntProperty(String name)",21,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessSuper.foo()",21,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.storeToStream(final DataOutputStream stream, final RuleViolation violation)",20,1,27,0,2
"net.sourceforge.pmd.lang.apex.rule.design.StdCyclomaticComplexityTest.entryStackMustBeEmpty()",20,1,12,0,0
"net.sourceforge.pmd.lang.java.rule.design.StdCyclomaticComplexityTest.entryStackMustBeEmpty()",20,1,12,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testCorrectMovedAndRename()",20,1,11,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testExclusionRenamedAndMoved()",20,1,6,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.test()",20,1,6,0,0
"net.sourceforge.pmd.properties.constraints.NumericConstraints.positive()",20,1,1,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.StartAndEndTagMismatchException(int startLine, int startColumn, String startTagName, int endLine, int endColumn, String endTagName)",20,1,0,0,6
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.StartAndEndTagMismatchException(int startLine, int startColumn, String startTagName, int endLine, int endColumn, String endTagName)",20,1,0,0,6
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testStringProperty()",19,1,29,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testDoubleProperty()",19,1,28,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testIntProperty()",19,1,28,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testExpressionParentChildLinks()",19,1,26,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testEnumProperty()",19,1,26,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreIdentifiersWithClassKeyword()",19,1,12,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.testShowSuppressions()",19,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testContainmentReduceTypeVsType()",19,1,5,0,0
"net.sourceforge.pmd.properties.FloatProperty.FloatProperty(String theName, String theDescription, String minStr, String maxStr, String defaultStr, float theUIOrder)",19,1,3,0,6
"net.sourceforge.pmd.properties.LongProperty.LongProperty(String theName, String theDescription, String minStr, String maxStr, String defaultStr, float theUIOrder)",19,1,3,0,6
"net.sourceforge.pmd.properties.EnumeratedProperty.EnumeratedProperty(String theName, String theDescription, String[] theLabels, E[] theChoices, int defaultIndex, Class<E> valueType, float theUIOrder)",19,1,1,0,7
"net.sourceforge.pmd.properties.PropertyFactory.enumProperty(String name, Map<String,T> nameToValue)",19,1,1,0,2
"net.sourceforge.pmd.properties.PropertyFactory.intProperty(String name)",19,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessStatic.foo()",19,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.testReverseParentPathsTo()",18,1,24,0,0
"net.sourceforge.pmd.lang.vf.ast.VfPageStyleTest.testElExpression()",18,1,18,0,0
"net.sourceforge.pmd.lang.vf.ast.VfPageStyleTest.testElExpressionInAttribute()",18,1,18,0,0
"net.sourceforge.pmd.docs.EscapeUtilsTest.testEscapeHtmlWithinMarkdownSingleLine()",18,1,16,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testConstraintViolationCausesDysfunctionalRuleMulti()",18,1,15,0,0
"net.sourceforge.pmd.cpd.MarkTest.testSimple()",18,1,14,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testConstraintViolationCausesDysfunctionalRule()",18,1,14,0,0
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.testXPathRule()",18,1,13,0,0
"net.sourceforge.pmd.properties.DoubleProperty.DoubleProperty(String theName, String theDescription, String minStr, String maxStr, String defaultStr, float theUIOrder)",18,1,3,0,6
"net.sourceforge.pmd.properties.EnumeratedProperty.EnumeratedProperty(String theName, String theDescription, String[] theLabels, E[] theChoices, int defaultIndex, float theUIOrder)",18,1,1,0,6
"net.sourceforge.pmd.properties.MethodMultiProperty.MethodMultiProperty(String theName, String theDescription, String methodDefaults, String[] legalPackageNames, float theUIOrder)",18,1,1,0,5
"net.sourceforge.pmd.properties.constraints.NumericConstraints.inRange(final N minInclusive, final N maxInclusive)",18,1,1,0,2
"net.sourceforge.pmd.properties.IntegerMultiProperty.IntegerMultiProperty(String theName, String theDescription, Integer min, Integer max, List<Integer> defaultValues, float theUIOrder)",18,1,0,0,6
"net.sourceforge.pmd.properties.IntegerProperty.IntegerProperty(String theName, String theDescription, Integer min, Integer max, Integer theDefault, float theUIOrder)",18,1,0,0,6
"net.sourceforge.pmd.util.CompoundListTest.testHappyPathRemove()",17,1,28,0,0
"net.sourceforge.pmd.lang.wsdl.rule.AbstractWsdlRuleTest.testVisit()",17,1,18,0,0
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRuleTest.testVisit()",17,1,18,0,0
"net.sourceforge.pmd.typeresolution.typedefinition.JavaTypeDefinitionSimpleTest.arrayListOfString()",17,1,18,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorForLoopTest.parseCursorForLoopNested()",17,1,16,0,0
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.doubleNesting()",17,1,13,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.doubleNesting()",17,1,13,0,0
"net.sourceforge.pmd.RuleViolationTest.testComparatorWithDifferentFilenames()",17,1,10,0,0
"net.sourceforge.pmd.RuleViolationTest.testComparatorWithSameFileSameLines()",17,1,9,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testExclusionFilter()",17,1,8,0,0
"net.sourceforge.pmd.cpd.CSVRendererTest.testLineCountPerFile()",17,1,7,0,0
"net.sourceforge.pmd.properties.DoubleMultiProperty.DoubleMultiProperty(String theName, String theDescription, Double min, Double max, Double[] defaultValues, float theUIOrder)",17,1,1,0,6
"net.sourceforge.pmd.properties.FloatMultiProperty.FloatMultiProperty(String theName, String theDescription, Float min, Float max, Float[] defaultValues, float theUIOrder)",17,1,1,0,6
"net.sourceforge.pmd.properties.IntegerMultiProperty.IntegerMultiProperty(String theName, String theDescription, Integer min, Integer max, Integer[] defaultValues, float theUIOrder)",17,1,1,0,6
"net.sourceforge.pmd.properties.LongMultiProperty.LongMultiProperty(String theName, String theDescription, Long min, Long max, Long[] defaultValues, float theUIOrder)",17,1,1,0,6
"net.sourceforge.pmd.properties.TypeMultiProperty.TypeMultiProperty(String theName, String theDescription, String theTypeDefaults, String[] legalPackageNames, float theUIOrder)",17,1,1,0,5
"net.sourceforge.pmd.properties.DoubleMultiProperty.DoubleMultiProperty(String theName, String theDescription, Double min, Double max, List<Double> defaultValues, float theUIOrder)",17,1,0,0,6
"net.sourceforge.pmd.properties.DoubleProperty.DoubleProperty(String theName, String theDescription, Double min, Double max, Double theDefault, float theUIOrder)",17,1,0,0,6
"net.sourceforge.pmd.properties.FloatMultiProperty.FloatMultiProperty(String theName, String theDescription, Float min, Float max, List<Float> defaultValues, float theUIOrder)",17,1,0,0,6
"net.sourceforge.pmd.properties.FloatProperty.FloatProperty(String theName, String theDescription, Float min, Float max, Float theDefault, float theUIOrder)",17,1,0,0,6
"net.sourceforge.pmd.properties.LongMultiProperty.LongMultiProperty(String theName, String theDescription, Long min, Long max, List<Long> defaultValues, float theUIOrder)",17,1,0,0,6
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getXPathHandler()",17,1,0,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getExpectedMultiple()",17,1,0,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getExpectedMultiple()",17,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessSuper$Nested.foo()",17,1,0,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testForStmtHasCorrectTypes()",16,1,29,0,0
"net.sourceforge.pmd.AbstractRuleTest.testRuleWithVariableInMessage()",16,1,23,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testErasedCandidateSet()",16,1,18,0,0
"net.sourceforge.pmd.RuleContextTest.testAttributes()",16,1,16,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTNewKeyValueObjectExpressionTest.testParameterName()",16,1,16,0,0
"net.sourceforge.pmd.lang.java.multifile.PackageStatsTest.testAddField()",16,1,10,0,0
"net.sourceforge.pmd.RuleViolationTest.testComparatorWithSameFileDifferentLines()",16,1,9,0,0
"net.sourceforge.pmd.cpd.SourceCodeTest.testSimple()",16,1,9,0,0
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRuleTest.testTagsIndicesIn()",16,1,9,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testExclusion()",16,1,7,0,0
"net.sourceforge.pmd.cpd.CSVRendererTest.testFilenameEscapes()",16,1,7,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testLooseInvocationRightBoxing()",16,1,5,0,0
"net.sourceforge.pmd.util.datasource.ReaderDataSource.getNiceFileName(boolean shortNames, String inputFileName)",16,1,1,0,2
"net.sourceforge.pmd.cache.CachedRuleViolation.CachedRuleViolation(final CachedRuleMapper mapper, final String description, final String fileName, final String ruleClassName, final int beginLine, final int beginColumn, final int endLine, final int endColumn, final String packageName, final String className, final String methodName, final String variableName)",16,1,0,0,12
"net.sourceforge.pmd.properties.AbstractPackagedProperty.AbstractPackagedProperty(String theName, String theDescription, T theDefault, float theUIOrder, boolean isDefinedExternally, PackagedPropertyModule<T> module)",16,1,0,0,6
"net.sourceforge.pmd.properties.LongProperty.LongProperty(String theName, String theDescription, Long min, Long max, Long theDefault, float theUIOrder)",16,1,0,0,6
"net.sourceforge.pmd.properties.PropertyFactory.doubleProperty(String name)",16,1,0,0,1
"net.sourceforge.pmd.properties.PropertyFactory.regexProperty(String name)",16,1,0,0,1
"net.sourceforge.pmd.ConfigurationTest.testClassLoader()",15,1,21,0,0
"net.sourceforge.pmd.AbstractRuleTest.testCreateRV()",15,1,16,0,0
"net.sourceforge.pmd.AbstractRuleTest.testRuleSuppress()",15,1,13,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testBrokenAndValidFile()",15,1,11,0,0
"net.sourceforge.pmd.lang.java.multifile.PackageStatsTest.testAddOperation()",15,1,11,0,0
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithNOPMDEcmascript()",15,1,8,0,0
"net.sourceforge.pmd.docs.RuleDocGeneratorTest.setup()",15,1,7,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreBetweenSpecialCommentsMultiline()",15,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testSubtypeReduceProperVsProper()",15,1,5,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.testBlockComments()",15,1,3,0,0
"net.sourceforge.pmd.util.database.ResourceLoaderTest.testGetResourceStream()",15,1,3,0,0
"net.sourceforge.pmd.util.database.ResourceResolverTest.testResolve()",15,1,3,0,0
"net.sourceforge.pmd.properties.MethodProperty.MethodProperty(String theName, String theDescription, String defaultMethodStr, String[] legalPackageNames, float theUIOrder)",15,1,1,0,5
"net.sourceforge.pmd.properties.TypeProperty.TypeProperty(String theName, String theDescription, String defaultTypeStr, String[] legalPackageNames, float theUIOrder)",15,1,1,0,5
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTMethod> key, ASTUserClassOrInterface<?> node, MetricOptions options, ResultOption resultOption)",15,1,1,0,4
"net.sourceforge.pmd.util.viewer.gui.menu.XPathFragmentAddingItem.XPathFragmentAddingItem(String caption, ViewerModel model, String fragment)",15,1,1,0,3
"SwitchExpressions.main(String[] args)",15,1,1,0,1
"SwitchExpressionsBreak.main(String[] args)",15,1,1,0,1
"net.sourceforge.pmd.cpd.DartTokenizerTest.data()",15,1,1,0,0
"net.sourceforge.pmd.docs.RuleDocGeneratorTest.cleanup()",15,1,1,0,0
"net.sourceforge.pmd.properties.EnumeratedProperty.EnumeratedProperty(String theName, String theDescription, Map<String,E> labelsToChoices, E defaultValue, Class<E> valueType, float theUIOrder)",15,1,0,0,6
"net.sourceforge.pmd.properties.TypeMultiProperty.TypeMultiProperty(String theName, String theDescription, List<Class> theDefaults, String[] legalPackageNames, float theUIOrder)",15,1,0,0,5
"net.sourceforge.pmd.properties.PropertyFactory.charProperty(String name)",15,1,0,0,1
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.getExpectedWithProperties()",15,1,0,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getExpected()",15,1,0,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getExpected()",15,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Operators.binaryLogicalOperators()",15,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testEnumStaticUsage()",14,1,24,0,0
"net.sourceforge.pmd.properties.constraints.NumericConstraintsTest.testPositive()",14,1,23,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectExpressionsTest.parseSelectSimpleExpression()",14,1,19,0,0
"net.sourceforge.pmd.ConfigurationTest.testIgnoreIncrementalAnalysis()",14,1,10,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testIncorporationSubtypeAndSubtype()",14,1,10,0,0
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.testSimpleNesting()",14,1,9,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.testSimpleNesting()",14,1,9,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testGetVariableName()",14,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testPackageAndClassName()",14,1,6,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WocMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",14,1,5,0,2
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testCorrectOldReference()",14,1,5,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreBetweenSpecialAnnotation()",14,1,5,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreBetweenSpecialAnnotationAndIgnoreAnnotations()",14,1,5,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreBetweenSpecialComments()",14,1,5,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreBetweenSpecialCommentsMultiple()",14,1,5,0,0
"net.sourceforge.pmd.lang.ParserOptionsTest.testEqualsHashcode()",14,1,5,0,0
"net.sourceforge.pmd.RuleSetFactoryTest.testExclusionOfUselessParantheses()",14,1,4,0,0
"net.sourceforge.pmd.cpd.PLSQLTokenizerTest.testIgnoreBetweenSpecialComments()",14,1,4,0,0
"net.sourceforge.pmd.cpd.PythonTokenizerTest.testIgnoreBetweenSpecialComments()",14,1,4,0,0
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRuleTest.testFilteredCommentIn()",14,1,4,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.testIgnoreBetweenSpecialComments()",14,1,3,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.testIgnoreBetweenSpecialComments()",14,1,3,0,0
"net.sourceforge.pmd.util.StringUtilTest.testUTF8NotSupported()",14,1,3,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, ASTAnyTypeDeclaration node, MetricOptions options, ResultOption resultOption)",14,1,1,0,4
"net.sourceforge.pmd.properties.CharacterProperty.CharacterProperty(String theName, String theDescription, String defaultStr, float theUIOrder)",14,1,1,0,4
"net.sourceforge.pmd.lang.rule.RuleViolationFactory.addViolation(RuleContext ruleContext, Rule rule, Node node, String message, Object[] args)",14,1,0,0,5
"net.sourceforge.pmd.properties.MethodMultiProperty.MethodMultiProperty(String theName, String theDescription, List<Method> theDefaults, String[] legalPackageNames, float theUIOrder)",14,1,0,0,5
"net.sourceforge.pmd.util.viewer.model.ViewerModelEvent.ViewerModelEvent(Object source, int reason, Object parameter)",14,1,0,0,3
"net.sourceforge.pmd.lang.ast.Node.setUserData(Object userData)",14,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptorTest.containsIgnoreCase(final String substring)",14,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessShadow.foo()",14,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Operators.assignmentOperators()",14,1,0,0,0
"net.sourceforge.pmd.util.CompoundListTest.testHappyPath()",13,1,22,0,0
"net.sourceforge.pmd.cli.PMDFilelistTest.testGetApplicableFilesMultipleLines()",13,1,17,0,0
"net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRuleTest.testCommentAssignments()",13,1,16,0,0
"net.sourceforge.pmd.ExcludeLinesTest.testAlternateMarker()",13,1,15,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testFunctionCall()",13,1,15,0,0
"net.sourceforge.pmd.cli.PMDFilelistTest.testGetApplicatbleFilesWithIgnores()",13,1,14,0,0
"net.sourceforge.pmd.ConfigurationTest.testAnalysisCache()",13,1,12,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testDefaultValueConstraintViolationCausesFailure()",13,1,12,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testDefaultValueConstraintViolationCausesFailureMulti()",13,1,12,0,0
"net.sourceforge.pmd.typeresolution.typedefinition.JavaTypeDefinitionSimpleTest.arrayListWithoutBoundGenerics()",13,1,12,0,0
"net.sourceforge.pmd.AbstractRuleTest.testCreateRV2()",13,1,11,0,0
"net.sourceforge.pmd.RuleViolationTest.testConstructor2()",13,1,11,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.testIgnoreMultiLineComments()",13,1,10,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.test()",13,1,6,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getExpectedError(ConfigurationError error)",13,1,3,0,1
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTMethod> key, ASTUserClassOrInterface<?> node, ResultOption resultOption)",13,1,2,0,3
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getExpectedError(ProcessingError error)",13,1,2,0,1
"net.sourceforge.pmd.properties.BooleanMultiProperty.BooleanMultiProperty(String theName, String theDescription, Boolean[] defaultValues, float theUIOrder)",13,1,1,0,4
"net.sourceforge.pmd.properties.BooleanProperty.BooleanProperty(String theName, String theDescription, String defaultBoolStr, float theUIOrder)",13,1,1,0,4
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getExpectedError(ProcessingError error)",13,1,1,0,1
"net.sourceforge.pmd.lang.metrics.MetricsComputer.computeWithResultOption(MetricKey<O> key, T node, boolean force, MetricOptions options, ResultOption option, ProjectMemoizer<T,O> stats)",13,1,0,0,6
"net.sourceforge.pmd.properties.BooleanMultiProperty.BooleanMultiProperty(String theName, String theDescription, List<Boolean> defaultValues, float theUIOrder)",13,1,0,0,4
"net.sourceforge.pmd.properties.BooleanProperty.BooleanProperty(String theName, String theDescription, boolean defaultValue, float theUIOrder)",13,1,0,0,4
"net.sourceforge.pmd.properties.StringProperty.StringProperty(String theName, String theDescription, String defaultValue, float theUIOrder)",13,1,0,0,4
"net.sourceforge.pmd.properties.builders.MultiNumericPropertyBuilder.range(V min, V max)",13,1,0,0,2
"net.sourceforge.pmd.properties.builders.SingleNumericPropertyBuilder.range(V min, V max)",13,1,0,0,2
"net.sourceforge.pmd.properties.PropertyFactory.stringProperty(String name)",13,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.renderFileReport(Report report)",13,1,0,0,1
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getExpectedError(ConfigurationError error)",13,1,0,0,1
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.getExpected()",13,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserXPathTest.testBooleanExpressions()",12,1,20,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testInnerJoinUsing()",12,1,20,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testOuterJoinUsing()",12,1,18,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.verifyXmlEscaping(Renderer renderer, String shouldContain)",12,1,15,0,2
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testLanguageVersionDiscoverer()",12,1,14,0,0
"net.sourceforge.pmd.cli.PMDFilelistTest.testGetApplicableFiles()",12,1,13,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testNoConstraintViolationCausesIsOkMulti()",12,1,13,0,0
"net.sourceforge.pmd.ConfigurationTest.testCreateRenderer()",12,1,12,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testPackagePrivate()",12,1,11,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testRuleWithProperties()",12,1,11,0,0
"net.sourceforge.pmd.ConfigurationTest.testAnalysisCacheLocation()",12,1,10,0,0
"net.sourceforge.pmd.RuleViolationTest.testConstructor1()",12,1,10,0,0
"net.sourceforge.pmd.lang.java.JavaLanguageModule.JavaLanguageModule()",12,1,10,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.AllMetricsTest.setUp()",12,1,10,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testJavaFileUsing14()",12,1,7,0,0
"net.sourceforge.pmd.cli.CLITest.testWrongRulename()",12,1,7,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testExcludes()",12,1,7,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testIgnoreIdentifiersFailOnViolationFalse()",12,1,7,0,0
"net.sourceforge.pmd.cli.CLITest.testWrongRuleset()",12,1,6,0,0
"net.sourceforge.pmd.cli.CLITest.testWrongRulesetWithRulename()",12,1,6,0,0
"net.sourceforge.pmd.docs.EscapeUtilsTest.testEscapeHtmlWithinMarkdownBlocks()",12,1,6,0,0
"net.sourceforge.pmd.renderers.XSLTRendererTest.testDefaultStylesheet()",12,1,6,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.test()",12,1,6,0,0
"net.sourceforge.pmd.util.designer.DesignerTest.testCopyXmlToClipboard()",12,1,6,0,0
"net.sourceforge.pmd.FileSelectorTest.testUnwantedFile()",12,1,5,0,0
"net.sourceforge.pmd.FileSelectorTest.testUnwantedJavaFile()",12,1,5,0,0
"net.sourceforge.pmd.FileSelectorTest.testWantedFile()",12,1,5,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testDiscardOneLineAnnotationWithParams()",12,1,5,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexOperationMetric.supports(ASTMethod node)",12,1,4,0,1
"net.sourceforge.pmd.cpd.UnicodeObjectiveCTokenizerTest.testIgnoreBetweenSpecialComments()",12,1,4,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testMethodName()",12,1,4,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodThirdPhase.test()",12,1,4,0,0
"net.sourceforge.pmd.properties.PropertyFactory.enumListProperty(String name, Map<String,T> nameToValue)",12,1,3,0,2
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, ASTAnyTypeDeclaration node, ResultOption resultOption)",12,1,2,0,3
"net.sourceforge.pmd.properties.MethodMultiProperty.MethodMultiProperty(String theName, String theDescription, Method[] theDefaults, String[] legalPackageNames, float theUIOrder)",12,1,1,0,5
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTMethod> key, ASTMethod node, MetricOptions options)",12,1,1,0,3
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTUserClassOrInterface<?>> key, ASTUserClass node, MetricOptions options)",12,1,1,0,3
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<ASTAnyTypeDeclaration> key, ASTAnyTypeDeclaration node, MetricOptions options)",12,1,1,0,3
"net.sourceforge.pmd.lang.plsql.PLSQLLanguageModule.PLSQLLanguageModule()",12,1,1,0,0
"net.sourceforge.pmd.lang.metrics.MetricsComputer.computeForOperation(MetricKey<O> key, O node, boolean force, MetricOptions options, MetricMemoizer<O> memoizer)",12,1,0,0,5
"net.sourceforge.pmd.lang.metrics.MetricsComputer.computeForType(MetricKey<T> key, T node, boolean force, MetricOptions options, MetricMemoizer<T> memoizer)",12,1,0,0,5
"net.sourceforge.pmd.properties.MethodProperty.MethodProperty(String theName, String theDescription, Method theDefault, String[] legalPackageNames, float theUIOrder)",12,1,0,0,5
"net.sourceforge.pmd.properties.TypeProperty.TypeProperty(String theName, String theDescription, Class<?> theDefault, String[] legalPackageNames, float theUIOrder)",12,1,0,0,5
"net.sourceforge.pmd.properties.CharacterProperty.CharacterProperty(String theName, String theDescription, Character theDefault, float theUIOrder)",12,1,0,0,4
"net.sourceforge.pmd.lang.ast.Node.findDescendantsOfType(Class<T> targetType, List<T> results, boolean crossFindBoundaries)",12,1,0,0,3
"net.sourceforge.pmd.lang.Parser.parse(String fileName, Reader source)",12,1,0,0,2
"net.sourceforge.pmd.lang.ast.Node.findChildrenOfType(Class<T> childType)",12,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptor.propertyErrorFor(Rule rule)",12,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptor.valueFrom(String propertyString)",12,1,0,0,1
"net.sourceforge.pmd.properties.RegexProperty.named(String name)",12,1,0,0,1
"net.sourceforge.pmd.properties.builders.MultiValuePropertyBuilder.delim(char delim)",12,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.startFileAnalysis(DataSource dataSource)",12,1,0,0,1
"net.sourceforge.pmd.Rule.isDeprecated()",12,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.isMultiValue()",12,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.uiOrder()",12,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericParameter.foo()",12,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessStatic$Nested.bar()",12,1,0,0,0
"net.sourceforge.pmd.util.datasource.ReaderDataSource.getInputStream()",12,1,0,0,0
"net.sourceforge.pmd.typeresolution.MethodTypeResolutionTest.testBoxingRules()",11,1,36,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testPrivateFieldInNestedClassInsideInterface()",11,1,24,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testForStmtHasCorrectTypes()",11,1,21,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testIsSyntacticallyPublic()",11,1,17,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testIsSelfAssignment()",11,1,14,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatementTest.testMultipleCatchAndFinallyBlock()",11,1,13,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoWithGroupByTest.testExample4WithGroupingSets()",11,1,12,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.testIgnoreSingleLineComments()",11,1,10,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testNoConstraintViolationCausesIsOk()",11,1,10,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testEqualityReduceNotPrimitiveVsVariable()",11,1,10,0,0
"net.sourceforge.pmd.LanguageVersionTest.data()",11,1,9,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testNameWithSuperIsNotFlaggedAsUnused()",11,1,9,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testNameWithThisOrSuperIsNotFlaggedAsUnused()",11,1,9,0,0
"net.sourceforge.pmd.lang.BaseLanguageModuleTest.testHashCodeEquals()",11,1,8,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testOnlyWorksForMethodsAndConstructors()",11,1,8,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.testFilterAbsoluteWithExtension()",11,1,8,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.testFilterAbsoluteWithoutExtension()",11,1,8,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.testFilterRelativeWithExtension()",11,1,8,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.testFilterRelativeWithoutExtension()",11,1,8,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testIgnoreIdentifiers()",11,1,7,0,0
"net.sourceforge.pmd.lang.LanguageRegistryTest.getDefaultVersionLanguageTest()",11,1,7,0,0
"net.sourceforge.pmd.lang.java.symboltable.ImageFinderFunctionTest.testSeveralImages()",11,1,6,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testLooseInvocationProperVsProper()",11,1,5,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testJavaFileUsingDefaults()",11,1,4,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testPlsql()",11,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInMultiLineNoAsteriskEmpty()",11,1,4,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testASTFormalParameterVariableName()",11,1,4,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.createEmptyReportWithSuppression()",11,1,4,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.testComments()",11,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isAbstract()",11,1,3,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, MethodLikeNode node, MetricOptions options)",11,1,1,0,3
"net.sourceforge.pmd.cpd.GridBagHelper.GridBagHelper(Container container, double[] weights)",11,1,1,0,2
"net.sourceforge.pmd.properties.builders.MultiValuePropertyBuilder.defaultValues(V... val)",11,1,1,0,1
"net.sourceforge.pmd.PMDException.PMDException(String message, Exception reason)",11,1,0,0,2
"net.sourceforge.pmd.properties.PropertySource.setProperty(MultiValuePropertyDescriptor<V> propertyDescriptor, V... values)",11,1,0,0,2
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.DocumentNode(Node node)",11,1,0,0,1
"net.sourceforge.pmd.lang.vm.directive.VelocimacroProxy.setArgArray(String[] arr)",11,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptor.asDelimitedString(T value)",11,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptor.errorFor(T value)",11,1,0,0,1
"net.sourceforge.pmd.properties.PropertyFactory.booleanProperty(String name)",11,1,0,0,1
"net.sourceforge.pmd.properties.builders.MultiValuePropertyBuilder.defaultValues(Collection<? extends V> val)",11,1,0,0,1
"net.sourceforge.pmd.properties.builders.SingleValuePropertyBuilder.defaultValue(E val)",11,1,0,0,1
"net.sourceforge.pmd.cpd.PLSQLLanguage.PLSQLLanguage()",11,1,0,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getExpectedEmpty()",11,1,0,0,0
"net.sourceforge.pmd.testframework.SimpleAggregatorTst.setUp()",11,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessNested$Nested.foo()",11,1,0,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testIfStmtHasCorrectTypes()",10,1,20,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.createViolationNode(final String filename, final int beginLine, final int endLine, final int beginColumn, final int endColumn, final String variableName)",10,1,19,0,6
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testRegexpLikeCondition()",10,1,18,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.getCode1()",10,1,15,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.getCode2()",10,1,15,0,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScopeTest.testMethodParameterOccurrenceRecorded()",10,1,15,0,0
"net.sourceforge.pmd.properties.constraints.NumericConstraintsTest.testInRangeDouble()",10,1,15,0,0
"net.sourceforge.pmd.properties.constraints.NumericConstraintsTest.testInRangeInteger()",10,1,15,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testNaturalRightOuterJoin()",10,1,14,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testOuterJoinPartitioned()",10,1,14,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testRegexProperty()",10,1,14,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testPostfixUsageIsRecorded()",10,1,13,0,0
"net.sourceforge.pmd.lang.plsql.ast.DeleteStatementTest.parseDeleteStatementExample()",10,1,12,0,0
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.testMultipleProperties()",10,1,10,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testLooseInvocationAnythingElse()",10,1,10,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testSubtypeReduceAnyVsVariable()",10,1,10,0,0
"dup1.main(String[] args)",10,1,9,0,1
"dup2.main(String[] args)",10,1,9,0,1
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.testNoCacheSwitch()",10,1,8,0,0
"net.sourceforge.pmd.cpd.PythonTokenizerTest.testBackticks()",10,1,8,0,0
"net.sourceforge.pmd.lang.java.dfa.VariableAccessTest.testGetVariableName()",10,1,8,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest.tryRegexp(MyNode myNode, String exp)",10,1,7,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPackageDeclarationTest.testPackageName()",10,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testExpressionInAttribute()",10,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testScriptlet()",10,1,7,0,0
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.testEncoding()",10,1,6,0,0
"net.sourceforge.pmd.util.CompoundListTest.setUp()",10,1,6,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testJspFile()",10,1,4,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testVFFile()",10,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentBeginColumn()",10,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentBeginLine()",10,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentEndColumn()",10,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentVariableName()",10,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoEqualViolations()",10,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInMultiLine()",10,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInMultiLineCrLf()",10,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInMultiLineFormal()",10,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInMultiLineFormalCrLf()",10,1,4,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testEnumName()",10,1,4,0,0
"net.sourceforge.pmd.properties.PropertyFactory.doubleListProperty(String name)",10,1,3,0,1
"net.sourceforge.pmd.properties.PropertyFactory.intListProperty(String name)",10,1,3,0,1
"net.sourceforge.pmd.properties.PropertyFactory.longIntListProperty(String name)",10,1,3,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isPublic()",10,1,3,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTMethod> key, ASTMethod node)",10,1,2,0,2
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.get(MetricKey<ASTUserClassOrInterface<?>> key, ASTUserClass node)",10,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<ASTAnyTypeDeclaration> key, ASTAnyTypeDeclaration node)",10,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, MethodLikeNode node)",10,1,2,0,2
"net.sourceforge.pmd.properties.PropertyFactory.charListProperty(String name)",10,1,2,0,1
"net.sourceforge.pmd.properties.PropertyFactory.stringListProperty(String name)",10,1,2,0,1
"net.sourceforge.pmd.properties.RegexProperty$RegexPBuilder.defaultValue(String val)",10,1,2,0,1
"net.sourceforge.pmd.cpd.PerlTokenizer.PerlTokenizer()",10,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isInterfaceMember()",10,1,2,0,0
"net.sourceforge.pmd.properties.CharacterProperty.charFrom(String charStr)",10,1,1,0,1
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getRenderer()",10,1,1,0,0
"net.sourceforge.pmd.properties.FileProperty.FileProperty(String theName, String theDescription, File theDefault, float theUIOrder)",10,1,0,0,4
"net.sourceforge.pmd.lang.java.multifile.ProjectMirror.hasMatchingSig(JavaTypeQualifiedName qname, String fieldName, JavaFieldSigMask sigMask)",10,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveImportsRule.visit(ASTImportDeclaration node, Object data)",10,1,0,0,2
"net.sourceforge.pmd.util.viewer.model.ViewerModelEvent.ViewerModelEvent(Object source, int reason)",10,1,0,0,2
"net.sourceforge.pmd.lang.LanguageVersionHandler.getQualifiedNameResolutionFacade(ClassLoader classLoader)",10,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getFirstChildOfType(Class<T> childType)",10,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getParentsOfType(Class<T> parentType)",10,1,0,0,1
"net.sourceforge.pmd.properties.constraints.PropertyConstraint.validate(T value)",10,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.getQualifiedName()",10,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.isDefinedExternally()",10,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.type()",10,1,0,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getExpectedEmpty()",10,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Operators.binaryNumericOperators()",10,1,0,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testSimpleClassDuplicatedTokens()",9,1,25,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testSimpleVariableOccurrence()",9,1,19,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testVariableOrConstantDeclaratorParentChildLinks()",9,1,16,0,0
"net.sourceforge.pmd.ConfigurationTest.testReportProperties()",9,1,15,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclarationTest.testLocalChildrenAreNotAlwaysLocal()",9,1,15,0,0
"net.sourceforge.pmd.lang.plsql.ast.XMLElementTest.testParseXMLElement()",9,1,15,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testSimpleClassMethodMultipleLines()",9,1,14,0,0
"net.sourceforge.pmd.docs.EscapeUtilsTest.testEscapeMarkdown()",9,1,14,0,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.testSearchIgnoringBoundary()",9,1,13,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testInnerCrossJoin()",9,1,13,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testInnerNaturalJoin()",9,1,13,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testLocalVariableDeclarationFound()",9,1,12,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testQualifiedNameOccurrence()",9,1,12,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testRightOuterJoin()",9,1,11,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.testRemovePathToChild()",9,1,9,0,0
"net.sourceforge.pmd.lang.xml.rule.XmlXPathRule.XmlXPathRule()",9,1,9,0,0
"net.sourceforge.pmd.testframework.PmdRuleTst.getRules()",9,1,9,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testLineNumberAfterMultilineComment()",9,1,8,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testCharacterUnicodeEscapesValid()",9,1,8,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testStringUnicodeEscapesInvalid()",9,1,8,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testStringUnicodeEscapesNotEscaped()",9,1,8,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testStringUnicodeEscapesValid()",9,1,8,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorForLoopTest.parseCursorForLoopSimple()",9,1,8,0,0
"net.sourceforge.pmd.lang.symboltable.ApplierTest.testSimple()",9,1,8,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.parse(final String code)",9,1,7,0,1
"net.sourceforge.pmd.lang.java.multifile.PackageStatsTest.testAddClass()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testComment()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testDeclaration()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testElExpression()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testElExpressionInAttribute()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testExpression()",9,1,7,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.testJsfValueBinding()",9,1,7,0,0
"net.sourceforge.pmd.lang.symboltable.ApplierTest.testLimit()",9,1,7,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testDoublePropertyInvalidValue()",9,1,7,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testEnumPropertyInvalidValue()",9,1,7,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testIntPropertyInvalidValue()",9,1,7,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testRegexPropertyInvalidValue()",9,1,7,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testEqualityReduceSameErasure()",9,1,7,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLXPathRuleTest.testXPathRule1()",9,1,6,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLXPathRuleTest.testXPathRule1Compatibility()",9,1,6,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLXPathRuleTest.testXPathRule2()",9,1,6,0,0
"net.sourceforge.pmd.typeresolution.testdata.PmdStackOverflow.shouldThrowStackOverfloError()",9,1,6,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.createRuleViolation(String description)",9,1,5,0,1
"net.sourceforge.pmd.cli.PMDParametersTest.testVersion()",9,1,5,0,0
"net.sourceforge.pmd.lang.ParserOptionsTest.testSuppressMarker()",9,1,5,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testEnumListPropertyNullValueFailsBuild()",9,1,5,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testEnumPropertyNullValueFailsBuild()",9,1,5,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testMoreTokens()",9,1,4,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testDiscardSimpleOneLineAnnotation()",9,1,4,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testIgnoreComments()",9,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentEndLine()",9,1,4,0,0
"net.sourceforge.pmd.lang.dfa.report.ViolationNodeTest.testEqualsNodeWithTwoDifferentViolationsDifferentFilename()",9,1,4,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.test2()",9,1,3,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodStaticAccess.foo()",9,1,3,0,0
"net.sourceforge.pmd.lang.java.rule.AbstractIgnoredAnnotationRule.hasIgnoredAnnotation(Annotatable node)",9,1,2,0,1
"net.sourceforge.pmd.util.viewer.model.AttributeToolkit.constructPredicate(Attribute attribute)",9,1,2,0,1
"net.sourceforge.pmd.cpd.EdgeCasesTokenizerTest.testEscapedBackSlash()",9,1,2,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.setLocation(int line, int column, String templateName)",9,1,1,0,3
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSigMask.covers(ApexOperationSignature sig)",9,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaOperationMetric.supports(MethodLikeNode node)",9,1,1,0,1
"net.sourceforge.pmd.properties.DoubleProperty.doubleFrom(String numberString)",9,1,1,0,1
"net.sourceforge.pmd.util.viewer.model.AttributeToolkit.formatValueForXPath(Attribute attribute)",9,1,1,0,1
"net.sourceforge.pmd.util.viewer.util.NLS.nls(String key)",9,1,1,0,1
"net.sourceforge.pmd.renderers.HTMLRendererTest.getExpectedMultiple()",9,1,1,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getDumpFacade(Writer writer, String prefix, boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Handler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.jsp.JspHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.vf.VfHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.vm.VmHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.lang.xml.XmlHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",9,1,0,0,3
"net.sourceforge.pmd.Rule.apply(List<? extends Node> nodes, RuleContext ctx)",9,1,0,0,2
"net.sourceforge.pmd.cache.AnalysisCache.checkValidity(RuleSets ruleSets, ClassLoader auxclassPathClassLoader)",9,1,0,0,2
"net.sourceforge.pmd.cpd.token.AntlrToken.AntlrToken(final Token token, final AntlrToken previousComment)",9,1,0,0,2
"net.sourceforge.pmd.lang.Parser.getTokenManager(String fileName, Reader source)",9,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.ClassMirror.hasMatchingFieldSig(String fieldName, JavaFieldSigMask sigMask)",9,1,0,0,2
"net.sourceforge.pmd.lang.rule.RuleChainVisitor.visitAll(List<Node> nodes, RuleContext ctx)",9,1,0,0,2
"net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery.evaluate(Node node, RuleContext data)",9,1,0,0,2
"net.sourceforge.pmd.lang.vm.directive.Directive.setLocation(int line, int column)",9,1,0,0,2
"net.sourceforge.pmd.util.datasource.DataSource.getNiceFileName(boolean shortNames, String inputFileName)",9,1,0,0,2
"net.sourceforge.pmd.AbstractConfiguration.setDebug(boolean debug)",9,1,0,0,1
"net.sourceforge.pmd.cache.AnalysisCache.isUpToDate(File sourceFile)",9,1,0,0,1
"net.sourceforge.pmd.lang.Language.hasExtension(String extension)",9,1,0,0,1
"net.sourceforge.pmd.lang.LanguageVersionHandler.getSymbolFacade(ClassLoader classLoader)",9,1,0,0,1
"net.sourceforge.pmd.lang.LanguageVersionHandler.getTypeResolutionFacade(ClassLoader classLoader)",9,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.findDescendantsOfType(Class<T> targetType)",9,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getFirstDescendantOfType(Class<T> descendantType)",9,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getFirstParentOfAnyType(Class<? extends T>... parentTypes)",9,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getFirstParentOfType(Class<T> parentType)",9,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.getNthParent(int n)",9,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.getDeclarations(Class<T> clazz)",9,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.getEnclosingScope(Class<T> clazz)",9,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.setDirectiveName(final String str)",9,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.getProperty(PropertyDescriptor<T> propertyDescriptor)",9,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.hasDescriptor(PropertyDescriptor<?> descriptor)",9,1,0,0,1
"net.sourceforge.pmd.AbstractConfiguration.isDebug()",9,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getLanguageMetricsProvider()",9,1,0,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.getOperation()",9,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.getPropertiesByPropertyDescriptor()",9,1,0,0,0
"net.sourceforge.pmd.properties.constraints.PropertyConstraint.getConstraintDescription()",9,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericBounds.astPrimaryNameCases()",9,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessShadow$NestedShadow.foo()",9,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Promotion.unaryNumericPromotion()",9,1,0,0,0
"net.sourceforge.pmd.typeresolution.typedefinition.JavaTypeDefinitionSimpleTest.array()",8,1,12,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatementTest.testCatchAndFinallyBlock()",8,1,11,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatementTest.testCatchBlockOnly()",8,1,11,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatementTest.testFinallyBlockOnly()",8,1,11,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.testAddPathToChild()",8,1,10,0,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScopeTest.testNestedClasses()",8,1,10,0,0
"net.sourceforge.pmd.lang.plsql.ast.UpdateStatementTest.parseUpdateStatementExample()",8,1,10,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testResolution()",8,1,10,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsTest.testStringParserEscapedChar()",8,1,9,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsTest.testStringParserEscapedEscapedChar()",8,1,9,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsTest.testStringParserSimple()",8,1,9,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testLeastUpperBound()",8,1,9,0,0
"net.sourceforge.pmd.lang.vm.rule.design.ExcessiveTemplateLengthRule.visit(final ASTprocess node, final Object data)",8,1,8,0,2
"net.sourceforge.pmd.cpd.CsTokenizerTest.testLineNumberAfterMultilineString()",8,1,8,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTFieldTest.testGetType()",8,1,8,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNodeTest.testGetBodyFunctionClosureExpression()",8,1,8,0,0
"net.sourceforge.pmd.lang.java.symboltable.GlobalScopeTest.testClassDeclAppears()",8,1,8,0,0
"net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclarationTest.testEquality()",8,1,8,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoWithGroupByTest.testExample3WithCube()",8,1,8,0,0
"net.sourceforge.pmd.AbstractRuleTest$MyRule.MyRule()",8,1,7,0,0
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithRuleViolationSuppressRegex()",8,1,7,0,0
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithRuleViolationSuppressXPath()",8,1,7,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.testDoubleQuotedStrings()",8,1,7,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testEqualityReduceArrayTypes()",8,1,7,0,0
"ConcurrentRubyService.basicLoad(final Ruby runtime)",8,1,6,0,1
"net.sourceforge.pmd.RuleContextTest.testReport()",8,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testDefaultPackageAndClassName()",8,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testPackageAndEnumName()",8,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testPackageAndMultipleClassesName()",8,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationTest.testPackageAndPackagePrivateClassesName()",8,1,6,0,0
"net.sourceforge.pmd.properties.PropertyDescriptorTest.testRegexPropertyInvalidDefaultValue()",8,1,6,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.test1()",8,1,5,0,0
"net.sourceforge.pmd.lang.apex.ast.ApexRootNode.getApexVersion()",8,1,5,0,0
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.toString()",8,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testEqualityReduceProperVsProper()",8,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testLooseInvocationLeftBoxing()",8,1,5,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.shouldFindDuplicatesWithDifferentFileExtensions()",8,1,4,0,0
"net.sourceforge.pmd.lang.java.symboltable.ImageFinderFunctionTest.testSingleImage()",8,1,4,0,0
"net.sourceforge.pmd.lang.apex.ast.TestQueryValidators$Error.validateSoql(final SymbolResolver symbols, final ValidationScope scope, final SoqlExpression soql)",8,1,3,0,3
"net.sourceforge.pmd.lang.apex.ast.TestQueryValidators$Error.validateSosl(final SymbolResolver symbols, final ValidationScope scope, final SoslExpression sosl)",8,1,3,0,3
"net.sourceforge.pmd.lang.java.metrics.impl.NoamMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",8,1,3,0,2
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSigMask.restrictVisibilitiesTo(Visibility... visibilities)",8,1,3,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.restrictRolesTo(JavaOperationSignature.Role... roles)",8,1,3,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSigMask.restrictVisibilitiesTo(JavaSignature.Visibility... visibilities)",8,1,3,0,1
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testCommentsIgnored()",8,1,3,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testDiscardImports()",8,1,3,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testDiscardPkgStmts()",8,1,3,0,0
"net.sourceforge.pmd.cpd.SourceCodeTest.testEncodingDetectionFromBOM()",8,1,3,0,0
"net.sourceforge.pmd.cpd.SourceCodeTest.testEncodingIsNotChangedWhenThereIsNoBOM()",8,1,3,0,0
"net.sourceforge.pmd.cpd.GridBagHelper.add(Component component, int width)",8,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTRSIGNEDSHIFT node, Object data)",8,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTRUNSIGNEDSHIFT node, Object data)",8,1,2,0,2
"net.sourceforge.pmd.lang.metrics.AbstractMetric.equals(Object o)",8,1,2,0,1
"net.sourceforge.pmd.lang.java.dfa.GeneralFiddlingTest.innerClassShouldWork()",8,1,2,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseBooleanAttribute()",8,1,2,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseDollar()",8,1,2,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, ASTMethodOrConstructorDeclaration node, MetricOptions options)",8,1,1,0,3
"net.sourceforge.pmd.RuleSetFactoryCompatibilityTest.createRulesetFromString(final String ruleset, RuleSetFactory factory)",8,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ApexNode<?> node, Object data)",8,1,1,0,2
"net.sourceforge.pmd.AbstractConfiguration.setSourceEncoding(String sourceEncoding)",8,1,1,0,1
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.decorateWith(JavaParserVisitorDecorator decorator)",8,1,1,0,1
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatement.isAllocation()",8,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.isAnonymousClass()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testBOM()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageBody.getObjectName()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageSpecification.getObjectName()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerTimingPointSection.getMethodName()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.getMethodName()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.getObjectName()",8,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeSpecification.getObjectName()",8,1,1,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexSignatureMatcher.hasMatchingSig(ApexQualifiedName qname, ApexOperationSigMask sigMask)",8,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.ClassMirror.hasMatchingOpSig(String opName, JavaOperationSigMask sigMask)",8,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.ProjectMirror.hasMatchingSig(JavaOperationQualifiedName qname, JavaOperationSigMask sigMask)",8,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.SyntaxErrorException.SyntaxErrorException(int line, String ruleName)",8,1,0,0,2
"net.sourceforge.pmd.lang.metrics.Metric.computeFor(N node, MetricOptions options)",8,1,0,0,2
"net.sourceforge.pmd.lang.rule.RuleChainVisitor.add(RuleSet ruleSet, Rule rule)",8,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.SyntaxErrorException.SyntaxErrorException(int line, String ruleName)",8,1,0,0,2
"net.sourceforge.pmd.properties.PropertySource.setProperty(PropertyDescriptor<T> propertyDescriptor, T value)",8,1,0,0,2
"net.sourceforge.pmd.PMDException.PMDException(String message)",8,1,0,0,1
"net.sourceforge.pmd.ThreadSafeReportListener.metricAdded(Metric metric)",8,1,0,0,1
"net.sourceforge.pmd.lang.Language.getVersion(String version)",8,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.findChildNodesWithXPath(String xpathString)",8,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.hasDescendantOfType(Class<T> type)",8,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.jjtGetChild(int index)",8,1,0,0,1
"net.sourceforge.pmd.lang.cpp.CppParser.CppParser(ParserOptions parserOptions)",8,1,0,0,1
"net.sourceforge.pmd.lang.cpp.CppTokenManager.CppTokenManager(Reader source)",8,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript5.Ecmascript5TokenManager.Ecmascript5TokenManager(Reader source)",8,1,0,0,1
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getQualifiedNameResolutionFacade(final ClassLoader classLoader)",8,1,0,0,1
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getSymbolFacade(final ClassLoader classLoader)",8,1,0,0,1
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getTypeResolutionFacade(final ClassLoader classLoader)",8,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.JavaParserDecoratedVisitor(JavaParserControllessVisitor baseVisitor)",8,1,0,0,1
"net.sourceforge.pmd.lang.matlab.MatlabParser.MatlabParser(ParserOptions parserOptions)",8,1,0,0,1
"net.sourceforge.pmd.lang.matlab.MatlabTokenManager.MatlabTokenManager(Reader source)",8,1,0,0,1
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.computeAllMetricsFor(Node node)",8,1,0,0,1
"net.sourceforge.pmd.lang.objectivec.ObjectiveCParser.ObjectiveCParser(ParserOptions parserOptions)",8,1,0,0,1
"net.sourceforge.pmd.lang.objectivec.ObjectiveCTokenManager.ObjectiveCTokenManager(Reader source)",8,1,0,0,1
"net.sourceforge.pmd.lang.python.PythonParser.PythonParser(ParserOptions parserOptions)",8,1,0,0,1
"net.sourceforge.pmd.lang.python.PythonTokenManager.PythonTokenManager(Reader source)",8,1,0,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setRule(Rule rule)",8,1,0,0,1
"net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery.setVersion(String version)",8,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.addDeclaration(NameDeclaration declaration)",8,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.addNameOccurrence(NameOccurrence occurrence)",8,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.isPropertyOverridden(PropertyDescriptor<?> propertyDescriptor)",8,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.useDefaultValueFor(PropertyDescriptor<?> desc)",8,1,0,0,1
"net.sourceforge.pmd.properties.ValueParser.valueOf(String value)",8,1,0,0,1
"net.sourceforge.pmd.Rule.getParserOptions()",8,1,0,0,0
"net.sourceforge.pmd.Rule.isDfa()",8,1,0,0,0
"net.sourceforge.pmd.Rule.isMultifile()",8,1,0,0,0
"net.sourceforge.pmd.Rule.isTypeResolution()",8,1,0,0,0
"net.sourceforge.pmd.Rule.usesMultifile()",8,1,0,0,0
"net.sourceforge.pmd.Rule.usesRuleChain()",8,1,0,0,0
"net.sourceforge.pmd.Rule.usesTypeResolution()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getDataFlowFacade()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getMultifileFacade()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getSymbolFacade()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeBodyDeclaration.getDeclarationNode()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.isTernary()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testFloatValueParsingNegative()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIntValueParsing()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIntValueParsingBinary()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIntValueParsingNegativeHexa()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.MethodLikeNode.getKind()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.performance.UseIndexOfCharRule.methodNames()",8,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.performance.UseIndexOfCharRule.targetTypename()",8,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getDataFlowFacade()",8,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getSymbolFacade()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Break.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Break.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Evaluate.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Evaluate.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Foreach.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Foreach.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Include.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Include.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Literal.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Literal.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Macro.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Macro.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Parse.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Parse.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Stop.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Stop.getType()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.VelocimacroProxy.getName()",8,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.VelocimacroProxy.getType()",8,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.preferredRowCount()",8,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.getOverriddenPropertiesByPropertyDescriptor()",8,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.ignoredProperties()",8,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.usesDefaultValues()",8,1,0,0,0
"net.sourceforge.pmd.testframework.SimpleAggregatorTst.getRules()",8,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Operators.unaryNumericOperators()",8,1,0,0,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.testSearchFromBoundary()",7,1,12,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testWhileStmtHasCorrectTypes()",7,1,12,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testQualifiedOccurrence()",7,1,11,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testThis()",7,1,11,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTMethodTest.testConstructorName()",7,1,10,0,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.testBoundaryIsHonored()",7,1,10,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.testLambdaWithType()",7,1,10,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testLocalVariableTypesAreRecorded()",7,1,10,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testMethodArgumentTypesAreRecorded()",7,1,10,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclarationTest.testLocalInInitializer()",7,1,9,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclarationTest.testLocalInMethod()",7,1,9,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclarationTest.testNestedClassIsNotLocal()",7,1,9,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.testAnnotations()",7,1,9,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.testTypeNameNode()",7,1,9,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testNameLinkage()",7,1,9,0,0
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitorTest.parseAndVisitForString(String source)",7,1,8,0,1
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithAnnotations()",7,1,8,0,0
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithAnnotationsFullName()",7,1,8,0,0
"net.sourceforge.pmd.lang.java.symboltable.LocalScopeTest.testgetEnclosingMethodScope()",7,1,8,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testCSVFormat()",7,1,7,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testFormatXmlWithoutEncoding()",7,1,7,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testUsingStatementsAreNotIgnored()",7,1,7,0,0
"net.sourceforge.pmd.cpd.TokenEntryTest.testSimple()",7,1,7,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserClassTest.testInnerClassName()",7,1,7,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserEnumTest.testEnumName()",7,1,7,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterfaceTest.testInnerInterfaceName()",7,1,7,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.testLambdaWithoutType()",7,1,7,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testOnlyWorksForMethodsAndConstructors()",7,1,7,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testConfigError()",7,1,7,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testError()",7,1,7,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testErrorWithoutMessage()",7,1,7,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testMinimalErasedCandidateSet()",7,1,7,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest.testNoMatch()",7,1,6,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNodeTest.testGetBody()",7,1,6,0,0
"net.sourceforge.pmd.lang.java.PMD5RulesetTest.loadRuleset()",7,1,6,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoWithGroupByTest.testExample1()",7,1,6,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoWithGroupByTest.testExample2()",7,1,6,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.testHideSuppressions()",7,1,6,0,0
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitor.visit(ASTUserClassOrInterface<?> node, Object data)",7,1,5,0,2
"net.sourceforge.pmd.lang.java.multifile.MultifileVisitor.visit(ASTAnyTypeDeclaration node, Object data)",7,1,5,0,2
"net.sourceforge.pmd.AbstractRuleTest.testEquals10()",7,1,5,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.shouldFindNoDuplicatesWithDifferentFileExtensions()",7,1,5,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsTest.testSeparatorPropertyWarning()",7,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testEqualityReduceVariableVsNotPrimitive()",7,1,5,0,0
"net.sourceforge.pmd.util.datasource.ReaderDataSource.toString()",7,1,5,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.createNode(int endColumn)",7,1,4,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals8()",7,1,4,0,0
"net.sourceforge.pmd.LanguageVersionDiscovererTest.testComponentFile()",7,1,4,0,0
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.testProperties()",7,1,4,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.test1()",7,1,4,0,0
"net.sourceforge.pmd.cpd.EcmascriptTokenizerTest.test2()",7,1,4,0,0
"net.sourceforge.pmd.lang.LanguageRegistryTest.getDefaultLanguageTest()",7,1,4,0,0
"net.sourceforge.pmd.cli.CLITest.changeJavaVersion()",7,1,3,0,0
"net.sourceforge.pmd.cli.CLITest.useEcmaScript()",7,1,3,0,0
"net.sourceforge.pmd.cpd.AnyTokenizerTest.testMultiLineMacros()",7,1,3,0,0
"net.sourceforge.pmd.cpd.JavaTokensTokenizerTest.testDiscardSemicolons()",7,1,3,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.testQuestionMark()",7,1,3,0,0
"net.sourceforge.pmd.jaxen.AttributeAxisIteratorTest.testRemove()",7,1,3,0,0
"net.sourceforge.pmd.lang.apex.ApexJorjeLogging.disableLogging()",7,1,3,0,0
"net.sourceforge.pmd.renderers.IDEAJRendererTest.getRenderer()",7,1,3,0,0
"net.sourceforge.pmd.util.StringUtilTest.testUTF8NotSupportedSurrogates()",7,1,3,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.JavaOperationQualifiedName(JavaTypeQualifiedName parent, String operation, boolean isLambda)",7,1,2,0,3
"net.sourceforge.pmd.lang.java.metrics.impl.NopaMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",7,1,2,0,2
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSigMask.forbid(Visibility... visibilities)",7,1,2,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.forbid(JavaOperationSignature.Role... roles)",7,1,2,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSigMask.forbid(JavaSignature.Visibility... visibilities)",7,1,2,0,1
"net.sourceforge.pmd.renderers.HTMLRendererTest.getExpectedError(ProcessingError error)",7,1,2,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty.EnumeratedProperty(String theName, String theDescription, Map<String,E> labelsToChoices, E defaultValue, Class<E> valueType, float theUIOrder, boolean isDefinedExternally)",7,1,1,0,7
"net.sourceforge.pmd.lang.vf.rule.VfRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",7,1,1,0,6
"net.sourceforge.pmd.lang.vm.rule.VmRuleViolationFactory.createRuleViolation(final Rule rule, final RuleContext ruleContext, final Node node, final String message, final int beginLine, final int endLine)",7,1,1,0,6
"net.sourceforge.pmd.lang.apex.ast.TestQueryValidators$Noop.validateSoql(final SymbolResolver symbols, final ValidationScope scope, final SoqlExpression soql)",7,1,1,0,3
"net.sourceforge.pmd.lang.apex.ast.TestQueryValidators$Noop.validateSosl(final SymbolResolver symbols, final ValidationScope typeInfo, final SoslExpression sosl)",7,1,1,0,3
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTRSIGNEDSHIFT node, Object data)",7,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTRUNSIGNEDSHIFT node, Object data)",7,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTRSIGNEDSHIFT node, Object data)",7,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTRUNSIGNEDSHIFT node, Object data)",7,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.get(MetricKey<MethodLikeNode> key, ASTMethodOrConstructorDeclaration node)",7,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.AbstractJavaOperationMetric.supports(ASTMethodOrConstructorDeclaration node)",7,1,1,0,1
"net.sourceforge.pmd.renderers.CodeClimateIssue$Content.Content(String body)",7,1,1,0,1
"net.sourceforge.pmd.renderers.HTMLRendererTest.getExpectedError(ConfigurationError error)",7,1,1,0,1
"net.sourceforge.pmd.cpd.KotlinTokenizerTest.data()",7,1,1,0,0
"net.sourceforge.pmd.cpd.ScalaTokenizerTest.buildTokenizer()",7,1,1,0,0
"net.sourceforge.pmd.lang.cpp.CppLanguageModule.CppLanguageModule()",7,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.hasDetailMessage()",7,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.getFinally()",7,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.hasTypeBound()",7,1,1,0,0
"net.sourceforge.pmd.lang.matlab.MatlabLanguageModule.MatlabLanguageModule()",7,1,1,0,0
"net.sourceforge.pmd.lang.objectivec.ObjectiveCLanguageModule.ObjectiveCLanguageModule()",7,1,1,0,0
"net.sourceforge.pmd.lang.python.PythonLanguageModule.PythonLanguageModule()",7,1,1,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpectedMultiple()",7,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.AnoymousExtendingObject.foo()",7,1,1,0,0
"net.sourceforge.pmd.document.Document.insert(int beginLine, int beginColumn, String textToInsert)",7,1,0,0,3
"net.sourceforge.pmd.lang.ast.Node.jjtAddChild(Node child, int index)",7,1,0,0,2
"net.sourceforge.pmd.Rule.setRuleSetName(String name)",7,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.hasDescendantMatchingXPath(String xpathString)",7,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.jjtSetChildIndex(int index)",7,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.removeChildAtIndex(int childIndex)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.Annotatable.getAnnotation(String annotQualifiedName)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.Annotatable.isAnnotationPresent(String annotQualifiedName)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.Annotatable.isAnyAnnotationPresent(Collection<String> annotQualifiedNames)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.ClassMirror.countMatchingFieldSigs(JavaFieldSigMask sigMask)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.ClassMirror.countMatchingOpSigs(JavaOperationSigMask sigMask)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.ProjectMirror.getClassMirror(JavaTypeQualifiedName className)",7,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.coverAbstract(boolean coverAbstract)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.Metric.supports(N node)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.MetricKey.supports(N node)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.MetricMemoizer.getMemo(ParameterizedMetricKey<N> key)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.ProjectMemoizer.getClassMemoizer(QualifiedName qname)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.ProjectMemoizer.getOperationMemoizer(QualifiedName qname)",7,1,0,0,1
"net.sourceforge.pmd.lang.metrics.SigMask.covers(T sig)",7,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.contains(NameOccurrence occ)",7,1,0,0,1
"net.sourceforge.pmd.lang.vm.directive.VelocimacroProxy.setName(String name)",7,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.definePropertyDescriptor(PropertyDescriptor<?> propertyDescriptor)",7,1,0,0,1
"net.sourceforge.pmd.properties.PropertySource.getPropertyDescriptor(String name)",7,1,0,0,1
"net.sourceforge.pmd.properties.builders.PropertyDescriptorExternalBuilder.build(Map<PropertyDescriptorField,String> fields)",7,1,0,0,1
"net.sourceforge.pmd.AbstractConfiguration.getSourceEncoding()",7,1,0,0,0
"net.sourceforge.pmd.Rule.usesDFA()",7,1,0,0,0
"net.sourceforge.pmd.lang.Language.getDefaultVersion()",7,1,0,0,0
"net.sourceforge.pmd.lang.Language.getRuleChainVisitorClass()",7,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getDataFlowFacade()",7,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getMultifileFacade()",7,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getSymbolFacade()",7,1,0,0,0
"net.sourceforge.pmd.lang.XPathHandler.getNavigator()",7,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.getFacade()",7,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.isFindBoundary()",7,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptNode.getJsDoc()",7,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.TypeNode.getTypeDefinition()",7,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.getFacade()",7,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameDeclaration.getImage()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.getDirectiveName()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.BlockMacro.getScopeName()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Break.isScopeProvided()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getColumn()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getLine()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Include.isScopeProvided()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Literal.isScopeProvided()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Macro.isScopeProvided()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Parse.getScopeName()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Stop.isScopeProvided()",7,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.VelocimacroProxy.getNumArgs()",7,1,0,0,0
"net.sourceforge.pmd.properties.MultiValuePropertyDescriptor.multiValueDelimiter()",7,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.attributeValuesById()",7,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.dysfunctionReason()",7,1,0,0,0
"net.sourceforge.pmd.properties.RegexProperty.extractor()",7,1,0,0,0
"net.sourceforge.pmd.properties.constraints.PropertyConstraint.toCollectionConstraint()",7,1,0,0,0
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpectedMultiple()",7,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.start()",7,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Promotion.binaryStringPromotion()",7,1,0,0,0
"net.sourceforge.pmd.util.datasource.DataSource.getInputStream()",7,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testStatementExpressionParentChildLinks()",6,1,16,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testVariableDeclaratorParentChildLinks()",6,1,16,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.testLowerUpperLimit()",6,1,12,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testIgnoreUsingDirectives()",6,1,9,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testIfStmtHasCorrectTypes()",6,1,9,0,0
"net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinderTest.testWhileStmtHasCorrectTypes()",6,1,9,0,0
"net.sourceforge.pmd.lang.plsql.dfa.StatementAndBraceFinderTest.testLabelledStmtHasCorrectTypes()",6,1,9,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testBoundOrConstraint(BoundOrConstraint val, JavaTypeDefinition left, JavaTypeDefinition right, InferenceRuleType rule, Class<? extends BoundOrConstraint> type)",6,1,8,0,5
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testBoundOrConstraint(BoundOrConstraint val, JavaTypeDefinition left, Variable right, InferenceRuleType rule, Class<? extends BoundOrConstraint> type)",6,1,8,0,5
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testBoundOrConstraint(BoundOrConstraint val, Variable left, JavaTypeDefinition right, InferenceRuleType rule, Class<? extends BoundOrConstraint> type)",6,1,8,0,5
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testBoundOrConstraint(BoundOrConstraint val, Variable left, Variable right, InferenceRuleType rule, Class<? extends BoundOrConstraint> type)",6,1,8,0,5
"net.sourceforge.pmd.ConfigurationTest.testSourceEncoding()",6,1,8,0,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScopeTest.testClassDeclAppears()",6,1,8,0,0
"net.sourceforge.pmd.ConfigurationTest.testThreads()",6,1,7,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testIsArray()",6,1,7,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testWithAnnotation()",6,1,7,0,0
"net.sourceforge.pmd.lang.java.dfa.StructureTest.testAddResultsinDFANodeContainingAddedNode()",6,1,7,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.testSuper()",6,1,7,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonConditionTest.testOperator()",6,1,7,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTCompoundConditionTest.testParseType()",6,1,7,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.getPropertyDescriptorValues()",6,1,7,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.parse(String code)",6,1,6,0,1
"net.sourceforge.pmd.lang.vf.VfParserTest.parse(String code)",6,1,6,0,1
"net.sourceforge.pmd.lang.vm.VmParserTest.parse(final String code)",6,1,6,0,1
"net.sourceforge.pmd.ReportTest.testExclusionsInReportWithNOPMD()",6,1,6,0,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScopeTest.testMethodName()",6,1,6,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testPrimitiveTypeResolver()",6,1,6,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorAttributesTest.parseCursorWithAttribute()",6,1,6,0,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest.testMessage()",6,1,6,0,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest.testMessageArgs()",6,1,6,0,0
"net.sourceforge.pmd.properties.AbstractPackagedPropertyDescriptorTester.testMissingPackageNames()",6,1,6,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTTryStatementTest.getTryStmt(String js)",6,1,5,0,1
"net.sourceforge.pmd.AbstractRuleTest$MyOtherRule.MyOtherRule()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testBenchmark()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testDebug()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testInputPaths()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testMinimumPriority()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testReportFile()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testReportFormat()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testReportShortNames()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testRuleSets()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testShowSuppressedViolations()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testStressTest()",6,1,5,0,0
"net.sourceforge.pmd.ConfigurationTest.testSuppressMarker()",6,1,5,0,0
"net.sourceforge.pmd.RuleContextTest.testSourceCodeFile()",6,1,5,0,0
"net.sourceforge.pmd.RuleContextTest.testSourceCodeFilename()",6,1,5,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserTriggerTest.testTriggerName()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testAbstract()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testFinal()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testNative()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testPrivate()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testProtected()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testPublic()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testStatic()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testStrict()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testSynchronized()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testTransient()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testVolatile()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.testSetType()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.CycloTestRule.optionMappings()",6,1,5,0,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeCreationVisitorTest.testScopesAreCreated()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.CreateTableTest.parseCreateTable()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.ExecuteImmediateTest.parseExecuteImmediate1047a()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.ExecuteImmediateTest.parseExecuteImmediate1047b()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.FunctionsTest.parseTrimCall()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.OrderByExpressionsTest.parseOrderByExpression()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectExpressionsTest.parseSelectCount()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectExpressionsTest.parseSelectExpression()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectExpressionsTest.parseSelectSubqueryExpression()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectHierarchicalTest.parseSelectHierarchicalQueries()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectUnionTest.parseSelectUnion()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.TableCollectionExpressionTest.testExamples()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.TableCollectionExpressionTest.testIssue1526()",6,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.ViewTest.parseCreateViewIssue981()",6,1,5,0,0
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.testSubtypeReduceVariableVsAny()",6,1,5,0,0
"net.sourceforge.pmd.lang.rule.MockRule.MockRule(String name, String description, String message, String ruleSetName)",6,1,4,0,4
"net.sourceforge.pmd.docs.MockedFileWriter.write(Path path, List<String> lines)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTDoLoopStatement node, Object data)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTForLoopStatement node, Object data)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTIfBlockStatement node, Object data)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTTernaryExpression node, Object data)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTWhileLoopStatement node, Object data)",6,1,4,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserTestHelpers.dumpNode(Node node)",6,1,4,0,1
"net.sourceforge.pmd.lang.plsql.PLSQLXPathRuleTest.createRule(String version)",6,1,4,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals3()",6,1,4,0,0
"net.sourceforge.pmd.ant.PMDTaskTest.testEcmascript()",6,1,4,0,0
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.testSetStatusCodeOrExitSetStatus()",6,1,4,0,0
"net.sourceforge.pmd.cpd.CPDCommandLineInterfaceTest.testEmptyResultRendering()",6,1,4,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTFieldTest.testGetNoValue()",6,1,4,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTFieldTest.testGetValue()",6,1,4,0,0
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveParameterListRule.ExcessiveParameterListRule()",6,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInSingleLine()",6,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInSingleLineFormal()",6,1,4,0,0
"net.sourceforge.pmd.lang.java.ast.CommentTest.testMultiLinesInSingleLineSimple()",6,1,4,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.testMissingMaxThreshold()",6,1,4,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.AbstractLanguage(String name, String terseName, Tokenizer tokenizer, String... extensions)",6,1,3,0,4
"net.sourceforge.pmd.typeresolution.TypeInferenceTest.incorporationResult(Bound firstBound, Bound secondBound)",6,1,3,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTestBase.dump(EcmascriptNode<?> node)",6,1,3,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals6()",6,1,3,0,0
"net.sourceforge.pmd.AbstractRuleTest.testEquals7()",6,1,3,0,0
"net.sourceforge.pmd.AbstractRuleTest.testEquals9()",6,1,3,0,0
"net.sourceforge.pmd.RuleReferenceTest.testRuleSetReference()",6,1,3,0,0
"net.sourceforge.pmd.ant.CPDTaskTest.testBasic()",6,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.isUpperBound()",6,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testExplicitImportResolver()",6,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassExplicitImport()",6,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassImportOnDemand()",6,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassSamePackage()",6,1,3,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodMostSpecific.test()",6,1,3,0,0
"net.sourceforge.pmd.util.StringUtilTest.testUTF8Supported()",6,1,3,0,0
"net.sourceforge.pmd.cpd.CSVRendererTest.createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code)",6,1,2,0,5
"net.sourceforge.pmd.cpd.MatchTest.createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code)",6,1,2,0,5
"net.sourceforge.pmd.testframework.SimpleAggregatorTst.addRule(String ruleSet, String ruleName)",6,1,2,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTestBase.parse18(String code)",6,1,2,0,1
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.structurallyEquals(JavaQualifiedName qname)",6,1,2,0,1
"net.sourceforge.pmd.cpd.MatchTest.testCompareTo()",6,1,2,0,0
"net.sourceforge.pmd.lang.BaseLanguageModuleTest.testCompareTo()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMarkerAnnotation.getAnnotationName()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTNormalAnnotation.getAnnotationName()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.getAnnotationName()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.getName()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.getResolver()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testExplicitImportResolverWithNull()",6,1,2,0,0
"net.sourceforge.pmd.renderers.SummaryHTMLRendererTest.getRenderer()",6,1,2,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DaaRuleViolation.DaaRuleViolation(Rule rule, RuleContext ctx, Node node, String type, String msg, String var, int beginLine, int endLine)",6,1,1,0,8
"net.sourceforge.pmd.lang.plsql.rule.PLSQLRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",6,1,1,0,6
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest$TestRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",6,1,1,0,6
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehensionLoop.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAssignment.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAstRoot.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBlock.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBreakStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTComment.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTConditionalExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTContinueStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTDoLoop.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTEmptyExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTExpressionStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTInfixExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabel.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabeledStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectProperty.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTParenthesizedExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTPropertyGet.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTRegExpLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTReturnStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTScope.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTStringLiteral.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTThrowStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWhileLoop.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWithStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlDotQuery.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlExpression.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlMemberGet.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlString.jjtAccept(EcmascriptParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeMemberDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArgumentList.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBlock.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTCastExpression.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTContinueStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTDefaultValue.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumBody.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTExtendsList.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTFinallyStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTForInit.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTForUpdate.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTImplementsList.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInitializer.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberSelector.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTName.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNameList.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNullLiteral.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRSIGNEDSHIFT.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRUNSIGNEDSHIFT.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResultType.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTReturnStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpression.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatement.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer.jjtAccept(JavaParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTAttributeValue.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCData.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCommentTag.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCompilationUnit.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTContent.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDeclaration.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTElExpression.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspComment.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclaration.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclarations.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDocument.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpression.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpressionInAttribute.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspScriptlet.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTText.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTUnparsedText.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTValueBinding.jjtAccept(JspParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTCData.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTCompilationUnit.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDeclaration.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeDeclaration.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDotExpression.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTElExpression.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTElement.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTText.jjtAccept(VfParserVisitor visitor, Object data)",6,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.CommentTest.filter(String comment)",6,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.hasDescriptor(PropertyDescriptor<?> descriptor)",6,1,1,0,1
"net.sourceforge.pmd.util.viewer.gui.menu.XPathFragmentAddingItem.actionPerformed(ActionEvent e)",6,1,1,0,1
"Class1.duplicatedMethod()",6,1,1,0,0
"Class2.duplicatedMethod()",6,1,1,0,0
"LocalVariableSyntaxForLambdaParameters.createAnnotatedLambdaParameters()",6,1,1,0,0
"net.sourceforge.pmd.cpd.CPPLanguage.CPPLanguage()",6,1,1,0,0
"net.sourceforge.pmd.lang.cs.CsLanguageModule.CsLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.fortran.FortranLanguageModule.FortranLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.go.GoLanguageModule.GoLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.groovy.GroovyLanguageModule.GroovyLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.getFalseAlternative()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.getGuardExpressionNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.getTrueAlternative()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.getParameters()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTDoStatement.getBody()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTDoStatement.getGuardExpressionNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.getGuardExpressionNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.getThenBranch()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getBlock()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getThrows()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isSyntacticallyAbstract()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isSyntacticallyPublic()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.getMemberValue()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.getCatchStatements()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.hasFinally()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.isTryWithResources()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeArgument.getTypeNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeArguments.isDiamond()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeBound.getBoundTypeNodes()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.getTypeBoundNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.hasInitializer()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTWhileStatement.getBody()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTWhileStatement.getGuardExpressionNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.getTypeBoundNode()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.isLowerBound()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.NcssConstructorCountRule.NcssConstructorCountRule()",6,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.NcssMethodCountRule.NcssMethodCountRule()",6,1,1,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.isHasNamespacePrefix()",6,1,1,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.isHasNamespacePrefix()",6,1,1,0,0
"net.sourceforge.pmd.lang.php.PhpLanguageModule.PhpLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.NcssMethodCountRule.NcssMethodCountRule()",6,1,1,0,0
"net.sourceforge.pmd.lang.ruby.RubyLanguageModule.RubyLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.dysfunctionReason()",6,1,1,0,0
"net.sourceforge.pmd.lang.scala.ScalaLanguageModule.ScalaLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.swift.SwiftLanguageModule.SwiftLanguageModule()",6,1,1,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.isHasNamespacePrefix()",6,1,1,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.isHasNamespacePrefix()",6,1,1,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getScopeName()",6,1,1,0,0
"net.sourceforge.pmd.renderers.HTMLRendererTest.getExpected()",6,1,1,0,0
"net.sourceforge.pmd.benchmark.TimingReportRenderer.render(TimingReport report, Writer writer)",6,1,0,0,2
"net.sourceforge.pmd.document.Document.replace(RegionByLine regionByOffset, String textToReplace)",6,1,0,0,2
"net.sourceforge.pmd.lang.metrics.MetricMemoizer.memoize(ParameterizedMetricKey<N> key, double value)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTAddNode.ASTAddNode(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.ASTDirective(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTDivNode.ASTDivNode(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTEscape.ASTEscape(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTModNode.ASTModNode(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTMulNode.ASTMulNode(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTSubtractNode.ASTSubtractNode(final VmParser p, final int id)",6,1,0,0,2
"net.sourceforge.pmd.util.datasource.ReaderDataSource.ReaderDataSource(Reader reader, String dataSourceName)",6,1,0,0,2
"EncodingTestClass.main(String[] args)",6,1,0,0,1
"net.sourceforge.pmd.Rule.addExample(String example)",6,1,0,0,1
"net.sourceforge.pmd.Rule.addRuleChainVisit(Class<? extends Node> nodeClass)",6,1,0,0,1
"net.sourceforge.pmd.Rule.addRuleChainVisit(String astNodeName)",6,1,0,0,1
"net.sourceforge.pmd.Rule.end(RuleContext ctx)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setDeprecated(boolean deprecated)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setDescription(String description)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setExternalInfoUrl(String externalInfoUrl)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setLanguage(Language language)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setMessage(String message)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setPriority(RulePriority priority)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setRuleClass(String ruleClass)",6,1,0,0,1
"net.sourceforge.pmd.Rule.setSince(String since)",6,1,0,0,1
"net.sourceforge.pmd.Rule.start(RuleContext ctx)",6,1,0,0,1
"net.sourceforge.pmd.ThreadSafeReportListener.ruleViolationAdded(RuleViolation ruleViolation)",6,1,0,0,1
"net.sourceforge.pmd.benchmark.TimedOperation.close(int extraDataCounter)",6,1,0,0,1
"net.sourceforge.pmd.cpd.token.AntlrTokenFilter.AntlrTokenFilter(final AntlrTokenManager tokenManager)",6,1,0,0,1
"net.sourceforge.pmd.cpd.token.JavaCCTokenFilter.JavaCCTokenFilter(final TokenManager tokenManager)",6,1,0,0,1
"net.sourceforge.pmd.lang.VisitorStarter.start(Node rootNode)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDeclaration.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.setPublicId(String publicId)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.setUri(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.setEmpty(boolean empty)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.setValue(String value)",6,1,0,0,1
"net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery.setXPath(String xpath)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDeclaration.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeDeclaration.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.setPublicId(String publicId)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.setUri(String name)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTElement.setEmpty(boolean empty)",6,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTElement.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.BooleanMultiProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.BooleanProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.CharacterProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.DoubleProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.IntegerMultiProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.IntegerProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.properties.StringProperty.named(String name)",6,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.setDescription(String description)",6,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.setName(String name)",6,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.setShowSuppressedViolations(boolean showSuppressedViolations)",6,1,0,0,1
"net.sourceforge.pmd.renderers.Renderer.setWriter(Writer writer)",6,1,0,0,1
"net.sourceforge.pmd.util.datasource.ReaderDataSource.setDataSourceName(String dataSourceName)",6,1,0,0,1
"net.sourceforge.pmd.Rule.getMaximumLanguageVersion()",6,1,0,0,0
"net.sourceforge.pmd.Rule.getMinimumLanguageVersion()",6,1,0,0,0
"net.sourceforge.pmd.Rule.getName()",6,1,0,0,0
"net.sourceforge.pmd.Rule.getRuleChainVisits()",6,1,0,0,0
"net.sourceforge.pmd.Rule.getRuleSetName()",6,1,0,0,0
"net.sourceforge.pmd.Rule.getSince()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getBeginColumn()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getBeginLine()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getClassName()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getEndColumn()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getEndLine()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getMethodName()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getPackageName()",6,1,0,0,0
"net.sourceforge.pmd.RuleViolation.isSuppressed()",6,1,0,0,0
"net.sourceforge.pmd.cpd.MatlabLanguage.MatlabLanguage()",6,1,0,0,0
"net.sourceforge.pmd.cpd.ObjectiveCLanguage.ObjectiveCLanguage()",6,1,0,0,0
"net.sourceforge.pmd.cpd.PythonLanguage.PythonLanguage()",6,1,0,0,0
"net.sourceforge.pmd.lang.Language.getName()",6,1,0,0,0
"net.sourceforge.pmd.lang.Language.getShortName()",6,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getDataFlowHandler()",6,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getAsDocument()",6,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getUserData()",6,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getXPathAttributesIterator()",6,1,0,0,0
"net.sourceforge.pmd.lang.ast.QualifiedName.getClassName()",6,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.setTernary()",6,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.JavaQualifiableNode.getQualifiedName()",6,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getXPathHandler()",6,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ExecutableCode.getMethodName()",6,1,0,0,0
"net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery.getRuleChainVisits()",6,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Block.getType()",6,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Define.getName()",6,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getTemplateName()",6,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.isScopeProvided()",6,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.InputBase.getName()",6,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.getName()",6,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.getOverriddenPropertyDescriptors()",6,1,0,0,0
"net.sourceforge.pmd.properties.PropertySource.getPropertyDescriptors()",6,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractAccumulatingRenderer.end()",6,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.end()",6,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.getName()",6,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.isShowSuppressedViolations()",6,1,0,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.getHeader()",6,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericParameter.FieldAccessGenericParameter()",6,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testRenderer()",5,1,7,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testRendererMultiple()",5,1,7,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.testIsExceptionBlockParameter()",5,1,6,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testRendererEmpty()",5,1,6,0,0
"net.sourceforge.pmd.lang.java.rule.design.NcssConstructorCountRule.getViolationParameters(DataPoint point)",5,1,5,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserClassTest.testClassName()",5,1,5,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserInterfaceTest.testInterfaceName()",5,1,5,0,0
"net.sourceforge.pmd.lang.apex.rule.ApexXPathRule.ApexXPathRule()",5,1,5,0,0
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptXPathRule.EcmascriptXPathRule()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteralTest.testFalse()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteralTest.testTrue()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testMultiDimensionalArray()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFieldDeclarationTest.testWithEnum()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclarationTest.testStaticImport()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclarationTest.testMultDimArray()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclarationTest.testMultDimArraySplitBraces()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclarationTest.testSingleDimArray()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.EncodingTest.testDecodingOfUTF8()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.dfa.DAAPathFinderTest.testTwoUpdateDefs()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScopeTest.testPackageIsEmptyString()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.symboltable.SourceFileScopeTest.testPackageNameFound()",5,1,5,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testImportOnDemandResolverPass()",5,1,5,0,0
"net.sourceforge.pmd.lang.plsql.ast.XMLTableTest.testParseXMLTable()",5,1,5,0,0
"net.sourceforge.pmd.typeresolution.typedefinition.JavaTypeDefinitionSimpleTest.primitive()",5,1,5,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesCommaSeparatedDirs()",5,1,5,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesCommaSeparatedFiles()",5,1,5,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesCommaSeparatedMixed()",5,1,5,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testInternalJspFile(File jspFile)",5,1,4,0,1
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindFullyQualified()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testFullOuterJoin()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.JoinClauseTest.testInnerJoinSubquery()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingComplex()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingExample1()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingExample2()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingExample3()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingExample4()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingExample5()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingIntoRecordField()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.SelectIntoStatementTest.testParsingWithFunctionCall()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testBetweenCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testConcatenationOperator()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testExistsCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testInCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testIsOfTypeCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testLikeCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testMultisetCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testNullCondition()",5,1,4,0,0
"net.sourceforge.pmd.lang.plsql.ast.WhereClauseTest.testSubqueries()",5,1,4,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.testMissingMinThreshold()",5,1,4,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.reportTwoViolations()",5,1,4,0,0
"net.sourceforge.pmd.testframework.AbstractTokenizerTest.tokenizeTest()",5,1,4,0,0
"net.sourceforge.pmd.typeresolution.testdata.VarargsAsFixedArity.tester()",5,1,4,0,0
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.typeof(final XPathContext context, final String nodeTypeName, final String fullTypeName, final String shortTypeName)",5,1,3,0,4
"net.sourceforge.pmd.lang.java.rule.design.ModifiedCyclomaticComplexityRule.visit(ASTSwitchStatement node, Object data)",5,1,3,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexRootNode.calculateLineNumbers(SourceCodePositioner positioner)",5,1,3,0,1
"net.sourceforge.pmd.renderers.AbstractRendererTst.newRuleViolation(int endColumn)",5,1,3,0,1
"net.sourceforge.pmd.typeresolution.testdata.GenericsArrays.test(String[] params)",5,1,3,0,1
"net.sourceforge.pmd.ReportTest.testBasic()",5,1,3,0,0
"net.sourceforge.pmd.cli.CLITest.exitStatusWithViolations()",5,1,3,0,0
"net.sourceforge.pmd.cli.CLITest.exitStatusWithViolationsAndWithoutFailOnViolations()",5,1,3,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest.testMatch()",5,1,3,0,0
"net.sourceforge.pmd.lang.apex.metrics.signature.ApexOperationSigMask.coverAllVisibilities()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatementTest.testIsAllocation()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatementTest.testIsAllocation2()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NcssTestRule.optionMappings()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.coverAllRoles()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSigMask.coverAllVisibilities()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsTest.testStringParserEmptyString()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testASTCompilationUnitPackage()",5,1,3,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testAddImport()",5,1,3,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorForLoopTest.parseCursorForLoop1047a()",5,1,3,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorForLoopTest.parseCursorForLoop1047b()",5,1,3,0,0
"net.sourceforge.pmd.lang.plsql.ast.CursorForLoopTest.parseCursorForLoop681()",5,1,3,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.testXMLEscapingWithUTF8()",5,1,3,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.testXMLEscapingWithoutUTF8()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetAverage()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetCount()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetHighValue()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetLowValue()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetStandardDeviation()",5,1,3,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetTotal()",5,1,3,0,0
"net.sourceforge.pmd.lang.AbstractParser.getTokenManager(String fileName, Reader source)",5,1,2,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTCatchBlockStatement node, Object data)",5,1,2,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTForEachStatement node, Object data)",5,1,2,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTThrowStatement node, Object data)",5,1,2,0,2
"net.sourceforge.pmd.lang.java.dfa.DataFlowFacade.visit(ASTConstructorDeclaration node, Object data)",5,1,2,0,2
"net.sourceforge.pmd.lang.java.dfa.DataFlowFacade.visit(ASTMethodDeclaration node, Object data)",5,1,2,0,2
"net.sourceforge.pmd.lang.java.symboltable.SymbolFacade.initializeWith(ClassLoader classLoader, ASTCompilationUnit node)",5,1,2,0,2
"net.sourceforge.pmd.lang.java.JavaLanguageParser.createJavaParser(Reader source)",5,1,2,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.SymbolFacade.initializeWith(ASTInput node)",5,1,2,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals5()",5,1,2,0,0
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.testSetStatusCodeOrExitDoExit()",5,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ApexCompilerSoqlTest.testSoqlCompilation()",5,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getMethodName()",5,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.isVoid()",5,1,2,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.testRemovePathWithNonChild()",5,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassImplicitImport()",5,1,2,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseELAttribute()",5,1,2,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseELAttributeValue()",5,1,2,0,0
"net.sourceforge.pmd.lang.plsql.ast.IfStatementTest.parseIfWithElseIf()",5,1,2,0,0
"net.sourceforge.pmd.properties.AbstractPackagedPropertyDescriptorTester.getPropertyDescriptorValues()",5,1,2,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.setup()",5,1,2,0,0
"net.sourceforge.pmd.properties.MethodProperty.MethodProperty(String theName, String theDescription, Method theDefault, String[] legalPackageNames, float theUIOrder, boolean isDefinedExternally)",5,1,1,0,6
"net.sourceforge.pmd.properties.TypeProperty.TypeProperty(String theName, String theDescription, Class<?> theDefault, String[] legalPackageNames, float theUIOrder, boolean isDefinedExternally)",5,1,1,0,6
"net.sourceforge.pmd.lang.vf.ast.ASTArguments.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTAttributeValue.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTContent.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTExpression.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTIdentifier.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTLiteral.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTNegationExpression.jjtAccept(VfParserVisitor visitor, Object data)",5,1,1,0,2
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpectedError(ProcessingError error)",5,1,1,0,1
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpectedErrorWithoutMessage(ProcessingError error)",5,1,1,0,1
"LocalVariableSyntaxForLambdaParameters.createLambdas()",5,1,1,0,0
"MethodReferenceConfused.wrongVariableAccessor()",5,1,1,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.init()",5,1,1,0,0
"net.sourceforge.pmd.cpd.DartTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.FortranTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.GoCPDTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.GoTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.GroovyTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.KotlinTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.ObjectiveCTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.PLSQLTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.PythonTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.SwiftTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.UTF8EscapesInStringLiteralObjCTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.cpd.UnicodeObjectiveCTokenizerTest.buildTokenizer()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAdditiveExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.getGuardExpressionNode()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTInstanceOfExpression.getTypeNode()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.getMemberName()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.getMemberValue()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getMethodDeclarator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getResultType()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMultiplicativeExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPostfixExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTShiftExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeArgument.isWildcard()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.getParameterName()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpressionNotPlusMinus.getOperator()",5,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.getVariableId()",5,1,1,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testBug1531()",5,1,1,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testExceptions()",5,1,1,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.getExpectedMultiple()",5,1,1,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpected()",5,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodGenericParam.foo()",5,1,1,0,0
"net.sourceforge.pmd.properties.IntegerMultiProperty.IntegerMultiProperty(String theName, String theDescription, Integer min, Integer max, List<Integer> defaultValues, float theUIOrder, boolean isDefinedExternally)",5,1,0,0,7
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",5,1,0,0,6
"net.sourceforge.pmd.properties.MethodMultiProperty.MethodMultiProperty(String theName, String theDescription, List<Method> theDefaults, String[] legalPackageNames, float theUIOrder, boolean isDefinedExternally)",5,1,0,0,6
"net.sourceforge.pmd.properties.TypeMultiProperty.TypeMultiProperty(String theName, String theDescription, List<Class> theTypeDefaults, String[] legalPackageNames, float theUIOrder, boolean isDefinedExternally)",5,1,0,0,6
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.SignatureCountTestData(int x, int y, int z, int t)",5,1,0,0,4
"net.sourceforge.pmd.renderers.CodeClimateIssue$Location.Location(String path, int beginLine, int endLine)",5,1,0,0,3
"net.sourceforge.pmd.benchmark.BenchmarkReport.generate(Map<String,BenchmarkResult> benchmarksByName, PrintStream stream)",5,1,0,0,2
"net.sourceforge.pmd.benchmark.BenchmarkReport.generate(Set<RuleDuration> stressResults, PrintStream stream)",5,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ApexNode<?> node, Object data)",5,1,0,0,2
"net.sourceforge.pmd.Rule.setDfa(boolean isDfa)",5,1,0,0,1
"net.sourceforge.pmd.Rule.setMultifile(boolean multifile)",5,1,0,0,1
"net.sourceforge.pmd.Rule.setTypeResolution(boolean usingTypeResolution)",5,1,0,0,1
"net.sourceforge.pmd.cache.AnalysisCache.getCachedViolations(File sourceFile)",5,1,0,0,1
"net.sourceforge.pmd.document.Document.delete(RegionByLine regionByOffset)",5,1,0,0,1
"net.sourceforge.pmd.lang.LanguageVersionHandler.getParser(ParserOptions parserOptions)",5,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.hasImageEqualTo(String image)",5,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.jjtSetParent(Node parent)",5,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.TypeNode.setType(Class<?> type)",5,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.TypeNode.setTypeDefinition(JavaTypeDefinition type)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTAddNode.ASTAddNode(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.ASTDirective(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTDivNode.ASTDivNode(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTEscape.ASTEscape(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTModNode.ASTModNode(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTMulNode.ASTMulNode(final int id)",5,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTSubtractNode.ASTSubtractNode(final int id)",5,1,0,0,1
"net.sourceforge.pmd.properties.PropertyDescriptor.compareTo(PropertyDescriptor<?> o)",5,1,0,0,1
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpectedError(ConfigurationError error)",5,1,0,0,1
"net.sourceforge.pmd.util.SearchFunction.applyTo(E o)",5,1,0,0,1
"net.sourceforge.pmd.AbstractConfiguration.AbstractConfiguration()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getDescription()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getExamples()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getExternalInfoUrl()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getLanguage()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getMessage()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getPriority()",5,1,0,0,0
"net.sourceforge.pmd.Rule.getRuleClass()",5,1,0,0,0
"net.sourceforge.pmd.Rule.isRuleChain()",5,1,0,0,0
"net.sourceforge.pmd.Rule.setUsesDFA()",5,1,0,0,0
"net.sourceforge.pmd.Rule.setUsesMultifile()",5,1,0,0,0
"net.sourceforge.pmd.Rule.setUsesTypeResolution()",5,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getDescription()",5,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getFilename()",5,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getRule()",5,1,0,0,0
"net.sourceforge.pmd.RuleViolation.getVariableName()",5,1,0,0,0
"net.sourceforge.pmd.cache.ChecksumAware.getChecksum()",5,1,0,0,0
"net.sourceforge.pmd.cpd.DartLanguage.DartLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.FortranLanguage.FortranLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.GoLanguage.GoLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.GroovyLanguage.GroovyLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.KotlinLanguage.KotlinLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.PHPLanguage.PHPLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.RubyLanguage.RubyLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.ScalaLanguage.ScalaLanguage()",5,1,0,0,0
"net.sourceforge.pmd.cpd.SwiftLanguage.SwiftLanguage()",5,1,0,0,0
"net.sourceforge.pmd.lang.Language.getExtensions()",5,1,0,0,0
"net.sourceforge.pmd.lang.Language.getTerseName()",5,1,0,0,0
"net.sourceforge.pmd.lang.Language.getVersions()",5,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getDFAGraphRule()",5,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getDefaultParserOptions()",5,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserClassOrInterface.getTypeKind()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getPreviousComment()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getImage()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getXPathNodeName()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtGetChildIndex()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtGetParent()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.QualifiableNode.getQualifiedName()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.QualifiedName.isClass()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.QualifiedName.isOperation()",5,1,0,0,0
"net.sourceforge.pmd.lang.ast.SignedNode.getSignature()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeBodyDeclaration.getKind()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.getDeclarations()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.getTypeKind()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.hasElse()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.Annotatable.getDeclaredAnnotations()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.TypeNode.getType()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.isLambda()",5,1,0,0,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.TypeDefinition.getType()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTDeclaration.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.getUri()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.isEmpty()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.getValue()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.getEndColumn()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.getEndLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.getMessage()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.getStartColumn()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.StartAndEndTagMismatchException.getStartLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.SyntaxErrorException.getLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.SyntaxErrorException.getRuleName()",5,1,0,0,0
"net.sourceforge.pmd.lang.metrics.MetricKey.getCalculator()",5,1,0,0,0
"net.sourceforge.pmd.lang.metrics.MetricKey.name()",5,1,0,0,0
"net.sourceforge.pmd.lang.metrics.MetricOption.name()",5,1,0,0,0
"net.sourceforge.pmd.lang.metrics.MetricOption.valueName()",5,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.OracleObject.getObjectName()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameDeclaration.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameDeclaration.getNode()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameDeclaration.getScope()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameOccurrence.getImage()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.NameOccurrence.getLocation()",5,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.Scope.getDeclarations()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTDeclaration.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeDeclaration.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.getUri()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.isEmpty()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.getEndColumn()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.getEndLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.getMessage()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.getStartColumn()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.StartAndEndTagMismatchException.getStartLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.SyntaxErrorException.getLine()",5,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.SyntaxErrorException.getRuleName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getName()",5,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.Directive.getType()",5,1,0,0,0
"net.sourceforge.pmd.lang.xml.ast.XmlNode.getNode()",5,1,0,0,0
"net.sourceforge.pmd.properties.EnumeratedPropertyDescriptor.mappings()",5,1,0,0,0
"net.sourceforge.pmd.properties.NumericPropertyDescriptor.lowerLimit()",5,1,0,0,0
"net.sourceforge.pmd.properties.NumericPropertyDescriptor.upperLimit()",5,1,0,0,0
"net.sourceforge.pmd.properties.PackagedPropertyDescriptor.legalPackageNames()",5,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.defaultValue()",5,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.description()",5,1,0,0,0
"net.sourceforge.pmd.properties.PropertyDescriptor.name()",5,1,0,0,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorExternalBuilder.isMultiValue()",5,1,0,0,0
"net.sourceforge.pmd.properties.builders.PropertyDescriptorExternalBuilder.valueType()",5,1,0,0,0
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpected()",5,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.defaultFileExtension()",5,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.getDescription()",5,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.getWriter()",5,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.ArrayTypes.test()",5,1,0,0,0
"net.sourceforge.pmd.util.datasource.ReaderDataSource.getDataSourceName()",5,1,0,0,0
"net.sourceforge.pmd.lang.rule.MockRule.MockRule()",4,1,9,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.multiBuilder()",4,1,7,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.multiBuilder()",4,1,7,0,0
"net.sourceforge.pmd.lang.java.multifile.MultifileVisitor.visit(ASTMethodOrConstructorDeclaration node, Object data)",4,1,6,0,2
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseJsp()",4,1,6,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.singleBuilder()",4,1,6,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.singleBuilder()",4,1,6,0,0
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitor.visit(ASTMethod node, Object data)",4,1,5,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperatorTest.testCompoundAssignmentMultRecognized()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperatorTest.testCompoundAssignmentPlusRecognized()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperatorTest.testSimpleAssignmentRecognized()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclarationTest.testGetImportedNameNode()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclarationTest.testImportOnDemand()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsCharLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsFloatDoubleLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsFloatFloatLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsIntIntLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsIntLongLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsNotStringLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLiteralTest.testIsStringLiteral()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffixTest.testArguments()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffixTest.testArrayDereference()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabelTest.testDefaultOff()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabelTest.testDefaultSet()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatementTest.testGetFirstASTNameImageNew()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatementTest.testGetFirstASTNameImageNull()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest.testModifiersOnClassDecl()",4,1,5,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.testMultiBadDefaultValue()",4,1,5,0,0
"net.sourceforge.pmd.lang.java.multifile.MultifileVisitor.visit(ASTFieldDeclaration node, Object data)",4,1,4,0,2
"net.sourceforge.pmd.document.InsertDocumentOperation.apply(final Document document)",4,1,4,0,1
"net.sourceforge.pmd.lang.java.rule.design.NcssMethodCountRule.getViolationParameters(DataPoint point)",4,1,4,0,1
"net.sourceforge.pmd.lang.plsql.rule.design.NcssMethodCountRule.getViolationParameters(DataPoint point)",4,1,4,0,1
"net.sourceforge.pmd.cpd.CsTokenizerTest.testCommentsIgnored1()",4,1,4,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testCommentsIgnored2()",4,1,4,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testCommentsIgnored3()",4,1,4,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testOpenString()",4,1,4,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testSimpleClass()",4,1,4,0,0
"net.sourceforge.pmd.cpd.CsTokenizerTest.testStrings()",4,1,4,0,0
"net.sourceforge.pmd.cpd.LanguageFactoryTest.testSimple()",4,1,4,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserEnum.getImage()",4,1,4,0,0
"net.sourceforge.pmd.docs.DefaultFileWriter.write(Path path, List<String> lines)",4,1,3,0,2
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.addChild(final Node parent, final Node child)",4,1,3,0,2
"net.sourceforge.pmd.cpd.CPPLanguage.setProperties(Properties properties)",4,1,3,0,1
"net.sourceforge.pmd.cpd.MatlabTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,3,0,1
"net.sourceforge.pmd.cpd.ObjectiveCTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,3,0,1
"net.sourceforge.pmd.cpd.PythonTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,3,0,1
"net.sourceforge.pmd.lang.apex.LanguageVersionTest.data()",4,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTImportDeclarationTest.testStaticImportFailsWithJDK14()",4,1,3,0,0
"net.sourceforge.pmd.lang.plsql.ast.UpdateStatementTest.parseUpdateStatementExample2()",4,1,3,0,0
"net.sourceforge.pmd.lang.plsql.ast.UpdateStatementTest.parseUpdateStatementRef()",4,1,3,0,0
"net.sourceforge.pmd.typeresolution.testdata.AbstractReturnTypeUseCase.foo()",4,1,3,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesCommaSeparatedDirs()",4,1,3,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesCommaSeparatedFiles()",4,1,3,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesCommaSeparatedMixed()",4,1,3,0,0
"net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu.init()",4,1,3,0,0
"net.sourceforge.pmd.lang.apex.rule.AbstractStatisticalApexRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAdditiveExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAllocationExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAndExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAnnotation node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAnnotationMethodDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAnnotationTypeBody node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAnnotationTypeDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAnnotationTypeMemberDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTArgumentList node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTArguments node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTArrayDimsAndInits node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTArrayInitializer node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAssertStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTAssignmentOperator node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTBlock node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTBlockStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTBooleanLiteral node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTBreakStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTCastExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTCatchStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTClassOrInterfaceBody node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTClassOrInterfaceBodyDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTClassOrInterfaceDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTClassOrInterfaceType node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTCompilationUnit node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTConditionalAndExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTConditionalExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTConditionalOrExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTConstructorDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTContinueStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTDefaultValue node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTDoStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTEmptyStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTEnumBody node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTEnumConstant node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTEnumDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTEqualityExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTExclusiveOrExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTExplicitConstructorInvocation node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTExtendsList node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTFieldDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTFinallyStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTForInit node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTForStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTForUpdate node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTFormalParameter node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTFormalParameters node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTIfStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTImplementsList node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTImportDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTInclusiveOrExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTInitializer node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTInstanceOfExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTLabeledStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTLambdaExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTLiteral node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTLocalVariableDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMarkerAnnotation node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMemberSelector node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMemberValue node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMemberValueArrayInitializer node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMemberValuePair node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMemberValuePairs node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMethodDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMethodDeclarator node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMethodReference node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTModuleDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTModuleDirective node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTModuleName node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTMultiplicativeExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTName node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTNameList node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTNormalAnnotation node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTNullLiteral node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPackageDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPostfixExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPreDecrementExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPreIncrementExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPrimaryExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPrimaryPrefix node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPrimarySuffix node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTPrimitiveType node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTReferenceType node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTRelationalExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTResource node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTResourceSpecification node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTResources node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTResultType node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTReturnStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTShiftExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSingleMemberAnnotation node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTStatementExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTStatementExpressionList node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchLabel node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchLabeledBlock node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchLabeledExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchLabeledThrowStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSwitchStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTSynchronizedStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTThrowStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTryStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTType node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeArgument node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeArguments node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeBound node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeParameter node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTTypeParameters node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTUnaryExpression node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTVariableDeclarator node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTVariableDeclaratorId node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTVariableInitializer node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTWhileStatement node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(ASTWildcardBounds node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.dfa.JavaDFAGraphRule.visit(ASTMethodDeclaration node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.NcssClassMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.NcssOperationMetric.computeFor(MethodLikeNode node, MetricOptions options)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractStatisticalJavaRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.java.typeresolution.TypeResolutionFacade.initializeWith(ClassLoader classLoader, ASTCompilationUnit node)",4,1,2,0,2
"net.sourceforge.pmd.lang.jsp.JspParser.parse(String fileName, Reader source)",4,1,2,0,2
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.visit(ASTProgramUnit node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.visit(ASTTriggerTimingPointSection node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.visit(ASTTriggerUnit node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.visit(ASTTypeMethod node, Object data)",4,1,2,0,2
"net.sourceforge.pmd.lang.plsql.rule.AbstractStatisticalPLSQLRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.vf.VfParser.parse(String fileName, Reader source)",4,1,2,0,2
"net.sourceforge.pmd.lang.vm.VmParser.parse(final String fileName, final Reader source)",4,1,2,0,2
"net.sourceforge.pmd.lang.vm.rule.AbstractStatisticalVmRule.apply(final List<? extends Node> nodes, final RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.wsdl.rule.AbstractWsdlRuleTest$MyRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.wsdl.rule.AbstractWsdlRuleTest$MyRule.visit(XmlNode node, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRuleTest$MyRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRuleTest$MyRule.visit(XmlNode node, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.stat.MockStatisticalRule.apply(List<? extends Node> nodes, RuleContext ctx)",4,1,2,0,2
"net.sourceforge.pmd.cpd.ApexLanguage.setProperties(Properties properties)",4,1,2,0,1
"net.sourceforge.pmd.cpd.CsLanguage.setProperties(Properties properties)",4,1,2,0,1
"net.sourceforge.pmd.cpd.GoTokenizer.getLexerForSource(SourceCode sourceCode)",4,1,2,0,1
"net.sourceforge.pmd.cpd.JavaLanguage.setProperties(Properties properties)",4,1,2,0,1
"net.sourceforge.pmd.cpd.SwiftTokenizer.getLexerForSource(final SourceCode sourceCode)",4,1,2,0,1
"net.sourceforge.pmd.lang.apex.rule.design.CyclomaticComplexityTest.reinitializeRule(Rule rule)",4,1,2,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.covers(JavaOperationSignature sig)",4,1,2,0,1
"net.sourceforge.pmd.properties.AbstractPackagedProperty.addAttributesTo(Map<PropertyDescriptorField,String> attributes)",4,1,2,0,1
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpectedError(ProcessingError error)",4,1,2,0,1
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpectedErrorWithoutMessage(ProcessingError error)",4,1,2,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals1()",4,1,2,0,0
"net.sourceforge.pmd.AbstractRuleTest.testEquals4()",4,1,2,0,0
"net.sourceforge.pmd.ExcludeLinesTest.testAcceptance()",4,1,2,0,0
"net.sourceforge.pmd.ant.PMDTaskTest.testXML()",4,1,2,0,0
"net.sourceforge.pmd.cli.PMDCommandLineInterfaceTest.clearSystemProperties()",4,1,2,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.AllMetricsTest.setUp()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration.getDeclarations()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration.getDeclarations()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.importOnDemandResolverFail1()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.importOnDemandResolverFail2()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testCurrentPackageResolverPass()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassPrimitive()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFindClassVoid()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testImplicitImportResolverPass()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testImportOnDemandResolverWithNull()",4,1,2,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testVoidTypeResolver()",4,1,2,0,0
"net.sourceforge.pmd.lang.plsql.rule.errorprone.ToDateToCharTest.getRules()",4,1,2,0,0
"net.sourceforge.pmd.lang.plsql.rule.errorprone.ToDateWithoutDateFormatTest.getRules()",4,1,2,0,0
"net.sourceforge.pmd.lang.plsql.rule.errorprone.ToTimestampWithoutDateFormatTest.getRules()",4,1,2,0,0
"net.sourceforge.pmd.lang.vf.VfParserTest.testSingleDoubleQuote()",4,1,2,0,0
"net.sourceforge.pmd.lang.vf.VfParserTest.testSingleDoubleQuoteAndEL()",4,1,2,0,0
"net.sourceforge.pmd.lang.vf.VfParserTest.testSingleDoubleQuoteAndELFunction()",4,1,2,0,0
"net.sourceforge.pmd.lang.vm.VmParserTest.testParser()",4,1,2,0,0
"net.sourceforge.pmd.lang.vm.VmParserTest.testParser2()",4,1,2,0,0
"net.sourceforge.pmd.lang.vm.VmParserTest.testParser3()",4,1,2,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.reportOneViolation()",4,1,2,0,0
"net.sourceforge.pmd.stat.MetricTest.testGetMetricName()",4,1,2,0,0
"net.sourceforge.pmd.typeresolution.testdata.VarArgsMethodUseCase.foo()",4,1,2,0,0
"net.sourceforge.pmd.util.CompoundListTest.testEmpty()",4,1,2,0,0
"net.sourceforge.pmd.util.StringUtilTest.testReplaceStringWithString2()",4,1,2,0,0
"net.sourceforge.pmd.RuleSetReference.RuleSetReference(final String theFilename, final boolean allRules, final Set<String> excludes)",4,1,1,0,3
"net.sourceforge.pmd.lang.apex.ApexHandler.getDumpFacade(Writer writer, String prefix, boolean recurse)",4,1,1,0,3
"net.sourceforge.pmd.RuleSetReference.RuleSetReference(final String theFilename, final boolean allRules)",4,1,1,0,2
"net.sourceforge.pmd.lang.cpp.CppParser.parse(String fileName, Reader source)",4,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(EcmascriptNode<?> node, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationMethodDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodReference.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleName.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResource.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResourceSpecification.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResources.jjtAccept(JavaParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.dfa.DataFlowFacade.initializeWith(DataFlowHandler dataFlowHandler, ASTCompilationUnit node)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.dfa.JavaDFAGraphRule.visit(ASTCompilationUnit acu, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.AtfdMetric$AtfdClassMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.visitors.CycloAssertAwareDecorator.visit(ASTAssertStatement node, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclarationTest.withNext(SimpleTypedNameDeclaration next, String n)",4,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTHtmlScript.jjtAccept(JspParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(JspNode node, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.matlab.MatlabParser.parse(String fileName, Reader source)",4,1,1,0,2
"net.sourceforge.pmd.lang.objectivec.ObjectiveCParser.parse(String fileName, Reader source)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTDatatype.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTIfStatement.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTInput.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclarator.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTName.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageBody.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageSpecification.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimaryPrefix.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTQueryBlock.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectStatement.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerTimingPointSection.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeSpecification.jjtAccept(PLSQLParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTOutOfLineConstraint node, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.visit(ASTInput acu, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.python.PythonParser.parse(String fileName, Reader source)",4,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTHtmlScript.jjtAccept(VfParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(VfNode node, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTAddNode.jjtAccept(VmParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTDivNode.jjtAccept(VmParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTModNode.jjtAccept(VmParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTMulNode.jjtAccept(VmParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTSubtractNode.jjtAccept(VmParserVisitor visitor, Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTAddNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTAndNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTAssignment node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTBlock node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTDirective node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTDivNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTEQNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTElseIfStatement node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTElseStatement node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTExpression node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTFalse node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTForeachStatement node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTGENode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTGTNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTIdentifier node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTIfStatement node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTIndex node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTIntegerRange node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTLENode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTLTNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTMap node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTMethod node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTModNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTMulNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTNENode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTNotNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTObjectArray node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTOrNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTReference node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTSetDirective node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTSubtractNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTText node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTTrue node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTWord node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final VmNode node, final Object data)",4,1,1,0,2
"net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu.ASTNodePopupMenu(ViewerModel model, Node node)",4,1,1,0,2
"LocalVariableTypeInference_varAsAnnotationName.main(String... args)",4,1,1,0,1
"LocalVariableTypeInference_varAsEnumName.main(String... args)",4,1,1,0,1
"LocalVariableTypeInference_varAsIdentifier.main(String... args)",4,1,1,0,1
"LocalVariableTypeInference_varAsTypeIdentifier.main(String... args)",4,1,1,0,1
"net.sourceforge.pmd.lang.apex.ast.ApexParserTestHelpers.parse(String code)",4,1,1,0,1
"net.sourceforge.pmd.lang.apex.metrics.impl.AllMetricsTest.reinitializeRule(Rule rule)",4,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserTestBase.parse(String code)",4,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.AllMetricsTest.reinitializeRule(Rule rule)",4,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.MultifileVisitorFacade.initializeWith(ASTCompilationUnit rootNode)",4,1,1,0,1
"net.sourceforge.pmd.lang.java.rule.design.CyclomaticComplexityTest.reinitializeRule(Rule rule)",4,1,1,0,1
"net.sourceforge.pmd.lang.java.rule.design.NPathComplexityTest.reinitializeRule(Rule rule)",4,1,1,0,1
"net.sourceforge.pmd.lang.java.rule.design.NcssCountTest.reinitializeRule(Rule rule)",4,1,1,0,1
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.element(String name)",4,1,1,0,1
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.element(String name)",4,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.compareDocumentPosition(org.w3c.dom.Node other)",4,1,1,0,1
"net.sourceforge.pmd.renderers.XMLRendererTest.filter(String expected)",4,1,1,0,1
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpectedError(ConfigurationError error)",4,1,1,0,1
"net.sourceforge.pmd.AbstractRuleTest.testEquals2()",4,1,1,0,0
"net.sourceforge.pmd.ReadableDurationTest.data()",4,1,1,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getRule()",4,1,1,0,0
"net.sourceforge.pmd.cli.CLITest.exitStatusNoViolations()",4,1,1,0,0
"net.sourceforge.pmd.cli.CLITest.minimalArgs()",4,1,1,0,0
"net.sourceforge.pmd.cli.CLITest.minimumPriority()",4,1,1,0,0
"net.sourceforge.pmd.cli.CLITest.usingDebug()",4,1,1,0,0
"net.sourceforge.pmd.cpd.DartTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.FortranTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.GoCPDTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.GoTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.GroovyTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.KotlinTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.ObjectiveCTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.PLSQLTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.PythonTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.ScalaTokenizerTest.cleanUp()",4,1,1,0,0
"net.sourceforge.pmd.cpd.ScalaTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.SwiftTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.UTF8EscapesInStringLiteralObjCTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.cpd.UnicodeObjectiveCTokenizerTest.tokenizeTest()",4,1,1,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler$ApexMetricsProvider.ApexMetricsProvider()",4,1,1,0,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.setUpSampleNodeTree()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.multifile.PackageStatsTest.setUp()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactoryTest.messageWithSingleBrace()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testCurrentPackageResolverWithNull()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testExplicitImportResolverWithNullAndEmptyImports()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testFullyQualifiedNameResolverWithNull()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testImplicitImportResolverPassFail()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testImplicitImportResolverWithNull()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testPrimitiveTypeResolverWithNull()",4,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypeSetTest.testVoidTypeResolverWithNull()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setUsesDFA()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setUsesMultifile()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setUsesTypeResolution()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.usesDFA()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.usesMultifile()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.usesRuleChain()",4,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.usesTypeResolution()",4,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getNodeType()",4,1,1,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createBadMultiProperty()",4,1,1,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createBadProperty()",4,1,1,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createProperty()",4,1,1,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.getExpected()",4,1,1,0,0
"net.sourceforge.pmd.renderers.EmptyRendererTest.testNullPassedIn()",4,1,1,0,0
"net.sourceforge.pmd.renderers.HTMLRendererTest.getExpectedEmpty()",4,1,1,0,0
"net.sourceforge.pmd.util.CompoundListTest.testEmptyBadNext()",4,1,1,0,0
"net.sourceforge.pmd.util.CompoundListTest.testEmptyBadRemove()",4,1,1,0,0
"net.sourceforge.pmd.properties.DoubleMultiProperty.DoubleMultiProperty(String theName, String theDescription, Double min, Double max, List<Double> defaultValues, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.DoubleProperty.DoubleProperty(String theName, String theDescription, Double min, Double max, Double theDefault, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.FloatMultiProperty.FloatMultiProperty(String theName, String theDescription, Float min, Float max, List<Float> defaultValues, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.FloatProperty.FloatProperty(String theName, String theDescription, Float min, Float max, Float theDefault, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.IntegerProperty.IntegerProperty(String theName, String theDescription, Integer min, Integer max, Integer theDefault, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.LongMultiProperty.LongMultiProperty(String theName, String theDescription, Long min, Long max, List<Long> defaultValues, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.properties.LongProperty.LongProperty(String theName, String theDescription, Long min, Long max, Long theDefault, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,7
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",4,1,0,0,6
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",4,1,0,0,6
"net.sourceforge.pmd.lang.jsp.rule.JspRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",4,1,0,0,6
"net.sourceforge.pmd.lang.xml.rule.XmlRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine)",4,1,0,0,6
"net.sourceforge.pmd.lang.java.ast.JavadocElement.JavadocElement(int theBeginLine, int theEndLine, int theBeginColumn, int theEndColumn, JavadocTag theTag)",4,1,0,0,5
"net.sourceforge.pmd.properties.BooleanMultiProperty.BooleanMultiProperty(String theName, String theDescription, List<Boolean> defaultValues, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,5
"net.sourceforge.pmd.properties.StringProperty.StringProperty(String theName, String theDescription, String defaultValue, float theUIOrder, boolean isDefinedExternally)",4,1,0,0,5
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getFlowInterviewType(final SymbolResolver symbols, final TypeInfo referencingType, final Namespace namespace, final String name)",4,1,0,0,4
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getVfComponentType(final SymbolResolver symbols, final TypeInfo referencingType, final Namespace namespace, final String name)",4,1,0,0,4
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",4,1,0,0,4
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",4,1,0,0,4
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.computeWithResultOption(MetricKey<O> key, T node, MetricOptions options, ResultOption option)",4,1,0,0,4
"net.sourceforge.pmd.lang.vm.rule.VmRuleViolationFactory.createRuleViolation(final Rule rule, final RuleContext ruleContext, final Node node, final String message)",4,1,0,0,4
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getDumpFacade(final Writer writer, final String prefix, final boolean recurse)",4,1,0,0,3
"net.sourceforge.pmd.lang.dfa.StartOrEndDataFlowNode.StartOrEndDataFlowNode(List<DataFlowNode> dataFlow, int line, boolean isStartNode)",4,1,0,0,3
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.computeForOperation(MetricKey<O> key, O node, MetricOptions options)",4,1,0,0,3
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.computeForType(MetricKey<T> key, T node, MetricOptions options)",4,1,0,0,3
"net.sourceforge.pmd.renderers.ColumnDescriptor.ColumnDescriptor(String theId, String theTitle, Accessor<T> theAccessor)",4,1,0,0,3
"net.sourceforge.pmd.lang.java.ast.ASTDoStatement.ASTDoStatement(JavaParser p, int id)",4,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTForUpdate.ASTForUpdate(JavaParser p, int id)",4,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.ASTIfStatement(JavaParser p, int id)",4,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel.ASTSwitchLabel(JavaParser p, int id)",4,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTWhileStatement.ASTWhileStatement(JavaParser p, int id)",4,1,0,0,2
"net.sourceforge.pmd.cache.AnalysisCache.analysisFailed(File sourceFile)",4,1,0,0,1
"net.sourceforge.pmd.document.DocumentOperation.apply(Document document)",4,1,0,0,1
"net.sourceforge.pmd.lang.XPathHandler.initialize(IndependentContext context)",4,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser.Ecmascript3Parser(ParserOptions parserOptions)",4,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTDoStatement.ASTDoStatement(int id)",4,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTForUpdate.ASTForUpdate(int id)",4,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.ASTIfStatement(int id)",4,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel.ASTSwitchLabel(int id)",4,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTWhileStatement.ASTWhileStatement(int id)",4,1,0,0,1
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.asOperationNode(Node anyNode)",4,1,0,0,1
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.asTypeNode(Node anyNode)",4,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.ApplierTest$MyFunction.applyTo(Object o)",4,1,0,0,1
"net.sourceforge.pmd.properties.DoubleMultiProperty.named(String name)",4,1,0,0,1
"net.sourceforge.pmd.properties.FloatMultiProperty.named(String name)",4,1,0,0,1
"net.sourceforge.pmd.properties.FloatProperty.named(String name)",4,1,0,0,1
"net.sourceforge.pmd.properties.LongMultiProperty.named(String name)",4,1,0,0,1
"net.sourceforge.pmd.properties.LongProperty.named(String name)",4,1,0,0,1
"net.sourceforge.pmd.Rule.deepCopy()",4,1,0,0,0
"net.sourceforge.pmd.benchmark.TimedOperation.close()",4,1,0,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getNext()",4,1,0,0,0
"net.sourceforge.pmd.cpd.token.TokenFilter.getNextToken()",4,1,0,0,0
"net.sourceforge.pmd.lang.XPathHandler.initialize()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getBeginColumn()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getBeginLine()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getEndColumn()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getEndLine()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getImage()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.GenericToken.getNext()",4,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtOpen()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.getArrayDepth()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.isArray()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.setHasElse()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.getArrayDepth()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.isArray()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.getArrayDepth()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.isArray()",4,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel.setDefault()",4,1,0,0,0
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.getAvailableOperationMetrics()",4,1,0,0,0
"net.sourceforge.pmd.lang.metrics.LanguageMetricsProvider.getAvailableTypeMetrics()",4,1,0,0,0
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest.setup()",4,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.testErrorForBadMulti()",4,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.testErrorForBadSingle()",4,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createBadMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createBadMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.createBadMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createBadProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.LongMultiProperty$LongMultiPBuilder.build()",4,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createBadMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createMultiProperty()",4,1,0,0,0
"net.sourceforge.pmd.renderers.HTMLRendererTest.getHeader()",4,1,0,0,0
"net.sourceforge.pmd.renderers.IDEAJRendererTest.getExpectedMultiple()",4,1,0,0,0
"net.sourceforge.pmd.test.lang.ast.DummyNode.toString()",4,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Operators.unaryLogicalOperators()",4,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.multiBuilder()",3,1,7,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.multiBuilder()",3,1,7,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.singleBuilder()",3,1,6,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.singleBuilder()",3,1,6,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesSingleDir()",3,1,5,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesSingleFile()",3,1,5,0,0
"net.sourceforge.pmd.docs.MockedFileWriter.normalizeLineSeparators(String s)",3,1,4,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.ASTKeywordLiteral(KeywordLiteral keywordLiteral)",3,1,4,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.ASTVariableDeclaration(VariableDeclaration variableDeclaration)",3,1,4,0,1
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.testBadDefaultValue()",3,1,4,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createBadProperty()",3,1,4,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createProperty()",3,1,4,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testLongNamesNullBase()",3,1,4,0,0
"net.sourceforge.pmd.docs.RuleDocGeneratorTest.loadResource(String name)",3,1,3,0,1
"net.sourceforge.pmd.cpd.ScalaTokenizerTest.createTempFileOnDisk()",3,1,3,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getEndColumn()",3,1,3,0,0
"net.sourceforge.pmd.it.SourceDistributionIT.testFileExistence()",3,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTest.testAnnotationFailsWithJDK14()",3,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTest.testAnnotationSucceedsWithJDK15()",3,1,3,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseTag()",3,1,3,0,0
"net.sourceforge.pmd.lang.jsp.JspParserTest.testParseWrong()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testBug1520IsOfType()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testBug1520Using()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testBug1527()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testCaseIssue1454()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testCodingStyleExample()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testIsNull()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testMultiLineSelect()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLParserTest.testSingleLineSelect()",3,1,3,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLXPathRuleTest.setup()",3,1,3,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createBadValue()",3,1,3,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.createValue()",3,1,3,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesSingleDir()",3,1,3,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesSingleFile()",3,1,3,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.AtfdMetric$AtfdOperationMetric.computeFor(MethodLikeNode node, MetricOptions options)",3,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.LocMetric$LocClassMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",3,1,2,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.LocMetric$LocOperationMetric.computeFor(MethodLikeNode node, MetricOptions options)",3,1,2,0,2
"net.sourceforge.pmd.cpd.PLSQLLanguage.setProperties(Properties properties)",3,1,2,0,1
"net.sourceforge.pmd.cpd.token.JavaCCTokenFilter.shouldStopProcessing(final GenericToken currentToken)",3,1,2,0,1
"net.sourceforge.pmd.document.DeleteDocumentOperation.apply(final Document document)",3,1,2,0,1
"net.sourceforge.pmd.document.ReplaceDocumentOperation.apply(final Document document)",3,1,2,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabel.ASTLabel(Label label)",3,1,2,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTRegExpLiteral.ASTRegExpLiteral(RegExpLiteral regExpLiteral)",3,1,2,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTStringLiteral.ASTStringLiteral(StringLiteral stringLiteral)",3,1,2,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlString.ASTXmlString(XmlString xmlString)",3,1,2,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty.asString(E value)",3,1,2,0,1
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.MyList.checkIterator(List<?> other)",3,1,2,0,1
"net.sourceforge.pmd.ReadableDurationTest.test()",3,1,2,0,0
"net.sourceforge.pmd.RuleWithProperties.RuleWithProperties()",3,1,2,0,0
"net.sourceforge.pmd.cpd.DartTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.FortranTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.GoCPDTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.GoTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.GroovyTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.KotlinTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.MatlabTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.ObjectiveCTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.PLSQLTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.PythonTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.ScalaTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.SwiftTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.UTF8EscapesInStringLiteralObjCTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.cpd.UnicodeObjectiveCTokenizerTest.getSampleCode()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler$ApexMetricsProvider.getAvailableOperationMetrics()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler$ApexMetricsProvider.getAvailableTypeMetrics()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.RuleSetFactoryTest.RuleSetFactoryTest()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTAnonymousClass.getImage()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.getModifiers()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isAbstract()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isFinal()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isPrivate()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isProtected()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isPublic()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isStatic()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isTransient()",3,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger.getImage()",3,1,2,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler$JavaMetricsProvider.getAvailableOperationMetrics()",3,1,2,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler$JavaMetricsProvider.getAvailableTypeMetrics()",3,1,2,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.buildHashCode()",3,1,2,0,0
"net.sourceforge.pmd.lang.metrics.AbstractMetric.hashCode()",3,1,2,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.testNullPassedIn()",3,1,2,0,0
"net.sourceforge.pmd.stat.MockStatisticalRule.getName()",3,1,2,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodAccessibility$Nested.test()",3,1,2,0,0
"net.sourceforge.pmd.typeresolution.testdata.UsesJavaStreams.performStuff()",3,1,2,0,0
"net.sourceforge.pmd.typeresolution.testdata.VarargsZeroArity.tester()",3,1,2,0,0
"net.sourceforge.pmd.util.StringUtilTest.testReplaceStringWithString()",3,1,2,0,0
"net.sourceforge.pmd.util.StringUtilTest.testReplaceWithMultipleChars()",3,1,2,0,0
"net.sourceforge.pmd.util.StringUtilTest.testReplaceWithNull()",3,1,2,0,0
"net.sourceforge.pmd.util.StringUtilTest.testReplaceWithOneChar()",3,1,2,0,0
"net.sourceforge.pmd.util.datasource.FileDataSourceTest.testShortNamesNullBase()",3,1,2,0,0
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1, String pattern2, String pattern3, String pattern4, String pattern5, String pattern6)",3,1,1,0,7
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1, String pattern2, String pattern3, String pattern4, String pattern5)",3,1,1,0,6
"net.sourceforge.pmd.document.ReplaceDocumentOperation.ReplaceDocumentOperation(final int beginLine, final int endLine, final int beginColumn, final int endColumn, final String textToReplace)",3,1,1,0,5
"net.sourceforge.pmd.lang.rule.MockRule.MockRule(String name, String description, String message, String ruleSetName, RulePriority priority)",3,1,1,0,5
"net.sourceforge.pmd.document.InsertDocumentOperation.InsertDocumentOperation(final int beginLine, final int beginColumn, final String textToInsert)",3,1,1,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.ConcreteClassArrayParams.arrayParams(String dflt, int[] keys, StringBuilder[] labels)",3,1,1,0,3
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.typeof(final XPathContext context, final String nodeTypeName, final String fullTypeName)",3,1,1,0,3
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.setUserData(String key, Object data, UserDataHandler handler)",3,1,1,0,3
"net.sourceforge.pmd.lang.apex.ApexParser.parse(String fileName, Reader source)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTAnonymousClass.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTArrayLoadExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTArrayStoreExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTAssignmentExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTBinaryExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTBindExpressions.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTBooleanExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTBreakStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTBridgeMethodCreator.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTCastExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTClassRefExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTConstructorPreamble.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTConstructorPreambleStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTContinueStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlDeleteStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlInsertStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlMergeStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUndeleteStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUpdateStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUpsertStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTDoLoopStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTForEachStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTForLoopStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTFormalComment.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTIfBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTIfElseBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTIllegalStoreExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTInstanceOfExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTJavaMethodCallExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTJavaVariableExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTMapEntryNode.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTMethodBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTModifier.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTModifierOrAnnotation.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTMultiStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNestedExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNestedStoreExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewKeyValueObjectExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewListInitExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewListLiteralExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewMapInitExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewMapLiteralExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewObjectExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewSetInitExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTNewSetLiteralExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTPackageVersionExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTPostfixExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTPrefixExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTProperty.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTReturnStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTRunAsBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTSoqlExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTSoslExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTStandardCondition.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTStatementExecuted.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTSuperMethodCallExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTSuperVariableExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTTernaryExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTThisMethodCallExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTThisVariableExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTThrowStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTTriggerVariableExpression.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTTryCatchFinallyBlockStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserClassMethods.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserEnum.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserExceptionMethods.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclarationStatements.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ASTWhileLoopStatement.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTAnnotationParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTAnonymousClass node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTArrayLoadExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTArrayStoreExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTAssignmentExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBinaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBindExpressions node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBooleanExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBreakStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTBridgeMethodCreator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTCastExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTCatchBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTClassRefExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTConstructorPreamble node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTConstructorPreambleStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTContinueStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlDeleteStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlInsertStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlMergeStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlUndeleteStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlUpdateStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDmlUpsertStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTDoLoopStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTExpressionStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTField node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTFieldDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTFieldDeclarationStatements node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTForEachStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTForLoopStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTFormalComment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTIfBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTIfElseBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTIllegalStoreExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTInstanceOfExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTJavaMethodCallExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTJavaVariableExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTLiteralExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTMapEntryNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTMethod node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTMethodBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTMethodCallExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTModifier node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTModifierNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTModifierOrAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTMultiStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNestedExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNestedStoreExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewKeyValueObjectExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewListInitExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewListLiteralExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewMapInitExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewMapLiteralExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewObjectExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewSetInitExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTNewSetLiteralExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTPackageVersionExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTPostfixExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTPrefixExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTProperty node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTReferenceExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTReturnStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTRunAsBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTSoqlExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTSoslExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTStandardCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTStatementExecuted node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTSuperMethodCallExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTSuperVariableExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTTernaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTThisMethodCallExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTThisVariableExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTTriggerVariableExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTTryCatchFinallyBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserClass node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserClassMethods node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserEnum node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserExceptionMethods node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserInterface node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTUserTrigger node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTVariableDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTVariableDeclarationStatements node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTVariableExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(ASTWhileLoopStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter.visit(AbstractApexNodeBase node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorReducedAdapter.visit(ASTUserClass node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorReducedAdapter.visit(ASTUserInterface node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.WmcMetric.computeFor(ASTUserClassOrInterface<?> node, MetricOptions options)",3,1,1,0,2
"net.sourceforge.pmd.lang.apex.metrics.impl.visitors.StandardCycloVisitor.visit(ASTMethod node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser.parse(String fileName, Reader source)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTEmptyStatement.jjtAccept(EcmascriptParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTArrayComprehension node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTArrayComprehensionLoop node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTArrayLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTAssignment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTAstRoot node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTBreakStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTCatchClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTComment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTConditionalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTContinueStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTDoLoop node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTElementGet node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTEmptyExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTExpressionStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTForInLoop node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTForLoop node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTFunctionCall node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTFunctionNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTIfStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTInfixExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTKeywordLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTLabel node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTLabeledStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTLetNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTNewExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTNumberLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTObjectLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTObjectProperty node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTParenthesizedExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTPropertyGet node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTRegExpLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTReturnStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTScope node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTStringLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTSwitchCase node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTSwitchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTTryStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTUnaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTVariableDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTVariableInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTWhileLoop node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTWithStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTXmlDotQuery node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTXmlExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTXmlMemberGet node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitorAdapter.visit(ASTXmlString node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAdditiveExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAndExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalAndExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalOrExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTDoStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTExclusiveOrExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTIfStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInclusiveOrExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInstanceOfExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMarkerAnnotation.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValue.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMultiplicativeExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNormalAnnotation.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPostfixExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPreDecrementExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPreIncrementExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRelationalExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTShiftExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledBlock.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledThrowStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeArgument.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeArguments.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeBound.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameters.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpressionNotPlusMinus.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTWhileStatement.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserDecoratedVisitor.visit(JavaNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAdditiveExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAllocationExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAndExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAnnotationMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAnnotationTypeBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAnnotationTypeMemberDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTArgumentList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTArrayDimsAndInits node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTArrayInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAssertStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTAssignmentOperator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTBooleanLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTBreakStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTCastExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTCatchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTClassOrInterfaceBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTClassOrInterfaceBodyDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTClassOrInterfaceType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTCompilationUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTConditionalAndExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTConditionalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTConditionalOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTConstructorDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTContinueStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTDefaultValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTDoStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTEmptyStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTEnumBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTEnumConstant node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTEnumDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTEqualityExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTExclusiveOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTExplicitConstructorInvocation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTExtendsList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTFieldDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTFinallyStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTForInit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTForStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTForUpdate node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTFormalParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTFormalParameters node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTIfStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTImplementsList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTImportDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTInclusiveOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTInstanceOfExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTLabeledStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTLambdaExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTLocalVariableDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMarkerAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMemberSelector node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMemberValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMemberValueArrayInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMemberValuePair node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMemberValuePairs node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMethodDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMethodReference node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTModuleDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTModuleDirective node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTModuleName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTMultiplicativeExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTNameList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTNormalAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTNullLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPackageDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPostfixExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPreDecrementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPreIncrementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPrimaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPrimaryPrefix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPrimarySuffix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTPrimitiveType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTReferenceType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTRelationalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTResource node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTResourceSpecification node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTResources node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTResultType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTReturnStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTShiftExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSingleMemberAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTStatementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTStatementExpressionList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchLabel node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchLabeledBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchLabeledExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchLabeledThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSwitchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTSynchronizedStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTryStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeArgument node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeBound node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTTypeParameters node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTUnaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTVariableDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTVariableDeclaratorId node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTVariableInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTWhileStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(ASTWildcardBounds node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter.visit(JavaNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAdditiveExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAllocationExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAndExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAnnotationMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAnnotationTypeBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAnnotationTypeMemberDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTArgumentList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTArrayDimsAndInits node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTArrayInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAssertStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTAssignmentOperator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTBlockStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTBooleanLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTBreakStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTCastExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTCatchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTClassOrInterfaceBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTClassOrInterfaceBodyDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTClassOrInterfaceType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTCompilationUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTConditionalAndExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTConditionalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTConditionalOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTConstructorDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTContinueStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTDefaultValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTDoStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTEmptyStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTEnumBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTEnumConstant node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTEnumDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTEqualityExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTExclusiveOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTExplicitConstructorInvocation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTExtendsList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTFieldDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTFinallyStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTForInit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTForStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTForUpdate node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTFormalParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTFormalParameters node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTIfStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTImplementsList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTImportDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTInclusiveOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTInstanceOfExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTLabeledStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTLambdaExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTLocalVariableDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMarkerAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMemberSelector node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMemberValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMemberValueArrayInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMemberValuePair node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMemberValuePairs node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMethodDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMethodReference node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTModuleDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTModuleDirective node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTModuleName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTMultiplicativeExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTNameList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTNormalAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTNullLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPackageDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPostfixExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPreDecrementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPreIncrementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPrimaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPrimaryPrefix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPrimarySuffix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTPrimitiveType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTReferenceType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTRelationalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTResource node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTResourceSpecification node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTResources node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTResultType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTReturnStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTShiftExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSingleMemberAnnotation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTStatementExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTStatementExpressionList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchLabel node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchLabeledBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchLabeledExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchLabeledThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSwitchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTSynchronizedStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTThrowStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTryStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeArgument node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeBound node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTTypeParameters node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTUnaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTVariableDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTVariableDeclaratorId node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTVariableInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTWhileStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(ASTWildcardBounds node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.visit(JavaNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTConstructorDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTEnumDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTLambdaExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.NpathMetric.computeFor(MethodLikeNode node, MetricOptions options)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.metrics.impl.WmcMetric.computeFor(ASTAnyTypeDeclaration node, MetricOptions options)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTAnnotationTypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTClassOrInterfaceDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTConstructorDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTEnumDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTLambdaExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SubclassWithGenericMethod.generic(T t, R r)",3,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.design.NcssMethodCountRule.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTAttribute node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTAttributeValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTCData node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTCommentTag node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTCompilationUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTContent node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTDoctypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTDoctypeExternalId node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTElExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTElement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTHtmlScript node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspComment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspDirective node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspDirectiveAttribute node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspExpressionInAttribute node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTJspScriptlet node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTText node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTUnparsedText node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspParserVisitorAdapter.visit(ASTValueBinding node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.metrics.BasicMetricMemoizer.memoize(ParameterizedMetricKey<N> key, double value)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonCondition.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinClause.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectIntoStatement.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.jjtAccept(PLSQLParserVisitor visitor, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAccessibleByClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAdditiveExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAlterTrigger node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAlterTypeSpec node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAnalyticClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTArgument node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTArgumentList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAssignment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAttribute node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTAttributeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTBetweenCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTBooleanLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTBulkCollectIntoClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCallSpecTail node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCaseExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCaseStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCaseWhenClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCloseStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCollectionDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCollectionName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCollectionTypeDefinition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCollectionTypeName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTColumn node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTColumnAlias node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTComment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTComparisonCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCompilationDataType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCompilationDeclarationFragment node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCompilationExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCompoundCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCompoundTriggerBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTConditionalAndExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTConditionalCompilationStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTConditionalInsertClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTConditionalOrExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTContinueStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCrossOuterApplyClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCursorBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCursorForLoopStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCursorSpecification node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTCursorUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDDLCommand node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDDLEvent node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDMLTableExpressionClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDatabaseEvent node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDatabaseLink node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDatatype node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDatatypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDateTimeLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDeclarativeSection node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDeclarativeUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDeleteStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTDirectory node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTElseClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTElsifClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTEmbeddedSqlStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTEqualityExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTErrorLoggingClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExceptionDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExceptionHandler node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExistsCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExitStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExpressionList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExpressionListMultiple node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTExpressionListSingle node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFetchStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFieldDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFloatingPointCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTForAllIndex node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTForAllStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTForIndex node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTForStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFormalParameter node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFormalParameters node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFromClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFunctionCall node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTFunctionName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTGlobal node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTGotoStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTGroupByClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTGroupingExpressionList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTGroupingSetsClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTHierarchicalQueryClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTHostArrayName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTID node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIfStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInlinePragma node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInnerCrossJoinClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInput node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInsertIntoClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTInsertStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIntoClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIsASetCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIsEmptyCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIsNullCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTIsOfTypeCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTJavaInterfaceClass node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTJoinClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTKEYWORD_UNRESERVED node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLabel node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLabelledStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLikeCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLikeExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTListaggOverflowClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTLoopStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMemberCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMethodDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMethodDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMultiSetCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMultiTableInsert node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTMultiplicativeExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTNonDMLEvent node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTNonDMLTrigger node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTNullLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTNumericLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTObjectDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTObjectExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTObjectNameDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTOpenStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTOrderByClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTOuterJoinClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTOuterJoinType node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPackageBody node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPackageSpecification node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTParallelClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPartitionExtensionClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPipelineStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPragma node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPragmaClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPrimaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPrimaryPrefix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTPrimarySuffix node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTProgramUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTQualifiedID node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTQualifiedName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTQueryBlock node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTQueryPartitionClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRaiseStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRead2NextOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTReadPastNextOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTReferencesClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRegexpLikeCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRelationalExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTReturnStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTReturningClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRollupCubeClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTRowLimitingClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTScalarDataTypeName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSchemaName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSelectIntoStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSelectList node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSelectStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSimpleExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSingleTableInsert node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSkip2NextOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSkip2NextTerminator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSkip2NextTokenOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSkipPastNextOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSkipPastNextTokenOccurrence node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSqlExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSqlPlusCommand node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSqlStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTStringExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTStringLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSubTypeDefinition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSubmultisetCondition node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSubqueryOperation node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSubqueryRestrictionClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTSynonym node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTable node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTableAlias node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTableCollectionExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTableColumn node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTableName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTableReference node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTriggerTimingPointSection node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTriggerUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTrimExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTypeKeyword node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTypeMethod node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTTypeSpecification node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUnaryExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUnaryExpressionNotPlusMinus node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUnlabelledStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUnqualifiedID node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUpdateSetClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTUpdateStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTValuesClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTVariableName node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTVariableOrConstantDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTVariableOrConstantDeclarator node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTVariableOrConstantDeclaratorId node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTVariableOrConstantInitializer node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTView node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTViewColumn node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTWhereClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTWhileStatement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTWindowingClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTWithinClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTWrappedObject node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLAttributesClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLElement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLExists node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLNamespacesClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLPassingClause node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLTable node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLTableColum node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(ASTXMLTableOptions node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLParserVisitorAdapter.visit(PLSQLNode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.plsql.rule.design.NcssMethodCountRule.visit(ExecutableCode node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,1,0,2
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setProperty(MultiValuePropertyDescriptor<V> propertyDescriptor, V... values)",3,1,1,0,2
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setProperty(PropertyDescriptor<T> propertyDescriptor, T value)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTArguments node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTAttribute node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTAttributeValue node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTCData node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTCompilationUnit node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTContent node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTDoctypeDeclaration node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTDoctypeExternalId node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTDotExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTElExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTElement node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTHtmlScript node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTIdentifier node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTLiteral node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTNegationExpression node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vf.ast.VfParserVisitorAdapter.visit(ASTText node, Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTDirective.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTEscape.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTMathNode.jjtAccept(final VmParserVisitor visitor, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTComment node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTEscape node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTEscapedDirective node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTFloatingPointLiteral node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTIntegerLiteral node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTStringLiteral node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTTextblock node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.vm.ast.VmParserVisitorAdapter.visit(final ASTprocess node, final Object data)",3,1,1,0,2
"net.sourceforge.pmd.lang.xml.XmlParser.parse(String fileName, Reader source)",3,1,1,0,2
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getFeature(String feature, String version)",3,1,1,0,2
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.insertBefore(org.w3c.dom.Node newChild, org.w3c.dom.Node refChild)",3,1,1,0,2
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.isSupported(String feature, String version)",3,1,1,0,2
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.replaceChild(org.w3c.dom.Node newChild, org.w3c.dom.Node oldChild)",3,1,1,0,2
"net.sourceforge.pmd.cache.NoopAnalysisCache.getCachedViolations(File sourceFile)",3,1,1,0,1
"net.sourceforge.pmd.cpd.ApexLanguage.ApexLanguage(Properties properties)",3,1,1,0,1
"net.sourceforge.pmd.cpd.CPPLanguage.CPPLanguage(Properties properties)",3,1,1,0,1
"net.sourceforge.pmd.cpd.CsLanguage.CsLanguage(Properties properties)",3,1,1,0,1
"net.sourceforge.pmd.cpd.JavaLanguage.JavaLanguage(Properties properties)",3,1,1,0,1
"net.sourceforge.pmd.cpd.token.AntlrTokenFilter.shouldStopProcessing(final AntlrToken currentToken)",3,1,1,0,1
"net.sourceforge.pmd.lang.apex.metrics.impl.AbstractApexClassMetric.supports(ASTUserClassOrInterface<?> node)",3,1,1,0,1
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitorFacade.initializeWith(ApexNode<?> rootNode)",3,1,1,0,1
"net.sourceforge.pmd.lang.apex.rule.AbstractStatisticalApexRule.addDataPoint(DataPoint point)",3,1,1,0,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.getUnparsedEntity(String name)",3,1,1,0,1
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.selectID(String id)",3,1,1,0,1
"net.sourceforge.pmd.lang.cpp.CppTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTPropertyGet.ASTPropertyGet(PropertyGet propertyGet)",3,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript5.Ecmascript5TokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.JavaTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.jjtGetChild(int index)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.setType(Class<?> type)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.AtfdMetric$AtfdOperationMetric.supports(MethodLikeNode node)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.NoamMetric.supports(ASTAnyTypeDeclaration node)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.NopaMetric.supports(ASTAnyTypeDeclaration node)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.WocMetric.supports(ASTAnyTypeDeclaration node)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest$FluentFieldSigMask.restrictVisibilitiesTo(Visibility... visibilities)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest$FluentOperationSigMask.restrictRolesTo(Role... roles)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest$FluentOperationSigMask.restrictVisibilitiesTo(Visibility... visibilities)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.covers(JavaFieldSignature sig)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaSigMask.covers(T sig)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.rule.AbstractStatisticalJavaRule.addDataPoint(DataPoint point)",3,1,1,0,1
"net.sourceforge.pmd.lang.java.rule.performance.UseIndexOfCharRule.isViolationArgument(Node arg)",3,1,1,0,1
"net.sourceforge.pmd.lang.jsp.JspTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.matlab.MatlabTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.metrics.BasicMetricMemoizer.getMemo(ParameterizedMetricKey<N> key)",3,1,1,0,1
"net.sourceforge.pmd.lang.metrics.internal.DummyProjectMemoizer.getClassMemoizer(QualifiedName qname)",3,1,1,0,1
"net.sourceforge.pmd.lang.metrics.internal.DummyProjectMemoizer.getOperationMemoizer(QualifiedName qname)",3,1,1,0,1
"net.sourceforge.pmd.lang.objectivec.ObjectiveCTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.plsql.PLSQLTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.plsql.rule.AbstractStatisticalPLSQLRule.addDataPoint(DataPoint point)",3,1,1,0,1
"net.sourceforge.pmd.lang.python.PythonTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.addExample(String example)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.addRuleChainVisit(Class<? extends Node> nodeClass)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.addRuleChainVisit(String astNodeName)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.definePropertyDescriptor(PropertyDescriptor<?> propertyDescriptor)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.end(RuleContext ctx)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getProperty(PropertyDescriptor<T> propertyDescriptor)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getPropertyDescriptor(String name)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isPropertyOverridden(PropertyDescriptor<?> propertyDescriptor)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setDeprecated(boolean deprecated)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setDescription(String description)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setDfa(boolean isDfa)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setExternalInfoUrl(String url)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setLanguage(Language language)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setMaximumLanguageVersion(LanguageVersion maximumlanguageVersion)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setMessage(String message)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setMinimumLanguageVersion(LanguageVersion minimumlanguageVersion)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setMultifile(boolean multifile)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setName(String name)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setPriority(RulePriority priority)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setRuleClass(String ruleClass)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setRuleSetName(String name)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setSince(String since)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.setTypeResolution(boolean usingTypeResolution)",3,1,1,0,1
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.start(RuleContext ctx)",3,1,1,0,1
"net.sourceforge.pmd.lang.vf.VfTokenManager.setFileName(String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.vm.VmTokenManager.setFileName(final String fileName)",3,1,1,0,1
"net.sourceforge.pmd.lang.vm.rule.AbstractStatisticalVmRule.addDataPoint(final DataPoint point)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.appendChild(org.w3c.dom.Node newChild)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.cloneNode(boolean deep)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getUserData(String key)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.isDefaultNamespace(String namespaceURI)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.isEqualNode(org.w3c.dom.Node arg)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.isSameNode(org.w3c.dom.Node other)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.lookupNamespaceURI(String prefix)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.lookupPrefix(String namespaceURI)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.removeChild(org.w3c.dom.Node oldChild)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.setNodeValue(String nodeValue)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.setPrefix(String prefix)",3,1,1,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.setTextContent(String textContent)",3,1,1,0,1
"net.sourceforge.pmd.processor.PmdThreadFactory.newThread(Runnable r)",3,1,1,0,1
"net.sourceforge.pmd.properties.AbstractPackagedProperty.valueErrorFor(T value)",3,1,1,0,1
"net.sourceforge.pmd.properties.BooleanMultiProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.BooleanProperty.createFrom(String propertyString)",3,1,1,0,1
"net.sourceforge.pmd.properties.CharacterProperty.createFrom(String valueString)",3,1,1,0,1
"net.sourceforge.pmd.properties.DoubleMultiProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.DoubleProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty.errorFor(E value)",3,1,1,0,1
"net.sourceforge.pmd.properties.FloatMultiProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.FloatProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.IntegerMultiProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.IntegerProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.LongMultiProperty.createFrom(String value)",3,1,1,0,1
"net.sourceforge.pmd.properties.LongProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty.asString(Method value)",3,1,1,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty.valueFrom(String valueString)",3,1,1,0,1
"net.sourceforge.pmd.properties.MethodProperty.asString(Method value)",3,1,1,0,1
"net.sourceforge.pmd.properties.MethodProperty.createFrom(String valueString)",3,1,1,0,1
"net.sourceforge.pmd.properties.RegexProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty.createFrom(String toParse)",3,1,1,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty.valueFrom(String valueString)",3,1,1,0,1
"net.sourceforge.pmd.properties.TypeProperty.createFrom(String valueString)",3,1,1,0,1
"net.sourceforge.pmd.properties.modules.TypePropertyModule.packageNameOf(Class item)",3,1,1,0,1
"net.sourceforge.pmd.renderers.AbstractAccumulatingRenderer.renderFileReport(Report report)",3,1,1,0,1
"net.sourceforge.pmd.renderers.CSVRendererTest.getExpectedError(ConfigurationError error)",3,1,1,0,1
"net.sourceforge.pmd.renderers.CSVRendererTest.getExpectedError(ProcessingError error)",3,1,1,0,1
"net.sourceforge.pmd.stat.MockStatisticalRule.addDataPoint(DataPoint point)",3,1,1,0,1
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.filter(T obj)",3,1,1,0,1
"net.sourceforge.pmd.util.filter.DirectoryFilter.filter(File file)",3,1,1,0,1
"net.sourceforge.pmd.util.filter.NotFilter.filter(T obj)",3,1,1,0,1
"net.sourceforge.pmd.util.log.PmdLogFormatter.format(LogRecord record)",3,1,1,0,1
"net.sourceforge.pmd.util.viewer.Viewer.main(String[] args)",3,1,1,0,1
"LocalVariableTypeInference.aMethod()",3,1,1,0,0
"LocalVariableTypeInference.asMethodParameter()",3,1,1,0,0
"net.sourceforge.pmd.ExcludeLinesTest.setUp()",3,1,1,0,0
"net.sourceforge.pmd.ant.CPDTaskTest.setUp()",3,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getBeginColumn()",3,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getBeginLine()",3,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getEndLine()",3,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getImage()",3,1,1,0,0
"net.sourceforge.pmd.lang.Dummy2LanguageModule.Dummy2LanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler.getMultifileFacade()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.ApexLanguageModule.ApexLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.ApexParser.getSuppressMap()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.reset()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsFacade.getLanguageSpecificComputer()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsFacade.reset()",3,1,1,0,0
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitorTest.testProjectMirrorNotNull()",3,1,1,0,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.getUnparsedEntityNames()",3,1,1,0,0
"net.sourceforge.pmd.lang.cpp.CppTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.dfa.StackObject.toString()",3,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser.getSuppressMap()",3,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.EcmascriptLanguageModule.EcmascriptLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayLiteral.isDestructuring()",3,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.isDestructuring()",3,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript5.Ecmascript5TokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.JavaTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTest.testAnnotationSucceedsWithDefaultMode()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTInitializerTest.testDontCrashOnBlockStatement()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMarkerAnnotation.jjtGetParent()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.jjtGetParent()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.jjtGetParent()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getName()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTNormalAnnotation.jjtGetParent()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.jjtGetParent()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.reset()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsFacade.getLanguageSpecificComputer()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsFacade.reset()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest$FluentOperationSigMask.forbidAbstract()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.multifile.ClassStatsTest.resetMultifile()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.buildToString()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveClassLengthRule.ExcessiveClassLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveImportsRule.ExcessiveImportsRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveMethodLengthRule.ExcessiveMethodLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveParameterListRule.ExcessiveParameterListRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.multithreading.DontCallThreadRunTest$TestThread.run()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.GlobalScopeTest.testEnums()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.symboltable.MethodScopeTest.testGenerics()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Bound.reduce()",3,1,1,0,0
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Constraint.reduce()",3,1,1,0,0
"net.sourceforge.pmd.lang.jsp.JspLanguageModule.JspLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.jsp.JspTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.matlab.MatlabTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.objectivec.ObjectiveCTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.getImage()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerTimingPointSection.getName()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.getName()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveMethodLengthRule.ExcessiveMethodLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveObjectLengthRule.ExcessiveObjectLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessivePackageBodyLengthRule.ExcessivePackageBodyLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessivePackageSpecificationLengthRule.ExcessivePackageSpecificationLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveParameterListRule.ExcessiveParameterListRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveTypeLengthRule.ExcessiveTypeLengthRule()",3,1,1,0,0
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.toString()",3,1,1,0,0
"net.sourceforge.pmd.lang.pom.PomLanguageModule.PomLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.python.PythonTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getDescription()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getExamples()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getExternalInfoUrl()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getLanguage()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getMaximumLanguageVersion()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getMessage()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getMinimumLanguageVersion()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getName()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getParserOptions()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getPriority()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getPropertiesByPropertyDescriptor()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getPropertyDescriptors()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getRuleChainVisits()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getRuleClass()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getRuleSetName()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getSince()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.ignoredProperties()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isDeprecated()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isDfa()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isMultifile()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isRuleChain()",3,1,1,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.isTypeResolution()",3,1,1,0,0
"net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration.getImage()",3,1,1,0,0
"net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration.getName()",3,1,1,0,0
"net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration.getScope()",3,1,1,0,0
"net.sourceforge.pmd.lang.vf.VfLanguageModule.VfLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.vf.VfTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.vm.VmLanguageModule.VmLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.vm.VmTokenManager.getNextToken()",3,1,1,0,0
"net.sourceforge.pmd.lang.wsdl.WsdlLanguageModule.WsdlLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.XmlLanguageModule.XmlLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getAttributes()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getBaseURI()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getChildNodes()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getFirstChild()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getLastChild()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getLocalName()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getNamespaceURI()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getNextSibling()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getNodeName()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getNodeValue()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getOwnerDocument()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getParentNode()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getPrefix()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getPreviousSibling()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.getTextContent()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.hasAttributes()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.hasChildNodes()",3,1,1,0,0
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.normalize()",3,1,1,0,0
"net.sourceforge.pmd.lang.xsl.XslLanguageModule.XslLanguageModule()",3,1,1,0,0
"net.sourceforge.pmd.properties.AbstractPackagedProperty.legalPackageNames()",3,1,1,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.EnumeratedProperty.mappings()",3,1,1,0,0
"net.sourceforge.pmd.properties.EnumeratedProperty.type()",3,1,1,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createValue()",3,1,1,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.getExpectedEmpty()",3,1,1,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.getExpectedEmpty()",3,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodStaticAccess$Nested.bar()",3,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.SubTypeUsage.foo()",3,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.SubType.myMethod()",3,1,1,0,0
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.toString()",3,1,1,0,0
"net.sourceforge.pmd.properties.BooleanProperty.BooleanProperty(String theName, String theDescription, boolean defaultValue, float theUIOrder, boolean isDefinedExternally)",3,1,0,0,5
"net.sourceforge.pmd.properties.CharacterProperty.CharacterProperty(String theName, String theDescription, Character theDefault, float theUIOrder, boolean isDefinedExternally)",3,1,0,0,5
"net.sourceforge.pmd.properties.FileProperty.FileProperty(String theName, String theDescription, File theDefault, float theUIOrder, boolean isDefinedExternally)",3,1,0,0,5
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.jsp.rule.JspRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.plsql.rule.PLSQLRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest$TestRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.vf.rule.VfRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.xml.rule.XmlRuleViolationFactory.createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message)",3,1,0,0,4
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.find(final SymbolResolver symbols, final TypeInfo referencingType, final String lowerCaseFullName)",3,1,0,0,3
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getQuickAction(TypeInfo arg0, String arg1, String arg2)",3,1,0,0,3
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.hasLabelField(final TypeInfo referencingType, final Namespace namespace, final String name)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericWithOverloadsImpl.multi(ASTImportDeclaration node, String data, Integer integer)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericWithOverloadsImpl.multi(ASTPackageDeclaration node, String data, Integer integer)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Bound.Bound(JavaTypeDefinition leftProperType, Variable rightTypeVariable, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Bound.Bound(Variable leftTypeVariable, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Bound.Bound(Variable leftTypeVariable, Variable rightTypeVariable, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Constraint.Constraint(JavaTypeDefinition leftProperType, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Constraint.Constraint(JavaTypeDefinition leftProperType, Variable rightTypeVariable, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Constraint.Constraint(Variable leftTypeVariable, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Constraint.Constraint(Variable leftTypeVariable, Variable rightTypeVariable, InferenceRuleType ruleType)",3,1,0,0,3
"net.sourceforge.pmd.ReadableDurationTest.ReadableDurationTest(String expected, Integer value)",3,1,0,0,2
"net.sourceforge.pmd.cache.NoopAnalysisCache.checkValidity(final RuleSets ruleSets, final ClassLoader classLoader)",3,1,0,0,2
"net.sourceforge.pmd.cpd.CPDNullListener.addedFile(int fileCount, File file)",3,1,0,0,2
"net.sourceforge.pmd.cpd.DartTokenizerTest.DartTokenizerTest(String filename, int nExpectedTokens)",3,1,0,0,2
"net.sourceforge.pmd.cpd.KotlinTokenizerTest.KotlinTokenizerTest(String filename, int nExpectedTokens)",3,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexNode.childrenAccept(ApexParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexNode.jjtAccept(ApexParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getPageReference(final TypeInfo referencingType, final String name)",3,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getSObjectType(final TypeInfo referencingType, final String name)",3,1,0,0,2
"net.sourceforge.pmd.lang.apex.rule.design.ExcessiveParameterListRule.visit(ASTParameter node, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.ast.DummyNode.DummyNode(int id, boolean findBoundary)",3,1,0,0,2
"net.sourceforge.pmd.lang.dfa.StackObject.StackObject(NodeType type, DataFlowNode node)",3,1,0,0,2
"net.sourceforge.pmd.lang.dfa.pathfinder.PathElement.PathElement(DataFlowNode node, DataFlowNode ref)",3,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptNode.childrenAccept(EcmascriptParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptNode.jjtAccept(EcmascriptParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.JavaDataFlowHandler.createDataFlowNode(List<DataFlowNode> dataFlow, Node node)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.JavaLanguageParser.JavaLanguageParser(int jdkVersion, ParserOptions parserOptions)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.JavaNode.childrenAccept(JavaParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.JavaNode.jjtAccept(JavaParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserControllessVisitorAdapter.visit(JavaNode node, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.AmbiguousOverload.compare(StringBuilder o1, StringBuilder o2)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericWithOverloadsImpl.visit(ASTCompilationUnit node, String data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericWithOverloadsImpl.visit(ASTPackageDeclaration node, String data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.design.ExcessiveParameterListRule.visit(ASTFormalParameter node, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.design.NcssConstructorCountRule.visit(ASTExplicitConstructorInvocation node, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspNode.childrenAccept(JspParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.JspNode.jjtAccept(JspParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.metrics.internal.DummyMetricMemoizer.memoize(ParameterizedMetricKey<N> key, double value)",3,1,0,0,2
"net.sourceforge.pmd.lang.plsql.PLSQLDataFlowHandler.createDataFlowNode(List<DataFlowNode> dataFlow, Node node)",3,1,0,0,2
"net.sourceforge.pmd.lang.plsql.rule.design.ExcessiveParameterListRule.visit(ASTFormalParameter node, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactoryTest$TestRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,0,0,2
"net.sourceforge.pmd.lang.rule.MockRule.apply(List<? extends Node> nodes, RuleContext ctx)",3,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.VfNode.childrenAccept(VfParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.VfNode.jjtAccept(VfParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.VmNode.childrenAccept(VmParserVisitor visitor, Object data)",3,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.VmNode.jjtAccept(VmParserVisitor visitor, Object data)",3,1,0,0,2
"GitHubBug309.main(String[] args)",3,1,0,0,1
"net.sourceforge.pmd.cache.NoopAnalysisCache.analysisFailed(final File sourceFile)",3,1,0,0,1
"net.sourceforge.pmd.cache.NoopAnalysisCache.isUpToDate(final File sourceFile)",3,1,0,0,1
"net.sourceforge.pmd.cache.NoopAnalysisCache.metricAdded(final Metric metric)",3,1,0,0,1
"net.sourceforge.pmd.cache.NoopAnalysisCache.ruleViolationAdded(final RuleViolation ruleViolation)",3,1,0,0,1
"net.sourceforge.pmd.cpd.AbstractLanguage.setProperties(Properties properties)",3,1,0,0,1
"net.sourceforge.pmd.cpd.CPDNullListener.phaseUpdate(int phase)",3,1,0,0,1
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getQualifiedNameResolutionFacade(ClassLoader classLoader)",3,1,0,0,1
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getSymbolFacade(ClassLoader classLoader)",3,1,0,0,1
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getTypeResolutionFacade(ClassLoader classLoader)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.ApexHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.ApexParser.ApexParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.ApexParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTFormalComment.ASTFormalComment(String token)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.getAggregateResultType(TypeInfo arg0)",3,1,0,0,1
"net.sourceforge.pmd.lang.apex.rule.AbstractStatisticalApexRule.getViolationParameters(DataPoint point)",3,1,0,0,1
"net.sourceforge.pmd.lang.ast.xpath.DefaultASTXPathHandler.initialize(IndependentContext context)",3,1,0,0,1
"net.sourceforge.pmd.lang.cpp.CppHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.cpp.CppParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Handler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayLiteral.setTrailingComma(boolean trailingComma)",3,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.setTrailingComma(boolean trailingComma)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.JavaLanguageHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.setTypeDefinition(JavaTypeDefinition typeDefinition)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.LocMetric$LocClassMetric.supports(ASTAnyTypeDeclaration node)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.LocMetric$LocOperationMetric.supports(MethodLikeNode node)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.NcssClassMetric.supports(ASTAnyTypeDeclaration node)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.impl.NcssOperationMetric.supports(MethodLikeNode node)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.coverFinal(boolean coverFinal)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.coverStatic(boolean coverStatic)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.AbstractStatisticalJavaRule.getViolationParameters(DataPoint point)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.ConcreteClass.fun(String s)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.ConcreteClassArrayParams.fun(String s)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.CovariantReturnType.fun(String s)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.HierarchyWithSeveralBridges$Concrete.foo(ASTType node)",3,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.HierarchyWithSeveralBridges$SubclassTwo.foo(T node)",3,1,0,0,1
"net.sourceforge.pmd.lang.jsp.JspHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.jsp.JspParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.matlab.MatlabHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.matlab.MatlabParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.metrics.internal.DummyMetricMemoizer.getMemo(ParameterizedMetricKey<N> key)",3,1,0,0,1
"net.sourceforge.pmd.lang.objectivec.ObjectiveCHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.objectivec.ObjectiveCParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.plsql.rule.AbstractStatisticalPLSQLRule.getViolationParameters(DataPoint point)",3,1,0,0,1
"net.sourceforge.pmd.lang.python.PythonHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.python.PythonParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery.setProperties(Map<PropertyDescriptor<?>,Object> properties)",3,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.Scope.setParent(Scope parent)",3,1,0,0,1
"net.sourceforge.pmd.lang.vf.VfHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.vf.VfParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.vf.VfSimpleCharStream.VfSimpleCharStream(Reader dstream)",3,1,0,0,1
"net.sourceforge.pmd.lang.vm.VmHandler.getParser(final ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.vm.VmParser.createTokenManager(final Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.vm.rule.AbstractStatisticalVmRule.getViolationParameters(final DataPoint point)",3,1,0,0,1
"net.sourceforge.pmd.lang.xml.XmlHandler.getParser(ParserOptions parserOptions)",3,1,0,0,1
"net.sourceforge.pmd.lang.xml.XmlParser.createTokenManager(Reader source)",3,1,0,0,1
"net.sourceforge.pmd.lang.xml.ast.AbstractDomNodeProxy.AbstractDomNodeProxy(Node node)",3,1,0,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty$EnumPBuilder.mappings(Map<String,E> map)",3,1,0,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty$EnumPBuilder.type(Class<E> type)",3,1,0,0,1
"net.sourceforge.pmd.properties.StringProperty.createFrom(String valueString)",3,1,0,0,1
"net.sourceforge.pmd.properties.builders.MultiNumericPropertyBuilder.MultiNumericPropertyBuilder(String name)",3,1,0,0,1
"net.sourceforge.pmd.renderers.AbstractAccumulatingRenderer.startFileAnalysis(DataSource dataSource)",3,1,0,0,1
"net.sourceforge.pmd.renderers.EmptyRenderer.renderFileReport(Report report)",3,1,0,0,1
"net.sourceforge.pmd.renderers.EmptyRenderer.startFileAnalysis(DataSource dataSource)",3,1,0,0,1
"net.sourceforge.pmd.renderers.TextRendererTest.getExpectedError(ConfigurationError error)",3,1,0,0,1
"net.sourceforge.pmd.renderers.TextRendererTest.getExpectedError(ProcessingError error)",3,1,0,0,1
"net.sourceforge.pmd.renderers.TextRendererTest.getExpectedErrorWithoutMessage(ProcessingError error)",3,1,0,0,1
"net.sourceforge.pmd.stat.MockStatisticalRule.getViolationParameters(DataPoint point)",3,1,0,0,1
"net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand.foo(Map<String,String> m)",3,1,0,0,1
"BadFile.foo()",3,1,0,0,0
"Test.bar()",3,1,0,0,0
"net.sourceforge.pmd.ant.SourceLanguage.toString()",3,1,0,0,0
"net.sourceforge.pmd.cache.AnalysisCache.persist()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getBeginColumn()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getBeginLine()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getClassName()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getDescription()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getEndColumn()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getEndLine()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getFilename()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getMethodName()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getPackageName()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.getVariableName()",3,1,0,0,0
"net.sourceforge.pmd.cache.CachedRuleViolation.isSuppressed()",3,1,0,0,0
"net.sourceforge.pmd.cache.NoopAnalysisCache.persist()",3,1,0,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.getExtensions()",3,1,0,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.getFileFilter()",3,1,0,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.getName()",3,1,0,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.getTerseName()",3,1,0,0,0
"net.sourceforge.pmd.cpd.AbstractLanguage.getTokenizer()",3,1,0,0,0
"net.sourceforge.pmd.cpd.GridBagHelper.nextRow()",3,1,0,0,0
"net.sourceforge.pmd.cpd.MatchAlgorithmTest.getSampleCode()",3,1,0,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getPreviousComment()",3,1,0,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest$MyNode.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest$MyNode.toString()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getDFAGraphRule()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getDataFlowFacade()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getDataFlowHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getDefaultParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getLanguageMetricsProvider()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getMultifileFacade()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getSymbolFacade()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractLanguageVersionHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.AbstractParser.getParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.LanguageVersionHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.Parser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.Parser.getParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler.getDefaultParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler.getLanguageMetricsProvider()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTFormalComment.getImage()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ApexNode.getNode()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsFacade.getLanguageSpecificProjectMemoizer()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.CycloTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.CycloTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.WmcTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.WmcTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.impl.WmcTestRule.isReportMethods()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.rule.ApexXPathRule.getParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.DummyNode.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.DummyNode.isFindBoundary()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.DummyNode.toString()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.DummyNodeWithDeprecatedAttribute.getSize()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtClose()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtGetNumChildren()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.remove()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.AbstractASTXPathHandler.getNavigator()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.DefaultASTXPathHandler.initialize()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.getDocumentRoot()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.getNodeKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.DocumentNode.hasChildNodes()",3,1,0,0,0
"net.sourceforge.pmd.lang.cpp.CppHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.cpp.CppParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.cpp.CppParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.dfa.LinkerException.LinkerException()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Handler.getDefaultParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Handler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Handler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayLiteral.isTrailingComma()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.isTrailingComma()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptNode.getNode()",3,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptXPathRule.getParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getDFAGraphRule()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getDataFlowHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getLanguageMetricsProvider()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.JavaDataFlowHandler.getLabelStatementNodeClass()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationMethodDeclaration.getKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration.getTypeKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.isNested()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.bumpArrayDepth()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.getKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration.getTypeKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTExtendsList.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTImplementsList.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression.getKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression.isFindBoundary()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getKind()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.bumpArrayDepth()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.bumpArrayDepth()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeArguments.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameters.iterator()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.getTypeDefinition()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AbstractMethodLikeNode.getQualifiedName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.JavadocElement.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.MultiLineComment.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.SingleLineComment.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.JavaDFAGraphRule.getMethods()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetricsFacade.getLanguageSpecificProjectMemoizer()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.AtfdTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.AtfdTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.CycloTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.CycloTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.LocTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.LocTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NPathTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NPathTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NcssMetric.valueName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NcssTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NcssTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NcssTestRule.isReportClasses()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NoamTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NoamTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NopaTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.NopaTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.TccTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.TccTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WmcTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WmcTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WmcTestRule.isReportMethods()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WocTestRule.getClassKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.impl.WocTestRule.getOpKey()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.getClassName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.isClass()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.qname.JavaOperationQualifiedName.isOperation()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.ConcreteClassTransitive.run()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.RunnableImpl.run()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DaaRuleViolation.getVariableName()",3,1,0,0,0
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionLower.firstJavaType()",3,1,0,0,0
"net.sourceforge.pmd.lang.jsp.JspHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.jsp.JspHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.jsp.JspParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.jsp.JspParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.OpenTagRegisterTest.newRegister()",3,1,0,0,0
"net.sourceforge.pmd.lang.matlab.MatlabHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.matlab.MatlabParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.matlab.MatlabParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.metrics.internal.DummyMetricMemoizer.getInstance()",3,1,0,0,0
"net.sourceforge.pmd.lang.metrics.internal.DummyProjectMemoizer.getInstance()",3,1,0,0,0
"net.sourceforge.pmd.lang.objectivec.ObjectiveCHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.objectivec.ObjectiveCParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.objectivec.ObjectiveCParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLDataFlowHandler.getLabelStatementNodeClass()",3,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getDFAGraphRule()",3,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getDataFlowHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.plsql.PLSQLHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.getMethods()",3,1,0,0,0
"net.sourceforge.pmd.lang.python.PythonHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.python.PythonParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.python.PythonParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration.getNode()",3,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.Scope.getParent()",3,1,0,0,0
"net.sourceforge.pmd.lang.vf.VfHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.vf.VfHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.vf.VfParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.vf.VfParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.OpenTagRegisterTest.newRegister()",3,1,0,0,0
"net.sourceforge.pmd.lang.vm.VmHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.vm.VmHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.vm.VmParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.vm.VmParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.vm.directive.BlockMacro.getName()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.XmlHandler.getDefaultParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.XmlHandler.getRuleViolationFactory()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.XmlHandler.getXPathHandler()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.XmlParser.canParse()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.XmlParser.getSuppressMap()",3,1,0,0,0
"net.sourceforge.pmd.lang.xml.rule.XmlXPathRule.getParserOptions()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanMultiProperty$BooleanMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanProperty$BooleanPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createBadMultiProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createBadProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createBadValue()",3,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterProperty$CharacterPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createBadProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createBadValue()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.testErrorForBadMulti()",3,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.testErrorForBadSingle()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoubleMultiProperty$DoubleMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoubleMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoubleProperty$DoublePBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoubleProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createBadProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.max()",3,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.min()",3,1,0,0,0
"net.sourceforge.pmd.properties.EnumeratedProperty$EnumPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.FileProperty$FilePBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.FileProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatMultiProperty$FloatMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatProperty$FloatPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.createBadProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.max()",3,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.min()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerMultiProperty$IntegerMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerProperty$IntegerPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createBadMultiProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.max()",3,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.min()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongProperty$LongPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createBadProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.createProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.max()",3,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.min()",3,1,0,0,0
"net.sourceforge.pmd.properties.MethodMultiProperty$MethodMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.MethodMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.MethodProperty$MethodPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.MethodProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.RegexProperty$RegexPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.RegexProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createBadMultiProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createBadValue()",3,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.createMultiProperty()",3,1,0,0,0
"net.sourceforge.pmd.properties.StringProperty$StringPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.StringProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.TypeMultiProperty$TypeMultiPBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.TypeMultiProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.TypeProperty$TypePBuilder.build()",3,1,0,0,0
"net.sourceforge.pmd.properties.TypeProperty.type()",3,1,0,0,0
"net.sourceforge.pmd.properties.modules.TypePropertyModule.itemTypeName()",3,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractAccumulatingRenderer.start()",3,1,0,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.CodeClimateRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmacsRendererTest.getExpected()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmacsRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmacsRendererTest.getExpectedMultiple()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmacsRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRenderer.defaultFileExtension()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRenderer.end()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRenderer.start()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRendererTest.getExpected()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRendererTest.getExpectedMultiple()",3,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.HTMLRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.HTMLRendererTest.getSourceCodeFilename()",3,1,0,0,0
"net.sourceforge.pmd.renderers.IDEAJRendererTest.getExpected()",3,1,0,0,0
"net.sourceforge.pmd.renderers.IDEAJRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.PapariTextRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextPadRendererTest.getExpected()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextPadRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextPadRendererTest.getExpectedMultiple()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextPadRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextRendererTest.getExpected()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextRendererTest.getExpectedEmpty()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextRendererTest.getExpectedMultiple()",3,1,0,0,0
"net.sourceforge.pmd.renderers.TextRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.renderers.XMLRendererTest.getRenderer()",3,1,0,0,0
"net.sourceforge.pmd.test.lang.ast.DummyNode.getXPathNodeName()",3,1,0,0,0
"net.sourceforge.pmd.testframework.PmdRuleTst.setUp()",3,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.ArrayVariableDeclaration.testLocalVars()",3,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.DefaultJavaLangImport.toString()",3,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericNested$Nested.foo()",3,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessPrimaryGenericSimple$Nested.foo()",3,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.MessageBuilderA.newComponent()",3,1,0,0,0
"net.sourceforge.pmd.util.EmptyIterator.hasNext()",3,1,0,0,0
"net.sourceforge.pmd.util.EmptyIterator.instance()",3,1,0,0,0
"net.sourceforge.pmd.util.EmptyIterator.next()",3,1,0,0,0
"net.sourceforge.pmd.util.EmptyIterator.remove()",3,1,0,0,0
"net.sourceforge.pmd.util.filter.DirectoryFilter.toString()",3,1,0,0,0
"net.sourceforge.pmd.util.filter.NotFilter.toString()",3,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTNewKeyValueObjectExpression.getType()",2,1,4,0,0
"net.sourceforge.pmd.lang.ast.xpath.AbstractASTXPathHandler.initialize(IndependentContext context, Language language, Class<?> functionsClass)",2,1,3,0,3
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.metric(final XPathContext context, final String metricKeyName)",2,1,3,0,2
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.typeIs(final XPathContext context, final String fullTypeName)",2,1,3,0,2
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.typeIsExactly(final XPathContext context, final String fullTypeName)",2,1,3,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAstRoot.getComment(int index)",2,1,3,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTProperty.getType()",2,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration.getPackageNameImage()",2,1,3,0,0
"net.sourceforge.pmd.lang.java.ast.ASTResultType.returnsArray()",2,1,3,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.verifyEndsWith(final String message, final String pattern, final String endsWith)",2,1,2,0,3
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.verifyFilterFalse(final String message, final String pattern, final String file)",2,1,2,0,3
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.verifyFilterTrue(final String message, final String pattern, final String file)",2,1,2,0,3
"net.sourceforge.pmd.dcd.DCD.dump(UsageGraph usageGraph, boolean verbose)",2,1,2,0,2
"net.sourceforge.pmd.dcd.DCD.report(UsageGraph usageGraph, boolean verbose)",2,1,2,0,2
"net.sourceforge.pmd.cpd.EdgeCasesTokenizerTest.getSampleCode(final String filename)",2,1,2,0,1
"net.sourceforge.pmd.lang.java.symboltable.SymbolFacade.initializeWith(ASTCompilationUnit node)",2,1,2,0,1
"net.sourceforge.pmd.typeresolution.testdata.JavaTypeDefinitionToStringNPE.putNull(TypeLink<?,? super A> field)",2,1,2,0,1
"Bug1530.incChild()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isGlobal()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isInheritedSharing()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isOverride()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isTest()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isTestOrTestSetup()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isWebService()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isWithSharing()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.isWithoutSharing()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTNewKeyValueObjectExpression.getParameterCount()",2,1,2,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTNewObjectExpression.getType()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.getFilter()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.getNumArrayComprehensionLoops()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.getBlock()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.getNumArguments()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabeledStatement.getNumLabels()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabeledStatement.getStatement()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.getInitializer()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.getNumArguments()",2,1,2,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchStatement.getNumCases()",2,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.getParameterCount()",2,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.getFormalParameters()",2,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.getParameterCount()",2,1,2,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.isBoolean()",2,1,2,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.ClassWithConstants.ClassWithConstants()",2,1,2,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclarator.getParameterCount()",2,1,2,0,0
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1, String pattern2, String pattern3, String pattern4)",2,1,1,0,5
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1, String pattern2, String pattern3)",2,1,1,0,4
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1, String pattern2)",2,1,1,0,3
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorReducedAdapter.visit(ASTUserClassOrInterface<?> node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTAnyTypeDeclaration node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(ASTMethodOrConstructorDeclaration node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorReducedAdapter.visit(MethodLikeNode node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.areSemanticEquals(String a, String b)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTAnyTypeDeclaration node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(ASTMethodOrConstructorDeclaration node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.java.rule.AbstractJavaMetricsRule.visit(MethodLikeNode node, Object data)",2,1,1,0,2
"net.sourceforge.pmd.lang.xpath.PMDFunctions.matches(String s, String pattern1)",2,1,1,0,2
"GitHubBug207.resourceHttpMessageWriter(BodyInserter.Context context)",2,1,1,0,1
"Java9Identifier$Lambda.t(Lambda l)",2,1,1,0,1
"LocalVariableTypeInference.print(String text)",2,1,1,0,1
"net.sourceforge.pmd.cpd.GridBagHelper.add(Component component)",2,1,1,0,1
"net.sourceforge.pmd.cpd.GridBagHelper.addLabel(String label)",2,1,1,0,1
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.newDummyNode(boolean boundary)",2,1,1,0,1
"net.sourceforge.pmd.lang.ast.AbstractTokenManager.setFileName(String fileName)",2,1,1,0,1
"net.sourceforge.pmd.lang.dfa.report.ReportVisitor.visit(AbstractReportNode node)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.getArrayComprehensionLoop(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.getArgument(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabeledStatement.getLabel(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.getArgument(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.getObjectProperty(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchStatement.getSwitchCase(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.getVariableInitializer(int index)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.ast.CommentTest.lineCount(String filtered)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.SetterDetection.mutX(int x)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.SetterDetection.speed(int x)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.isEmpty(String value)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.isMissing(String value)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.isNotEmpty(String value)",2,1,1,0,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclarationTest.byClass(Class<?> c)",2,1,1,0,1
"net.sourceforge.pmd.properties.AbstractPackagedProperty.packageNamesIn(Map<PropertyDescriptorField,String> params)",2,1,1,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty.methodsFrom(String valueString)",2,1,1,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty.typesFrom(String valueString)",2,1,1,0,1
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedErrorWithoutMessage(ProcessingError error)",2,1,1,0,1
"Test.test()",2,1,1,0,0
"net.sourceforge.pmd.cpd.CsLanguage.CsLanguage()",2,1,1,0,0
"net.sourceforge.pmd.cpd.JavaLanguage.JavaLanguage()",2,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.getType()",2,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.isDefault()",2,1,1,0,0
"net.sourceforge.pmd.cpd.token.AntlrToken.isHidden()",2,1,1,0,0
"net.sourceforge.pmd.docs.MockedFileWriter.reset()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTAssignmentExpression.getOperator()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTBinaryExpression.getOperator()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTBooleanExpression.getOperator()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTPostfixExpression.getOperator()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTPrefixExpression.getOperator()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTProperty.getModifiers()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserEnum.getModifiers()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger.getModifiers()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclarationStatements.getModifiers()",2,1,1,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsHook.reset()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.getResult()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.hasFilter()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehensionLoop.getIteratedObject()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehensionLoop.getIterator()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBreakStatement.getLabel()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBreakStatement.hasLabel()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.getCatchCondition()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.getVariableName()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.isIf()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTComment.getValue()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTConditionalExpression.getFalseExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTConditionalExpression.getTestExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTConditionalExpression.getTrueExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTContinueStatement.getLabel()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTContinueStatement.hasLabel()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTDoLoop.getBody()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTDoLoop.getCondition()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTExpressionStatement.hasResult()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.getBody()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.getIteratedObject()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.getIterator()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.isForEach()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.getBody()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.getCondition()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.getIncrement()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.getInitializer()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.getTarget()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.hasArguments()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.getCondition()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.getElse()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.getThen()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.hasElse()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.isBoolean()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.isDebugger()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.isNull()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTKeywordLiteral.isThis()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.getTarget()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.hasArguments()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.hasInitializer()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectProperty.isGetter()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectProperty.isSetter()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTRegExpLiteral.getFlags()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTReturnStatement.hasResult()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTStringLiteral.getQuoteCharacter()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTStringLiteral.isDoubleQuoted()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTStringLiteral.isSingleQuoted()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchStatement.getExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.isConst()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.isLet()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTVariableDeclaration.isVar()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWhileLoop.getBody()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWhileLoop.getCondition()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWithStatement.getExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWithStatement.getStatement()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlExpression.getExpression()",2,1,1,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlExpression.isXmlAttribute()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.AbstractJavaHandler$JavaMetricsProvider.JavaMetricsProvider()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.isAnonymousInnerClass()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.isEnumChild()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.getFormalParameters()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.getType()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.ast.ASTResultType.isVoid()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.dfa.JavaDFAGraphRule.JavaDFAGraphRule()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.metrics.MetricsHook.reset()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.AbstractIgnoredAnnotationRule.AbstractIgnoredAnnotationRule()",2,1,1,0,0
"net.sourceforge.pmd.lang.java.rule.AbstractIgnoredAnnotationRule.defaultSuppressionAnnotations()",2,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTDatatype.getTypeImage()",2,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.getPattern()",2,1,1,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.getSourceChar()",2,1,1,0,0
"net.sourceforge.pmd.lang.plsql.dfa.DFAPLSQLGraphRule.DFAPLSQLGraphRule()",2,1,1,0,0
"net.sourceforge.pmd.lang.wsdl.rule.AbstractWsdlRule.AbstractWsdlRule()",2,1,1,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedWithProperties()",2,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.GenericMethodsImplicit.test()",2,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodGenericExplicit.test()",2,1,1,0,0
"net.sourceforge.pmd.typeresolution.testdata.OverloadedMethodsUsage.foo()",2,1,1,0,0
"net.sourceforge.pmd.properties.RegexProperty.RegexProperty(String theName, String theDescription, Pattern theDefault, float theUIOrder, boolean isDefinedExternally)",2,1,0,0,5
"net.sourceforge.pmd.LanguageVersionTest.LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected)",2,1,0,0,4
"net.sourceforge.pmd.document.DeleteDocumentOperation.DeleteDocumentOperation(final int beginLine, final int endLine, final int beginColumn, final int endColumn)",2,1,0,0,4
"net.sourceforge.pmd.document.DocumentOperation.DocumentOperation(final int beginLine, final int endLine, final int beginColumn, final int endColumn)",2,1,0,0,4
"net.sourceforge.pmd.lang.apex.LanguageVersionTest.LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected)",2,1,0,0,4
"net.sourceforge.pmd.typeresolution.testdata.GenericMethodsImplicit.bar(A a, A b, Integer c, B d)",2,1,0,0,4
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.vararg(String a, String b, String c, int... d)",2,1,0,0,4
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericWithOverloadsImpl.multi(ASTMethodDeclaration node, String data, Integer integer)",2,1,0,0,3
"net.sourceforge.pmd.lang.java.typeresolution.typeinference.Bound.Bound(JavaTypeDefinition leftProperType, JavaTypeDefinition rightProperType, InferenceRuleType ruleType)",2,1,0,0,3
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.subtype(Long a, int b, String c)",2,1,0,0,3
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.subtype(T a, int b, String c)",2,1,0,0,3
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.subtype(long a, byte b, String c)",2,1,0,0,3
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.subtype(short a, int b, String c)",2,1,0,0,3
"net.sourceforge.pmd.typeresolution.testdata.MethodThirdPhase.vararg(int a, String c, String... b)",2,1,0,0,3
"net.sourceforge.pmd.AbstractRuleTest$MyOtherRule.apply(List<? extends Node> nodes, RuleContext ctx)",2,1,0,0,2
"net.sourceforge.pmd.AbstractRuleTest$MyRule.apply(List<? extends Node> nodes, RuleContext ctx)",2,1,0,0,2
"net.sourceforge.pmd.lang.ast.ParseException.ParseException(String message, Throwable cause)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAdditiveExpression.ASTAdditiveExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAndExpression.ASTAndExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationMethodDeclaration.ASTAnnotationMethodDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody.ASTAnnotationTypeBody(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration.ASTAnnotationTypeDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeMemberDeclaration.ASTAnnotationTypeMemberDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArgumentList.ASTArgumentList(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.ASTArrayDimsAndInits(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer.ASTArrayInitializer(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.ASTAssertStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.ASTAssignmentOperator(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBlock.ASTBlock(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatement.ASTBlockStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral.ASTBooleanLiteral(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTCastExpression.ASTCastExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.ASTClassOrInterfaceBody(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalAndExpression.ASTConditionalAndExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.ASTConditionalExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConditionalOrExpression.ASTConditionalOrExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.ASTConstructorDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTContinueStatement.ASTContinueStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTDefaultValue.ASTDefaultValue(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement.ASTEmptyStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumBody.ASTEnumBody(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.ASTEnumConstant(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration.ASTEnumDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression.ASTEqualityExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTExclusiveOrExpression.ASTExclusiveOrExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTExtendsList.ASTExtendsList(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTFinallyStatement.ASTFinallyStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTForInit.ASTForInit(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.ASTFormalParameters(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTImplementsList.ASTImplementsList(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInclusiveOrExpression.ASTInclusiveOrExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInitializer.ASTInitializer(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTInstanceOfExpression.ASTInstanceOfExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement.ASTLabeledStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression.ASTLambdaExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMarkerAnnotation.ASTMarkerAnnotation(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberSelector.ASTMemberSelector(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValue.ASTMemberValue(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer.ASTMemberValueArrayInitializer(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.ASTMemberValuePair(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.ASTMemberValuePairs(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.ASTMethodDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.ASTMethodDeclarator(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMethodReference.ASTMethodReference(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration.ASTModuleDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.ASTModuleDirective(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTModuleName.ASTModuleName(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTMultiplicativeExpression.ASTMultiplicativeExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTName.ASTName(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNameList.ASTNameList(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNormalAnnotation.ASTNormalAnnotation(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTNullLiteral.ASTNullLiteral(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration.ASTPackageDeclaration(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPostfixExpression.ASTPostfixExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPreDecrementExpression.ASTPreDecrementExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPreIncrementExpression.ASTPreIncrementExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.ASTPrimaryExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.ASTPrimaryPrefix(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.ASTPrimitiveType(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRSIGNEDSHIFT.ASTRSIGNEDSHIFT(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRUNSIGNEDSHIFT.ASTRUNSIGNEDSHIFT(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.ASTReferenceType(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTRelationalExpression.ASTRelationalExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResource.ASTResource(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResourceSpecification.ASTResourceSpecification(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResources.ASTResources(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTResultType.ASTResultType(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTReturnStatement.ASTReturnStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTShiftExpression.ASTShiftExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.ASTSingleMemberAnnotation(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatement.ASTStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpression.ASTStatementExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList.ASTStatementExpressionList(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression.ASTSwitchExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledBlock.ASTSwitchLabeledBlock(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledExpression.ASTSwitchLabeledExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledThrowStatement.ASTSwitchLabeledThrowStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement.ASTSynchronizedStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatement.ASTThrowStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.ASTTryStatement(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeArgument.ASTTypeArgument(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeArguments.ASTTypeArguments(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeBound.ASTTypeBound(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.ASTTypeParameter(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameters.ASTTypeParameters(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression.ASTUnaryExpression(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpressionNotPlusMinus.ASTUnaryExpressionNotPlusMinus(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.ASTVariableDeclarator(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer.ASTVariableInitializer(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.ASTWildcardBounds(JavaParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.AbstractJavaTypeNode(JavaParser p, int i)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.AbstractMethodLikeNode.AbstractMethodLikeNode(JavaParser parser, int i)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest$MyAccessNode.MyAccessNode(JavaParser parser, int i)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.ast.DummyJavaNode.DummyJavaNode(JavaParser parser, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.mystatic2(String k, String l)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.mystatic2(String k, String l)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.mystatic2(String k, String l)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.isAnyOf(String text, String... tests)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.startsWithAny(String text, String... prefixes)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.withoutPrefixes(String text, String... prefixes)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.AbstractClass.generic(T t, R r)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.AmbiguousOverload.compare(String s, String s2)",2,1,0,0,2
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclarationTest.by(Class<?> c, String n)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.ASTAttribute(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTAttributeValue.ASTAttributeValue(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCData.ASTCData(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCommentTag.ASTCommentTag(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTCompilationUnit.ASTCompilationUnit(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTContent.ASTContent(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDeclaration.ASTDeclaration(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration.ASTDoctypeDeclaration(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.ASTDoctypeExternalId(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTElExpression.ASTElExpression(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.ASTElement(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTHtmlScript.ASTHtmlScript(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspComment.ASTJspComment(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclaration.ASTJspDeclaration(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclarations.ASTJspDeclarations(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective.ASTJspDirective(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.ASTJspDirectiveAttribute(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDocument.ASTJspDocument(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpression.ASTJspExpression(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpressionInAttribute.ASTJspExpressionInAttribute(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTJspScriptlet.ASTJspScriptlet(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTText.ASTText(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTUnparsedText.ASTUnparsedText(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.jsp.ast.ASTValueBinding.ASTValueBinding(JspParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonCondition.ASTComparisonCondition(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTDatatype.ASTDatatype(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTIfStatement.ASTIfStatement(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.ASTInnerCrossJoinClause(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTInput.ASTInput(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclarator.ASTMethodDeclarator(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTName.ASTName(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.ASTOutOfLineConstraint(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinClause.ASTOuterJoinClause(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.ASTOuterJoinType(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageBody.ASTPackageBody(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageSpecification.ASTPackageSpecification(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimaryPrefix.ASTPrimaryPrefix(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTQueryBlock.ASTQueryBlock(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.ASTRegexpLikeCondition(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectIntoStatement.ASTSelectIntoStatement(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectStatement.ASTSelectStatement(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.ASTSubqueryOperation(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerTimingPointSection.ASTTriggerTimingPointSection(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.ASTTriggerUnit(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeSpecification.ASTTypeSpecification(PLSQLParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.AbstractSelectStatement(PLSQLParser p, int i)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTArguments.ASTArguments(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.ASTAttribute(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTAttributeValue.ASTAttributeValue(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTCData.ASTCData(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTCompilationUnit.ASTCompilationUnit(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTContent.ASTContent(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDeclaration.ASTDeclaration(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeDeclaration.ASTDoctypeDeclaration(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.ASTDoctypeExternalId(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTDotExpression.ASTDotExpression(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTElExpression.ASTElExpression(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTElement.ASTElement(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTExpression.ASTExpression(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTHtmlScript.ASTHtmlScript(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTIdentifier.ASTIdentifier(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTLiteral.ASTLiteral(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTNegationExpression.ASTNegationExpression(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vf.ast.ASTText.ASTText(VfParser p, int id)",2,1,0,0,2
"net.sourceforge.pmd.lang.vm.ast.ASTMathNode.ASTMathNode(final VmParser p, final int id)",2,1,0,0,2
"net.sourceforge.pmd.properties.modules.TypePropertyModule.TypePropertyModule(String[] legalPackageNames, List<Class> defaults)",2,1,0,0,2
"net.sourceforge.pmd.renderers.AbstractAccumulatingRenderer.AbstractAccumulatingRenderer(String name, String description)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodMostSpecific.moreSpecific(Integer a, AbstractList b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodMostSpecific.moreSpecific(Number a, AbstractCollection b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodMostSpecific.moreSpecific(Number a, ArrayList b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.notVararg(int a, int b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.vararg(String b, int... a)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.boxing(Character a, String b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.boxing(Long a, String b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.boxing(Number a, String b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.unboxing(String b, char a)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.unboxing(String b, long a)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodSecondPhase.unboxing(String b, short a)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.MethodThirdPhase.vararg(int a, Number... b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.OverloadedMethods.equals(Object[] a, Object[] b)",2,1,0,0,2
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.OverloadedMethods.equals(byte[] a, byte[] b)",2,1,0,0,2
"Foo.foo(Class<A> c)",2,1,0,0,1
"Java9AnonymousDiamond.main(String... args)",2,1,0,0,1
"SwitchExpressions.f(int k)",2,1,0,0,1
"SwitchExpressionsBreak.f(int k)",2,1,0,0,1
"Test.test(String x)",2,1,0,0,1
"net.sourceforge.pmd.PMDException.setSeverity(int severity)",2,1,0,0,1
"net.sourceforge.pmd.RuleSetNotFoundException.RuleSetNotFoundException(String msg)",2,1,0,0,1
"net.sourceforge.pmd.RuleSetReference.RuleSetReference(final String theFilename)",2,1,0,0,1
"net.sourceforge.pmd.ant.RuleSetWrapper.addText(String t)",2,1,0,0,1
"net.sourceforge.pmd.ant.SourceLanguage.setName(String name)",2,1,0,0,1
"net.sourceforge.pmd.ant.SourceLanguage.setVersion(String version)",2,1,0,0,1
"net.sourceforge.pmd.cpd.AnyLanguage.AnyLanguage(String... extensions)",2,1,0,0,1
"net.sourceforge.pmd.cpd.CsTokenizerTest.toSourceCode(String source)",2,1,0,0,1
"net.sourceforge.pmd.cpd.ReportException.ReportException(Throwable cause)",2,1,0,0,1
"net.sourceforge.pmd.jaxen.MatchesFunctionTest$MyNode.setClassName(String className)",2,1,0,0,1
"net.sourceforge.pmd.lang.AbstractParser.AbstractParser(ParserOptions parserOptions)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTAnonymousClass.ASTAnonymousClass(AnonymousClass anonymousClass)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTArrayLoadExpression.ASTArrayLoadExpression(ArrayLoadExpression arrayLoadExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTArrayStoreExpression.ASTArrayStoreExpression(ArrayStoreExpression arrayStoreExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTAssignmentExpression.ASTAssignmentExpression(AssignmentExpression assignmentExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTBinaryExpression.ASTBinaryExpression(BinaryExpression binaryExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTBindExpressions.ASTBindExpressions(BindExpressions bindExpressions)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTBooleanExpression.ASTBooleanExpression(BooleanExpression booleanExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTBreakStatement.ASTBreakStatement(BreakStatement breakStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTBridgeMethodCreator.ASTBridgeMethodCreator(BridgeMethodCreator bridgeMethodCreator)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTCastExpression.ASTCastExpression(CastExpression node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTClassRefExpression.ASTClassRefExpression(ClassRefExpression classRefExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTConstructorPreamble.ASTConstructorPreamble(ConstructorPreamble node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTConstructorPreambleStatement.ASTConstructorPreambleStatement(ConstructorPreambleStatement constructorPreambleStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTContinueStatement.ASTContinueStatement(ContinueStatement continueStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlDeleteStatement.ASTDmlDeleteStatement(DmlDeleteStatement dmlDeleteStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlInsertStatement.ASTDmlInsertStatement(DmlInsertStatement dmlInsertStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlMergeStatement.ASTDmlMergeStatement(DmlMergeStatement dmlMergeStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUndeleteStatement.ASTDmlUndeleteStatement(DmlUndeleteStatement dmlUndeleteStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUpdateStatement.ASTDmlUpdateStatement(DmlUpdateStatement dmlUpdateStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDmlUpsertStatement.ASTDmlUpsertStatement(DmlUpsertStatement dmlUpsertStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTDoLoopStatement.ASTDoLoopStatement(DoLoopStatement doLoopStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTExpression.ASTExpression(Expression expression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTForEachStatement.ASTForEachStatement(ForEachStatement forEachStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTForLoopStatement.ASTForLoopStatement(ForLoopStatement forLoopStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTIfBlockStatement.ASTIfBlockStatement(IfBlockStatement ifBlockStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTIfElseBlockStatement.ASTIfElseBlockStatement(IfElseBlockStatement ifElseBlockStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTIllegalStoreExpression.ASTIllegalStoreExpression(IllegalStoreExpression node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTInstanceOfExpression.ASTInstanceOfExpression(InstanceOfExpression instanceOfExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTJavaMethodCallExpression.ASTJavaMethodCallExpression(JavaMethodCallExpression javaMethodCallExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTJavaVariableExpression.ASTJavaVariableExpression(JavaVariableExpression javaVariableExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTMapEntryNode.ASTMapEntryNode(MapEntryNode mapEntryNode)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTMethodBlockStatement.ASTMethodBlockStatement(MethodBlockStatement node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTModifier.ASTModifier(Modifier node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTModifierNode.ASTModifierNode(ModifierNode modifierNode)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTModifierOrAnnotation.ASTModifierOrAnnotation(ModifierOrAnnotation modifierOrAnnotation)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTMultiStatement.ASTMultiStatement(MultiStatement node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNestedExpression.ASTNestedExpression(NestedExpression node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNestedStoreExpression.ASTNestedStoreExpression(NestedStoreExpression node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewKeyValueObjectExpression.ASTNewKeyValueObjectExpression(NewKeyValueObjectExpression node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewListInitExpression.ASTNewListInitExpression(NewListInitExpression newListInitExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewListLiteralExpression.ASTNewListLiteralExpression(NewListLiteralExpression newListLiteralExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewMapInitExpression.ASTNewMapInitExpression(NewMapInitExpression newMapInitExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewMapLiteralExpression.ASTNewMapLiteralExpression(NewMapLiteralExpression newMapLiteralExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewObjectExpression.ASTNewObjectExpression(NewObjectExpression newObjectExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewSetInitExpression.ASTNewSetInitExpression(NewSetInitExpression newSetInitExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTNewSetLiteralExpression.ASTNewSetLiteralExpression(NewSetLiteralExpression newSetLiteralExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTPackageVersionExpression.ASTPackageVersionExpression(PackageVersionExpression packageVersionExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTPostfixExpression.ASTPostfixExpression(PostfixExpression postfixExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTPrefixExpression.ASTPrefixExpression(PrefixExpression prefixExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTProperty.ASTProperty(Property property)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTReturnStatement.ASTReturnStatement(ReturnStatement returnStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTRunAsBlockStatement.ASTRunAsBlockStatement(RunAsBlockStatement runAsBlockStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTSoqlExpression.ASTSoqlExpression(SoqlExpression soqlExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTSoslExpression.ASTSoslExpression(SoslExpression soslExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTStandardCondition.ASTStandardCondition(StandardCondition standardCondition)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTStatement.ASTStatement(Statement statement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTStatementExecuted.ASTStatementExecuted(StatementExecuted node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTSuperMethodCallExpression.ASTSuperMethodCallExpression(SuperMethodCallExpression superMethodCallExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTSuperVariableExpression.ASTSuperVariableExpression(SuperVariableExpression superVariableExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTTernaryExpression.ASTTernaryExpression(TernaryExpression ternaryExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTThisMethodCallExpression.ASTThisMethodCallExpression(ThisMethodCallExpression thisMethodCallExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTThisVariableExpression.ASTThisVariableExpression(ThisVariableExpression thisVariableExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTThrowStatement.ASTThrowStatement(ThrowStatement throwStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTTriggerVariableExpression.ASTTriggerVariableExpression(TriggerVariableExpression triggerVariableExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTTryCatchFinallyBlockStatement.ASTTryCatchFinallyBlockStatement(TryCatchFinallyBlockStatement tryCatchFinallyBlockStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserClassMethods.ASTUserClassMethods(UserClassMethods userClassMethods)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserEnum.ASTUserEnum(UserEnum userEnum)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserExceptionMethods.ASTUserExceptionMethods(UserExceptionMethods userExceptionMethods)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger.ASTUserTrigger(UserTrigger userTrigger)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTVariableDeclarationStatements.ASTVariableDeclarationStatements(VariableDeclarationStatements variableDeclarationStatements)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ASTWhileLoopStatement.ASTWhileLoopStatement(WhileLoopStatement whileLoopStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ApexRootNode.ApexRootNode(T node)",2,1,0,0,1
"net.sourceforge.pmd.lang.apex.multifile.ApexMultifileVisitor.ApexMultifileVisitor(ApexProjectMirror mirror)",2,1,0,0,1
"net.sourceforge.pmd.lang.ast.AbstractTokenManager.setSuppressMarker(String marker)",2,1,0,0,1
"net.sourceforge.pmd.lang.ast.DummyNode.DummyNode(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.ast.DummyNodeWithDeprecatedAttribute.DummyNodeWithDeprecatedAttribute(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.ast.ParseException.ParseException(String message)",2,1,0,0,1
"net.sourceforge.pmd.lang.ast.ParseException.ParseException(Throwable cause)",2,1,0,0,1
"net.sourceforge.pmd.lang.dfa.LinkerException.LinkerException(String message)",2,1,0,0,1
"net.sourceforge.pmd.lang.dfa.SequenceException.SequenceException(String message)",2,1,0,0,1
"net.sourceforge.pmd.lang.dfa.VariableAccessException.VariableAccessException(String message)",2,1,0,0,1
"net.sourceforge.pmd.lang.dfa.pathfinder.PathElement.PathElement(DataFlowNode node)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehension.ASTArrayComprehension(ArrayComprehension arrayComprehension)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayComprehensionLoop.ASTArrayComprehensionLoop(ArrayComprehensionLoop arrayComprehensionLoop)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTArrayLiteral.ASTArrayLiteral(ArrayLiteral arrayLiteral)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAssignment.ASTAssignment(Assignment asssignment)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTAstRoot.ASTAstRoot(AstRoot astRoot)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTBlock.ASTBlock(Block block)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTCatchClause.ASTCatchClause(CatchClause catchClause)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTComment.ASTComment(Comment comment)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTConditionalExpression.ASTConditionalExpression(ConditionalExpression conditionalExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTDoLoop.ASTDoLoop(DoLoop doLoop)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTEmptyExpression.ASTEmptyExpression(EmptyExpression emptyExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTEmptyStatement.ASTEmptyStatement(EmptyStatement emptyStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTExpressionStatement.ASTExpressionStatement(ExpressionStatement expressionStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForInLoop.ASTForInLoop(ForInLoop forInLoop)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTForLoop.ASTForLoop(ForLoop forLoop)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionCall.ASTFunctionCall(FunctionCall functionCall)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTIfStatement.ASTIfStatement(IfStatement ifStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTInfixExpression.ASTInfixExpression(InfixExpression infixExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTLabeledStatement.ASTLabeledStatement(LabeledStatement labeledStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTNewExpression.ASTNewExpression(NewExpression newExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectLiteral.ASTObjectLiteral(ObjectLiteral objectLiteral)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTObjectProperty.ASTObjectProperty(ObjectProperty objectProperty)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTParenthesizedExpression.ASTParenthesizedExpression(ParenthesizedExpression parenthesizedExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTReturnStatement.ASTReturnStatement(ReturnStatement returnStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTScope.ASTScope(Scope scope)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTSwitchStatement.ASTSwitchStatement(SwitchStatement switchStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTThrowStatement.ASTThrowStatement(ThrowStatement throwStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWhileLoop.ASTWhileLoop(WhileLoop whileLoop)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTWithStatement.ASTWithStatement(WithStatement withStatement)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlDotQuery.ASTXmlDotQuery(XmlDotQuery xmlDotQuery)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlExpression.ASTXmlExpression(XmlExpression xmlExpression)",2,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.ASTXmlMemberGet.ASTXmlMemberGet(XmlMemberGet xmlMemberGet)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.JavaLanguageHandler.JavaLanguageHandler(int jdkVersion)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.JavaTokenManager.JavaTokenManager(Reader source)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAdditiveExpression.ASTAdditiveExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAndExpression.ASTAndExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationMethodDeclaration.ASTAnnotationMethodDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody.ASTAnnotationTypeBody(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration.ASTAnnotationTypeDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeMemberDeclaration.ASTAnnotationTypeMemberDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTArgumentList.ASTArgumentList(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTArrayDimsAndInits.ASTArrayDimsAndInits(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer.ASTArrayInitializer(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAssertStatement.ASTAssertStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.ASTAssignmentOperator(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTBlock.ASTBlock(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTBlockStatement.ASTBlockStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral.ASTBooleanLiteral(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTCastExpression.ASTCastExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTCastExpression.setIntersectionTypes(boolean intersectionTypes)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody.ASTClassOrInterfaceBody(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTConditionalAndExpression.ASTConditionalAndExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression.ASTConditionalExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTConditionalOrExpression.ASTConditionalOrExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.ASTConstructorDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTContinueStatement.ASTContinueStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTDefaultValue.ASTDefaultValue(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement.ASTEmptyStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEnumBody.ASTEnumBody(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.ASTEnumConstant(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEnumConstant.setQualifiedName(JavaTypeQualifiedName qname)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration.ASTEnumDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression.ASTEqualityExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTExclusiveOrExpression.ASTExclusiveOrExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTExtendsList.ASTExtendsList(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTFinallyStatement.ASTFinallyStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTForInit.ASTForInit(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTFormalParameters.ASTFormalParameters(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTImplementsList.ASTImplementsList(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTInclusiveOrExpression.ASTInclusiveOrExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTInitializer.ASTInitializer(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTInstanceOfExpression.ASTInstanceOfExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement.ASTLabeledStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression.ASTLambdaExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMarkerAnnotation.ASTMarkerAnnotation(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberSelector.ASTMemberSelector(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberValue.ASTMemberValue(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer.ASTMemberValueArrayInitializer(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair.ASTMemberValuePair(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMemberValuePairs.ASTMemberValuePairs(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration.ASTMethodDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator.ASTMethodDeclarator(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMethodReference.ASTMethodReference(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration.ASTModuleDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration.setOpen(boolean open)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.ASTModuleDirective(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.setRequiresModifier(RequiresModifier requiresModifier)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleDirective.setType(DirectiveType type)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTModuleName.ASTModuleName(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTMultiplicativeExpression.ASTMultiplicativeExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTName.ASTName(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTName.setNameDeclaration(NameDeclaration nd)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTNameList.ASTNameList(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTNormalAnnotation.ASTNormalAnnotation(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTNullLiteral.ASTNullLiteral(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration.ASTPackageDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPostfixExpression.ASTPostfixExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPreDecrementExpression.ASTPreDecrementExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPreIncrementExpression.ASTPreIncrementExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression.ASTPrimaryExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.ASTPrimaryPrefix(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType.ASTPrimitiveType(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTRSIGNEDSHIFT.ASTRSIGNEDSHIFT(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTRUNSIGNEDSHIFT.ASTRUNSIGNEDSHIFT(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTReferenceType.ASTReferenceType(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTRelationalExpression.ASTRelationalExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTResource.ASTResource(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTResourceSpecification.ASTResourceSpecification(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTResources.ASTResources(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTResultType.ASTResultType(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTReturnStatement.ASTReturnStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTShiftExpression.ASTShiftExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSingleMemberAnnotation.ASTSingleMemberAnnotation(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTStatement.ASTStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpression.ASTStatementExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList.ASTStatementExpressionList(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression.ASTSwitchExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledBlock.ASTSwitchLabeledBlock(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledExpression.ASTSwitchLabeledExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledThrowStatement.ASTSwitchLabeledThrowStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement.ASTSynchronizedStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTThrowStatement.ASTThrowStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTryStatement.ASTTryStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeArgument.ASTTypeArgument(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeArguments.ASTTypeArguments(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeBound.ASTTypeBound(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameter.ASTTypeParameter(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTTypeParameters.ASTTypeParameters(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression.ASTUnaryExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTUnaryExpressionNotPlusMinus.ASTUnaryExpressionNotPlusMinus(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator.ASTVariableDeclarator(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer.ASTVariableInitializer(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.ASTWildcardBounds.ASTWildcardBounds(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AbstractJavaTypeNode.AbstractJavaTypeNode(int i)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AbstractMethodLikeNode.AbstractMethodLikeNode(int i)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AbstractMethodLikeNode.setQualifiedName(JavaOperationQualifiedName qualifiedName)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNodeTest$MyAccessNode.MyAccessNode(int i)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.DummyJavaNode.DummyJavaNode(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.JavaParserVisitorDecorator.setBase(JavaParserControllessVisitor base)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.MultiLineComment.MultiLineComment(Token t)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.SingleLineComment.SingleLineComment(Token t)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.MetricsVisitorTestData(String x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.mystatic2(String k)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.setX(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.setY(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.SetterDetection.bool(int value)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.metrics.testdata.SetterDetection.setValue(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.MultifileVisitor.MultifileVisitor(PackageStats toplevel)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.MultifileVisitorTestData(String x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.mystatic2(String k)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.setX(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.setY(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.MultifileVisitorTestData2(String x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.mystatic2(String k)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.setX(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.setY(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.setT(int t)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.setX(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.setY(int y)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.setZ(int z)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.AbstractClass.fun(String s)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SubclassWithStatic.fooBar(String f)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SuperclassWithStatic.fooBar(String f)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PackagePrivateUtils.f1(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PackagePrivateUtils.f2(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PackagePrivateUtils.f3(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PublicUtils.g1(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PublicUtils.g2(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PublicUtils.g3(int x)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest$PhonyMockito.mock(Class<T> clazz)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest$PhonyPowerMockito.mock(Class<T> clazz)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.symboltable.SimpleTypedNameDeclarationTest.byName(String n)",2,1,0,0,1
"net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinitionLower.JavaTypeDefinitionLower(JavaTypeDefinition... typeList)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.JspParser.JspParser(ParserOptions parserOptions)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.JspTokenManager.JspTokenManager(Reader source)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTAttribute.ASTAttribute(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTAttributeValue.ASTAttributeValue(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTCData.ASTCData(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTCommentTag.ASTCommentTag(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTCompilationUnit.ASTCompilationUnit(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTContent.ASTContent(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDeclaration.ASTDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration.ASTDoctypeDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.ASTDoctypeExternalId(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTElExpression.ASTElExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.ASTElement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.setUnclosed(boolean unclosed)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTHtmlScript.ASTHtmlScript(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspComment.ASTJspComment(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclaration.ASTJspDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclarations.ASTJspDeclarations(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective.ASTJspDirective(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute.ASTJspDirectiveAttribute(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspDocument.ASTJspDocument(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpression.ASTJspExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspExpressionInAttribute.ASTJspExpressionInAttribute(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTJspScriptlet.ASTJspScriptlet(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTText.ASTText(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTUnparsedText.ASTUnparsedText(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.jsp.ast.ASTValueBinding.ASTValueBinding(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.PLSQLTokenManager.PLSQLTokenManager(Reader source)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonCondition.ASTComparisonCondition(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonCondition.setOperator(String operator)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTDatatype.ASTDatatype(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTIfStatement.ASTIfStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.ASTInnerCrossJoinClause(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.setCross(boolean cross)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.setNatural(boolean natural)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTInput.ASTInput(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTInput.setSourcecode(String sourcecode)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclarator.ASTMethodDeclarator(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTName.ASTName(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTName.setNameDeclaration(NameDeclaration nd)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.ASTOutOfLineConstraint(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.setType(ConstraintType type)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinClause.ASTOuterJoinClause(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinClause.setNatural(boolean natural)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.ASTOuterJoinType(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.setType(Type type)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageBody.ASTPackageBody(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTPackageSpecification.ASTPackageSpecification(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimaryPrefix.ASTPrimaryPrefix(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTQueryBlock.ASTQueryBlock(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.ASTRegexpLikeCondition(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.setMatchParam(String matchParam)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectIntoStatement.ASTSelectIntoStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSelectStatement.ASTSelectStatement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.ASTSubqueryOperation(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.setAll(boolean all)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.setIntersect(boolean intersect)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.setMinus(boolean minus)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.setUnion(boolean union)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerTimingPointSection.ASTTriggerTimingPointSection(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTTriggerUnit.ASTTriggerUnit(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.ASTTypeSpecification.ASTTypeSpecification(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.AbstractSelectStatement(int i)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.setAll(boolean all)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.setDistinct(boolean distinct)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.setUnique(boolean unique)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.ClassNameDeclaration(ASTPackageBody node)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.ClassNameDeclaration(ASTPackageSpecification node)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.ClassNameDeclaration(ASTQualifiedName node)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.ClassNameDeclaration(ASTTriggerUnit node)",2,1,0,0,1
"net.sourceforge.pmd.lang.plsql.symboltable.ClassNameDeclaration.ClassNameDeclaration(ASTTypeSpecification node)",2,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration.AbstractNameDeclaration(ScopedNode node)",2,1,0,0,1
"net.sourceforge.pmd.lang.symboltable.ApplierTest$MyFunction.MyFunction(int maxCallbacks)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.VfParser.VfParser(ParserOptions parserOptions)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.VfTokenManager.VfTokenManager(Reader source)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTArguments.ASTArguments(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTAttribute.ASTAttribute(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTAttributeValue.ASTAttributeValue(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTCData.ASTCData(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTCompilationUnit.ASTCompilationUnit(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTContent.ASTContent(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDeclaration.ASTDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeDeclaration.ASTDoctypeDeclaration(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.ASTDoctypeExternalId(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTDotExpression.ASTDotExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTElExpression.ASTElExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTElement.ASTElement(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTElement.setUnclosed(boolean unclosed)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTExpression.ASTExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTHtmlScript.ASTHtmlScript(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTIdentifier.ASTIdentifier(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTLiteral.ASTLiteral(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTNegationExpression.ASTNegationExpression(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vf.ast.ASTText.ASTText(int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vm.VmParser.VmParser(final ParserOptions parserOptions)",2,1,0,0,1
"net.sourceforge.pmd.lang.vm.VmTokenManager.VmTokenManager(final Reader source)",2,1,0,0,1
"net.sourceforge.pmd.lang.vm.ast.ASTMathNode.ASTMathNode(final int id)",2,1,0,0,1
"net.sourceforge.pmd.lang.vm.directive.BlockMacro.BlockMacro(String name)",2,1,0,0,1
"net.sourceforge.pmd.lang.xml.XmlParser.XmlParser(ParserOptions parserOptions)",2,1,0,0,1
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.AbstractNumericPropertyDescriptorTester(String typeName)",2,1,0,0,1
"net.sourceforge.pmd.properties.AbstractPackagedPropertyDescriptorTester.AbstractPackagedPropertyDescriptorTester(String typeName)",2,1,0,0,1
"net.sourceforge.pmd.properties.BooleanMultiProperty$BooleanMultiPBuilder.BooleanMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.BooleanProperty$BooleanPBuilder.BooleanPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.CharacterProperty$CharacterPBuilder.CharacterPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.DoubleMultiProperty$DoubleMultiPBuilder.DoubleMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.DoubleProperty$DoublePBuilder.DoublePBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.EnumeratedProperty$EnumPBuilder.EnumPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.FileProperty$FilePBuilder.FilePBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.FileProperty.named(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.FloatMultiProperty$FloatMultiPBuilder.FloatMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.FloatProperty$FloatPBuilder.FloatPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.IntegerMultiProperty$IntegerMultiPBuilder.IntegerMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.IntegerProperty$IntegerPBuilder.IntegerPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.LongMultiProperty$LongMultiPBuilder.LongMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.LongProperty$LongPBuilder.LongPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty$MethodMultiPBuilder.MethodMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.MethodMultiProperty.named(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.MethodProperty$MethodPBuilder.MethodPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.MethodProperty.named(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.RegexProperty$RegexPBuilder.RegexPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.StringProperty$StringPBuilder.StringPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty$TypeMultiPBuilder.TypeMultiPBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.TypeMultiProperty.named(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.TypeProperty$TypePBuilder.TypePBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.TypeProperty.named(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.builders.MultiValuePropertyBuilder.MultiValuePropertyBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.builders.SingleNumericPropertyBuilder.SingleNumericPropertyBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.properties.builders.SingleValuePropertyBuilder.SingleValuePropertyBuilder(String name)",2,1,0,0,1
"net.sourceforge.pmd.renderers.AbstractRendererTst.filter(String expected)",2,1,0,0,1
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedError(ConfigurationError error)",2,1,0,0,1
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedError(ProcessingError error)",2,1,0,0,1
"net.sourceforge.pmd.test.lang.ast.DummyNode.DummyNode(int id)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MessageBuilder.addComponent(U ignore)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.classVarargs(Class<?>... c)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.stringVarargs(String... s)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.vararg(Number a)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodFirstPhase.vararg(Number... a)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.notVararg(int a)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodThirdPhase.mostSpecific(Integer... b)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.MethodThirdPhase.mostSpecific(Number... b)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.PartBuilder.withSomeValue(String ignore)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.VarargsAsFixedArity.aMethod(Object s)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.VarargsAsFixedArity.aMethod(Object... s)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.VarargsZeroArity.aMethod(String... args)",2,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.WildcardMethod.useWildcard(GenericSuperType<?> param)",2,1,0,0,1
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.AbstractDelegateFilter(Filter<T> filter)",2,1,0,0,1
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.setFilter(Filter<T> filter)",2,1,0,0,1
"net.sourceforge.pmd.util.filter.NotFilter.NotFilter(Filter<T> filter)",2,1,0,0,1
"Foo.foo()",2,1,0,0,0
"GoodFile.foo()",2,1,0,0,0
"GoodFile2.foo()",2,1,0,0,0
"net.sourceforge.pmd.PMDException.getSeverity()",2,1,0,0,0
"net.sourceforge.pmd.ReadableDurationTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.RuleContextTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.RuleSetReference.getExcludes()",2,1,0,0,0
"net.sourceforge.pmd.RuleSetReference.getRuleSetFileName()",2,1,0,0,0
"net.sourceforge.pmd.RuleSetReference.isAllRules()",2,1,0,0,0
"net.sourceforge.pmd.RuleViolationTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.ant.PMDTaskTest.PMDTaskTest()",2,1,0,0,0
"net.sourceforge.pmd.ant.RuleSetWrapper.getFile()",2,1,0,0,0
"net.sourceforge.pmd.ant.SourceLanguage.getName()",2,1,0,0,0
"net.sourceforge.pmd.ant.SourceLanguage.getVersion()",2,1,0,0,0
"net.sourceforge.pmd.cpd.AnyTokenizerTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.cpd.ApexLanguage.ApexLanguage()",2,1,0,0,0
"net.sourceforge.pmd.cpd.CSVWithLinecountPerFileRenderer.CSVWithLinecountPerFileRenderer()",2,1,0,0,0
"net.sourceforge.pmd.cpd.CpddummyLanguage.CpddummyLanguage()",2,1,0,0,0
"net.sourceforge.pmd.cpd.EcmascriptLanguage.EcmascriptLanguage()",2,1,0,0,0
"net.sourceforge.pmd.cpd.JSPLanguage.JSPLanguage()",2,1,0,0,0
"net.sourceforge.pmd.cpd.MarkTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.cpd.MatchTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.cpd.PerlLanguage.PerlLanguage()",2,1,0,0,0
"net.sourceforge.pmd.cpd.TokenEntryTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.cpd.VfLanguage.VfLanguage()",2,1,0,0,0
"net.sourceforge.pmd.docs.MockedFileWriter$FileEntry.getContent()",2,1,0,0,0
"net.sourceforge.pmd.docs.MockedFileWriter$FileEntry.getFilename()",2,1,0,0,0
"net.sourceforge.pmd.docs.MockedFileWriter.getData()",2,1,0,0,0
"net.sourceforge.pmd.document.DocumentOperation.getRegionByLine()",2,1,0,0,0
"net.sourceforge.pmd.it.SourceDistributionIT.getSourceDistribution()",2,1,0,0,0
"net.sourceforge.pmd.jaxen.AttributeAxisIteratorTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest$MyNode.MyNode()",2,1,0,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest$MyNode.getClassName()",2,1,0,0,0
"net.sourceforge.pmd.jaxen.MatchesFunctionTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.apex.ApexJorjeLogging.ApexJorjeLogging()",2,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ASTFormalComment.getToken()",2,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.get()",2,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetrics.ApexMetrics()",2,1,0,0,0
"net.sourceforge.pmd.lang.apex.metrics.ApexMetricsHook.ApexMetricsHook()",2,1,0,0,0
"net.sourceforge.pmd.lang.ast.AbstractNodeTransversalTest.nextId()",2,1,0,0,0
"net.sourceforge.pmd.lang.ast.AbstractTokenManager.getSuppressMap()",2,1,0,0,0
"net.sourceforge.pmd.lang.ast.ParseException.ParseException()",2,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.saxon.IdGenerator.getNextId()",2,1,0,0,0
"net.sourceforge.pmd.lang.dfa.SequenceException.SequenceException()",2,1,0,0,0
"net.sourceforge.pmd.lang.dfa.StackObject.getDataFlowNode()",2,1,0,0,0
"net.sourceforge.pmd.lang.dfa.StackObject.getType()",2,1,0,0,0
"net.sourceforge.pmd.lang.dfa.VariableAccessException.VariableAccessException()",2,1,0,0,0
"net.sourceforge.pmd.lang.dfa.pathfinder.PathElement.isPseudoPathElement()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.getPrintableName()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.isCompound()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator.setCompound()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBlock.containsComment()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBlock.setContainsComment()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral.isTrue()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral.setTrue()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTCastExpression.hasIntersectionTypes()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.containsComment()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration.setContainsComment()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTInitializer.isStatic()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTInitializer.setStatic()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration.isOpen()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTName.getNameDeclaration()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.setUsesSuperModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.setUsesThisModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.usesSuperModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix.usesThisModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel.isDefault()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorIdTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.JavadocElement.tag()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.MethodLikeNode.getPrintableName()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.DataFlowNodeTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.dfa.StructureTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.JavaMetrics.JavaMetrics()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.MetricsHook.MetricsHook()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.GetterDetection.getValue()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.GetterDetection.isBool()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.GetterDetection.value()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData$NestedClass.NestedClass()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData$NestedClass.nestedMethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.MetricsVisitorTestData()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.getX()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.getY()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.mymethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.mymethod2()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.metrics.testdata.MetricsVisitorTestData.mystatic1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.coverFinal()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.coverStatic()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.forbidFinal()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaFieldSigMask.forbidStatic()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.coverAbstract()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.signature.JavaOperationSigMask.forbidAbstract()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData$NestedClass.NestedClass()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData$NestedClass.nestedMethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.MultifileVisitorTestData()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.getX()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.getY()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.mymethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.mymethod2()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData.mystatic1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2$NestedClass.NestedClass()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2$NestedClass.nestedMethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.MultifileVisitorTestData2()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.getX()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.getY()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.mymethod1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.mymethod2()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.MultifileVisitorTestData2.mystatic1()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.getT()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.getX()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.getY()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.getZ()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SubclassPrivateNoOverride.foo()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SuperclassWithPrivate.foo()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.SuperclassWithStatic.SuperclassWithStatic()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.ClassWithStringConstants.ClassWithStringConstants()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.errorprone.DaaRuleViolation.getType()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.multithreading.UnsynchronizedStaticDateFormatterRule.UnsynchronizedStaticDateFormatterRule()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.ImageFinderFunctionTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.NameOccurrencesTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.ScopeCreationVisitorTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.java.xpath.JavaFunctions.JavaFunctions()",2,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId.isHasPublicId()",2,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.ASTElement.isUnclosed()",2,1,0,0,0
"net.sourceforge.pmd.lang.jsp.ast.JspPageStyleTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.metrics.MetricKeyUtil.MetricKeyUtil()",2,1,0,0,0
"net.sourceforge.pmd.lang.metrics.internal.DummyMetricMemoizer.DummyMetricMemoizer()",2,1,0,0,0
"net.sourceforge.pmd.lang.metrics.internal.DummyProjectMemoizer.DummyProjectMemoizer()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTComparisonCondition.getOperator()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTIfStatement.hasElse()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTIfStatement.setHasElse()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.isCross()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTInnerCrossJoinClause.isNatural()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTInput.getSourcecode()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTName.getNameDeclaration()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.getType()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.isCheck()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.isForeignKey()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.isPrimaryKey()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOutOfLineConstraint.isUnique()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinClause.isNatural()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.getType()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.isFull()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.isLeft()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTOuterJoinType.isRight()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimaryPrefix.setUsesSelfModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTPrimaryPrefix.usesSelfModifier()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTRegexpLikeCondition.getMatchParam()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.isAll()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.isIntersect()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.isMinus()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.ASTSubqueryOperation.isUnion()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.isAll()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.isDistinct()",2,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.AbstractSelectStatement.isUnique()",2,1,0,0,0
"net.sourceforge.pmd.lang.rule.AbstractDelegateRule.getRule()",2,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.ApplierTest$MyFunction.getNumCallbacks()",2,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.ApplierTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTDoctypeExternalId.isHasPublicId()",2,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.ASTElement.isUnclosed()",2,1,0,0,0
"net.sourceforge.pmd.lang.vf.ast.VfPageStyleTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.properties.BooleanPropertyTest.BooleanPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.CharacterPropertyTest.CharacterPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.DoublePropertyTest.DoublePropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.FloatPropertyTest.FloatPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.IntegerPropertyTest.IntegerPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.LongPropertyTest.LongPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.MultiValuePropertyDescriptor.type()",2,1,0,0,0
"net.sourceforge.pmd.properties.PropertyFactory.PropertyFactory()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.RegexPropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testAddAttributesMulti()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testAsDelimitedString()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testErrorForBadMulti()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testErrorForCorrectMulti()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testFactoryMultiValueCustomDelimiter()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testFactoryMultiValueDefaultDelimiter()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testIsMultiValueMulti()",2,1,0,0,0
"net.sourceforge.pmd.properties.RegexPropertyTest.testTypeMulti()",2,1,0,0,0
"net.sourceforge.pmd.properties.SingleValuePropertyDescriptor.type()",2,1,0,0,0
"net.sourceforge.pmd.properties.TypePropertyTest.TypePropertyTest()",2,1,0,0,0
"net.sourceforge.pmd.properties.constraints.ConstraintFactory.ConstraintFactory()",2,1,0,0,0
"net.sourceforge.pmd.properties.constraints.NumericConstraints.NumericConstraints()",2,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getSourceCodeFilename()",2,1,0,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.getHeader()",2,1,0,0,0
"net.sourceforge.pmd.renderers.CSVRendererTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.renderers.CodeClimateIssue.CodeClimateIssue()",2,1,0,0,0
"net.sourceforge.pmd.renderers.EmptyRenderer.EmptyRenderer()",2,1,0,0,0
"net.sourceforge.pmd.renderers.PapariTextRendererTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.renderers.TextPadRendererTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.renderers.VBHTMLRendererTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getAverage()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getCount()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getHighValue()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getLowValue()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getMetricName()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getStandardDeviation()",2,1,0,0,0
"net.sourceforge.pmd.stat.Metric.getTotal()",2,1,0,0,0
"net.sourceforge.pmd.stat.MockStatisticalRule.MockStatisticalRule()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.ClassWithImportOnDemand.foo()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.FieldAccessGenericSimple$Nested.foo()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodGenericExplicit.foo()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.MethodPotentialApplicability.noArguments()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.SuperExpression.SuperExpression()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.ThisExpression.ThisExpression()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.VarargsZeroArity.aMethod()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.AbstractReturnType.getList()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.primitiveStaticMethod()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.staticCharMethod()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.staticInstanceMethod()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticSuper.primitiveStaticMethod()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.SuperClassA.inheritedA()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.SuperClassB.inheritedB()",2,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.SuperType.myMethod()",2,1,0,0,0
"net.sourceforge.pmd.util.CompoundListTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.util.StringUtilTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.AbstractDelegateFilter()",2,1,0,0,0
"net.sourceforge.pmd.util.filter.AbstractDelegateFilter.getFilter()",2,1,0,0,0
"net.sourceforge.pmd.util.filter.NotFilter.NotFilter()",2,1,0,0,0
"net.sourceforge.pmd.util.filter.RegexStringFilterTest.suite()",2,1,0,0,0
"net.sourceforge.pmd.util.viewer.model.ViewerModelEvent.getParameter()",2,1,0,0,0
"net.sourceforge.pmd.util.viewer.model.ViewerModelEvent.getReason()",2,1,0,0,0
"net.sourceforge.pmd.util.viewer.model.ViewerModelEvent.getSource()",2,1,0,0,0
"net.sourceforge.pmd.lang.rule.RuleViolationFactory.addViolation(RuleContext ruleContext, Rule rule, Node node, String message, int beginLine, int endLine, Object[] args)",1,1,0,0,7
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.appendXmlEscaped(StringBuilder buf, String src, boolean supportUTF8)",1,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.AbstractClass.arrayParams(String dflt, int[] keys, StringBuilder[] labels)",1,1,0,0,3
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.appendXmlEscaped(StringBuilder buf, String src)",1,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLNode.childrenAccept(PLSQLParserVisitor visitor, Object data)",1,1,0,0,2
"net.sourceforge.pmd.lang.plsql.ast.PLSQLNode.jjtAccept(PLSQLParserVisitor visitor, Object data)",1,1,0,0,2
"net.sourceforge.pmd.lang.java.dfa.DAAPathFinderTest.execute(CurrentPath path)",1,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.HierarchyWithSeveralBridges$SubclassOne.foo(T node)",1,1,0,0,1
"net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.bar(InnerClass.TheInnerClass arg)",1,1,0,0,1
"net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.baz(EnumTest e)",1,1,0,0,1
"net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.foo(TheInnerClass arg)",1,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.InnerClass.foo(TheInnerClass arg)",1,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.ApexQualifiableNode.getQualifiedName()",1,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.EmptySymbolProvider.EmptySymbolProvider()",1,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.TestQueryValidators.TestQueryValidators()",1,1,0,0,0
"net.sourceforge.pmd.lang.apex.rule.ApexRuleViolationFactory.ApexRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.ast.QualifiedName.toString()",1,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleViolationFactory.EcmascriptRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.getQualifiedName()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration.getSignature()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.Dimensionable.getArrayDepth()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.Dimensionable.isArray()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.JavaNode.getScope()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.MethodLikeNode.getQualifiedName()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.JavaRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.CloneableInterfaceOverride.clone()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.InterfaceWithNoSuperClass.toString()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PackagePrivateUtils.PackagePrivateUtils()",1,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.unusedimports.PublicUtils.PublicUtils()",1,1,0,0,0
"net.sourceforge.pmd.lang.jsp.rule.JspRuleViolationFactory.JspRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.plsql.ast.PLSQLNode.getScope()",1,1,0,0,0
"net.sourceforge.pmd.lang.plsql.rule.PLSQLRuleViolationFactory.PLSQLRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.vf.rule.VfRuleViolationFactory.VfRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.vm.rule.VmRuleViolationFactory.VmRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.lang.wsdl.rule.AbstractWsdlRuleTest$MyRule.MyRule()",1,1,0,0,0
"net.sourceforge.pmd.lang.xml.rule.AbstractXmlRuleTest$MyRule.MyRule()",1,1,0,0,0
"net.sourceforge.pmd.lang.xml.rule.XmlRuleViolationFactory.XmlRuleViolationFactory()",1,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.GenericMethodsImplicit.foo()",1,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.UsesJavaStreams$WithStaticAndDefaultMethod.myToString()",1,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.UsesJavaStreams$WithStaticAndDefaultMethod.performOn()",1,1,0,0,0
"net.sourceforge.pmd.util.EmptyIterator.EmptyIterator()",1,1,0,0,0
"net.sourceforge.pmd.util.filter.DirectoryFilter.DirectoryFilter()",1,1,0,0,0
"Foo.bar()",0,1,1,0,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.merge(K key, V value, BiFun<? super V,? super V,? extends V> mf)",0,1,0,0,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.replace(K key, V oldVal, V newVal)",0,1,0,0,3
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.SignatureCountTestData(int x, int y, int z)",0,1,0,0,3
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.replaceString(String original, String oldString, String newString)",0,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericInterfaceWithOverloads.multi(ASTImportDeclaration node, T data, R r)",0,1,0,0,3
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericInterfaceWithOverloads.multi(ASTPackageDeclaration node, T data, R r)",0,1,0,0,3
"net.sourceforge.pmd.renderers.ColumnDescriptor$Accessor.get(int idx, T violation, String lineSeparator)",0,1,0,0,3
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap$BiFun.apply(A a, B b)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.compute(K key, BiFun<? super K,? super V,? extends V> mf)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.computeIfAbsent(K key, Fun<? super K,? extends V> mf)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.computeIfPresent(K key, BiFun<? super K,? super V,? extends V> mf)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.getValueOrDefault(Object key, V defaultValue)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.put(K key, V value)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.putIfAbsent(K key, V value)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.remove(Object key, Object value)",0,1,0,0,2
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.replace(K key, V value)",0,1,0,0,2
"net.sourceforge.pmd.cpd.CPDListener.addedFile(int fileCount, File file)",0,1,0,0,2
"net.sourceforge.pmd.cpd.Tokenizer.tokenize(SourceCode sourceCode, Tokens tokenEntries)",0,1,0,0,2
"net.sourceforge.pmd.cpd.renderer.CPDRenderer.render(Iterator<Match> matches, Writer writer)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visit(ClassNode classNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visit(ConstructorNode constructorNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visit(FieldNode fieldNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visit(MethodNode methodNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visit(UsageGraph usageGraph, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitConstructors(ClassNode classNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitFields(ClassNode classNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitMethods(ClassNode classNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitUse(MemberNode use, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitUser(MemberNode user, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitUsers(MemberNode memberNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitor.visitUses(MemberNode memberNode, Object data)",0,1,0,0,2
"net.sourceforge.pmd.dcd.graph.NodeVisitorAcceptor.accept(NodeVisitor visitor, Object data)",0,1,0,0,2
"net.sourceforge.pmd.docs.FileWriter.write(Path path, List<String> lines)",0,1,0,0,2
"net.sourceforge.pmd.lang.DataFlowHandler.createDataFlowNode(List<DataFlowNode> dataFlow, Node node)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTAnnotation node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTAnnotationParameter node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTAnonymousClass node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTArrayLoadExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTArrayStoreExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTAssignmentExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBinaryExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBindExpressions node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBooleanExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBreakStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTBridgeMethodCreator node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTCastExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTCatchBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTClassRefExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTConstructorPreamble node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTConstructorPreambleStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTContinueStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlDeleteStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlInsertStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlMergeStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlUndeleteStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlUpdateStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDmlUpsertStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTDoLoopStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTExpressionStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTField node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTFieldDeclaration node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTFieldDeclarationStatements node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTForEachStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTForLoopStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTFormalComment node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTIfBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTIfElseBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTIllegalStoreExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTInstanceOfExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTJavaMethodCallExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTJavaVariableExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTLiteralExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTMapEntryNode node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTMethod node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTMethodBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTMethodCallExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTModifier node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTModifierNode node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTModifierOrAnnotation node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTMultiStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNestedExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNestedStoreExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewKeyValueObjectExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewListInitExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewListLiteralExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewMapInitExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewMapLiteralExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewObjectExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewSetInitExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTNewSetLiteralExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTPackageVersionExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTParameter node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTPostfixExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTPrefixExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTProperty node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTReferenceExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTReturnStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTRunAsBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTSoqlExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTSoslExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTStandardCondition node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTStatementExecuted node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTSuperMethodCallExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTSuperVariableExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTTernaryExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTThisMethodCallExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTThisVariableExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTThrowStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTTriggerVariableExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTTryCatchFinallyBlockStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserClass node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserClassMethods node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserEnum node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserExceptionMethods node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserInterface node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTUserTrigger node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTVariableDeclaration node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTVariableDeclarationStatements node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTVariableExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(ASTWhileLoopStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.apex.ast.ApexParserVisitor.visit(AbstractApexNodeBase node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTArrayComprehension node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTArrayComprehensionLoop node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTArrayLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTAssignment node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTAstRoot node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTBlock node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTBreakStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTCatchClause node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTComment node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTConditionalExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTContinueStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTDoLoop node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTElementGet node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTEmptyExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTExpressionStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTForInLoop node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTForLoop node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTFunctionCall node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTFunctionNode node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTIfStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTInfixExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTKeywordLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTLabel node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTLabeledStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTLetNode node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTName node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTNewExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTNumberLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTObjectLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTObjectProperty node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTParenthesizedExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTPropertyGet node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTRegExpLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTReturnStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTScope node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTStringLiteral node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTSwitchCase node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTSwitchStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTThrowStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTTryStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTUnaryExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTVariableDeclaration node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTVariableInitializer node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTWhileLoop node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTWithStatement node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTXmlDotQuery node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTXmlExpression node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTXmlMemberGet node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(ASTXmlString node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParserVisitor.visit(EcmascriptNode<?> node, Object data)",0,1,0,0,2
"net.sourceforge.pmd.lang.java.multifile.testdata.SignatureCountTestData.SignatureCountTestData(int x, int y)",0,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericInterfaceWithOverloads.visit(ASTCompilationUnit node, T data)",0,1,0,0,2
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.GenericInterfaceWithOverloads.visit(ASTPackageDeclaration node, T data)",0,1,0,0,2
"Foo.Foo(Bar<A,B> t)",0,1,0,0,1
"Foo.bar(@SuppressWarnings('foo') int x)",0,1,0,0,1
"Java9Identifier$Lambda.a(int _)",0,1,0,0,1
"Test.bar(Object... args)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap$Fun.apply(A a)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.containsKey(K key)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.containsValue(V value)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.findKey(V value)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.get(K key)",0,1,0,0,1
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.remove(K key)",0,1,0,0,1
"net.sourceforge.pmd.cpd.CPDListener.phaseUpdate(int phase)",0,1,0,0,1
"net.sourceforge.pmd.cpd.Language.setProperties(Properties properties)",0,1,0,0,1
"net.sourceforge.pmd.cpd.Renderer.render(Iterator<Match> matches)",0,1,0,0,1
"net.sourceforge.pmd.lang.AbstractParser.createTokenManager(Reader source)",0,1,0,0,1
"net.sourceforge.pmd.lang.Language.hasVersion(String version)",0,1,0,0,1
"net.sourceforge.pmd.lang.TokenManager.setFileName(String fileName)",0,1,0,0,1
"net.sourceforge.pmd.lang.apex.ast.CanSuppressWarnings.hasSuppressWarningsAnnotationFor(Rule rule)",0,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.setDataFlowNode(DataFlowNode dataFlowNode)",0,1,0,0,1
"net.sourceforge.pmd.lang.ast.Node.setImage(String image)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.addPathToChild(DataFlowNode child)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.isType(NodeType type)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.removePathToChild(DataFlowNode child)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.reverseParentPathsTo(DataFlowNode destination)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.setType(NodeType type)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.DataFlowNode.setVariableAccess(List<VariableAccess> variableAccess)",0,1,0,0,1
"net.sourceforge.pmd.lang.dfa.pathfinder.Executable.execute(CurrentPath path)",0,1,0,0,1
"net.sourceforge.pmd.lang.ecmascript.ast.TrailingCommaNode.setTrailingComma(boolean tailingComma)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setAbstract(boolean isAbstract)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setDefault(boolean isDefault)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setFinal(boolean isFinal)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setModifiers(int modifiers)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setNative(boolean isNative)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setPrivate(boolean isPrivate)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setProtected(boolean isProtected)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setPublic(boolean isPublic)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setStatic(boolean isStatic)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setStrictfp(boolean isStrictfp)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setSynchronized(boolean isSynchronized)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setTransient(boolean isTransient)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.AccessNode.setVolatile(boolean isVolatile)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.CanSuppressWarnings.hasSuppressWarningsAnnotationFor(Rule rule)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.ast.JavaNode.setScope(Scope scope)",0,1,0,0,1
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.HierarchyWithSeveralBridges.foo(T node)",0,1,0,0,1
"net.sourceforge.pmd.lang.plsql.ast.PLSQLNode.setScope(Scope scope)",0,1,0,0,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRule.addDataPoint(DataPoint point)",0,1,0,0,1
"net.sourceforge.pmd.lang.rule.stat.StatisticalRule.getViolationParameters(DataPoint point)",0,1,0,0,1
"net.sourceforge.pmd.properties.constraints.ConstraintFactory$Predicate.test(T t)",0,1,0,0,1
"net.sourceforge.pmd.properties.constraints.PropertyConstraint.test(T value)",0,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.Converter.convert(A source)",0,1,0,0,1
"net.sourceforge.pmd.typeresolution.testdata.dummytypes.ConverterFactory.getConverter(Class<U> targetType)",0,1,0,0,1
"net.sourceforge.pmd.util.designer.LineGetter.getLine(int number)",0,1,0,0,1
"net.sourceforge.pmd.util.filter.Filter.filter(T obj)",0,1,0,0,1
"net.sourceforge.pmd.util.viewer.model.ViewerModelListener.viewerModelChanged(ViewerModelEvent e)",0,1,0,0,1
"Foo.Foo()",0,1,0,0,0
"Foo.assert()",0,1,0,0,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.clear()",0,1,0,0,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.entrySet()",0,1,0,0,0
"com.concurrent_ruby.ext.jsr166e.ConcurrentHashMap.size()",0,1,0,0,0
"net.sourceforge.pmd.cpd.Language.getExtensions()",0,1,0,0,0
"net.sourceforge.pmd.cpd.Language.getFileFilter()",0,1,0,0,0
"net.sourceforge.pmd.cpd.Language.getName()",0,1,0,0,0
"net.sourceforge.pmd.cpd.Language.getTerseName()",0,1,0,0,0
"net.sourceforge.pmd.cpd.Language.getTokenizer()",0,1,0,0,0
"net.sourceforge.pmd.dcd.DCD.DCD()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByLine.getBeginColumn()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByLine.getBeginLine()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByLine.getEndColumn()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByLine.getEndLine()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByOffset.getLength()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByOffset.getOffset()",0,1,0,0,0
"net.sourceforge.pmd.document.RegionByOffset.getOffsetAfterEnding()",0,1,0,0,0
"net.sourceforge.pmd.lang.DataFlowHandler.getLabelStatementNodeClass()",0,1,0,0,0
"net.sourceforge.pmd.lang.Parser.getSuppressMap()",0,1,0,0,0
"net.sourceforge.pmd.lang.TokenManager.getNextToken()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.getModifiers()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isAbstract()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isFinal()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isPrivate()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isProtected()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isPublic()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isStatic()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.AccessNode.isTransient()",0,1,0,0,0
"net.sourceforge.pmd.lang.apex.ast.ApexParserTestHelpers.ApexParserTestHelpers()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getBeginColumn()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getBeginLine()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getDataFlowNode()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getEndColumn()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.getEndLine()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.Node.jjtGetId()",0,1,0,0,0
"net.sourceforge.pmd.lang.ast.xpath.AttributeNode.getAttributeIterator()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DFAGraphMethod.getName()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DFAGraphRule.getMethods()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getChildren()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getFlow()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getIndex()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getLine()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getNode()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getParents()",0,1,0,0,0
"net.sourceforge.pmd.lang.dfa.DataFlowNode.getVariableAccess()",0,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.DestructuringNode.isDestructuring()",0,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptNode.hasSideEffects()",0,1,0,0,0
"net.sourceforge.pmd.lang.ecmascript.ast.TrailingCommaNode.isTrailingComma()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.getModifiers()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isAbstract()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isDefault()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isFinal()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isNative()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isPackagePrivate()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isPrivate()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isProtected()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isPublic()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isStatic()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isStrictfp()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isSynchronized()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isTransient()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.AccessNode.isVolatile()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.testdata.PrivateMethodsInInterface1$Interface2$InnerClass.privateMethod()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.testdata.PrivateMethodsInInterface1$Interface3.privateMethod()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.testdata.PrivateMethodsInInterface2$Interface1.privateMethodInInterface1()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.testdata.PrivateMethodsInInterface2$Interface2$InnerClass.privateMethod()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.ast.testdata.PrivateMethodsInInterface2$Interface3.privateMethod()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride.CloneableInterface.clone()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypedNameDeclaration.getType()",0,1,0,0,0
"net.sourceforge.pmd.lang.java.symboltable.TypedNameDeclaration.getTypeImage()",0,1,0,0,0
"net.sourceforge.pmd.lang.symboltable.ScopedNode.getScope()",0,1,0,0,0
"net.sourceforge.pmd.lang.xpath.PMDFunctions.PMDFunctions()",0,1,0,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.max()",0,1,0,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.min()",0,1,0,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.multiBuilder()",0,1,0,0,0
"net.sourceforge.pmd.properties.AbstractNumericPropertyDescriptorTester.singleBuilder()",0,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpected()",0,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedEmpty()",0,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getExpectedMultiple()",0,1,0,0,0
"net.sourceforge.pmd.renderers.AbstractRendererTst.getRenderer()",0,1,0,0,0
"net.sourceforge.pmd.renderers.Renderer.flush()",0,1,0,0,0
"net.sourceforge.pmd.testframework.AbstractTokenizerTest.buildTokenizer()",0,1,0,0,0
"net.sourceforge.pmd.testframework.AbstractTokenizerTest.getSampleCode()",0,1,0,0,0
"net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand$Inner.createTokenizer()",0,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.Inner.get()",0,1,0,0,0
"net.sourceforge.pmd.typeresolution.testdata.MessageBuilder.newComponent()",0,1,0,0,0
"net.sourceforge.pmd.util.NumericConstants.NumericConstants()",0,1,0,0,0
"net.sourceforge.pmd.util.viewer.Viewer.Viewer()",0,1,0,0,0
"net.sourceforge.pmd.util.viewer.gui.ActionCommands.ActionCommands()",0,1,0,0,0
"net.sourceforge.pmd.util.viewer.model.AttributeToolkit.AttributeToolkit()",0,1,0,0,0
"net.sourceforge.pmd.util.viewer.util.NLS.NLS()",0,1,0,0,0
