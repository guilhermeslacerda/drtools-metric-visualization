"method","loc","cyclo","calls","nbd","param"
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.internalCreateBoard()",35,15,7,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonePainter.getPieceImageToDraw(boolean black, boolean hover, boolean dead, boolean lastPlayed)",30,15,0,1,4
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.isDeadEnd(Class<?> type)",17,13,4,1,1
"sneer.bricks.hardware.io.impl.FolderCopierToWorkaroundCommonsIoBug.doCopyDirectory(File srcDir, File destDir, FileFilter filter, boolean preserveFileDate, List exclusionList)",43,12,14,3,5
"basis.lang.Immutable.isImmutable(Class<?> type)",15,12,2,1,1
"sneer.bricks.hardware.io.impl.FolderCopierToWorkaroundCommonsIoBug.copyDirectory(File srcDir, File destDir, FileFilter filter, boolean preserveFileDate)",30,11,14,3,4
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.calculateStatus()",15,11,7,1,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.countTerritories()",25,10,7,3,0
"basis.lang.Pair.equals(Object obj)",20,10,4,1,1
"snype.whisper.audio.AudioCommon.fillInputDevices(Mixer mixer)",39,9,15,4,1
"snype.whisper.audio.AudioCommon.fillOutputDevices(Mixer mixer)",36,9,15,4,1
"snype.whisper.audio.AudioCommon.bestAvailableMixerForInput()",13,9,14,4,0
"snype.whisper.audio.AudioCommon.bestAvailableMixerForOutput()",13,9,14,4,0
"sneer.bricks.snapps.games.go.impl.logic.Move.equals(Object obj)",15,9,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.play(int x, int y, GameStateContext gameStateContext)",36,8,13,2,3
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.prepareForDownload(final TrackEndorsement endorsement)",17,8,17,2,1
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.getIcon()",26,8,11,1,0
"basis.brickness.ClassDefinition.equals(Object obj)",17,8,4,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.decideWinner()",31,7,5,3,0
"basis.testsupport.CleanTestBase.stopIfNecessary(Thread thread)",13,7,13,2,1
"sneer.bricks.snapps.games.go.impl.logic.Intersection.fillGroupWithNeighbours(GoBoard.StoneColor stoneColor, Set<Intersection> group)",10,7,6,2,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.play(final int x, final int y, final GameStateContext gameStateContext)",17,7,9,1,3
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.equals(Object obj)",12,7,3,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.equals(Object obj)",12,7,3,1,1
"sneer.bricks.identity.keys.gui.impl.PublicKeyInitDialogImpl.isAlphanumeric(char c)",5,7,0,1,1
"sneer.bricks.softwaresharing.gui.impl.BrickTreeCellRenderer.getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus_)",21,7,9,0,7
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.wrapIfNecessary(Object object, ProducerX<Object,Exception> path)",12,7,7,0,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.countDeadStones()",15,6,1,3,0
"sneer.bricks.snapps.games.go.impl.logic.IntersectionUtils.sameSituation(Intersection[][] intersectionsA, Intersection[][] intersectionsB)",12,6,0,3,2
"sneer.main.SneerVersionUpdater.copyFolder(File original, File copy, FileFilter filter)",17,6,10,2,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getLinkedCellCount(BoardCell boardCell, Set<BoardCell> alreadyCounted, boolean ignoreOwner, BoardCell skipCell)",15,6,8,2,4
"sneer.main.SneerVersionUpdater.deleteFolder(File folder, FileFilter filter)",15,6,4,2,2
"sneer.bricks.network.computers.channels.impl.PriorityQueue.next()",15,6,4,2,0
"sneer.bricks.snapps.games.go.impl.logic.Intersection.killGroupIfSurrounded(GoBoard.StoneColor color)",12,6,2,2,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitMethodInterceptionFor(InterceptedMethod m, String continuationClass)",61,6,39,1,2
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitContinuationFor(InterceptedMethod m)",55,6,45,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.getPaths(Hash hash, boolean isFolder)",14,6,5,1,2
"basis.lang.Immutable.equals(Object other)",10,6,4,1,1
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.getIcon()",15,6,8,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.equals(Object obj)",9,6,6,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.isNetworkClass(String className)",8,6,10,0,1
"sneer.snapps.games.drones.matches.impl.MatchImpl.result()",8,6,5,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressImpl.InternetAddressImpl(Contact contact, String host, int port)",8,6,4,0,3
"sneer.bricks.skin.imgselector.impl.ImagePreviewAccessory.propertyChange(PropertyChangeEvent changeEvent)",20,5,11,4,1
"sneer.bricks.hardware.io.impl.FolderCopierToWorkaroundCommonsIoBug.doCopyFile(File srcFile, File destFile, boolean preserveFileDate)",24,5,9,3,3
"sneer.bricks.snapps.games.go.impl.logic.IntersectionUtils.print(final Intersection[][] intersections)",15,5,5,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.scrollVerticallyIfOnScrollRegion(final int mouseX, final int mouseY)",14,5,5,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mouseReleased(MouseEvent e)",13,5,12,3,1
"sneer.bricks.snapps.games.go.impl.logic.IntersectionUtils.setupLine(Intersection[][] intersection, int y, String line)",12,5,1,3,3
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.connectInternally(Intersection[][] intersections)",8,5,2,3,1
"sneer.bricks.snapps.diff.text.gui.impl.TextBlockPainter.append(final List<TextBlock> blocks)",31,5,4,2,1
"sneer.bricks.snapps.wind.tests.WindTest.testSortedShoutsHeard()",30,5,21,2,0
"basis.lang.CacheMap.get(K key, FunctorX<K,V,X> functorToUseIfAbsent, boolean blocking)",27,5,9,2,3
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.TranslucentSupportImpl()",17,5,6,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.tryToWriteBlocksInSequence()",15,5,9,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.tryToWriteBlocksInSequence()",15,5,9,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.areaAllCellsFilledByPlayer(Player player)",14,5,4,2,1
"basis.brickness.testsupport.BrickTestRunner$TestInstanceEnvironment.provideContribution(Class<T> intrface)",13,5,3,2,1
"basis.brickness.impl.ClassLoaderForBricks.defineClassesAndReturn(List<ClassDefinition> classDefs, String classNameToReturn)",12,5,2,2,2
"basis.testsupport.CleanTestBase.recursiveDelete(File folder)",10,5,7,2,1
"sneer.main.SneerVersionUpdater.deleteFileOrFolder(File file, FileFilter filter)",10,5,4,2,2
"basis.lang.arrays.ImmutableArray.contains(Object o)",10,5,1,2,1
"sneer.bricks.pulp.probe.impl.ProbeImpl.isClearToSend(Tuple tuple)",9,5,4,2,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonePainter.paintStoneOnCoordinates(Graphics2D graphics, int x, int y, boolean black, boolean hover, boolean dead, boolean lastPlayed)",32,5,6,1,7
"sneer.bricks.software.diff.impl.TextComparatorImpl.toPrettyHtml(List<TextBlock> blocks)",24,5,19,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.handle(DatagramPacket packet)",24,5,17,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.play(Move move)",19,5,4,1,1
"sneer.bricks.network.social.rendezvous.impl.RendezvousImpl.receiveCallFromUnknownCaller(final Call call)",18,5,20,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.CellAttack.doAttackReturnOutcomeOrNull(Cell attacker, Cell defender)",18,5,10,1,2
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",17,5,8,1,5
"sneer.bricks.expression.files.map.impl.FolderContentsGetter.accumulateChild(FileMapData data, String candidate, String folder, Collection<FileOrFolder> result, boolean directChildrenOnly)",16,5,7,1,5
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.move(int oldIndex, int newIndex)",16,5,6,1,2
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.runDaemonWithNameContaining(String partOfName)",16,5,5,1,1
"sneer.bricks.hardware.cpu.threads.impl.Daemons.killAllInstances()",16,5,4,1,0
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.add(Tuple tuple)",11,5,5,1,1
"basis.environments.Environments.my(Class<T> need)",9,5,4,1,1
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Happy.react()",8,5,8,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.callCallbacks(PlayOutcome playOutcome)",8,5,7,1,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.currentContentsFor(String relativePath)",7,5,6,1,1
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.executeAndShowResult()",7,5,6,1,0
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.severityTag(LightType type)",7,5,0,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.isAccessibleInstanceMethod(int modifiers)",6,5,4,1,1
"dfcsantos.music.impl.TrackSourceStrategy.controlKillTimer()",5,5,4,1,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl$ListContactsPopUpSupport.tryToShowContactMenu(MouseEvent e)",13,5,20,0,1
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.handleFailure(final String response)",11,5,4,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.requiresRegistration(Object object)",10,5,4,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.isSharedByAllParties(String className)",6,5,7,0,1
"snype.whisper.audio.AudioCommon.refreshDeviceList()",25,4,16,4,0
"sneer.bricks.skin.imgselector.impl.ImageSelectorImpl.open(Consumer<Image> imageSetter)",12,4,5,4,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.copy(Intersection[][] intersections)",14,4,2,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.scrollHorizontallyIfOnScrollRegion(final int mouseX)",12,4,4,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.previousEquivalent(Intersection intersection)",9,4,0,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.killSurroundedStones(StoneColor color)",8,4,1,3,1
"sneer.bricks.expression.snoard.impl.SnoardImpl.receiveClipboard(final SnoardTuple value)",41,4,18,2,1
"basis.languagesupport.JarFinder.findJars(File root, String relative)",27,4,10,2,2
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.setBestBounds(Window window, Component baseComponent, int horizontalLimit)",26,4,5,2,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonesInPlayPainter.paintStoneOnPosition(Graphics2D graphics, final GoBoard _board, int x, int y)",22,4,7,2,4
"basis.environments.ResolvingCache.produce(K key)",22,4,7,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.killDownloadWithTheLowestRatingWorseThan(float endorsementMatchRating)",17,4,9,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.pass(GameStateContext gameStateContext)",16,4,8,2,1
"snype.whisper.skin.audio.mic.impl.MicImpl.work()",14,4,6,2,0
"sneer.bricks.snapps.games.go.impl.logic.Intersection.markDeadStones()",13,4,1,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.tryToReceiveFileBlock(FileContents contents)",12,4,6,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.tryToReceiveFileBlock(FileContents contents)",12,4,6,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.requestsToPublishIfNecessary()",11,4,8,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.requestsToPublishIfNecessary()",11,4,8,2,0
"basis.testsupport.CleanTestBase.deleteFolder(File folder)",9,4,6,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.isBrickAvailable(final String brickName, final String brickStatus)",8,4,12,2,2
"basis.testsupport.CleanTestBase.failedWith(Method method, Throwable thrown)",8,4,4,2,2
"basis.testsupport.CleanTestBase.waitForTermination(Thread thread)",7,4,4,2,1
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.isNewAddress(Contact contact, String host, int port)",6,4,5,2,3
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.repliesFor(DatagramPacket packet)",23,4,15,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.mapFolder(Path folder)",19,4,9,1,1
"snype.whisper.audio.SpeexMicrophone.tryToRun()",19,4,7,1,0
"sneer.bricks.identity.keys.gui.impl.PublicKeyInitDialogImpl.promptForPassphrase()",19,4,5,1,0
"sneer.bricks.softwaresharing.gui.impl.FileVersionWrapper.FileVersionWrapper(FileVersion fileVersion)",19,4,3,1,1
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light_, String caption, String helpMessage, Throwable t, int timeout)",18,4,9,1,5
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.tryToOpen()",17,4,17,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finishIfLocallyAvailable()",15,4,7,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finishIfLocallyAvailable()",15,4,7,1,0
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.visitFileContents(byte[] fileContents)",15,4,6,1,1
"sneer.bricks.expression.files.map.impl.FolderContentsGetter.result()",14,4,5,1,0
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.detectCycle(T vertex, List<T> cycle)",13,4,7,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.sortedEntries(Path folder)",13,4,7,1,1
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.mySealIsGreaterThanHis(Contact contact)",13,4,7,1,1
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.visitLater(TourImpl tour)",13,4,6,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.visitEnd()",13,4,6,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.handleHailTimestamp(SocketAddress sighting, long timestamp)",12,4,7,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HUDPainter.draw(final Graphics graphics)",12,4,4,1,1
"basis.lang.arrays.ImmutableByteArray.equals(Object obj)",11,4,11,1,1
"sneer.bricks.hardware.io.log.formatter.impl.LogFormatterImpl.format(StringBuilder result, String message, Object... insets)",11,4,3,1,3
"sneer.bricks.hardware.io.log.tests.LoggerMock.formatInsets(StringBuilder builder, String message, Object... messageInsets)",11,4,3,1,3
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.asString(Collection<Message> messages, boolean showAuthors)",10,4,10,1,2
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.put(String nick, Seal seal)",10,4,7,1,2
"dfcsantos.tracks.tastematching.impl.FolderMatchCounter.rate(String folder, Boolean opinion)",10,4,5,1,2
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.guide(ReflectionVisitor visitor, TourImpl tour)",10,4,5,1,2
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.tryToUpdateMap(String ip, int port)",10,4,4,1,2
"sneer.bricks.expression.tuples.dispatcher.impl.TupleDispatcherImpl.waitForAllDispatchingToFinish()",10,4,3,1,0
"sneer.bricks.hardware.cpu.profiler.impl.Sampler.takeSample()",9,4,7,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.consume(AttributeValue tuple)",9,4,6,1,1
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.pluck()",9,4,6,1,0
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.finishWith(FolderContents folderContents)",9,4,5,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.finishWith(FolderContents folderContents)",9,4,5,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.stagedBricks()",9,4,5,1,0
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.contactGiven(Seal peersSeal)",9,4,4,1,1
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.findBrick(final String brickName, final Status status)",8,4,10,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.areEqualContents(Collection<?> a, Collection<?> b)",8,4,8,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.resizeWindow()",8,4,7,1,0
"sneer.bricks.pulp.reactive.gates.strings.impl.Concatenator.concatenation()",8,4,6,1,0
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.collectAddressesIn(Collection<InetAddress> collector, NetworkInterface ni)",8,4,5,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.alertUserIfNecessary(Collection<Message> _msgs)",8,4,5,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.filter(Collection<Message> msgs)",8,4,3,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.singleAuthor(Collection<Message> messages)",7,4,3,1,1
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.throttleUpload()",7,4,3,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.waitTillFinished()",7,4,2,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.waitTillFinished()",7,4,2,1,0
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.entries(FolderContents contents)",7,4,1,1,1
"dfcsantos.music.impl.TrackSourceStrategy.killTracks()",6,4,6,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.deleteFilesIn(File brickFolder)",6,4,3,1,1
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.updateMapping()",5,4,6,1,0
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.unmapDeletedFiles(String folderPath, List<FileOrFolder> newEntries, FolderContents oldContents)",5,4,2,1,3
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.result()",5,4,2,1,0
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.handle(UdpPacketType type, InetSocketAddress origin, ByteBuffer packet)",4,4,4,1,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.play(int x, int y, GameStateContext gameStateContext)",15,4,10,0,3
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.renderLocation(Location location, int zoom)",11,4,2,0,2
"basis.brickness.impl.EagerClassLoader.loadClass(String name, boolean resolve)",10,4,4,0,2
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.marshalIfNecessary(Object object)",10,4,2,0,1
"dfcsantos.tracks.impl.TrackImpl.equals(Object obj)",8,4,3,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.shouldKeep(Tuple tuple)",8,4,3,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalenceEnvironment.isPrevalent(Class<?> brick)",8,4,2,0,1
"sneer.tests.freedom7.Freedom7Test.copyToSourceFolderAndStageForInstallation(File[] folders, String... brickNames)",7,4,12,0,2
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.addMissingFiles(BrickVersion current)",7,4,4,0,1
"sneer.bricks.hardware.io.log.tests.LoggerMocks.count(String prefix)",7,4,2,0,1
"sneer.bricks.softwaresharing.demolisher.filestatus.impl.FileStatusCalculatorImpl.calculate(byte[] contents, byte[] contentsInCurrentVersion)",7,4,1,0,2
"sneer.bricks.hardware.io.log.exceptions.impl.ExceptionLoggerImpl.leakIfNecessary(Throwable throwable)",6,4,2,0,1
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.type(ListDataEvent event)",6,4,1,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickFilter.isPartOfBrick(FileOrFolder candidate)",5,4,3,0,1
"sneer.bricks.pulp.reactive.impl.RegisterImpl.isSameValue(T value)",5,4,1,0,1
"sneer.snapps.games.drones.units.impl.UnitImpl.set(UnitAttribute attribute, int value)",5,4,0,0,2
"snype.whisper.audio.AudioCommon.main(String[] args)",9,3,14,4,1
"sneer.bricks.snapps.games.go.tests.logic.RunGoWithoutSneer.RunGoWithoutSneer(final int boardSize)",39,3,9,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.updateCellSize(int add)",22,3,10,3,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.removeCellsRandomly(Board board, int cellsToRemove)",12,3,6,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.receiveMoveResign()",11,3,5,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.createIntersections(int size)",11,3,1,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.tryToPlayStone(int x, int y)",9,3,9,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.allIntersections()",8,3,1,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.updateTurnMessageIfWaiting()",7,3,4,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.unmarkDeadStones(int x, int y)",5,3,2,3,2
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.forceGain()",17,3,12,2,0
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.digest(File file)",17,3,9,2,1
"sneer.bricks.expression.files.client.impl.FileClientImpl.startDownload(final Hash hash, Producer<Download> downloadFactory)",17,3,4,2,2
"sneer.bricks.snapps.diff.text.gui.impl.TextBlockPainter.textAppend(TextBlock block)",16,3,19,2,1
"sneer.bricks.skin.imgselector.impl.ImageDialog.getIcon(final File file, int height, int width)",16,3,7,2,3
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.produceInSequence(T element, short sequence)",15,3,6,2,2
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.digest(Path file)",14,3,9,2,1
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.parseErrorString(String string)",13,3,9,2,1
"sneer.bricks.pulp.serialization.impl.SerializerImpl.deserializeWith(InputStream stream, XStream xstream)",13,3,6,2,2
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.unusedArea()",12,3,7,2,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.ToroidalBoardImagePainter.drawBoardAndSurroundings(Graphics graphics, Rectangle boardImageRectangle, final BufferedImage bufferImage)",12,3,4,2,3
"basis.lang.CacheMap.volunteerToResolve(K key)",12,3,4,2,1
"basis.testsupport.CleanTestBase.tryToClean(File tmp)",12,3,4,2,1
"sneer.bricks.pulp.probe.impl.ProbeImpl.dealWithIsConnected(boolean isConnected)",12,3,3,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getBiggestLinkedCellCountForPlayer(Player player)",11,3,5,2,1
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.restore()",11,3,3,2,0
"basis.testsupport.AssertUtils.assertContents(Iterable<T> actual, T... expected)",10,3,3,2,2
"basis.brickness.testsupport.BrickTestRunner.classpath()",9,3,8,2,0
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.producePacketsInBuffer()",9,3,6,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.checkIfWon()",9,3,4,2,0
"basis.brickness.testsupport.BrickTestRunner.collectContributedFields(final ArrayList<Field> collector, final Class<? extends Object> klass)",9,3,3,2,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.BackgroundDrawer.draw(Graphics2D g2)",8,3,8,2,1
"snype.whisper.skin.audio.mic.impl.MicImpl.doCapture()",8,3,6,2,0
"basis.testsupport.AssertUtils.assertContentsInAnyOrder(Iterable<T> actual, T... expectedInAnyOrder)",8,3,5,2,2
"basis.brickness.impl.ClassLoaderForBricks.realizeNatures(ClassDefinition originalClassDef)",8,3,4,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.runAcceptAction(Light light)",8,3,4,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getCellAtOrNull(int x, int y)",8,3,3,2,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getForPolygon(Polygon p)",8,3,3,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.isFilled()",8,3,3,2,0
"sneer.bricks.pulp.probe.impl.ProbeImpl.consume(Tuple tuple)",8,3,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitForContactGiven(byte[] seal)",7,3,6,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getPolygonAt(int x, int y)",7,3,4,2,2
"basis.brickness.testsupport.BrickTestRunner$TestInstanceEnvironment.provide(Class<T> intrface)",7,3,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.approveConnectionRequestsIfAny()",6,3,6,2,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonesInPlayPainter.draw(final Graphics2D graphics, final GoBoard _board)",6,3,2,2,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getCellDifferentFromThisCellOrNull(BoardCell cell, Collection<BoardCell> boardCells)",6,3,1,2,2
"basis.lang.arrays.ImmutableArray.containsAll(Collection<?> c)",6,3,1,2,1
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.errors()",6,3,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.availableBrick(String brickName)",5,3,4,2,1
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.get(Contact contact)",5,3,3,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.isKnown(TrackEndorsement endorsement)",4,3,5,2,1
"sneer.bricks.snapps.games.go.impl.GoMainImpl.handleInviation(final GoInvitation message)",29,3,9,1,1
"dfcsantos.tracks.execution.playlist.tests.PlaylistTest.testRandomPlaylist()",25,3,22,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintPiece(BufferedImage image, final boolean black, final boolean stroke)",22,3,14,1,3
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.TrayIconImpl(URL icon, Signal<String> tooltip)",21,3,7,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.AttackOutcomeDrawer.attackedWithOutcome(AttackOutcome attackOutcome)",20,3,0,1,1
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.adjustToolbar()",19,3,14,1,0
"dfcsantos.tracks.execution.player.impl.TrackContractImpl.play(Signal<Integer> volumePercent, final Runnable toCallWhenFinished)",19,3,7,1,2
"sneer.bricks.hardware.io.impl.IOImpl.asIOFileFilter(final Filter filter)",19,3,0,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.mapFile(Path file)",18,3,12,1,1
"sneer.tests.freedom6.Freedom6Test.syncFiles(String... files)",17,3,17,1,1
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.deserialize(byte[] serializedValue)",17,3,16,1,1
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.toString(byte type, ByteBuffer buf)",16,3,6,1,2
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.handle(ByteBuffer replyPacket)",15,3,11,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.change(CollectionChange<T> change)",15,3,11,1,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.addVersionIfNecessary(Hash packageHash, Contact owner)",15,3,8,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.resizeInstruments()",15,3,6,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.play(final int x, final int y, final GameStateContext gameStateContext)",14,3,6,1,3
"sneer.bricks.expression.files.server.impl.FileServerImpl.newFileContents(File requestedFile, FileRequest request)",14,3,6,1,2
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.showContents(Hash hashOfContents)",14,3,6,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.turnSwitch(Boolean isOn)",14,3,4,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Invocation.invoke(Object receiver, String methodName, Class<?>[] argTypes, Object... args)",13,3,7,1,4
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.tryShowFiles()",13,3,6,1,0
"sneer.bricks.expression.files.map.impl.FileMapData.remove(String path)",13,3,5,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.suicide()",13,3,4,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.sendRequest()",12,3,12,1,0
"basis.brickness.impl.ClassLoaderForBrickLibs.jars(File classpath, String implPackage)",12,3,8,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.mapFolderEntry(Path fileOrFolder)",12,3,8,1,1
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.unmarshal(String sealString)",12,3,7,1,1
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.nextTrack()",12,3,7,1,0
"sneer.bricks.hardware.cpu.profiler.impl.Sampler.countUniqueMethods(StackTraceElement[] stack)",12,3,5,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.movePath(String from, String to)",12,3,4,1,2
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl$SelectionSupport.changeSelectionColor(TextBlockType type)",12,3,3,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.addToWrapping(Object previous, String path)",12,3,2,1,2
"sneer.bricks.snapps.contacts.gui.comparator.impl.ContactComparatorImpl.compare(Contact contact1, Contact contact2)",11,3,5,1,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.tryToUnmarshalRequest(ByteBuffer in)",11,3,5,1,1
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.play(AudioInputStream audioInputStream, AudioFormat audioFormat, SourceDataLine dataLine)",11,3,4,1,3
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.write(long blockNumber, byte[] block)",11,3,4,1,2
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.listenToSneerPort()",11,3,4,1,0
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.findServer(int serverPort)",11,3,3,1,1
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerMock.throwDiceAndReturnOutcome(int diceCountAttacking, int diceCountDefending)",11,3,0,1,2
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.openServerSocket(int port)",10,3,5,1,1
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.readContactsSealBytes(ByteArraySocket socket)",10,3,4,1,1
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.wakeUp()",10,3,4,1,0
"sneer.bricks.hardware.io.log.tests.LoggerMock.caller()",10,3,3,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.peersToFind()",9,3,10,1,0
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.handleData(ByteBuffer data, InetSocketAddress origin)",9,3,8,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.updateFolderToSync()",9,3,7,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.visit(int version, int access, String name, String signature, String superName, String[] interfaces)",9,3,4,1,6
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.read()",9,3,4,1,0
"sneer.bricks.expression.files.server.impl.FileServerImpl.createTuple(Object response, FileRequest request)",9,3,3,1,2
"sneer.bricks.expression.tuples.impl.Subscription.pushTuple(Tuple tuple)",9,3,3,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.asLines(String stack)",9,3,2,1,1
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.setSize(long newSize)",9,3,2,1,1
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.tryToFindOwnIps()",8,3,8,1,0
"sneer.main.SneerSession.setLookAndFeel()",8,3,5,1,0
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.visitFileOrFolder(String name, long lastModified, Hash hashOfContents)",8,3,4,1,3
"basis.lang.types.Classes.allInterfacesOf(Class<?> clazz)",8,3,4,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.initChangeListeners(NotificationPolicy notificationPolicy)",8,3,4,1,1
"sneer.bricks.hardware.cpu.profiler.impl.Sampler.countUniqueMethods(String[] sortedMethods, int methodCount)",8,3,3,1,2
"sneer.bricks.hardware.io.log.impl.LoggerImpl.log(String message, Object... messageInsets)",8,3,3,1,2
"sneer.bricks.expression.files.map.mapper.impl.FileMapperImpl.getExistingMappedFile(final Hash hash)",8,3,3,1,1
"sneer.bricks.skin.imgselector.impl.Keyhole.setTrueLocation()",8,3,3,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.setNotified(boolean isNotified, String newText)",8,3,2,1,2
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.detectCycle()",8,3,2,1,0
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.dealWithAddressedTuple(Tuple tuple)",7,3,8,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.tryToReceiveFolder(FolderContents folderContents)",7,3,5,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.tryToReceiveFolder(FolderContents folderContents)",7,3,5,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.handleAccept(FileTransferAccept accept)",7,3,5,1,1
"sneer.bricks.identity.keys.gui.impl.PublicKeyInitDialogImpl.normalize(String passphrase)",7,3,5,1,1
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.update()",7,3,5,1,0
"basis.lang.Immutable.accumulateFields(List<Field> list, Class<?> clazz)",7,3,4,1,2
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.visitFieldsLater(TourImpl tour, Class<?> type)",7,3,4,1,2
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.endorseRandomTrack()",7,3,4,1,0
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.crashServerSocketIfNecessary()",7,3,4,1,0
"sneer.bricks.expression.files.map.impl.FileMapData.removeFromWrapping(Object wrapping, String path)",7,3,3,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.compileTests(Collection<File> brickFolders)",7,3,3,1,1
"basis.lang.Pair.hashCode()",7,3,2,1,0
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.setLastModified(File file, long lastModified)",7,3,1,1,2
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel.elementChanged(T element)",7,3,1,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.checkPutHasWorked(Path folder, FolderContents expected, Hash hash)",6,3,9,1,3
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.log(CollectionChange<InetAddress> change)",6,3,8,1,1
"sneer.bricks.hardware.gui.images.impl.ImagesImpl.isSameImage(BufferedImage image1, BufferedImage image2)",6,3,7,1,2
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.isValid(FileTransferAccept accept)",6,3,7,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.downloadFolder()",6,3,4,1,0
"dfcsantos.music.ui.presenter.impl.FolderChoicesPoll.tryToAccumulateSubFolders(Path folder, List<String> result)",6,3,3,1,2
"basis.brickness.impl.BricknessImpl.checkClassLoader(Class<?> brick)",6,3,3,1,1
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpAlarmsIfNecessary()",6,3,3,1,0
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.replacePrefixes(String from, String to)",6,3,2,1,2
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl.collectBricks(Collection<String> result, File binFolder)",6,3,2,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.matcherFor(String... fileExtensions)",6,3,2,1,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.getVersionChosenForInstallation()",6,3,2,1,0
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.getLastModified(String file)",6,3,1,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.setBuildingIfNecessary(PrevalentBuilding building)",6,3,1,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.checkForActivityTimeOut()",5,3,5,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.checkForActivityTimeOut()",5,3,5,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.deleteMappingIfNecessary(InternetGatewayDevice device, int previousPort)",5,3,3,1,2
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.getExistingFile(Hash hashOfContents)",5,3,3,1,1
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.close()",5,3,3,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.currentVersion()",5,3,3,1,0
"sneer.tests.adapters.SneerCommunity.makeFolder(File parent, String child)",5,3,2,1,2
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.payOrDie(long timeInMillis)",5,3,2,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.containsFileName(List<FileOrFolder> newEntries, FileOrFolder oldEntry)",5,3,1,1,2
"snype.whisper.speextuples.impl.SpeexTuples2Impl.play(SpeexPacket packet, ByRef<Line> speakerLine)",4,3,4,1,2
"snype.whisper.speextuples.impl.SpeexTuplesImpl.play(SpeexPacket packet, ByRef<Line> speakerLine)",4,3,4,1,2
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.checkForDurationTimeOut()",4,3,4,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.checkForDurationTimeOut()",4,3,4,1,0
"sneer.bricks.network.computers.udp.server.impl.UdpPortSession.crash()",4,3,4,1,0
"basis.lang.Immutable.checkForArray(Object object)",4,3,3,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.printFilteredStack(Throwable thrown)",4,3,3,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.TransactionInvocation.registerIfNecessary(Object object)",4,3,3,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.publishRequestsIfNecessary()",4,3,3,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.publishRequestsIfNecessary()",4,3,3,1,0
"sneer.bricks.expression.tuples.impl.Subscription.isRelevant(final Tuple tuple)",4,3,2,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.type(byte i)",4,3,2,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.startsWithAny(String stackLine, String... prefixes)",4,3,1,1,2
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.pad(String message)",4,3,1,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.throwNarrowed(Exception e)",4,3,0,1,1
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockImpl.type()",4,3,0,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.overcomeScreenToFrontDeficiencyInLinux()",3,3,5,1,0
"sneer.main.SneerSessionBase.prepare(ImmutableReference<File> property, File folder)",3,3,3,1,2
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.checkRange(long number)",3,3,0,1,1
"basis.environments.ProxyInEnvironment.invoke(final Object proxy, final Method method, final Object[] args)",23,3,2,0,3
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl.put(K key, V value)",14,3,5,0,2
"basis.brickness.impl.BrickSerializationMapperImpl.classGiven(String serializationHandle)",14,3,5,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.draw(final Graphics2D graphics, final GoBoard _board)",13,3,8,0,2
"sneer.bricks.skin.widgets.reactive.impl.RListCellRenderer.getListCellRendererComponent(JList<? extends ELEMENT> jList, ELEMENT element, int index, boolean isSelected, boolean cellHasFocus)",11,3,5,0,5
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.concludeDotPart(File dotPartFile, File actualFile, long lastModified)",11,3,5,0,3
"sneer.bricks.pulp.dyndns.checkip.impl.CheckIpImpl.parse(String responseBody)",10,3,5,0,1
"basis.testsupport.PrettyPrinter.toString(T object)",10,3,4,0,1
"sneer.bricks.pulp.reactive.impl.RegisterImpl$MySetter.consume(T newValue)",10,3,3,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalenceEnvironment.provide(Class<T> brick)",9,3,6,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.consume(Heartbeat beat)",9,3,5,0,1
"sneer.bricks.software.bricks.compiler.impl.BuilderImpl.build(File srcFolder, File destFolder)",9,3,4,0,2
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.marshal(Object[] array)",9,3,1,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.unmarshal(Object[] array)",9,3,1,0,1
"sneer.bricks.snapps.web.impl.ContactProviderImpl.getSealForNickOrNull(String nickName)",8,3,9,0,1
"sneer.bricks.skin.widgets.reactive.impl.RUtil.limitSize(Dimension size)",8,3,6,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.extendedPath(Method method, Object[] args)",8,3,4,0,2
"sneer.bricks.network.social.impl.ContactsImpl.contactGiven(String nickname)",8,3,4,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickFilter.retrieveOnlyFilesFromThisBrick(Hash hashOfPackage)",8,3,4,0,1
"basis.brickness.impl.BrickSerializationMapperImpl.loadBrickClass(String brick, Kind kind, String klass)",8,3,2,0,3
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.inputChanged(CollectionChange<T> change)",7,3,5,0,1
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver.receiveChange(CollectionChange<T> change)",7,3,4,0,1
"sneer.snapps.games.drones.matches.impl.MatchImpl.step()",7,3,4,0,0
"sneer.bricks.hardware.io.log.filter.impl.LogFilterImpl.isLogEntryAccepted(String message)",7,3,3,0,1
"sneer.bricks.pulp.distribution.filtering.impl.TupleFilterManagerImpl.censorFor(Class<? extends Tuple> tupleType)",7,3,3,0,1
"sneer.bricks.hardware.cpu.threads.throttle.impl.Throttle.Throttle(int percentage)",7,3,1,0,1
"sneer.tests.SovereignFunctionalTestBase.newSession(SovereignParty party)",7,3,1,0,1
"dfcsantos.tracks.tastematching.impl.MatchCounter.countOpinion(Boolean opinion)",7,3,0,0,1
"sneer.bricks.snapps.wind.impl.WindImpl.consume(ChatMessage shout)",6,3,5,0,1
"sneer.bricks.expression.files.tests.FileCopyTestBase.setLastModifiedRecursively(File file, long lastModified)",6,3,4,0,2
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.isBrickAvailable(final String brickName)",6,3,4,0,1
"sneer.bricks.software.code.compilers.impl.LanguageRegistryImpl.languageByFileExtension(String fileExtension)",6,3,3,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.file(String relativePath)",6,3,3,0,1
"sneer.bricks.expression.files.writer.folder.impl.FolderContentsWriterImpl.mergeOver(File existingFolder, FolderContents contents)",6,3,2,0,2
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.unableToRenameMessage(File dotPartFile, File actualFile)",6,3,2,0,2
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.handleGoodResponse(String ip, String response)",6,3,2,0,2
"sneer.bricks.pulp.datastructures.cache.impl.CacheImpl.getByHandle(int handle)",6,3,2,0,1
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver.elementAdded(T element)",6,3,2,0,1
"sneer.bricks.softwaresharing.gui.impl.Util.isBrickStagedForExecution(BrickHistory brickInfo)",6,3,2,0,1
"dfcsantos.music.tests.MusicFunctionalTest.assertLightExists(String caption)",5,3,6,0,1
"basis.brickness.impl.BrickSerializationMapperImpl.serializationHandleFor(Class<?> klass)",5,3,5,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.notifyDeathOfStaleContacts()",5,3,5,0,0
"dfcsantos.music.impl.MusicImpl.skip()",5,3,4,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.addSubFoldersIfNecessary()",5,3,4,0,0
"dfcsantos.tracks.storage.rejected.impl.RejectedTracksKeeperImpl.isRejected(Hash hash)",5,3,2,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.getItem(String name)",5,3,2,0,1
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver.elementRemoved(T element)",5,3,2,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingFolder()",5,3,2,0,0
"dfcsantos.music.ui.view.impl.MusicViewDemo.setLookAndFeel(String laf)",4,3,5,0,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelDemo.setLookAndFeel(String laf)",4,3,5,0,1
"dfcsantos.tracks.tastematching.impl.Rating.Rating(Map<String,MatchCounter> countersByFolder, String parent)",4,3,4,0,2
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.mkDirs(File folder)",4,3,4,0,1
"dfcsantos.tracks.tastematching.impl.Rating.contains(String parent, String candidate)",4,3,3,0,2
"sneer.bricks.softwaresharing.demolisher.impl.BrickFilter.isFolder(FileOrFolder candidate)",4,3,3,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.isTransaction(Method method)",4,3,2,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.isPublishedByUser(String className)",4,3,2,0,1
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpNetworkImpl.checkAvailability(int portNumber)",4,3,2,0,1
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.equalsAny(String match, String... candidates)",4,3,1,0,2
"dfcsantos.music.ui.presenter.contactstatus.impl.ContactMusicStatusImpl.withMusicalNote(String playingTrack)",4,3,1,0,1
"sneer.bricks.hardware.cpu.utils.consumers.validators.bounds.integer.impl.IntegerBoundsImpl$IntegerBoundsInstance.consume(Integer value)",4,3,1,0,1
"sneer.bricks.expression.files.writer.folder.impl.FolderContentsWriterImpl.check(final File existingFolder)",3,3,2,0,1
"snype.whisper.audio.AudioCommon.bestAvailableSourceDataLine()",16,2,10,4,0
"snype.whisper.audio.AudioCommon.bestAvailableTargetDataLine()",16,2,9,4,0
"sneer.bricks.skin.imgselector.impl.ImageSelectorImpl.selectFile()",11,2,4,4,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mouseDragged(MouseEvent e)",13,2,6,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.canPlayStone(int x, int y)",13,2,4,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.stopAcceptingMoves()",11,2,3,3,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.HexagonBoardFactory(int x, int y, int lines, int columns, int randomlyRemoveCount, final Random random)",11,2,0,3,6
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.updateScore()",8,2,3,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.toggleDeadStone(int x, int y)",7,2,3,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.passTurn()",7,2,2,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mousePressed(MouseEvent e)",6,2,3,3,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.createHexagonOnPosition(int x, int y)",6,2,1,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.next()",5,2,3,3,0
"sneer.bricks.snapps.games.go.impl.logic.IntersectionUtils.setup(Intersection[][] intersection, String[] setup)",3,2,1,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.stoneAtPositionIsLastPlayedStone(int x, int y)",3,2,0,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.other(StoneColor color)",2,2,0,3,1
"sneer.bricks.expression.snoard.impl.SnoardImpl.getClipboardContents()",22,2,9,2,0
"sneer.bricks.software.bricks.statestore.impl.BrickStateStoreImpl.readObjectFor(Class<?> brick)",20,2,7,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.handleHandshake(ByteBuffer data)",19,2,16,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitForAvailableBrick(final String brickName, final String brickStatus)",17,2,9,2,2
"sneer.main.SneerVersionUpdater.copyFile(File original, File copy)",16,2,7,2,2
"snype.whisper.skin.audio.mic.impl.MicImpl.doAcquireLine()",15,2,5,2,0
"sneer.bricks.software.bricks.statestore.impl.BrickStateStoreImpl.writeObjectFor(Class<?> brick, Object object)",14,2,8,2,2
"basis.brickness.impl.ClassLoaderForBricks.doLoadClass(String name)",14,2,5,2,1
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.loadProperties()",14,2,4,2,0
"sneer.bricks.software.code.metaclass.asm.impl.ClassReaderImpl.accept(sneer.bricks.software.code.metaclass.asm.Visitor visitor)",14,2,2,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.consumeTrackEndorsement(final TrackEndorsement endorsement)",13,2,9,2,1
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.set(Window window, Object value, String methodName, Class<?>... types)",13,2,5,2,4
"basis.brickness.impl.ClassLoaderForBricks.toByteArray(final URL classResource)",13,2,5,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.FileDownload(File file, long size, long lastModified, Hash hashOfFile, Seal source, boolean copyLocalFiles)",13,2,3,2,6
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.FileDownloadOld(File file, long size, long lastModified, Hash hashOfFile, Seal source, boolean copyLocalFiles)",13,2,3,2,6
"sneer.bricks.snapps.games.go.impl.sneerSpecifics.RemotePlayerOnSneer.play(Move move)",12,2,6,2,1
"basis.testsupport.CleanTestBase.afterCleanTest()",12,2,5,2,0
"snype.whisper.audio.SpeexSpeaker.sendAudio(byte[][] frames)",12,2,3,2,1
"sneer.bricks.pulp.probe.impl.PacketProducer.highestPriorityPacketToSend()",10,2,5,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.receiveFileBlock(FileContents contents)",10,2,4,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.receiveFileBlock(FileContents contents)",10,2,4,2,1
"basis.testsupport.CleanTestBase.tryToWaitForTheFailureFromTheActualTestThread(Method method, Throwable thrown)",9,2,2,2,2
"sneer.bricks.network.computers.udp.connections.impl.Guardian.handshake()",8,2,10,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.writeBlock(byte[] bytes)",8,2,6,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.writeBlock(byte[] bytes)",8,2,6,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.crash()",8,2,5,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.finishEmptyFile()",8,2,4,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.finishEmptyFile()",8,2,4,2,0
"sneer.bricks.network.computers.channels.impl.PriorityQueue.waitForNext()",8,2,4,2,0
"sneer.bricks.network.computers.channels.impl.PriorityQueue.add(T element, int priority)",8,2,3,2,2
"basis.testsupport.CleanTestBase.tmpFolderName()",7,2,6,2,0
"basis.lang.CacheMap.stackGiven(Thread thread)",7,2,5,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.internalRemove(BoardCell cell, Map<BoardCell,Set<BoardCell>> boardCellsMap)",7,2,4,2,2
"basis.brickness.testsupport.BrickTestRunner.contributedFields(Class<? extends Object> klass)",7,2,4,2,1
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.put(Contact contact, String host, int port)",7,2,3,2,3
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.runWhenBaseContainerIsReady(Runnable runnable)",7,2,2,2,1
"basis.testsupport.CleanTestBase.createTmpFile(String fileName)",6,2,9,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.checkReceivedPublicKey(byte[] publicKey)",6,2,8,2,1
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.source()",6,2,5,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.initialBlockRequests()",6,2,5,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.initialBlockRequests()",6,2,5,2,0
"sneer.bricks.pulp.probe.impl.PacketProducer.highestPriorityTupleToSend()",6,2,5,2,0
"sneer.main.SneerVersionUpdater.installStagedCode(File stageFolder, String backupLabel, File codeFolder)",6,2,4,2,3
"sneer.tests.adapters.impl.SneerPartyControllerImpl.stageBricksForInstallation(String... brickNames)",6,2,3,2,1
"sneer.bricks.snapps.diff.text.gui.impl.TextBlockPainter$LinkedTextBlock.positions()",6,2,3,2,0
"basis.brickness.impl.ClassLoaderForBricks.realizeNature(List<ClassDefinition> classDefs, Nature nature)",6,2,2,2,2
"sneer.bricks.network.computers.channels.impl.PriorityQueue.privateAdd(T element, int priority)",6,2,2,2,2
"sneer.bricks.snapps.games.go.impl.logic.Intersection.equals(Object obj)",6,2,1,2,1
"basis.testsupport.CleanTestBase.deleteTmpFolder()",6,2,1,2,0
"sneer.bricks.hardware.ram.deepcopy.impl.Deserializer.readAnyTrailingBytesWrittenBySillySerializers()",6,2,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.startToWorkIfNecessary()",6,2,1,2,0
"sneer.bricks.software.bricks.statestore.impl.BrickStateStoreImpl.turnRestoreLightOn(Class<?> brick, Exception e)",5,2,8,2,2
"sneer.bricks.software.bricks.statestore.impl.BrickStateStoreImpl.turnSaveLightOn(Class<?> brick, IOException e)",5,2,8,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.setFolderToSync(File folder)",5,2,5,2,1
"sneer.main.SneerVersionUpdater.deleteAtomically(File folder)",5,2,4,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.finishCheckingHash()",5,2,4,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.nextBlockRequest()",5,2,4,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.finishCheckingHash()",5,2,4,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.nextBlockRequest()",5,2,4,2,0
"basis.testsupport.CleanTestBase.createFolder(String folderName)",5,2,3,2,1
"basis.testsupport.CleanTestBase.checkThreadLeak()",5,2,3,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.recoverDownloadIfPossible()",5,2,3,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.recoverDownloadIfPossible()",5,2,3,2,0
"sneer.bricks.expression.files.client.impl.FileClientImpl.startDownload(File file, boolean isFolder, long size, long lastModified, Hash hashOfFile, Seal source)",5,2,2,2,6
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.areLinked(BoardCell c1, BoardCell c2)",5,2,2,2,2
"sneer.main.SneerVersionUpdater.pipe(FileInputStream in, FileOutputStream out)",5,2,2,2,2
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.remove(Contact contact)",5,2,2,2,1
"basis.testsupport.CleanTestBase.tmpFolder()",5,2,2,2,0
"sneer.bricks.network.computers.udp.connections.impl.Guardian.waitUntilHandshake()",5,2,2,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.acceptConnectionFrom(String otherName)",5,2,1,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.sessionKeyBytes()",5,2,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.print(Seal seal)",4,2,8,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.openLatchIfShoutsHeard(String shoutsExpected, Latch latch)",4,2,5,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.singleVersionOf(BrickHistory brick)",4,2,4,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.ownPublicKey()",4,2,4,2,0
"sneer.main.SneerVersionUpdater.installNewVersionIfPresent(File stageFolder, String backupLabel, File codeFolder)",4,2,3,2,3
"sneer.tests.adapters.impl.SneerPartyControllerImpl.folderToSync()",4,2,3,2,0
"basis.brickness.testsupport.BrickTestRunner$TestInstanceEnvironment.assertFieldCantProvide(Field field, Class<T> intrface)",4,2,2,2,2
"sneer.main.SneerVersionUpdater.backup(String backupLabel, File codeFolder)",4,2,2,2,2
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.shouldProduce(Packet<T> candidate)",4,2,2,2,1
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.notifyRunnables()",4,2,2,2,0
"sneer.main.SneerVersionUpdater.backupFolder(String backupLabel, File codeFolder)",4,2,1,2,2
"sneer.main.SneerVersionUpdater.existingFile(File folder, String fileName)",4,2,1,2,2
"basis.testsupport.CleanTestBase.appendSeparator(String path)",4,2,1,2,1
"sneer.bricks.hardware.ram.deepcopy.impl.Deserializer.getResult()",4,2,1,2,0
"sneer.bricks.network.computers.udp.connections.impl.Guardian.stopHandshake()",4,2,1,2,0
"sneer.bricks.network.computers.channels.impl.PriorityQueue.PriorityQueue(int minimumPriority)",4,2,0,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.generatePublicKey(String name)",3,2,6,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.isOn()",3,2,3,2,0
"basis.testsupport.AssertUtils.assertDoesNotExist(File... files)",3,2,2,2,1
"basis.testsupport.AssertUtils.assertExists(File... files)",3,2,2,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.shouldReplySecurityInfo(ByteBuffer data)",3,2,2,2,1
"sneer.bricks.pulp.httpclient.impl.HttpClientImpl.setRequestProperties(final URLConnection connection, Pair<String,String>... headers)",3,2,1,2,2
"basis.testsupport.CleanTestBase.assertTmpFilesDontExist(String... fileNames)",3,2,1,2,1
"basis.testsupport.CleanTestBase.assertTmpFilesExist(String... fileNames)",3,2,1,2,1
"basis.testsupport.CleanTestBase.createTmpFiles(String... fileNames)",3,2,1,2,1
"basis.testsupport.CleanTestBase.createTmpFilesWithFileNameAsContent(String... fileNames)",3,2,1,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.folderFor(TrackEndorsement endorsement)",3,2,1,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.decrypt(byte[] payload)",3,2,1,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.encrypt(byte[] bytes)",3,2,1,2,1
"sneer.bricks.snapps.games.go.impl.logic.Intersection.setStone(GoBoard.StoneColor stoneColor)",3,2,1,2,1
"sneer.main.SneerVersionUpdater.close(Closeable closable)",3,2,1,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.copyNecessaryRepositoryBinFiles(String... fileNames)",3,2,1,2,1
"sneer.bricks.pulp.probe.impl.PacketProducer.previousPacketWasSent()",3,2,1,2,0
"basis.brickness.testsupport.BrickTestRunner$TestInstanceEnvironment.instanceBeingInitialized(Object testInstance)",3,2,0,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.opinionOn(boolean isKnownTrack)",2,2,0,2,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonesInPlayPainter.toAwtColor(StoneColor color)",2,2,0,2,1
"basis.testsupport.PrintStreamSentinel.complainIfUsed()",2,2,0,2,0
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.setBestBounds(Window window, Component baseComponent)",0,2,1,2,2
"snype.whisper.speextuples.tests.SpeexTuplesTest.testPcmToSpeex()",28,2,14,1,0
"sneer.bricks.pulp.reactive.tests.SignalsTest.receptionGc()",23,2,16,1,0
"sneer.bricks.pulp.notifiers.tests.EventNotifiersTest.contractWeakness()",23,2,7,1,0
"snype.whisper.gui.impl.SnypeGUIImpl.createCallLightIfNeeded(final Contact contact, String caption, String helpMessage)",22,2,11,1,3
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.handleFromUnknownSender(UdpPacketType type, final Seal sendersSeal, final ByteBuffer buf)",22,2,1,1,3
"sneer.bricks.snapps.games.sliceWars.test.RunSliceWarsWithoutSneer.RunSliceWarsWithoutSneer()",21,2,8,1,0
"sneer.bricks.hardware.clock.timer.tests.TimerTest.testContractWeakness()",21,2,5,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.connect(StunClient client, final String originIp, final int originPort, final StunServer server)",21,2,2,1,4
"sneer.bricks.hardware.cpu.profiler.impl.ProfilerImpl.activateIfTriggerFileExists()",20,2,15,1,0
"sneer.bricks.expression.tuples.tests.TupleSpaceTest.testContractWeakness()",20,2,5,1,0
"sneer.bricks.software.code.compilers.java.impl.JavaCompilerImpl.compile(Collection<File> sourceFiles, File destination, File... classpath)",19,2,16,1,3
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellDrawer.draw(BoardCell boardCell, Graphics2D g2)",18,2,22,1,2
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.tryToSendPacketFor(Producer<? extends ByteBuffer> sender)",18,2,14,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PassButtonDrawer.draw(Graphics2D g2)",17,2,11,1,1
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.findOwnIps()",17,2,10,1,0
"sneer.bricks.expression.tuples.impl.Subscription.notifySubscriberOfNextTuple()",16,2,5,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.paintComponent(Graphics g)",15,2,12,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.AbstractDownload(File path, long lastModified, Hash hashOfFile, Seal source, boolean copyLocalFiles)",15,2,4,1,5
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.AbstractDownloadOld(File path, long lastModified, Hash hashOfFile, Seal source, boolean copyLocalFiles)",15,2,4,1,5
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.commitTextChanges()",14,2,14,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.ipDiscovery()",14,2,13,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.setWindowsMessage(Light light)",14,2,11,1,1
"sneer.bricks.software.code.compilers.java.impl.JavaCompilerImpl.asJavacArguments(File destination, File tmpFile, File... classpath)",14,2,10,1,3
"sneer.bricks.network.computers.udp.receiver.impl.ReceiverThread.receivePacket()",14,2,8,1,0
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.addAction(final Action action)",14,2,6,1,1
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.step(final Runnable stepper)",14,2,4,1,1
"sneer.bricks.hardware.cpu.profiler.impl.ProfilerImpl.dumpTo(final Sampler sampler, PrintStream out)",13,2,5,1,2
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.addButtonsToActionsPanel(Light light)",13,2,5,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.append(Message message)",12,2,15,1,1
"dfcsantos.music.impl.TrackSourceStrategy.deleteTrack(final Track rejected)",12,2,10,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.toCompatibleImage(BufferedImage image, GraphicsConfiguration gc)",12,2,9,1,2
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.waitForAvailableBrick(final String brickName, final Status status)",12,2,8,1,2
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.download(final FileTransferSugestion sugestion)",12,2,8,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.drawStroke(final boolean black, Graphics2D g2)",12,2,7,1,2
"sneer.bricks.expression.tuples.tests.TupleGcTest.tuplesLimitAmount()",12,2,6,1,0
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber, Predicate<? super T> filter)",12,2,5,1,3
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.initGui()",12,2,4,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.localAddressesData()",11,2,12,1,0
"sneer.bricks.pulp.probe.impl.ProbeManagerImpl.startProbeFor(Contact contact)",11,2,11,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getIcon(URL url)",11,2,11,1,1
"sneer.bricks.snapps.system.log.file.impl.LogToFileImpl.initFileWriter(File logFile)",11,2,6,1,1
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.write(byte[] array)",11,2,5,1,1
"sneer.bricks.pulp.retrier.impl.RetrierImpl.wasSuccessful(final Task task)",11,2,3,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.accept()",11,2,3,1,0
"sneer.bricks.skin.image.impl.ImageFactoryImpl.createBufferedImage(Image image)",11,2,1,1,1
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.assertBlinkingLight(final Exception expectedError)",10,2,15,1,1
"sneer.bricks.identity.keys.own.tests.OwnKeysPrevalenceTest.recoversFromPrevalence()",10,2,9,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.tryCompare()",10,2,8,1,0
"sneer.tests.adapters.SneerCommunity.connect(SovereignParty a, SovereignParty b)",10,2,7,1,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.serverHost()",10,2,6,1,0
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.confirm(ByteArraySocket newSocket, Contact contact, boolean isIncoming)",10,2,5,1,3
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Joiner.join(ByteBuffer piece)",10,2,4,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.JTextPaneWithoutAutoScrollOnEdit.preventAutoScrollingOnEdit()",10,2,4,1,0
"sneer.bricks.software.bricks.repl.impl.ReplConsoleImpl.eval(String code)",10,2,3,1,1
"snype.whisper.skin.audio.loopback.impl.Recorder.start(ByteArrayOutputStream buffer)",10,2,3,1,1
"sneer.bricks.skin.widgets.clipboard.impl.ClipboardImpl.readStringContent(Transferable contents)",10,2,1,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.endorseTrack(final File track)",9,2,10,1,1
"basis.lang.Immutable.fieldsToString()",9,2,9,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.pass(GameStateContext gameStateContext)",9,2,8,1,1
"sneer.bricks.software.diff.tests.TextComparatorTest.check(List<TextBlock> list)",9,2,8,1,1
"sneer.bricks.expression.files.transfer.FileTransferUploads.handleStatus(FileTransferStatus status)",9,2,6,1,1
"sneer.bricks.identity.seals.impl.OwnSealImpl.newTemporarySealForTests()",9,2,6,1,0
"basis.brickness.impl.BricknessImpl.instantiate(Class<T> brick, final Class<T> brickImpl)",9,2,5,1,2
"sneer.bricks.software.code.classutils.impl.ClassUtilsImpl.classpathRootFor(Class<?> clazz)",9,2,5,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.TransactionInvocation.produce()",9,2,5,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.open()",9,2,5,1,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.marshalRequestTo(StunRequest request, ByteBuffer out)",9,2,4,1,2
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.notify(final WeakReference<Consumer<? super T>> ref, final T valueChange)",9,2,4,1,2
"sneer.bricks.expression.files.server.impl.FileServerImpl.createResponseFor(FileRequest request)",9,2,4,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.getContents(FileRequest request)",9,2,4,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.alertUser(Collection<Message> messages)",9,2,4,1,1
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.measureUsedMBs()",9,2,4,1,0
"sneer.main.SneerSessionBase.prepare(ImmutableReference<Path> property, Path folder)",9,2,3,1,2
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.onFinished(Closure action)",9,2,3,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.onFinished(Closure action)",9,2,3,1,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Joiner.consume(ByteBuffer piece)",9,2,3,1,1
"basis.lang.Immutable.hashCode()",9,2,3,1,0
"sneer.bricks.software.code.metaclass.asm.impl.VisitorAdapter.visitAnnotation(String typeSignature, boolean visible)",9,2,2,1,2
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.hail()",8,2,10,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.setText(String text)",8,2,7,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.put(String path, long size, long lastModified, Hash hash, boolean isFolder)",8,2,6,1,5
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getScaledInstance(Image image, int width, int height, GraphicsConfiguration gc)",8,2,6,1,4
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.send(DatagramPacket packet)",8,2,6,1,1
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.guide(ReflectionVisitor visitor, Object start)",8,2,5,1,2
"sneer.bricks.software.code.jar.impl.JarBuilderImpl.add(String entryName, InputStream is)",8,2,5,1,2
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField$ChangeInfoDecorator.decorate(final boolean notified)",8,2,5,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.jarsIn(File libFolder)",8,2,5,1,1
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.loadIfSnapp(String brickName)",8,2,5,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnectionUtils.packetFor(ByteBuffer data, SocketAddress peerAddress)",8,2,4,1,2
"sneer.bricks.skin.imgselector.impl.Keyhole.tryChangeArea(int size)",8,2,4,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.paint(Graphics g)",8,2,4,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.render(Graphics2D g2)",8,2,4,1,1
"sneer.bricks.snapps.system.log.file.impl.LogToFileImpl.startWritingLogTo(File logFile)",8,2,4,1,1
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.consume(final BuildingHash srcFolderHash)",8,2,4,1,1
"snype.whisper.skin.audio.loopback.impl.Player.playBuffer()",8,2,4,1,0
"sneer.bricks.expression.tuples.keeper.impl.NewestTupleByGroup.evaluate(T tuple)",8,2,3,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.repaintAll(ListSignal<Message> messages)",8,2,3,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardPainter.paintGridSmall(Graphics2D buffer)",8,2,3,1,1
"snype.whisper.audio.SpeexMicrophone.run()",8,2,3,1,0
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.startDaemon(final String threadName, final Closure closure)",8,2,2,1,2
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.initCommunications(Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",8,2,2,1,2
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.remove(VO element)",8,2,2,1,1
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.startServer(int serverPort)",8,2,2,1,1
"snype.whisper.skin.audio.loopback.impl.Recorder.record(TargetDataLine targetDataLine)",8,2,2,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.initSpeakerLine(ByRef<Line> speakerLine)",8,2,2,1,1
"snype.whisper.speextuples.impl.SpeexTuplesImpl.initSpeakerLine(ByRef<Line> speakerLine)",8,2,2,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.openClientSocket()",8,2,2,1,0
"sneer.bricks.software.diff.impl.TextComparatorImpl.semanticCleanup(List<TextBlock> iterator)",8,2,1,1,1
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.contactHasSeal()",7,2,9,1,0
"sneer.bricks.software.code.jar.impl.JarsImpl.build(File jarFile, File binFolder)",7,2,8,1,2
"sneer.bricks.expression.files.writer.atomic.impl.AtomicFileWriterImpl.doWriteAtomicallyTo(File fileOrFolder, final long lastModified, Object contents)",7,2,7,1,3
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.visitLater(TourImpl tour, Field field)",7,2,7,1,2
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.prepareStagedSrc(File brickSrcFolder, BrickVersion version)",7,2,6,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.configureTitle(String title)",7,2,6,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.start()",7,2,6,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.start()",7,2,6,1,0
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.open()",7,2,5,1,0
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.run()",7,2,5,1,0
"sneer.bricks.hardware.io.log.tests.LoggerMock.log(String message, Object... messageInsets)",7,2,4,1,2
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOffIfNecessary(Light light)",7,2,4,1,1
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.processEnterKeyPress(KeyEvent e)",7,2,4,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.classpathWithLibs(File libFolder)",7,2,4,1,1
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.play(URL url)",7,2,4,1,1
"sneer.bricks.expression.files.writer.atomic.impl.AtomicFileWriterImpl.writeTo(File fileOrFolder, Object contents)",7,2,3,1,2
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpNoEarlierThan(long timeToWakeUp, Runnable runnable)",7,2,3,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$InstrumentGlasspane.processMouseEvent(MouseEvent event, JXLayer<? extends JPanel> layer)",7,2,3,1,2
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.trackFilesFrom(File folder)",7,2,3,1,1
"dfcsantos.tracks.impl.TracksImpl.listTracksFromFolder(File folder)",7,2,3,1,1
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.showFolder(FolderContents folderContents)",7,2,3,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.loadImage(Image image)",7,2,3,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.DiceLeftDrawer.draw(Graphics2D g2)",7,2,3,1,1
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.getMaximumSize()",7,2,3,1,0
"sneer.bricks.software.code.metaclass.asm.impl.VisitorAdapter.visit(int version, int access, String name, String signature, String superName, String[] interfaces)",7,2,2,1,6
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.replaceSinglePath(String from, String to)",7,2,2,1,2
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.initCommunications(final Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",7,2,2,1,2
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.dir(String path)",7,2,2,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.threadBlockedNotification(Thread thread)",7,2,2,1,1
"snype.whisper.speextuples.tests.SpeexTuplesTest.assertFrames(final byte[][] frames)",7,2,2,1,1
"basis.brickness.ClassDefinition.hashCode()",7,2,2,1,0
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpImpl.waitForAllDispatchingToFinish()",7,2,2,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.close()",7,2,2,1,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.DataUtils.ip(byte[] bytes)",7,2,1,1,1
"sneer.bricks.expression.tuples.dispatcher.impl.TupleDispatcherImpl.dispatchCounterDecrement()",7,2,1,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.setVisible(boolean isVisible)",6,2,7,1,1
"sneer.bricks.identity.keys.gui.impl.PublicKeyInitDialogImpl.initPublicKey()",6,2,7,1,0
"sneer.bricks.expression.files.hasher.impl.FolderContentsHasherImpl.hash(FolderContents folder)",6,2,6,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finish()",6,2,6,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finish()",6,2,6,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.buildBricks()",6,2,5,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.flush()",6,2,5,1,0
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.tryToProcess(BufferedBlockCipher cipher, byte[] data)",6,2,4,1,2
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.addEdge(T vertex, T successor)",6,2,4,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.compileImplsTo(Collection<File> brickFolders, File tmpFolder)",6,2,4,1,2
"basis.lang.types.Classes.classpathRootFor(Class<?> clazz)",6,2,4,1,1
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.pluck(T vertex)",6,2,4,1,1
"sneer.bricks.snapps.games.go.impl.GoMainImpl.handleMove(GoMove message)",6,2,4,1,1
"sneer.bricks.software.code.compilers.java.tests.JarUtils.classpathRootFor(Class<?> clazz)",6,2,4,1,1
"sneer.bricks.expression.tuples.floodcache.impl.FloodedTupleCacheImpl.capSize()",6,2,4,1,0
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.Demolition(CacheMap<String,BrickHistory> bricksByName, Hash srcFolderHash, Contact owner)",6,2,3,1,3
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.startDaemon(String threadName, Closure closure)",6,2,3,1,2
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.setChosenForExecution(BrickVersion version, boolean chosen)",6,2,3,1,2
"sneer.bricks.expression.files.map.mapper.impl.FileMapperImpl.stopMapping(final File folder)",6,2,3,1,1
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.invokeAndWaitForWussies(final Closure closure)",6,2,3,1,1
"sneer.bricks.hardware.cpu.threads.impl.Stepper.run()",6,2,3,1,0
"sneer.bricks.pulp.serialization.impl.XStreamPool.borrowWorker()",6,2,3,1,0
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.addContactAction(ContactAction action, boolean isDefaultAction)",6,2,2,1,2
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.nicknameGiven(Seal peersSeal)",6,2,2,1,1
"sneer.bricks.pulp.serialization.impl.ClassMapper.serializedClass(Class type)",6,2,2,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellsDrawer.draw(Graphics2D g2)",6,2,2,1,1
"sneer.bricks.hardware.cpu.threads.throttle.impl.CpuThrottleImpl.yield()",6,2,2,1,0
"basis.brickness.impl.ClassLoaderForBrickLibs.newInstanceIfNecessary(Class<?> brick, File classpath, String implPackage, List<Nature> natures, ClassLoader apiClassLoader)",6,2,1,1,5
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.Alarm(Runnable stepper, long period, boolean isPeriodic)",6,2,1,1,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowerImpl.getDiceResult(Dice dice, int diceCount)",6,2,1,1,2
"dfcsantos.tracks.execution.player.impl.PausableInputStream.setPaused(boolean paused)",6,2,1,1,1
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.turnOnErrorLightIfNecessary(IOException e)",6,2,1,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.connectLeftToRight(Intersection[][] intersection)",6,2,1,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.connectTopToBottom(Intersection[][] intersection)",6,2,1,1,1
"snype.whisper.speex.impl.DecoderImpl.decode(byte[][] frames)",6,2,1,1,1
"basis.lang.arrays.ImmutableByteArray.hashCode()",6,2,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.hashCode()",6,2,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.hashCode()",6,2,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowOutcome.sum(final int[] array)",6,2,0,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$InstrumentGlasspane.addInstrumentFog(Graphics2D g2, JXLayer<? extends JPanel> layer)",5,2,11,1,2
"basis.lang.types.Classes.className(String classpathRoot, String classFilePath)",5,2,6,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.handleRestoreRequest(RestoreRequest value)",5,2,6,1,1
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.waitForConfirmation(ByteArraySocket newSocket, Contact contact, boolean isIncoming)",5,2,5,1,3
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.addMappingIfNecessary(InternetGatewayDevice device, String ip, int port)",5,2,5,1,3
"sneer.bricks.software.bricks.compiler.impl.Build.accumulateTestFiles(Collection<File> testFiles, File brickFolder, String subfolder)",5,2,5,1,3
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitLoad(MethodVisitor mv, Type argumentType, int local)",5,2,4,1,3
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.isMouseOverToolbar(final Point mousePoint, Toolbar toolbar)",5,2,4,1,2
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.leaveFileOrFolder()",5,2,4,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.prepareStagedSrc()",5,2,4,1,0
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.breakTie(ByteArraySocket newSocket, Contact contact, boolean isIncoming)",5,2,3,1,3
"sneer.bricks.software.bricks.compiler.impl.Build.compileBrick(File brickFolder, File tmpFolder)",5,2,3,1,2
"basis.lang.types.Classes.fileFor(Class<?> clazz)",5,2,3,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.mapFolderEntries(Path folder)",5,2,3,1,1
"sneer.bricks.expression.tuples.impl.Subscription.filterAndPushToNotify(final Tuple tuple)",5,2,3,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.requestsToPublishIfNecessary()",5,2,3,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.requestsToPublishIfNecessary()",5,2,3,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.changeLocalHostIpIfNecessary()",5,2,3,1,0
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.loadAllSnapps()",5,2,3,1,0
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.leaveFolder()",5,2,3,1,0
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.rejectUnknownSeal(String contactsName, Seal contactsSeal)",5,2,2,1,2
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnectionUtils.send(ByteBuffer data, SocketAddress peerAddress)",5,2,2,1,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.DataUtils.getNextArray(ByteBuffer in, int length)",5,2,2,1,2
"basis.util.concurrent.RefLatch.consume(T value)",5,2,2,1,1
"sneer.bricks.network.social.impl.ContactImpl.ContactImpl(String nickname)",5,2,2,1,1
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.notifyCurrentValue(final Consumer<? super T> receiver)",5,2,2,1,1
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.notifyReceivers(T valueChange)",5,2,2,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getColorModel(Image image)",5,2,2,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.parentFolders(Collection<File> files)",5,2,2,1,1
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.startClient(int serverPort)",5,2,2,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.encode(final byte[] pcmBuffer)",5,2,2,1,1
"snype.whisper.speextuples.impl.SpeexTuplesImpl.encode(final byte[] pcmBuffer)",5,2,2,1,1
"basis.lang.arrays.ImmutableByteArray.toString()",5,2,2,1,0
"dfcsantos.tracks.execution.player.impl.PausableInputStream.pauseIfNecessary()",5,2,2,1,0
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.runPre()",5,2,2,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.availableBricks()",5,2,2,1,0
"snype.whisper.skin.screenshotter.impl.ScreenshotterImpl.takeScreenshot()",5,2,2,1,0
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.withDetails(Path folder, FolderContents contents, RuntimeException e)",5,2,1,1,3
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.initSender(Consumer<DatagramPacket> sender)",5,2,1,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.instrumentsPanelsDo(Consumer<InstrumentPanelImpl> action)",5,2,1,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.getLimitWidth(final JList<? extends Message> list)",5,2,1,1,1
"sneer.bricks.snapps.games.sliceWars.test.RunSliceWarsWithoutSneer.play(RemotePlay play)",5,2,1,1,1
"sneer.bricks.network.computers.udp.receiver.impl.ReceiverThread.dispose()",5,2,1,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.initIfNecessary()",5,2,1,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.close()",5,2,1,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.pcmBuffer()",5,2,1,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.compareTo(Alarm alarm)",5,2,0,1,1
"sneer.bricks.expression.tuples.impl.Subscription.dispose()",5,2,0,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.frames()",5,2,0,1,0
"sneer.bricks.hardware.io.log.tests.LoggerMock.appendCaller(String message)",4,2,6,1,1
"snype.whisper.gui.impl.SnypeGUIImpl.tearDownConnection(Seal other)",4,2,6,1,1
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.removeVerticesVisitedBeforeEnteringCycle(T vertexThatStartedCycle, List<T> cycle)",4,2,5,1,2
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.disconnectIfIdle()",4,2,5,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.updateSize()",4,2,5,1,0
"dfcsantos.tracks.impl.TracksImpl.listMp3FilesFromFolder(File folder)",4,2,4,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.getMappedPath(Hash hash)",4,2,4,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.getMappedPath(Hash hash)",4,2,4,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.log(FolderContents reply)",4,2,4,1,1
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.measureMemory()",4,2,4,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.resizeInstrumentPanel()",4,2,4,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.init()",4,2,4,1,0
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.replacePrefix(String path, String prefix, String newPrefix)",4,2,3,1,3
"sneer.bricks.expression.files.server.impl.FileServerImpl.tryToReply(FileRequest request)",4,2,3,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.mockOwnIps(String... ips)",4,2,3,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.createNick(Message message)",4,2,3,1,1
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$BadAccountState.react()",4,2,3,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.timeForNextDiscovery()",4,2,3,1,0
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.toString()",4,2,3,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PassButtonDrawer.click(int x, int y)",4,2,2,1,2
"dfcsantos.tracks.tastematching.impl.FolderMatchCounter.parent(String folder)",4,2,2,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.turnOffWaitingLight(FileTransferSugestion sugestion)",4,2,2,1,1
"sneer.bricks.expression.tuples.impl.Subscription.filterAndNotify(final Tuple tuple)",4,2,2,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.dealWithFloodedTuple(Tuple tuple)",4,2,2,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.isAlreadyKept(Tuple tuple)",4,2,2,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.resetFolder(File folder)",4,2,2,1,1
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.clearContactsOfContact()",4,2,2,1,0
"sneer.tests.adapters.SneerCommunity.crash()",4,2,2,1,0
"snype.whisper.skin.audio.loopback.impl.Player.stop()",4,2,2,1,0
"snype.whisper.skin.audio.loopback.impl.Recorder.stop()",4,2,2,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.nextShort()",4,2,2,1,0
"snype.whisper.speextuples.impl.SpeexTuplesImpl.nextShort()",4,2,2,1,0
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.putFile(String file, long size, long lastModified, Hash hash)",4,2,1,1,4
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.newPath(String path, String prefix, String newPrefix)",4,2,1,1,3
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl$Visitor.visit(String typeSignature, boolean visible, AnnotationInfo annotationInfo)",4,2,1,1,3
"sneer.bricks.pulp.reactive.impl.SignalUtilsImpl.equalsWithNulls(final T expected, T value)",4,2,1,1,2
"sneer.bricks.expression.files.map.impl.FileMapData.getHash(String path)",4,2,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.valueToString(Object value)",4,2,1,1,1
"sneer.bricks.snapps.games.go.impl.logging.GoLogger.log(Object log)",4,2,1,1,1
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.classPathForLibs(File libDir)",4,2,1,1,1
"dfcsantos.tracks.execution.player.impl.TrackContractImpl.dispose()",4,2,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.hasFinishedSuccessfully()",4,2,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.hasFinishedSuccessfully()",4,2,1,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.afterBrickTestWithTuples()",4,2,1,1,0
"sneer.bricks.hardware.cpu.threads.throttle.impl.CpuThrottleImpl.maxCpuUsage()",4,2,1,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.turnOffLightIfNecessary()",4,2,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.callPlayListeners()",4,2,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.startSpinOffDownload(FileOrFolder entry)",4,2,0,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.startSpinOffDownload(FileOrFolder entry)",4,2,0,1,1
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.stringFor(byte[] contents)",4,2,0,1,1
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.setter()",4,2,0,1,0
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.checkLocalhost(DatagramPacket packet)",3,2,7,1,1
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.visitArrayLater(TourImpl tour, Object array)",3,2,4,1,2
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.rejectLoopback(Seal peersSeal)",3,2,4,1,1
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.addMapping(InternetGatewayDevice device, String ip, int port, String protocol)",3,2,3,1,4
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.deleteMapping(InternetGatewayDevice device, int previousPort, String protocol)",3,2,3,1,3
"dfcsantos.music.impl.PeerTracks.meToo(Track trackToKeep)",3,2,3,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.publish(Tuple request)",3,2,2,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.publish(Tuple request)",3,2,2,1,1
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.showFileOrFolder(FileOrFolder fileOrFolder)",3,2,2,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.notifySubscriptions(Tuple tuple)",3,2,2,1,1
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.defineAttributes(Attributable thing)",3,2,2,1,1
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.currentHost()",3,2,2,1,0
"basis.lang.Immutable.equals(Object myValue, Object hisValue)",3,2,1,1,2
"basis.brickness.impl.ClassLoaderForBrickLibs.listFiles(File libDir)",3,2,1,1,1
"basis.lang.Immutable.hashCode(Object obj)",3,2,1,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.assertExists(File requestedFile)",3,2,1,1,1
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.isDirectory(String path)",3,2,1,1,1
"sneer.bricks.expression.tuples.impl.Subscription.notifySubscriber(Tuple tuple)",3,2,1,1,1
"sneer.bricks.expression.tuples.tests.TupleGcTest.publishMyTestTuples(int amount)",3,2,1,1,1
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.initRemoteEnvironmentIfNecessary(Object... bindings)",3,2,1,1,1
"sneer.bricks.hardware.io.impl.IOImpl.crash(Closeable closeable)",3,2,1,1,1
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.dealWith(IOException e)",3,2,1,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.listener.impl.Listener.tryToSend(DatagramPacket[] replies)",3,2,1,1,1
"sneer.bricks.network.computers.udp.server.impl.UdpPortSession.send(DatagramPacket packet)",3,2,1,1,1
"sneer.bricks.pulp.retrier.impl.RetrierImpl.dealWith(FriendlyException fx)",3,2,1,1,1
"dfcsantos.tracks.execution.player.impl.TrackContractImpl.trackElapsedTime()",3,2,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.stopSendingRequests()",3,2,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.stopSendingRequests()",3,2,1,1,0
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.assertInGuiThread()",3,2,1,1,0
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.assertNotInGuiThread()",3,2,1,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Happy.Happy()",3,2,1,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.waitWithoutInterruptionsCheckingForCrash()",3,2,1,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.checkInitilized()",3,2,0,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.sealFor(Contact contact)",2,2,4,1,1
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.assertThreadCanWaitForGui()",2,2,2,1,0
"sneer.bricks.network.computers.udp.connections.tests.PacketProducerMock.blockIfFinished()",2,2,2,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.contact()",2,2,2,1,0
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.crashIfNotLocal(String serverIpAddress)",2,2,1,1,1
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.checkNotCrashed()",2,2,1,1,0
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.toString(boolean isIncoming)",2,2,0,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.other(StunClient client)",2,2,0,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.checkIsOpen()",2,2,0,1,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.runStatusTest(ConsumerX<File,Exception> mess)",39,2,51,0,1
"sneer.bricks.pulp.probe.tests.ProbeManagerTest.testTupleBlocking()",29,2,17,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.testWith(File fileOrFolder)",19,2,12,0,1
"sneer.bricks.expression.files.client.tests.FileClientTest.fileAlreadyMappedIsNotDownloaded()",17,2,20,0,0
"sneer.snapps.games.drones.matches.tests.MatchTest.combat()",17,2,14,0,0
"sneer.snapps.games.drones.matches.tests.MatchTest.death()",16,2,12,0,0
"sneer.snapps.games.drones.matches.tests.MatchTest.draw()",16,2,12,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stageBrickWithJUnitTests()",13,2,11,0,0
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Splitter.firstPiece()",13,2,5,0,0
"sneer.bricks.software.code.metaclass.impl.SimpleMetaClass.parse()",12,2,12,0,0
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.consolidate()",12,2,4,0,0
"sneer.bricks.pulp.reactive.impl.RegisterImpl.output()",12,2,1,0,0
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.subjectsReplyFor(DatagramPacket packet)",11,2,9,0,1
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.lazyLoad()",11,2,3,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.waitForAvailableBrick(final String brickName)",10,2,7,0,1
"sneer.bricks.pulp.datastructures.cache.impl.CacheImpl.keep(T object)",10,2,6,0,1
"dfcsantos.music.impl.OwnTracks.nextTrack()",10,2,5,0,0
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.register(Object object)",10,2,4,0,1
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.initComponent()",10,2,4,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.Store.save(Collection<InternetAddress> currentAddresses)",9,2,9,0,1
"basis.brickness.impl.BrickImplLoader.newImplClassLoaderFor(Class<T> brick)",9,2,7,0,1
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.setSocket(ByteArraySocket newSocket)",9,2,5,0,1
"sneer.bricks.network.social.navigation.impl.ContactNavigatorImpl.searchContactsOf(final Seal adressee, final Consumer<ContactOfContact> consumer)",9,2,4,0,2
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.paintImage(Image image)",9,2,3,0,1
"sneer.bricks.hardware.ram.iterables.impl.IterablesImpl.sortByToString(Iterable<T> iterable)",9,2,2,0,1
"sneer.bricks.identity.keys.own.impl.OwnKeysImpl.generateKeyPair(byte[] seed)",8,2,10,0,1
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.commitChanges()",8,2,6,0,0
"basis.brickness.impl.BrickSerializationMapperImpl.classLoaderPrefixFor(Class<?> klass)",8,2,5,0,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Splitter.nextPiece()",8,2,5,0,0
"snype.whisper.skin.audio.loopback.impl.LoopbackTesterImpl.start()",8,2,5,0,0
"dfcsantos.music.impl.DJ.stop()",8,2,4,0,0
"dfcsantos.music.impl.MusicImpl.meh()",8,2,4,0,0
"dfcsantos.music.impl.MusicImpl.noWay()",8,2,4,0,0
"sneer.bricks.hardware.gui.timebox.impl.TimeboxedEventQueueImpl.startQueueing(int timeboxDuration)",8,2,3,0,1
"sneer.bricks.network.social.impl.ContactsImpl.produceContact(String nickname)",8,2,2,0,1
"sneer.bricks.hardware.cpu.lang.contracts.impl.WeakContractImpl.finalize()",8,2,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.BrickVersionImpl(Hash hashOfPackage, boolean isCurrent, Functor<String,byte[]> currentContentsFinder, BrickVersion current)",7,2,7,0,4
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.open()",7,2,7,0,0
"sneer.bricks.expression.tuples.logger.impl.TupleLoggerImpl.consume(Tuple tuple)",7,2,6,0,1
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.invocationInTheSwingThreadForVoidMethod()",7,2,6,0,0
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddress.update()",7,2,6,0,0
"sneer.tests.freedom7.Freedom7Test.testPublishBrickWithLib()",7,2,6,0,0
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.newProxyFor(Object object, ProducerX<Object,? extends Exception> path)",7,2,5,0,2
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.listenerInvocationHappensInBricknessEnvironment()",7,2,5,0,0
"sneer.bricks.skin.widgets.clipboard.tests.ClipboardTest.setAndGetContents()",7,2,5,0,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.close(ByteArraySocket socket, String message, IOException exception)",7,2,3,0,3
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingFolderChosen(String folderChosen)",7,2,3,0,1
"sneer.tests.SovereignFunctionalTestBase.init()",7,2,3,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListCellRenderer.iconFor(final ELEMENT element)",7,2,2,0,1
"sneer.bricks.pulp.datastructures.cache.tests.CachePerformanceTest.containsPerformance()",7,2,2,0,0
"sneer.bricks.pulp.datastructures.cache.tests.CachePerformanceTest.handleForPerformance()",7,2,2,0,0
"basis.lang.arrays.ImmutableByteArray2D.copy(byte[][] original)",7,2,1,0,1
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconsImpl.initTrayIcon(URL icon, Signal<String> tooltip)",7,2,0,0,2
"sneer.bricks.hardware.cpu.threads.throttle.impl.Throttle.adaptTimeToWait(long now)",7,2,0,0,1
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.setDummyInfoIfNecessary()",6,2,8,0,0
"sneer.bricks.expression.files.tests.LocalCopyTest.copyFromFileMap(Hash hashOfContents, File destination)",6,2,6,0,2
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.restoreFieldData()",6,2,6,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.showTrackDownloadedIcon(Boolean trackDownloaded)",6,2,5,0,1
"sneer.bricks.hardware.cpu.threads.impl.Counter.log()",6,2,5,0,0
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.update(final String host, final String user, final String password, String newIp)",6,2,4,0,4
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.addFilter(final ListRegister<String> whiteListEntries, final JTextField newInclude)",6,2,4,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalentBuilding.waitForInstance(Class<T> brick)",6,2,4,0,1
"dfcsantos.music.impl.MusicImpl.pauseResume()",6,2,4,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.addMenuItem(Integer positionInMenu, final JMenuItem menuItem)",6,2,3,0,2
"sneer.bricks.software.bricks.interception.impl.Types.insertBefore(Type[] array, Type prefix)",6,2,3,0,2
"sneer.bricks.hardware.cpu.threads.impl.Counter.decrementByKey(String key)",6,2,3,0,1
"sneer.bricks.hardware.ram.iterables.impl.IterablesImpl.toList(Iterator<E> iterator)",6,2,3,0,1
"sneer.bricks.pulp.distribution.filtering.impl.TupleFilterManagerImpl.canBePublished(Tuple tuple)",6,2,3,0,1
"sneer.bricks.hardware.ram.iterables.impl.IterablesImpl.map(Iterable<A> source, Functor<A,B> functor)",6,2,2,0,2
"basis.brickness.impl.BrickImplLoader.naturesImplsFor(final Class<? extends Nature>[] natureClasses)",6,2,2,0,1
"dfcsantos.music.impl.DJ.consume(Track track)",6,2,2,0,1
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.noveltiesFolder()",6,2,2,0,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.waitForSocket()",6,2,2,0,0
"sneer.bricks.software.folderconfig.testsupport.BrickTestBase.afterBrickTestBase()",6,2,2,0,0
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.stackTrace(Thread thread)",6,2,1,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.marshal(Object object)",6,2,1,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.unmarshal(long id)",6,2,1,0,1
"sneer.bricks.network.computers.udp.server.impl.UdpServerImpl.handlePort(int port)",6,2,1,0,1
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.inboxFolder()",6,2,1,0,0
"sneer.bricks.hardware.cpu.lang.contracts.impl.WeakContractImpl.dispose()",6,2,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.setter()",6,2,0,0,0
"sneer.bricks.network.social.attributes.tests.AttributesTest.testPeerAttribute(Class<? extends Attribute<T>> attribute, T value)",5,2,7,0,2
"sneer.bricks.hardware.ram.recycler.impl.MemoryRecyclerImpl.recycleUsedMemoryIfNecessary(int usedMemory)",5,2,7,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalenceEnvironment.provide(Class<T> prevalentBrick, Producer<T> instantiator)",5,2,5,0,2
"sneer.bricks.snapps.chat.impl.ChatImpl.showMessage(ChatMessage message, Seal sealOfContact)",5,2,5,0,2
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.isTooOld(Heartbeat beat)",5,2,5,0,1
"sneer.bricks.hardware.cpu.threads.tests.CpuThrottleDemo.chart()",5,2,5,0,0
"basis.brickness.impl.BrickImplLoader.naturesFor(Class<?> brick)",5,2,4,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.newTrackDownloaded(Integer numberTracksDownloaded)",5,2,4,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.deleteIfNecessary(Tuple candidate)",5,2,4,0,1
"sneer.bricks.pulp.reactive.gates.logic.tests.AndTest.expectOutputSequence(boolean... expected)",5,2,4,0,1
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadListPanel.refresh()",5,2,4,0,0
"sneer.bricks.network.social.attributes.gui.impl.AttributeListPanel.refresh()",5,2,4,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.nicknames()",5,2,4,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.initDynDnsAccount(String dynDnsHost, String dynDnsUserName, String dynDnsPassword)",5,2,3,0,3
"sneer.bricks.hardware.cpu.threads.throttle.impl.Throttle.sleep(long sleepStart)",5,2,3,0,1
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.ContactInternetAddressesImpl.handle(final TcpSighting sighting)",5,2,3,0,1
"sneer.bricks.pulp.datastore.impl.DataStoreImpl.getLong(String key)",5,2,3,0,1
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.feedInputSequence(int[] input)",5,2,3,0,1
"sneer.bricks.expression.tuples.Tuple.ownSeal()",5,2,3,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.newDotPartFor(File actualFile, String tempName)",5,2,2,0,2
"sneer.bricks.pulp.distribution.filtering.impl.TupleFilterManagerImpl.setCensor(Class<T> tupleType, Predicate<? super T> censor)",5,2,2,0,2
"sneer.bricks.pulp.notifiers.pulsers.impl.UmbrellaContract.UmbrellaContract(Closure receiver, Pulser... sources)",5,2,2,0,2
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.changeIconOfPlayButton(Boolean playing)",5,2,2,0,1
"dfcsantos.music.impl.MusicImpl.play()",5,2,2,0,0
"sneer.bricks.hardware.gui.timebox.impl.TimeboxedEventQueueImpl.stopQueueing()",5,2,2,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.Store.restore()",5,2,2,0,0
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Splitter.produce()",5,2,2,0,0
"sneer.bricks.pulp.reactive.impl.AbstractSignal.toString()",5,2,2,0,0
"sneer.main.SneerCodeFolders.sneerHome()",5,2,2,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.selectChoice(String choice)",5,2,1,0,1
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.nextBytes(byte[] bytes)",5,2,1,0,1
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.close(String message)",5,2,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.wrap(CT element)",5,2,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.BrickProvision.produce()",5,2,1,0,0
"sneer.bricks.network.computers.udp.server.impl.UdpServerImpl.closeSessionIfNecessary()",5,2,1,0,0
"sneer.bricks.skin.main.menu.impl.MainMenuImpl.menu()",5,2,1,0,0
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferenceImpl.set(T value)",5,2,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.equals(Object obj)",5,2,0,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.setAlive(Contact contact)",4,2,7,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.setDead(Contact contact)",4,2,7,0,1
"sneer.bricks.softwaresharing.gui.impl.FakeModel.newListSignalWithContacts(String... values)",4,2,6,0,1
"sneer.bricks.skin.widgets.autoscroll.impl.AutoScrollWorker.placeAtEnd(final JScrollPane scrollPane)",4,2,5,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.addUser(Contact user)",4,2,5,0,1
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.complexMethodWithVariablesAndFinallyBlock()",4,2,5,0,0
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.instantiationHappensInTheSwingThread()",4,2,5,0,0
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.invocationHappensInBricknessEnvironment()",4,2,5,0,0
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.invocationHappensInTheSwingThread()",4,2,5,0,0
"dfcsantos.music.tests.MusicFunctionalTest.createSampleTracks(File tracksFolder, String... tracks)",4,2,4,0,2
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.deleteAllDotPartsRecursively(File folder)",4,2,4,0,1
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.assertPluckOneOfThese(String... vertices)",4,2,4,0,1
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.initStatus(boolean isCurrent)",4,2,3,0,1
"basis.testsupport.tests.CleanTestBaseTest.tmpFolderIsDeleted2()",4,2,3,0,0
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.toString()",4,2,3,0,0
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.restore()",4,2,3,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.insertItemsInAscendingOrder()",4,2,3,0,0
"sneer.bricks.network.computers.udp.sightings.impl.SightingKeeperImpl.keep(Contact contact, InetSocketAddress sighting)",4,2,2,0,2
"sneer.bricks.expression.files.map.impl.FileMapImpl.normalize(String path)",4,2,2,0,1
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.closeConnectionFor(Contact contact)",4,2,2,0,1
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadListPanel.smartPack()",4,2,2,0,0
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.doGarbageCollect()",4,2,2,0,0
"sneer.bricks.network.social.attributes.gui.impl.AttributeListPanel.smartPack()",4,2,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl$Visitor.leaveFolder()",4,2,2,0,0
"sneer.main.SneerFolders.dummyPrefix()",4,2,2,0,0
"basis.lang.Objects.areEqual(Object x, Object y)",4,2,1,0,2
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconsImpl.messageBalloon(String title, String message)",4,2,1,0,2
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconsImpl.addActionListener(Closure closure)",4,2,1,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.unmarshal(Object object)",4,2,1,0,1
"sneer.bricks.network.computers.udp.sender.impl.UdpSenderImpl.send(DatagramPacket packet)",4,2,1,0,1
"sneer.bricks.network.computers.udp.server.impl.UdpServerImpl.send(DatagramPacket packet)",4,2,1,0,1
"dfcsantos.music.ui.view.impl.DownloadsView.showInstance()",4,2,1,0,0
"sneer.bricks.hardware.cpu.threads.impl.Counter.checkPeakReached()",4,2,1,0,0
"sneer.bricks.pulp.notifiers.pulsers.impl.UmbrellaContract.dispose()",4,2,1,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.filter()",4,2,1,0,0
"dfcsantos.music.ui.view.impl.MusicViewImpl.setListener(MusicViewListener listener)",4,2,0,0,1
"dfcsantos.tracks.tastematching.impl.Rating.accumulateRating(MatchCounter matchCounter)",4,2,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.setSeed(long seed)",4,2,0,0,1
"sneer.bricks.hardware.io.log.worker.impl.LogWorkerHolderImpl.setWorker(LogWorker worker)",4,2,0,0,1
"sneer.bricks.network.computers.udp.sender.impl.UdpSenderImpl.init(Consumer<DatagramPacket> sender)",4,2,0,0,1
"dfcsantos.tracks.tastematching.impl.Rating.result()",4,2,0,0,0
"sneer.bricks.expression.tuples.tests.GcTestTuple.finalize()",4,2,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferenceImpl.get()",4,2,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.next()",4,2,0,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.openIfNeedConfig()",3,2,5,0,0
"sneer.bricks.software.folderconfig.testsupport.BrickTestBase.configureIfNecessary(ImmutableReference<File> folder, String folderName)",3,2,4,0,2
"dfcsantos.music.impl.OwnTracks.createPlaylist(File tracksFolder)",3,2,4,0,1
"dfcsantos.music.notification.playingtrack.server.impl.PlayingTrackPublisherImpl.publishPlayingTrack(Track playingTrack)",3,2,4,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.clearChoices()",3,2,4,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Cell.addDie()",3,2,4,0,0
"dfcsantos.music.notification.playingtrack.tests.PlayingTrackTest.setPlayingTrack(String trackName)",3,2,3,0,1
"dfcsantos.music.impl.MusicImpl.play(final Track track)",3,2,2,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.keepIfNecessary(Tuple tuple)",3,2,2,0,1
"sneer.bricks.expression.tuples.tests.TupleKeepingTest.publishTestTuples(int amount)",3,2,2,0,1
"sneer.bricks.hardware.io.log.notifier.impl.LogNotifierImpl.notifyEntry(String msg)",3,2,2,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.checkInsidePrevalence(T object)",3,2,2,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.assertBinFilesExist(String... filenames)",3,2,2,0,1
"sneer.bricks.hardware.io.log.tests.LoggerMocks.printAllKeptMessages()",3,2,2,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.toString()",3,2,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.refreshComponent()",3,2,2,0,0
"basis.testsupport.CleanTestRunner.notifyFailure(Method method, Throwable thrown)",3,2,1,0,2
"sneer.main.SneerCodeFolders.assertChild(File parent, String child)",3,2,1,0,2
"basis.environments.Bindings.bind(Object... bindings)",3,2,1,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.assertIsPaddedWithZeros(byte[] block)",3,2,1,0,1
"sneer.bricks.network.social.impl.ContactsImpl.checkAvailability(String nickname)",3,2,1,0,1
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.save(DynDnsAccount dynDnsAccount)",3,2,1,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.addElements(Iterable<T> elements)",3,2,1,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.remove(Iterable<T> elements)",3,2,1,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.copyClassesToSrcFolder(Class<?>... classes)",3,2,1,0,1
"sneer.bricks.pulp.datastructures.cache.tests.CachePerformanceTest.populate()",3,2,1,0,0
"sneer.tests.freedom5.Freedom5TestChannels.openControlChannel()",3,2,1,0,0
"sneer.bricks.hardware.cpu.exceptions.ExceptionCapsule.ExceptionCapsule(Exception e)",3,2,0,0,1
"sneer.bricks.network.computers.channels.impl.ChannelImpl.checkId(long actual)",3,2,0,0,1
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl$MaxHolderFunctor.evaluate(Integer value)",3,2,0,0,1
"sneer.snapps.games.drones.units.impl.UnitImpl.direction()",3,2,0,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.whatFolderChosen(String folderChosen)",2,2,3,0,1
"sneer.bricks.skin.widgets.reactive.impl.RFrameImpl.valueToString(Object title)",2,2,1,0,1
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.valueToString(final Object value)",2,2,1,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.copySourceFiles(Class<?>... classes)",2,2,1,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.assertStagedFilesExist(String... fileNames)",2,2,1,0,1
"sneer.bricks.pulp.reactive.impl.RegisterImpl.rawOutput()",2,2,1,0,0
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.toFile(String path)",2,2,0,0,1
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.nullToEmpty(Collection<? extends CT> collection)",2,2,0,0,1
"sneer.bricks.hardware.clock.impl.ClockImpl.preciseTime()",0,2,2,0,0
"sneer.bricks.skin.imgselector.impl.ImagePreviewAccessory.ImagePreviewAccessory(JFileChooser chooser)",5,1,4,4,1
"sneer.bricks.skin.imgselector.impl.ImageSelectorImpl.showImage(File file, Consumer<Image> imageSetter)",3,1,1,4,2
"snype.whisper.audio.AudioCommon.isCapturePossible()",2,1,1,4,0
"snype.whisper.audio.AudioCommon.isPlaybackPossible()",2,1,1,4,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.GoBoardPanel(final GuiPlayer goFrame, GoBoard goBoard, final TimerFactory timerFactory, BoardImagePainter boardImagePainter, StoneColor side, Offset offset)",62,1,8,3,6
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.createPainters()",13,1,5,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.playStone(int x, int y)",13,1,4,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mouseMoved(final MouseEvent e)",11,1,10,3,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.drawHexagon(int x, int y, int sideLenght)",9,1,0,3,3
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.render(final Graphics2D graphics)",8,1,7,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.receiveMovePassTurn()",6,1,5,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.paintComponent(final Graphics g)",6,1,3,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.receiveMoveAddStone(int xCoordinate, int yCoordinate)",5,1,4,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.addMouseListener()",5,1,4,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mouseWheelMoved(MouseWheelEvent e)",5,1,2,3,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.HexagonBoardFactory.createBoard()",5,1,2,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.doMoveAddStone(int x, int y)",4,1,3,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.doMoveMarkStone(int x, int y)",4,1,3,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.receiveMoveMarkStone(int xCoordinate, int yCoordinate)",4,1,3,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.dragActionButtonsPressed(MouseEvent e)",4,1,3,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.drawBoardImage(Graphics graphics)",4,1,3,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.resign()",4,1,3,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.nextToPlay(StoneColor nextToPlay)",4,1,2,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.toScreenPosition(final int coordinate)",4,1,2,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.scrollIfOnScrollRegion(final int mouseX, final int mouseY)",3,1,2,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.GoBoard(int size)",3,1,2,3,1
"sneer.bricks.snapps.games.go.tests.logic.RunGoWithoutSneer.simulatePlaySignaling(Move move)",3,1,2,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.update()",3,1,2,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.updateTurnMessage()",3,1,2,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.mouseExited(MouseEvent e)",3,1,1,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.setBoardSize(int boardSize)",3,1,1,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.GoBoard(String[] setup)",3,1,1,3,1
"sneer.bricks.snapps.games.go.tests.logic.RunGoWithoutSneer.play(Move move)",3,1,1,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.getBuffer()",3,1,1,3,0
"sneer.bricks.snapps.games.go.tests.logic.RunGoWithoutSneer.setAdversary(Player player)",3,1,0,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel$GoMouseListener.stopScrolling()",3,1,0,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.updateScore(int blackScore, int whiteScore)",2,1,1,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.stoneAt(int x, int y)",2,1,1,3,2
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.setBoardListener(BoardListener boardListener)",2,1,1,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.scoreBlack()",2,1,1,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.scoreWhite()",2,1,1,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.setGameEnded()",2,1,1,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.printOut()",2,1,1,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.getPrevColor(int x, int y)",2,1,0,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.intersection(int x, int y)",2,1,0,3,2
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.restoreSituation(Intersection[][] situation)",2,1,0,3,1
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.setBoardListener(BoardListener boardListener)",2,1,0,3,1
"sneer.bricks.snapps.games.go.tests.logic.RunGoWithoutSneer.main(String[] args)",2,1,0,3,1
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.getCellSize()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.gui.game.GoBoardPanel.setLostByReign()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.blackScore()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.nextToPlay()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.size()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.whiteScore()",2,1,0,3,0
"sneer.bricks.snapps.games.go.impl.logic.GoBoard.winner()",2,1,0,3,0
"sneer.bricks.expression.snoard.impl.SnoardImpl.SnoardImpl()",39,1,4,2,0
"basis.brickness.testsupport.BrickTestRunner.independentClassLoader(Class<?> testClass)",24,1,4,2,1
"sneer.bricks.snapps.diff.text.gui.impl.TextBlockPainter.TextBlockPainter(DefaultStyledDocument styledDocument, JCheckBox onlyText)",18,1,13,2,2
"sneer.bricks.snapps.wind.tests.WindTest.oldShoutsAreNotHeard()",14,1,16,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.start(String name, int port)",14,1,9,2,2
"sneer.bricks.skin.imgselector.impl.ImageDialog.ImageDialog(File file, Consumer<Image> imageSetter)",13,1,7,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.copyRepositoryCode()",13,1,7,2,0
"sneer.main.SneerVersionUpdater.exclusionFilter(File codeFolder)",12,1,7,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.giveNicknameTo(SovereignParty peer, String newNickname)",12,1,6,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.configDirectories(File dataFolder, File tmpFolder, File codeFolder, File srcFolder, File binFolder, File stageFolder, Path gitFolder)",11,1,18,2,7
"sneer.bricks.skin.imgselector.impl.ImageDialog.addImageInLayer()",11,1,8,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitForShouts(final String shoutsExpected)",11,1,6,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startSnapps()",11,1,6,2,0
"basis.testsupport.AssertUtils.expect(Class<X> throwable, ClosureX<X> closure)",11,1,5,2,2
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.persist()",11,1,4,2,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.complexMethodWithVariablesAndFinallyBlock()",11,1,3,2,0
"sneer.bricks.snapps.games.go.impl.sneerSpecifics.RemotePlayerOnSneer.RemotePlayerOnSneer(final int gameId, final StoneColor remoteSide, Register<Move> move, Register<AcknowledgeReceive> ackRegister)",11,1,2,2,4
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startConnectingTo(SneerParty other)",10,1,6,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.Guardian(Contact contact, ConnectionMonitor monitor)",10,1,2,2,2
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.secretKeyFrom(final PublicKey publicKey, final PrivateKey privateKey, final byte[] sessionKey)",10,1,1,2,3
"sneer.bricks.skin.imgselector.impl.ImageDialog.addCloseListener()",10,1,1,2,0
"sneer.bricks.skin.imgselector.impl.ImageDialog.initWindow()",9,1,4,2,0
"basis.testsupport.CleanTestBase.write(File file, String contents)",9,1,3,2,2
"sneer.bricks.pulp.serialization.impl.SerializerImpl.serialize(Object object)",9,1,2,2,1
"sneer.bricks.hardware.ram.deepcopy.impl.Deserializer.run()",9,1,2,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.gitPrepareRepoWithOneCommit()",8,1,5,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.installStagedCodeIfNecessary()",8,1,5,2,0
"sneer.bricks.pulp.serialization.impl.SerializerImpl.serialize(OutputStream stream, Object object)",8,1,3,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.lendSpaceTo(String contactNick, int megaBytes)",8,1,3,2,2
"sneer.bricks.pulp.serialization.impl.SerializerImpl.deserialize(final InputStream stream)",8,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.loadUnsharedBrick(String brickName)",8,1,3,2,1
"sneer.bricks.pulp.serialization.impl.SerializerImpl.serializeWith(OutputStream stream, Object object, XStream xstream)",8,1,2,2,3
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.openOutputStream()",8,1,2,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.openOutputStream()",8,1,2,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.enableCodeSharing()",8,1,2,2,0
"snype.whisper.audio.SpeexSpeaker.SpeexSpeaker()",7,1,7,2,0
"sneer.bricks.pulp.httpclient.impl.HttpClientImpl.readString(final URLConnection connection)",7,1,5,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.removingCellWillLeaveOrphans(BoardCell cell)",7,1,4,2,1
"sneer.bricks.skin.imgselector.impl.ImageDialog.addSizeListener()",7,1,4,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.gitPrepareEmptyRepo()",7,1,4,2,0
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.isSupported(Object kind, String methodName, Class<?>... parametersClass)",7,1,3,2,3
"basis.lang.CacheMap.waitWithoutInterruptions(K key)",7,1,3,2,1
"sneer.bricks.pulp.probe.impl.PacketProducer.produce()",7,1,3,2,0
"basis.brickness.testsupport.BrickTestRunner.fieldValueFor(Field field, Object instance)",7,1,2,2,2
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.getMappedPath(Hash hash)",7,1,2,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.getMappedPath(Hash hash)",7,1,2,2,1
"sneer.bricks.snapps.games.go.impl.sneerSpecifics.RemotePlayerOnSneer.setAdversary(final Player playListener)",7,1,2,2,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.BackgroundDrawer.BackgroundDrawer()",7,1,2,2,0
"basis.testsupport.PrintStreamSentinel.write(byte[] buf, int off, int len)",7,1,1,2,3
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.safelyProduce(ProducerX<T,Exception> producer)",7,1,1,2,1
"sneer.bricks.pulp.serialization.impl.SerializerImpl.deserialize(byte[] serializedValue)",7,1,1,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.wgetOrCry(String url)",7,1,1,2,1
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.getSHA512WithECDSA()",7,1,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.copyUnupdatableBinFiles()",7,1,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.putSeal(SneerParty other, Contact contact)",6,1,6,2,2
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.clearOldDotPartFiles()",6,1,5,2,0
"basis.testsupport.CleanTestBase.beforeCleanTest()",6,1,4,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.throwOnBlinkingErrors()",6,1,4,2,0
"basis.brickness.testsupport.BrickTestRunner.createEnvironment(TestInstanceEnvironment testEnvironment, Object... bindings)",6,1,3,2,2
"basis.brickness.testsupport.BrickTestRunner.toURL(File file)",6,1,2,2,1
"basis.languagesupport.JarFinder.toURL(File file)",6,1,2,2,1
"basis.testsupport.CleanTestBase.keepFailure(Method method, Throwable thrown)",6,1,1,2,2
"basis.environments.ResolvingCache.wait(Object object)",6,1,1,2,1
"basis.testsupport.CleanTestBase.sleep(long millis)",6,1,1,2,1
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.classForName(String className)",6,1,1,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.pkSeedFrom(String name)",6,1,1,2,1
"sneer.bricks.expression.files.client.impl.FileClientImpl.downloadCleaner(final Hash hash)",6,1,0,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.contactNicknames()",5,1,5,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.link(BoardCell boardCell1, BoardCell boardCell2)",5,1,4,2,2
"sneer.bricks.pulp.httpclient.impl.HttpClientImpl.get(String url, Pair<String,String>... headers)",5,1,3,2,2
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.newECDSAKeyPair(final byte[] seed)",5,1,3,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.truncateFileToBlock()",5,1,3,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.truncateFileToBlock()",5,1,3,2,0
"basis.brickness.testsupport.BrickTestRunner.invokeTestMethod(final Method method, final RunNotifier notifier)",5,1,2,2,2
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.subscribeToContents()",5,1,2,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.subscribeToContents()",5,1,2,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.accelerateHeartbeat()",5,1,2,2,0
"sneer.bricks.expression.files.client.impl.FileClientImpl.startFileDownload(final File file, final long size, final long lastModified, final Hash hashOfFile, final Seal source)",5,1,1,2,5
"sneer.bricks.pulp.probe.impl.ProbeImpl.ProbeImpl(Contact contact, Signal<Boolean> isConnectedSignal)",5,1,1,2,2
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.unmarshalPublicKey(final byte[] keyBytes)",5,1,1,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.publicKeyFrom(ByteBuffer data)",5,1,1,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.navigateAndWaitForName(String nicknamePath, String expectedName)",5,1,0,2,2
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.listenerFor(final Environment expectedEnvironment)",5,1,0,2,1
"sneer.bricks.expression.snoard.impl.SnoardImpl.sendClipboardContents(Contact contact)",4,1,6,2,1
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.defaultLocation(Window window)",4,1,5,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.copyNecessaryRepositoryBinFile(String fileName)",4,1,5,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.hashesOfRunningDownloads()",4,1,5,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.createDefaultImportantFolder()",4,1,5,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.finishWithLocalContents(Object pathToContents)",4,1,4,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.finishWithLocalContents(Object pathToContents)",4,1,4,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startApprovingConnectionRequests()",4,1,4,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.link(Polygon polygon1, Polygon polygon2)",4,1,3,2,2
"sneer.bricks.expression.snoard.impl.SnoardImpl.setClipboardContents(String aString)",4,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.setChosenForExecution(String brickName)",4,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitUntilOnline(SneerParty other)",4,1,3,2,1
"basis.testsupport.CleanTestBase.createTmpFile(String fileName, String contents)",4,1,2,2,2
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.set(String property, String value)",4,1,2,2,2
"sneer.bricks.pulp.probe.impl.PacketProducer.add(Tuple tuple)",4,1,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startHomePage(int port)",4,1,2,2,1
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.createSource()",4,1,2,2,0
"sneer.bricks.network.computers.udp.connections.impl.Guardian.handleConnect()",4,1,2,2,0
"sneer.bricks.expression.files.client.impl.FileClientImpl.startFolderDownload(final File folder, final Hash hashOfFolder, final Seal source, final boolean copyLocalFiles)",4,1,1,2,4
"basis.lang.CacheMap.get(K key, final ProducerX<V,X> producerToUseIfAbsent)",4,1,1,2,2
"basis.lang.CacheMap.get(K key, final V valueToUseIfAbsent)",4,1,1,2,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.createAndAddToBoardCellForPolygon(Polygon polygon, CellAttack cellAttack)",4,1,1,2,2
"sneer.bricks.network.computers.udp.connections.impl.Guardian.secret256bits(Hash decryptSecret)",4,1,1,2,1
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.setDefaultBaseComponent(Component defaultBaseComponent)",4,1,1,2,1
"sneer.bricks.network.computers.udp.connections.impl.Guardian.randomBytes()",4,1,1,2,0
"sneer.bricks.snapps.games.go.impl.logic.Intersection.getGroupWithNeighbours()",4,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.close()",4,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.open()",4,1,1,2,0
"basis.brickness.impl.ClassLoaderForBricks.ClassLoaderForBricks(Class<?> brick, URL[] urls, ClassLoader next, List<Nature> natures)",4,1,0,2,4
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.SequencerImpl(Consumer<? super T> consumer, short bufferSize, short maxGap)",4,1,0,2,3
"sneer.bricks.snapps.games.go.impl.logic.Intersection.copy()",4,1,0,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.isOpenRequested()",4,1,0,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.concat(Iterable<ChatMessage> shouts)",3,1,5,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.updateFileMap()",3,1,5,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.updateFileMap()",3,1,5,2,0
"basis.testsupport.AssertUtils.assertStartsWith(byte[] expectedStart, byte[] actual)",3,1,4,2,2
"basis.brickness.testsupport.BrickTestRunner.BrickTestRunner(Class<?> testClass)",3,1,4,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.copyToSourceFolder(File folder)",3,1,4,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.seal()",3,1,4,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitForSync()",3,1,4,2,0
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.dealWithFinishedDownload(final Download download)",3,1,3,2,1
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.volumePercent(int level)",3,1,3,2,1
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.mix256bits(final byte[] seed)",3,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.isOnline(String nickname)",3,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.setOwnName(String newName)",3,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.setSneerPort(int port)",3,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.shout(String phrase)",3,1,3,2,1
"basis.lang.arrays.ImmutableArray.iterator()",3,1,3,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.ownName()",3,1,3,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.sneerPort()",3,1,3,2,0
"basis.testsupport.CleanTestBase$LeakingThreadStopped.LeakingThreadStopped(Thread leakingThread, String message)",3,1,2,2,2
"sneer.bricks.expression.files.client.impl.FileClientImpl.cleaningOnFinished(Download download, final Hash hashOfFile)",3,1,2,2,2
"basis.lang.arrays.ImmutableArray.toArray(E[] a)",3,1,2,2,1
"basis.testsupport.CleanTestBase.assertTmpFileDoesntExist(String fileName)",3,1,2,2,1
"basis.testsupport.CleanTestBase.assertTmpFileExists(String fileName)",3,1,2,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.mappedContentsBy(Hash hashOfContents)",3,1,2,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.mappedContentsBy(Hash hashOfContents)",3,1,2,2,1
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.digest(byte[] input)",3,1,2,2,1
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.remove(InternetAddress address)",3,1,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitUntilOnline(String nickname)",3,1,2,2,1
"basis.testsupport.CleanTestBase.checkConsolePollution()",3,1,2,2,0
"basis.testsupport.CleanTestBase.recoverConsole()",3,1,2,2,0
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.runningDownloads()",3,1,2,2,0
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.file()",3,1,2,2,0
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.isGapTooBig()",3,1,2,2,0
"sneer.bricks.skin.imgselector.impl.ImageDialog.initLayers()",3,1,2,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getBoardCells()",3,1,2,2,0
"sneer.bricks.expression.files.client.impl.FileClientImpl.startFolderDeltasDownload(File folder, Hash hashOfFolder, Seal source)",3,1,1,2,3
"sneer.bricks.expression.files.client.impl.FileClientImpl.startFolderDownload(File folder, Hash hashOfFolder, Seal source)",3,1,1,2,3
"basis.lang.CacheMap.getWithoutBlocking(K key, FunctorX<K,V,X> functorToUseIfAbsent)",3,1,1,2,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonesInPlayPainter.StonesInPlayPainter(StonePainter stonePainter, final float cellSize)",3,1,1,2,2
"basis.brickness.testsupport.BrickTestRunner.wrapMethod(Method method)",3,1,1,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.setOnOffSwitch(Signal<Boolean> onOffSwitch)",3,1,1,2,1
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.run(Runnable runnable)",3,1,1,2,1
"sneer.bricks.hardware.ram.deepcopy.impl.Deserializer.Deserializer(InputStream inputStream)",3,1,1,2,1
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.containsKey(String property)",3,1,1,2,1
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.get(String property)",3,1,1,2,1
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.produce(Packet<T> packet)",3,1,1,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getLinkedCellCount(BoardCell boardCell)",3,1,1,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.remove(BoardCell cell)",3,1,1,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.isContact(String nickname)",3,1,1,2,1
"basis.brickness.impl.ClassLoaderForBricks.brickName()",3,1,1,2,0
"basis.lang.arrays.ImmutableArray.toArray()",3,1,1,2,0
"basis.lang.arrays.ImmutableArray.toString()",3,1,1,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.isWaitingForActivity()",3,1,1,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.isWaitingForActivity()",3,1,1,2,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.currentEnvironment()",3,1,1,2,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.currentThread()",3,1,1,2,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.addresses()",3,1,1,2,0
"sneer.bricks.network.computers.udp.connections.impl.Guardian.handleDisconnect()",3,1,1,2,0
"sneer.bricks.pulp.probe.impl.PacketProducer.drain()",3,1,1,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.getCellCount()",3,1,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startHomePage()",3,1,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startStunServer()",3,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.isOpen()",3,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.sound()",3,1,1,2,0
"sneer.bricks.expression.snoard.impl.SnoardImpl.lostOwnership(Clipboard clipboard, Transferable contents)",3,1,0,2,2
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.newAES256Cipher(byte[] encryptKey, byte[] decryptKey)",3,1,0,2,2
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.shortSubtract(short s1, short s2)",3,1,0,2,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.Attack(Player playerAttacking, Board board)",3,1,0,2,2
"basis.testsupport.PrintStreamSentinel.PrintStreamSentinel(PrintStream delegate)",3,1,0,2,1
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.unmarshallHash(byte[] bytes)",3,1,0,2,1
"sneer.bricks.snapps.games.go.impl.logic.Intersection.connectToYourLeft(Intersection other)",3,1,0,2,1
"sneer.bricks.snapps.games.go.impl.logic.Intersection.connectUp(Intersection other)",3,1,0,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.gitPullFrom(String contactNickname)",3,1,0,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.recoverFileFromBackup(String fileName)",3,1,0,2,1
"basis.lang.arrays.ImmutableArray.isEmpty()",3,1,0,2,0
"basis.lang.arrays.ImmutableArray.size()",3,1,0,2,0
"basis.testsupport.CleanTestBase$LeakingThreadStopped.fillInStackTrace()",3,1,0,2,0
"sneer.bricks.hardware.cpu.crypto.impl.CryptoImpl.newDigester()",3,1,0,2,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.impl.SomeGuiBrickImpl.constructorThread()",3,1,0,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.canPass()",3,1,0,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.getPhase()",3,1,0,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.getPhaseName()",3,1,0,2,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.Attack.getWhoIsPlaying()",3,1,0,2,0
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.errorString()",3,1,0,2,0
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.success()",3,1,0,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.gitHasOneCommit()",3,1,0,2,0
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.rate(TrackEndorsement e, Boolean opinion)",2,1,4,2,2
"sneer.bricks.snapps.diff.text.gui.impl.TextBlockPainter.richAppend(TextBlock block, final Style style)",2,1,3,2,2
"sneer.tests.adapters.impl.SneerPartyControllerImpl.isAlive(Contact contact)",2,1,3,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.waitUntilOnline(Contact contact)",2,1,3,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.hasReachedDownloadLimit()",2,1,3,2,0
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.isInboxFull()",2,1,3,2,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.save()",2,1,3,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.repositoryBinFolder()",2,1,3,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.testBinFolder()",2,1,3,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.testSrcFolder()",2,1,3,2,0
"basis.brickness.testsupport.BrickTestRunner.cloneTestEnvironment(Object... bindings)",2,1,2,2,1
"basis.brickness.testsupport.BrickTestRunner.instanceBeingInitialized(Object testInstance)",2,1,2,2,1
"basis.lang.arrays.ImmutableArray.ImmutableArray(Collection<T> elements)",2,1,2,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.fileToWrite(TrackEndorsement endorsement)",2,1,2,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.isRejected(TrackEndorsement endorsement)",2,1,2,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.log(String cause)",2,1,2,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.senderOf(TrackEndorsement endorsement)",2,1,2,2,1
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.requestForBlock(int number)",2,1,2,2,1
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.requestForBlock(int number)",2,1,2,2,1
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.isTranslucencySupported(Object kind)",2,1,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.contactGiven(String nickname)",2,1,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.produceContact(String contactName)",2,1,2,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.startAndKeep(Class<?> snapp)",2,1,2,2,1
"basis.brickness.testsupport.BrickTestRunner.dispose()",2,1,2,2,0
"basis.testsupport.CleanTestBase.newTmpFile()",2,1,2,2,0
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.inbox()",2,1,2,2,0
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.dBGain()",2,1,2,2,0
"sneer.bricks.pulp.probe.impl.ProbeImpl.contactsSeal()",2,1,2,2,0
"sneer.main.SneerVersionUpdater.installNewVersionIfPresent()",2,1,2,2,0
"sneer.main.SneerVersionUpdater.copySubFolder(String subFolder, File from, File to)",2,1,1,2,3
"basis.lang.CacheMap.get(K key, FunctorX<K,V,X> functorToUseIfAbsent)",2,1,1,2,2
"basis.testsupport.AssertUtils.assertFloat(float expected, float actual)",2,1,1,2,2
"sneer.bricks.pulp.probe.impl.ProbeImpl.isCorrectAddressee(Tuple tuple, Seal seal)",2,1,1,2,2
"sneer.bricks.pulp.probe.impl.ProbeImpl.isEcho(Tuple tuple, Seal seal)",2,1,1,2,2
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.setWindowOpacity(Window window, float opacity)",2,1,1,2,2
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.setWindowOpaque(Window window, boolean opaque)",2,1,1,2,2
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.setWindowShape(Window window, Shape shape)",2,1,1,2,2
"basis.lang.arrays.ImmutableArray.ImmutableArray(T... elements)",2,1,1,2,1
"basis.languagesupport.JarFinder.languageSupportJars(File root)",2,1,1,2,1
"basis.languagesupport.JarFinder.testSupportJars(File root)",2,1,1,2,1
"basis.testsupport.CleanTestBase.createTmpFileWithFileNameAsContent(String fileName)",2,1,1,2,1
"basis.testsupport.CleanTestBase.newTmpFile(String fileName)",2,1,1,2,1
"dfcsantos.tracks.exchange.downloads.downloader.impl.TrackDownloaderImpl.isFromUnknownPublisher(final TrackEndorsement endorsement)",2,1,1,2,1
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.isTranslucencyCapable(GraphicsConfiguration gc)",2,1,1,2,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardImpl.addCell(BoardCellImpl boardCell)",2,1,1,2,1
"sneer.main.SneerVersionUpdater$ExclusionFilter.ExclusionFilter(File... filesToExclude)",2,1,1,2,1
"sneer.main.SneerVersionUpdater$ExclusionFilter.accept(File candidate)",2,1,1,2,1
"sneer.main.SneerVersionUpdater.deleteFolder(File folder)",2,1,1,2,1
"basis.brickness.testsupport.BrickTestRunner.createTestEnvironment()",2,1,1,2,0
"basis.environments.ResolvingCache.clear()",2,1,1,2,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressKeeperImpl.InternetAddressKeeperImpl()",2,1,1,2,0
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.in()",2,1,1,2,0
"sneer.bricks.pulp.propertystore.impl.PropertyStoreImpl.out()",2,1,1,2,0
"sneer.bricks.pulp.streams.sequencer.impl.SequencerImpl.wasAlreadyProduced()",2,1,1,2,0
"sneer.bricks.snapps.wind.tests.WindTest.tupleSpace()",2,1,1,2,0
"sneer.main.SneerVersionUpdater.newBackupLabel()",2,1,1,2,0
"sneer.tests.adapters.impl.SneerPartyControllerImpl.apiClassLoader()",2,1,1,2,0
"snype.whisper.audio.SpeexSpeaker.close()",2,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.goToSleep()",2,1,1,2,0
"snype.whisper.skin.audio.mic.impl.MicImpl.wakeUp()",2,1,1,2,0
"basis.environments.ResolvingCache.ResolvingCache(Functor<K,V> resolver)",2,1,0,2,1
"dfcsantos.tracks.execution.player.impl.GainJavaSoundAudioDevice.GainJavaSoundAudioDevice(int volumePercent)",2,1,0,2,1
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.defaultUnusedArea(Dimension screenSize)",2,1,0,2,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonesInPlayPainter.setBoardDimensions(final float cellSize)",2,1,0,2,1
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.CompilationResult(int compilerCode)",2,1,0,2,1
"sneer.bricks.software.code.compilers.java.impl.CompilationResult.setError(String errorString)",2,1,0,2,1
"sneer.bricks.software.code.metaclass.asm.impl.ClassReaderImpl.ClassReaderImpl(File classFile)",2,1,0,2,1
"sneer.tests.adapters.impl.SneerPartyControllerImpl.newSeal(byte[] bytes)",2,1,0,2,1
"basis.brickness.impl.ClassLoaderForBricks.shouldRealizeNatures()",2,1,0,2,0
"basis.lang.CacheMap.newInstance()",2,1,0,2,0
"basis.lang.arrays.ImmutableArray.length()",2,1,0,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.isFirstRequest()",2,1,0,2,0
"sneer.bricks.expression.files.client.downloads.impl.FileDownload.readyToFinish()",2,1,0,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.isFirstRequest()",2,1,0,2,0
"sneer.bricks.expression.files.client.downloads.old.impl.FileDownloadOld.readyToFinish()",2,1,0,2,0
"sneer.bricks.network.computers.udp.connections.impl.Guardian.isHandshakeComplete()",2,1,0,2,0
"sneer.bricks.snapps.games.go.impl.logic.Intersection.isLiberty()",2,1,0,2,0
"basis.testsupport.CleanTestBase.afterFailedtest(@SuppressWarnings('unused') Method method, @SuppressWarnings('unused') Throwable thrown)",1,1,0,2,2
"sneer.bricks.skin.windowboundssetter.impl.WindowBoundsSetterImpl.setBestBounds(Window window)",0,1,1,2,1
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.translucencyClass()",0,1,1,2,0
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.utilitiesClass()",0,1,1,2,0
"basis.lang.arrays.ImmutableArray.add(T e)",0,1,0,2,1
"basis.lang.arrays.ImmutableArray.addAll(Collection<? extends T> c)",0,1,0,2,1
"basis.lang.arrays.ImmutableArray.remove(Object o)",0,1,0,2,1
"basis.lang.arrays.ImmutableArray.removeAll(Collection<?> c)",0,1,0,2,1
"basis.lang.arrays.ImmutableArray.retainAll(Collection<?> c)",0,1,0,2,1
"basis.lang.CacheMap.CacheMap()",0,1,0,2,0
"basis.lang.arrays.ImmutableArray.clear()",0,1,0,2,0
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.perpixelTranslucent()",0,1,0,2,0
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.perpixelTransparent()",0,1,0,2,0
"sneer.bricks.skin.main.translucentsupport.impl.TranslucentSupportImpl.translucent()",0,1,0,2,0
"sneer.bricks.software.diff.tests.TextComparatorTest.diffTest()",102,1,73,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.initGui()",48,1,31,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.ownIpsChange()",44,1,20,1,0
"sneer.bricks.skin.imgselector.impl.Keyhole.addMouseListeners(final JLayeredPane layeredPane)",43,1,5,1,1
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.retryAfterIOException()",39,1,11,1,0
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.userInterventionRequiredAfterFailure()",33,1,14,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl$SelectionSupport.initListeners()",33,1,3,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.testSpeexToPcm()",30,1,21,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.initGui()",29,1,16,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.paintShadows(Graphics graph)",27,1,24,1,1
"snype.whisper.audio.LoopbackDemo.LoopbackDemo()",27,1,8,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.MessagePainter(DefaultStyledDocument styledDocument)",24,1,17,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.createRootPanel(JComponent nick, JComponent time, JComponent message, @SuppressWarnings('unused') boolean isSelected, final JList<? extends Message> list)",24,1,12,1,5
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.GamePanel(final int numberOfPlayers, final int lines, final int columns, final int randomlyRemoveCellCount, final Random random)",24,1,4,1,5
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.initListeners()",24,1,4,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.initGui()",23,1,15,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonePainter.setBoardDimensions(final float boardImageSize, final float cellSize)",23,1,8,1,2
"sneer.tests.adapters.SneerCommunity.createParty(String name, int port)",22,1,19,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.createAndWireDrawers()",21,1,13,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.initGui()",20,1,14,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.GuiPlayer(final int gameID, StoneColor side, final int boardSize, final TimerFactory timerFactory)",20,1,11,1,4
"sneer.bricks.pulp.reactive.tests.SignalsTest.receive()",19,1,17,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.undock()",19,1,10,1,0
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.addReceiver(final Consumer<? super T> eventReceiver)",19,1,2,1,1
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.redundantUpdate()",18,1,6,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Requesting.submitUpdateRequest(final DynDnsAccount account, String ip)",18,1,3,1,2
"sneer.bricks.pulp.reactive.tests.SignalsTest.receptionDisposal()",17,1,13,1,0
"sneer.bricks.hardware.clock.timer.tests.TimerTest.testAlarmThatAddsAlarm()",17,1,5,1,0
"sneer.bricks.pulp.reactive.impl.SignalUtilsImpl.waitForValue(Signal<T> signal, final T expected)",17,1,2,1,2
"sneer.bricks.expression.tuples.tests.TupleSpaceTest.subscriptionRemoval()",16,1,10,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.InstrumentPanelImpl(Instrument instrument)",16,1,7,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.resizeToolbar()",16,1,7,1,0
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.startDisplayingProgress(final Download download)",16,1,6,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.tryToDownload(final FileEvent value, File folder)",16,1,5,1,2
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.greet(ByteArraySocket socket)",16,1,5,1,1
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.initGui()",16,1,5,1,0
"sneer.bricks.pulp.reactive.tests.SignalsTest.adaptSignal()",15,1,18,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintBottomOvalHighlight(Graphics2D g2)",15,1,13,1,1
"snype.whisper.audio.SpeexMicrophone.SpeexMicrophone(AudioConsumer consumer)",15,1,11,1,1
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.ReplWindowImpl()",15,1,8,1,0
"sneer.bricks.softwaresharing.mapper.impl.RepositoryMapperImpl.tryToInit()",15,1,8,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.setGridBagLayout()",15,1,7,1,0
"sneer.bricks.identity.keys.signatures.impl.SignaturesImpl.verifySignature(byte[] message, PublicKey publicKey, byte[] signature)",15,1,5,1,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintBottomHighlights(Graphics2D g2)",15,1,4,1,1
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.updateOnIpChange()",15,1,3,1,0
"sneer.bricks.snapps.games.go.impl.GoMainImpl.setupPlayers(final ByRef<StoneColor> stoneColor, final int size, final int gameId)",15,1,2,1,3
"sneer.bricks.snapps.games.go.impl.GoMainImpl.setupContextMenu()",15,1,2,1,0
"sneer.bricks.snapps.games.go.impl.GoMainImpl.subscribeToReceiveGoMessages()",15,1,2,1,0
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.printContext(Method method, Throwable thrown)",14,1,17,1,2
"sneer.bricks.identity.seals.contacts.tests.ContactSealsTest.contactDeletionCascadesToItsSeals()",14,1,10,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl.TextDiffPanelImpl()",14,1,9,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.send(ByteArraySocket socket)",14,1,7,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintDarkEdges(Graphics2D g2)",14,1,7,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintTopLeftOvalSpecularHighlight(Graphics2D g2)",14,1,7,1,1
"sneer.bricks.hardware.clock.timer.tests.TimerTest.testAlarms()",14,1,7,1,0
"snype.whisper.skin.audio.kernel.impl.AudioImpl.tryToOpenCaptureLine()",14,1,7,1,0
"snype.whisper.skin.audio.kernel.impl.AudioImpl.tryToOpenPlaybackLine(AudioFormat audioFormat)",14,1,6,1,1
"sneer.bricks.snapps.gis.location.impl.LocationImpl.getDataForLocation(String location)",14,1,5,1,1
"sneer.bricks.hardware.ram.deepcopy.impl.DeepCopierImpl.tryToDeepCopyThroughPipe(Object original)",14,1,4,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.addDoneListenerCommiter()",14,1,4,1,0
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.openFrame()",14,1,4,1,0
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.isInteresting(String stackLine)",14,1,1,1,1
"sneer.bricks.network.computers.http.server.impl.HttpServerImpl.wrapped(final HttpHandler httpHandler)",14,1,1,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.tryToCreateBufferedImage(Image image)",13,1,12,1,1
"sneer.bricks.skin.main.dashboard.impl.TrayIconSupport.TrayIconSupport(WindowSupport windowSupport)",13,1,11,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.repliesForAlternate(DatagramPacket packet)",13,1,7,1,1
"sneer.bricks.expression.tuples.tests.TupleSpaceTest.subscriptionIsNotifiedSynchronously()",13,1,7,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.DashboardPanel()",13,1,6,1,0
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOffIn(final Light light, int millisFromNow)",13,1,5,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintTopShadow(Graphics2D g2)",13,1,5,1,1
"snype.whisper.skin.audio.loopback.impl.Player.start(ByteArrayOutputStream buffer)",13,1,4,1,1
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.doPlay(URL url)",13,1,4,1,1
"sneer.bricks.pulp.reactive.impl.SignalUtilsImpl.waitForElement(SetSignal<T> setSignal, final Predicate<T> predicate)",13,1,3,1,2
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.addMeTooButton(JToolBar toolbar)",13,1,2,1,1
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.addKeyListeners()",13,1,1,1,0
"basis.environments.tests.EnvironmentsTest.environment(final Object... bindings)",13,1,0,1,1
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.init()",12,1,11,1,0
"sneer.bricks.softwaresharing.git.impl.GitImpl.tryToPull(Path fromRepo, Repository repository)",12,1,9,1,2
"sneer.bricks.network.computers.udp.holepuncher.server.listener.impl.Listener.Listener(String name, int port)",12,1,8,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.ChatPanelImpl(ListSignal<Message> messages, Consumer<String> messageSender)",12,1,7,1,2
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.accumulateBrick(String fileName)",12,1,7,1,1
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.setBorderLayout()",12,1,7,1,0
"sneer.bricks.softwaresharing.publisher.impl.BuildingPublisherImpl.publishMyOwnBuilding()",12,1,5,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.SpeexTuples2Impl()",12,1,5,1,0
"snype.whisper.speextuples.impl.SpeexTuplesImpl.SpeexTuplesImpl()",12,1,5,1,0
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.play(AudioInputStream audioInputStream)",12,1,4,1,1
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.listChildren()",12,1,3,1,0
"sneer.bricks.hardware.cpu.utils.consumers.parsers.integer.impl.IntegerParserImpl.consume(String string)",12,1,2,1,1
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.createTrayIcon(Image image)",12,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.initMessageConsumers()",12,1,1,1,0
"dfcsantos.tracks.execution.playlist.tests.PlaylistTest.testSequentialPlaylist()",11,1,20,1,0
"sneer.bricks.pulp.reactive.tests.SignalsTest.adapt()",11,1,10,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.updateFileToSync(File file, String relativeName)",11,1,7,1,2
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.insertLineBreak()",11,1,7,1,0
"sneer.bricks.software.code.compilers.java.tests.JarUtils.jarGiven(Class<?> clazz)",11,1,6,1,1
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.connectLocalToRemote()",11,1,6,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.iniGui()",11,1,6,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.stageBricksForInstallation()",11,1,6,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl.compare(File file1, File file2)",11,1,5,1,2
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.receiveFrom(ByteArraySocket mySocket)",11,1,5,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.RAbstractField(WIDGET textComponent, Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",11,1,4,1,4
"sneer.bricks.hardware.io.log.exceptions.uncaught.impl.UncaughtExceptionLoggerImpl.uncaughtException(Thread ignored, final Throwable t1)",11,1,4,1,2
"sneer.bricks.skin.imgselector.impl.Keyhole.Keyhole(JLayeredPane layeredPane, Consumer<Image> imageSetter)",11,1,4,1,2
"sneer.bricks.hardware.gui.images.impl.ImagesImpl.pixels(BufferedImage image)",11,1,4,1,1
"sneer.bricks.hardware.clock.timer.tests.TimerTest.testSimultaneousAlarms()",11,1,4,1,0
"dfcsantos.tracks.execution.player.impl.PausableInputStream.close()",11,1,2,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.addNavigateFriendMenu()",11,1,2,1,0
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.startTimer()",11,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.initCopyClassNameToClipboardAction()",11,1,1,1,0
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.send(DatagramPacket packet)",10,1,16,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.copy(BufferedImage source, BufferedImage target)",10,1,9,1,2
"sneer.bricks.software.code.compilers.java.tests.JarUtils.createJar(File file, Class<?> klass)",10,1,8,1,2
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.initDocumentStyles(StyledDocument doc)",10,1,8,1,1
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.shield(String operation, ClosureX<Exception> closure)",10,1,7,1,2
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.tryToPublishMyOwnBuilding()",10,1,7,1,0
"dfcsantos.tracks.execution.player.impl.TrackContractImpl.TrackContractImpl(final Track track, final Signal<Boolean> isPlaying, final Signal<Integer> volumePercent, final Runnable toCallWhenFinished)",10,1,6,1,4
"sneer.bricks.pulp.notifiers.tests.EventNotifiersTest.actsAsPulser()",10,1,6,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.getListCellRendererComponent(JList<? extends Message> jList, Message element, int ignored2, boolean isSelected, boolean cellHasFocus)",10,1,5,1,5
"sneer.bricks.network.computers.http.server.tests.HttpServerTest.httpServer()",10,1,5,1,0
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.map(File file)",10,1,4,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.getFileBlockBytes(File file, int blockNumber)",10,1,3,1,2
"sneer.bricks.hardware.ram.deepcopy.impl.DeepCopierImpl.deepCopy(T original)",10,1,3,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.createPrevayler(final File prevalenceBase)",10,1,2,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.toPngData(BufferedImage img)",10,1,2,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.run()",10,1,2,1,0
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpImpl.startPumping(Environment from, final Environment to)",10,1,1,1,2
"sneer.main.SneerSessionBase.configure(FolderConfig dirs)",9,1,15,1,1
"dfcsantos.music.impl.PeerTracks.moveTrackToFolder(Track track, File destFolder)",9,1,13,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.brickApiFiles()",9,1,13,1,0
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.generateBricks()",9,1,12,1,0
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.assertBrickInfo(String brickName, String... expectedFileNames)",9,1,10,1,2
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.consume(String text)",9,1,9,1,1
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.localBrickDiscoveryWithBricksInSubfolders()",9,1,8,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.initWindow()",9,1,7,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.AttributeSubscriber(Contact contact, Class<? extends Attribute<T>> attribute, Class<? super T> valueType)",9,1,6,1,3
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.mapSharedTracksFolder(File newSharedTracksFolder)",9,1,6,1,1
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.add(VO element)",9,1,6,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.initDocumentStyles(StyledDocument doc)",9,1,6,1,1
"sneer.bricks.snapps.gis.map.impl.MapRendererImpl.bytesToImage(byte[] imageData)",9,1,6,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitBrickMetadataInitializer()",9,1,6,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.refreshBrickTree()",9,1,6,1,0
"sneer.bricks.pulp.probe.impl.ProbeManagerImpl.desserialize(ByteBuffer packet, Contact contact)",9,1,5,1,2
"basis.brickness.impl.BricknessImpl.BricknessImpl(Object... bindings)",9,1,5,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.handleDetails(FileTransferDetails details)",9,1,5,1,1
"basis.environments.tests.EnvironmentsTest.testNakedMy()",9,1,5,1,0
"basis.lang.Immutable.fields()",9,1,5,1,0
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.close()",9,1,5,1,0
"sneer.bricks.hardware.cpu.threads.throttle.impl.CpuThrottleImpl.limitMaxCpuUsage(int percentage, ClosureX<X> closure)",9,1,4,1,2
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.invokeAndWait(final Closure closure)",9,1,4,1,1
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.OutgoingAttempt(final InternetAddress address)",9,1,4,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.addAllComponents(final TimerFactory timerFactory)",9,1,4,1,1
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.writeSourceFile(String code)",9,1,4,1,1
"sneer.tests.adapters.SneerCommunity.newSession(SovereignParty party)",9,1,4,1,1
"sneer.bricks.network.computers.udp.server.impl.UdpPortSession.tryToOpenSocket()",9,1,4,1,0
"sneer.bricks.hardware.cpu.threads.impl.Daemon.Daemon(String threadName, Closure runnable)",9,1,3,1,2
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.accumulateBricks(final BuildingHash buildingHash, Contact publisher)",9,1,3,1,2
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.read(long number)",9,1,3,1,1
"sneer.bricks.pulp.exceptionhandling.impl.ExceptionHandlerImpl.shield(Runnable runnable)",9,1,3,1,1
"sneer.bricks.pulp.exceptionhandling.impl.ExceptionHandlerImpl.shieldX(final ClosureX<?> closure)",9,1,3,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.addListenerToHideToolbarsWhenMouseExited()",9,1,3,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.tryToAcquire()",9,1,3,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer$InterceptedMethod.InterceptedMethod(int access_, String name_, String desc_, String signature_, String[] exceptions_, String implName_)",9,1,2,1,6
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.TimeboxRunner(int durationInMillis, Runnable toRun, Runnable toCallWhenBlocked)",9,1,2,1,3
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.isMouseOverAnyToolbar(final Point mousePoint)",9,1,2,1,1
"sneer.bricks.hardware.cpu.threads.impl.Daemon.run()",9,1,2,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.fetchIfNecessary(final BuildingHash buildingHash, final Contact publisher)",9,1,1,1,2
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.startAccepting()",9,1,1,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Requesting.Requesting()",9,1,1,1,0
"sneer.bricks.network.social.rendezvous.impl.RendezvousImpl.acceptCall(Call call)",8,1,11,1,1
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl.findBricks()",8,1,9,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.setOnOffSwitch(Signal<Boolean> onOffSwitch)",8,1,8,1,1
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.compile(String code, File libDir)",8,1,7,1,2
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.createContactsListWidget()",8,1,7,1,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.unmarshalReply(ByteBuffer in)",8,1,6,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.paintComponent(final Graphics g)",8,1,6,1,1
"sneer.bricks.software.code.compilers.java.impl.JavaCompilerImpl.asJavacArgument(File[] classpath)",8,1,6,1,1
"sneer.bricks.expression.files.map.mapper.impl.FileMapperImpl.mapFileOrFolder(final File fileOrFolder, final String... acceptedFileExtensions)",8,1,5,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.putFolderHash(Path folder, FolderContents newContents)",8,1,5,1,2
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl.compare(String text1, String text2)",8,1,5,1,2
"basis.brickness.impl.BricknessImpl.newInstance(Class<?> brickImpl)",8,1,5,1,1
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.unmarshalRequest(ByteBuffer in)",8,1,5,1,1
"sneer.bricks.network.computers.udp.server.impl.UdpSocketHolder.send(DatagramPacket packet)",8,1,5,1,1
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.removeAt(int index)",8,1,5,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.Toolbar(String title)",8,1,5,1,1
"sneer.bricks.hardware.cpu.threads.impl.Daemon.shield()",8,1,5,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.initRootPanel()",8,1,5,1,0
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.challengeAdversary()",8,1,5,1,0
"sneer.bricks.snapps.gis.map.impl.MapRendererImpl.render(final Consumer<Image> receiver, final Location location, final int zoom)",8,1,4,1,3
"basis.environments.Environments.runWith(Environment environment, ClosureX<X> closure)",8,1,4,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.createTextComponent(String msg, String style)",8,1,4,1,2
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getIcon(File file)",8,1,4,1,1
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.startNewMapping()",8,1,4,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.UpnpImpl()",8,1,4,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.BricksGuiImpl()",8,1,4,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.Build(File srcFolder, File destFolder, Language language)",8,1,3,1,3
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.replace(int index, VO newElement)",8,1,3,1,2
"sneer.bricks.hardware.gui.images.impl.ImagesImpl.copy(BufferedImage original)",8,1,3,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.preserveOnlyActualChanges(CollectionChange<T> change)",8,1,3,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentInstaller.install(final Instrument instrument)",8,1,3,1,1
"basis.brickness.impl.tests.fixtures.a.impl.BrickAImpl.libsClassLoader()",8,1,3,1,0
"basis.brickness.impl.tests.fixtures.b.impl.BrickBImpl.libsClassLoader()",8,1,3,1,0
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.crashAllThreads()",8,1,3,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.startHailing()",8,1,3,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl.receiveInstruments()",8,1,3,1,0
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.waitForPacket()",8,1,3,1,0
"sneer.bricks.network.computers.http.server.impl.HttpServerImpl.weakContractFor(final Server server)",8,1,2,1,1
"sneer.bricks.pulp.serialization.impl.ClassMapper.realClass(String elementName)",8,1,2,1,1
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.SocketAccepterImpl()",8,1,2,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.changeLocalHostIp()",8,1,2,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.addContactEditAction()",8,1,2,1,0
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.addTaskAction()",8,1,2,1,0
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.joinWithoutInterruptions(Thread thread)",8,1,1,1,1
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.sleepWithoutInterruptions(long milliseconds)",8,1,1,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.waitWithoutInterruptions(Object object)",8,1,1,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.initUndockAction()",8,1,1,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.interceptorInvokeMethod()",8,1,1,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.prependBrickMetadataInitializationCode(MethodVisitor originalMethodVisitor)",8,1,0,1,1
"sneer.bricks.softwaresharing.git.tests.GitTest.prepare(String repoFixture, Path repo)",7,1,17,1,2
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.defineAttributes(String hitpoints, String strength, String armor)",7,1,11,1,3
"sneer.bricks.network.computers.http.server.tests.HttpServerTest.replyFor(int port, String target)",7,1,8,1,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.marshalReplyTo(StunReply reply, ByteBuffer out)",7,1,7,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.configureMenu()",7,1,7,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.tryToDeleteMapping(InternetGatewayDevice device, int previousPort)",7,1,6,1,2
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl.read(File file)",7,1,6,1,1
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.show(final Light light)",7,1,6,1,1
"sneer.bricks.pulp.notifiers.tests.EventNotifiersTest.throwablesBubbleUpDuringTests()",7,1,6,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl$ChatClipboardSupport.addKeyStrokeListener()",7,1,6,1,0
"sneer.tests.adapters.SneerCommunity.apiClassLoader(File privateBin, File sharedBin, final String name)",7,1,5,1,3
"basis.lang.Immutable.getFieldValue(Field field, Object object)",7,1,5,1,2
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.createPrevaylerFactory(Object system, File prevalenceBase)",7,1,5,1,2
"sneer.bricks.network.computers.http.server.impl.HttpServerImpl.start(int port, final HttpHandler httpHandler)",7,1,5,1,2
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.addAt(int index, VO element)",7,1,5,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.createTime(Message message, @SuppressWarnings('unused') boolean isSelected)",7,1,5,1,2
"sneer.bricks.hardware.io.prevalence.nature.impl.SerializerAdapter.readObject(InputStream stream)",7,1,5,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.getNickAsText(Message message)",7,1,5,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.configureToolbar()",7,1,5,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.BlinkingLightsGuiImpl()",7,1,5,1,0
"sneer.main.Sneer.classpath()",7,1,5,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.connectToContact(Seal seal, String nickname)",7,1,4,1,2
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpNowAndEvery(final long period, final Runnable stepper)",7,1,4,1,2
"sneer.bricks.hardware.io.log.formatter.impl.LogFormatterImpl.logMessage(String message, Object... messageInsets)",7,1,4,1,2
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.addContact(ContactOfContact contactToAdd)",7,1,4,1,1
"sneer.bricks.snapps.system.log.file.impl.LogToFileImpl.write(String msg)",7,1,4,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.compileBricks(Collection<File> brickFolders)",7,1,4,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.dotPartFile()",7,1,4,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.dotPartFile()",7,1,4,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.dock()",7,1,4,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.setOrigin(DatagramPacket request, String originIp, int originPort)",7,1,3,1,3
"sneer.bricks.pulp.reactive.gates.strings.impl.Concatenator.Concatenator(String separator, Signal<?>... chunks)",7,1,3,1,2
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.read(AudioInputStream audioInputStream, byte[] buffer)",7,1,3,1,2
"sneer.bricks.expression.files.server.impl.FileServerImpl.consume(FileRequest request)",7,1,3,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.tryToRun(Runnable toRun)",7,1,3,1,1
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.map(int port)",7,1,3,1,1
"sneer.bricks.software.code.classutils.impl.ClassUtilsImpl.classFile(Class<?> clazz)",7,1,3,1,1
"basis.environments.tests.EnvironmentsTest.testRunWith()",7,1,3,1,0
"sneer.bricks.network.computers.udp.connections.tests.PacketProducerMock.produce()",7,1,3,1,0
"sneer.bricks.network.social.impl.ContactImpl.toString()",7,1,3,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.tryIpDiscovery()",7,1,3,1,0
"sneer.bricks.network.computers.udp.receiver.impl.ReceiverThread.ReceiverThread(String threadName, UdpSocket socket, Consumer<DatagramPacket> receiver)",7,1,2,1,3
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.afterFailedtest(Method method, Throwable thrown)",7,1,2,1,2
"sneer.bricks.network.computers.udp.server.impl.UdpPortSession.UdpPortSession(int port, Consumer<DatagramPacket> receiver)",7,1,2,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.FirstDiceDistribution(final Player currentPlaying, final Board board)",7,1,2,1,2
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.setOnOffSwitch(Signal<Boolean> onOffSwitch)",7,1,2,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.receiveFolder(FolderContents contents)",7,1,2,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.receiveFolder(FolderContents contents)",7,1,2,1,1
"sneer.bricks.expression.tuples.floodcache.impl.FloodedTupleCacheImpl.add(Tuple tuple)",7,1,2,1,1
"sneer.bricks.hardware.cpu.threads.impl.Daemons.killQuietly(Thread thread)",7,1,2,1,1
"sneer.bricks.skin.main.dashboard.impl.TrayIconSupport.addOpenWindowAction(TrayIcon tray)",7,1,2,1,1
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.read()",7,1,2,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.defaultValue()",7,1,2,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.initMouseListener()",7,1,2,1,0
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.allBrickNames()",7,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.testWithExternalDependencies()",7,1,2,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.versions()",7,1,2,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.registerMainMenuItem()",7,1,2,1,0
"snype.whisper.skin.audio.loopback.impl.Player.readBuffer()",7,1,2,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.getMethod(Class<?> klass, String methodName, Class<?>... parameterTypes)",7,1,1,1,3
"sneer.bricks.pulp.retrier.impl.RetrierImpl.RetrierImpl(final int periodBetweenAttempts, final Task task)",7,1,1,1,2
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.waitWithoutInterruptions(Object object)",7,1,1,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.sleepWithoutInterruptions(long milliseconds)",7,1,1,1,1
"sneer.bricks.hardware.ram.deepcopy.impl.DeepCopierImpl.deepCopyThroughPipe(Object original)",7,1,1,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.fromPngData(byte[] bytes)",7,1,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.imageReceiverFor(Signal<Image> signal)",7,1,1,1,1
"basis.util.concurrent.Latch.waitTillOpen()",7,1,1,1,0
"basis.util.concurrent.RefLatch.waitAndGet()",7,1,1,1,0
"sneer.bricks.network.computers.tcp.impl.ByteArrayServerSocketImpl.crash()",7,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.addKeyListenerToCommitOnKeyTyped()",7,1,1,1,0
"snype.whisper.skin.screenshotter.impl.ScreenshotterImpl.createRobot()",7,1,1,1,0
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.packetTo(IpAddresses addr)",7,1,0,1,1
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.cast(TreeNode node)",7,1,0,1,1
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.helpMessage()",7,1,0,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.sequencerProducer()",7,1,0,1,0
"snype.whisper.speextuples.impl.SpeexTuplesImpl.sequencerProducer()",7,1,0,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.download(BuildingHash srcFolderHash)",6,1,7,1,1
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.init(InstrumentPanel window)",6,1,6,1,1
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl.findClassFileCandidates(File binFolder)",6,1,6,1,1
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.inferThreadName()",6,1,6,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.open()",6,1,6,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.contactsFormattedSealString()",6,1,6,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.show(final WindowBoundsSetter wbSetter)",6,1,5,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.whitePiecesColorSettings()",6,1,5,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.tryToTestWithExternalDependencies()",6,1,5,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.createPcmBuffer()",6,1,5,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.RImageImpl(Signal<Image> source, PickyConsumer<Image> setter)",6,1,4,1,2
"sneer.bricks.skin.imgselector.impl.Keyhole.getHoleSorceImage()",6,1,4,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.nicknameString()",6,1,4,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.updateMap(InternetGatewayDevice device, String ip, int port)",6,1,3,1,3
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.appendStyledText(StyledDocument doc, String msg, String style)",6,1,3,1,3
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.appendStyledText(StyledDocument doc, String msg, String style)",6,1,3,1,3
"dfcsantos.music.ui.presenter.impl.FolderChoicesPoll.accumulateSubFolders(Path folder, List<String> result)",6,1,3,1,2
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.writeFileTo(File destination, byte[] contents)",6,1,3,1,2
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.ByteArraySocketImpl(Socket socket)",6,1,3,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.listener.impl.Listener.tryToSend(DatagramPacket reply)",6,1,3,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.trySetText(final String text)",6,1,3,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.crash()",6,1,3,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.DynDnsClientImpl()",6,1,3,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.repaintInstruments()",6,1,3,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.tryReadText()",6,1,3,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.deleteStage()",6,1,3,1,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketCloser.closeIfUnsuccessful(ByteArraySocket socket, String message, ClosureX<IOException> closure)",6,1,2,1,3
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.tryToUpdateMapping(InternetGatewayDevice device, String ip, int port)",6,1,2,1,3
"sneer.bricks.software.bricks.compiler.impl.Build.compile(File srcFolder, File binFolder, File... classpath)",6,1,2,1,3
"sneer.bricks.software.diff.impl.TextComparatorImpl.diff(String text1, String text2, int dualThreshold)",6,1,2,1,3
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpImpl.TuplePumpImpl(Environment aTupleWell, Environment anotherTupleWell)",6,1,2,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowerImpl.throwDiceAndReturnOutcome(int diceCountAttacking, int diceCountDefending)",6,1,2,1,2
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.define(UnitAttribute attribute, Attributable thing)",6,1,2,1,2
"basis.brickness.impl.BricknessImpl.loadBrick(Class<T> brick)",6,1,2,1,1
"basis.brickness.impl.ClassLoaderForBrickLibs.toURL(File file)",6,1,2,1,1
"basis.brickness.impl.ClassLoaderForPackage.toURLs(File file)",6,1,2,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.registerStatusHandler(final Consumer<FileTransferStatus> statusHandler)",6,1,2,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.registerSugestionHandler(final Consumer<FileTransferSugestion> sugestionHandler)",6,1,2,1,1
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.decrypt(byte[] cipherText)",6,1,2,1,1
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.encrypt(byte[] plainText)",6,1,2,1,1
"sneer.bricks.identity.seals.impl.OwnSealImpl.adapt(Signal<PublicKey> ownPublicKey)",6,1,2,1,1
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Waiting.addAlarm(long millisFromNow)",6,1,2,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.hideAndShow(final Point mousePoint)",6,1,2,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.compileTestFiles(Collection<File> testFiles)",6,1,2,1,1
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.addExecuteButton(JPanel pnlBtn)",6,1,2,1,1
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.addResetButton(JPanel pnlBtn)",6,1,2,1,1
"sneer.main.Sneer.toURL(File file)",6,1,2,1,1
"sneer.tests.adapters.SneerCommunity.loadControllerUsing(URLClassLoader apiClassLoader)",6,1,2,1,1
"sneer.tests.adapters.SneerCommunity.toURL(File file)",6,1,2,1,1
"basis.environments.tests.EnvironmentsTest.testMyEnvironment()",6,1,2,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.startSendingRequests()",6,1,2,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.startSendingRequests()",6,1,2,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.startReplayingTransactions()",6,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.changeWindowCloseEventToMinimizeEvent()",6,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl.initGui()",6,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.commitOnKeyTyped()",6,1,2,1,0
"sneer.bricks.software.code.jar.impl.JarBuilderImpl.close()",6,1,2,1,0
"sneer.main.SneerSessionBase.SneerSessionBase()",6,1,2,1,0
"snype.whisper.skin.audio.loopback.impl.Recorder.tryToOpenCaptureLine()",6,1,2,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.speexPacketFrom(Seal contactKey, byte[][] bs, String channel, short sequence)",6,1,1,1,4
"sneer.bricks.expression.tuples.dispatcher.impl.TupleDispatcherImpl.doDispatch(final Tuple tuple, final Consumer<? super Tuple> subscriber, final Environment environment)",6,1,1,1,3
"dfcsantos.tracks.execution.player.impl.PausableInputStream.PausableInputStream(InputStream inputStream, Signal<Boolean> isPlaying)",6,1,1,1,2
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.process(BufferedBlockCipher cipher, byte[] data)",6,1,1,1,2
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.getValue(Field field, Object object)",6,1,1,1,2
"sneer.bricks.network.computers.http.server.impl.HttpServerImpl.start(int port, final Server server)",6,1,1,1,2
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.addContactUponClick(final ListWidget<String> contactsList, JButton meToo)",6,1,1,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.StonePainter.StonePainter(float boardImageSize, float cellSize)",6,1,1,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.compileApi(Collection<File> apiFiles, File destinationFolder)",6,1,1,1,2
"basis.brickness.testsupport.TestMethodWithEnvironment.doInvoke(Object test)",6,1,1,1,1
"sneer.bricks.expression.files.hasher.impl.FolderContentsHasherImpl.bytesUtf8(String string)",6,1,1,1,1
"sneer.bricks.identity.keys.gui.impl.PublicKeyInitDialogImpl.utf8(String seed)",6,1,1,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.ip(byte[] bytes)",6,1,1,1,1
"sneer.bricks.skin.main.dashboard.impl.TrayIconSupport.addExitAction(TrayIcon trayIcon)",6,1,1,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.settLookAndFeel(LookAndFeel laf)",6,1,1,1,1
"sneer.bricks.snapps.gis.map.impl.MapRendererImpl.decode(byte[] imageData)",6,1,1,1,1
"sneer.bricks.software.code.compilers.java.tests.JarUtils.toURI(final URL url)",6,1,1,1,1
"snype.whisper.skin.audio.player.impl.SoundPlayerImpl.tryInitAudioInputStream(URL url)",6,1,1,1,1
"snype.whisper.speex.impl.DecoderImpl.processData(final byte[] frame)",6,1,1,1,1
"basis.environments.tests.EnvironmentsTest.testMyInUnsuitableEnvironment()",6,1,1,1,0
"sneer.bricks.hardware.cpu.profiler.tests.ProfilerTest.sleepAWhile()",6,1,1,1,0
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.allocateSpace()",6,1,1,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.waitWithoutInterruptions()",6,1,1,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.waitWithoutInterruptions()",6,1,1,1,0
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.localhost()",6,1,1,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.pcmSoundPacketFrom(Seal publicKey, final byte[] pcmPayload)",6,1,0,1,2
"sneer.bricks.pulp.probe.impl.ProbeManagerImpl.createReceiver(final Contact contact)",6,1,0,1,1
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.asString(byte[] fileContents)",6,1,0,1,1
"basis.lang.Pair.first()",6,1,0,1,0
"basis.lang.Pair.second()",6,1,0,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.contactsSealSetter()",6,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.children()",6,1,0,1,0
"snype.whisper.gui.impl.SnypeGUIImpl.startCall()",5,1,11,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.copyResources()",5,1,10,1,0
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.tryToSend(File fileOrFolder, Seal peer)",5,1,7,1,2
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.copyInto(DatagramPacket original, DatagramPacket copy)",5,1,7,1,2
"sneer.bricks.expression.files.hasher.impl.FolderContentsHasherImpl.hash(FileOrFolder entry)",5,1,7,1,1
"sneer.bricks.software.code.compilers.java.impl.JavaCompilerImpl.createArgsFileForJavac(Collection<File> files)",5,1,7,1,1
"sneer.bricks.softwaresharing.git.tests.GitTest.pull()",5,1,7,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.loadImage(String fileName, LightType type)",5,1,6,1,2
"sneer.bricks.expression.tuples.dispatcher.impl.TupleDispatcherImpl.dispatch(Tuple tuple, Consumer<? super Tuple> subscriber, Environment environment)",5,1,5,1,3
"dfcsantos.music.impl.TrackSourceStrategy.condemn(Track victim)",5,1,5,1,1
"dfcsantos.music.impl.TrackSourceStrategy.onTrackKilled(Track victim)",5,1,5,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnectionUtils.prepare(UdpPacketType type)",5,1,5,1,1
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl$SelectionSupport.selectText(LinkedTextBlock toSelect)",5,1,5,1,1
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.accept(Challenge challenge)",5,1,5,1,1
"sneer.main.SneerSessionBase.prepare()",5,1,5,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.resizeShadow(int x, int y)",5,1,4,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.listJavaFiles(File srcFolder, Filter filterForSubfolders)",5,1,4,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardPainter.draw(Graphics2D buffer)",5,1,4,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.serverAddress()",5,1,4,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.open()",5,1,4,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.requestContactsOfContact()",5,1,4,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.Invocation.Invocation(ProducerX<Object,? extends Exception> targetProducer, Method method, Object[] args)",5,1,3,1,3
"basis.lang.Immutable.isSameFieldValue(Field field, Object other)",5,1,3,1,2
"basis.brickness.impl.BricknessImpl.tryToLoadBrick(Class<T> brick)",5,1,3,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.AttackOutcomeDrawer.draw(Graphics2D g2)",5,1,3,1,1
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.scheduleNextDiscovery()",5,1,3,1,0
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getDefaultConfiguration()",5,1,3,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.doMoveResign()",5,1,3,1,0
"sneer.main.SneerSession.start()",5,1,3,1,0
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOn(LightType type, String caption, String helpMessage, Throwable t, int timeout)",5,1,2,1,5
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.play(int x, int y, GameStateContext gameStateContext)",5,1,2,1,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowOutcome.DiceThrowOutcome(final int[] attackResults, final int[] defenseResults)",5,1,2,1,2
"sneer.bricks.softwaresharing.git.impl.GitImpl.pull(Path fromRepo, Path toRepo)",5,1,2,1,2
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.sleepAtLeast(long millis)",5,1,2,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.diedWith(TimeIsUp timeIsUp)",5,1,2,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.convert(CollectionChange<T> change)",5,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.getNickAsIcon(Message message)",5,1,2,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.copy(Intersection[][] intersections)",5,1,2,1,1
"sneer.bricks.snapps.gis.location.impl.LocationImpl.parseAndSetLocation(byte[] value)",5,1,2,1,1
"sneer.bricks.software.bricks.repl.impl.ReplConsoleImpl.exceptionToString(Throwable e)",5,1,2,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.write(byte[] array)",5,1,2,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.subscribeToContents()",5,1,2,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.subscribeToContents()",5,1,2,1,0
"sneer.bricks.hardware.clock.timer.tests.TimerTest$Worker.run()",5,1,2,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.relevantSignals()",5,1,2,1,0
"sneer.bricks.skin.widgets.clipboard.impl.ClipboardImpl.getContent()",5,1,2,1,0
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.subscribeToReceiveTaskMessages()",5,1,2,1,0
"sneer.bricks.expression.tuples.impl.Subscription.Subscription(Consumer<? super T> subscriber, Class<T> tupleType, Predicate<? super T> filter)",5,1,1,1,3
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.newCipher(byte[] key, boolean forEncryption)",5,1,1,1,2
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.startStepping(String threadName, Closure steppable)",5,1,1,1,2
"sneer.bricks.pulp.reactive.impl.SignalUtilsImpl.waitForElement(SetSignal<T> setSignal, final T expected)",5,1,1,1,2
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.BrickHistoryTreeNode(TreeNode parent, BrickHistory brickHistory)",5,1,1,1,2
"basis.brickness.testsupport.TestMethodWithEnvironment.invoke(final Object test)",5,1,1,1,1
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.shouldVisit(FileOrFolder fileOrFolder)",5,1,1,1,1
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.setPort(int port)",5,1,1,1,1
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.addPulseReceiver(final Closure pulseReceiver)",5,1,1,1,1
"sneer.bricks.skin.widgets.clipboard.impl.ClipboardImpl.setContent(String content)",5,1,1,1,1
"sneer.bricks.hardware.cpu.profiler.tests.ProfilerTest.testProfiling()",5,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.iterator()",5,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.clear()",5,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.startReceiving()",5,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.addDoneListenerCommiter()",5,1,1,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.ClassEnhancer(ClassVisitor delegate, Class<?> brick, Class<? extends Interceptor> interceptorClass, ArrayList<ClassDefinition> resultingClasses)",5,1,0,1,4
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.RTextPaneImpl(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",5,1,0,1,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.DiceDistribution(final Player currentPlaying, final Board board, final int diceToAdd)",5,1,0,1,3
"sneer.bricks.expression.tuples.dispatcher.impl.TupleDispatcherImpl.dispatchCounterIncrement()",5,1,0,1,0
"sneer.bricks.hardware.io.impl.IOImpl.filenames()",5,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.currentElements()",5,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.adder()",5,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.remover()",5,1,0,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.defaultColorSettings()",5,1,0,1,0
"dfcsantos.music.impl.PeerTracks.updateFileMap(File tmpTrack)",4,1,10,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.tryToPreserveOnlyActualChanges(CollectionChange<T> change)",4,1,7,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.updateFileMap()",4,1,7,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.updateFileMap()",4,1,7,1,0
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.marshal(StunReply reply, DatagramPacket packet)",4,1,6,1,2
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.relativePath(File track)",4,1,6,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.asBuffer(DatagramPacket reply)",4,1,6,1,1
"sneer.bricks.pulp.reactive.gates.strings.impl.Concatenator.refresh()",4,1,6,1,0
"snype.whisper.speextuples.impl.SpeexTuplesImpl.flush()",4,1,6,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finishWith(Exception e)",4,1,5,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finishWith(Exception e)",4,1,5,1,1
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.ConnectionMonitor(Contact contact)",4,1,5,1,1
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.getClickedLight(final MouseEvent event)",4,1,5,1,1
"sneer.main.SneerSessionBase.startLogging()",4,1,5,1,0
"sneer.bricks.hardware.cpu.profiler.impl.ProfilerImpl.methodLine(final Sampler sampler, PrintStream out, String method)",4,1,4,1,3
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.keepCallerAddresses(DatagramPacket packet, StunRequest req)",4,1,4,1,2
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getScaledInstance(Image image, double scale)",4,1,4,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.play(final int x, final int y)",4,1,4,1,2
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.appendLogger(Object... bindings)",4,1,4,1,1
"sneer.bricks.software.code.compilers.java.tests.JarUtils.fileFor(Class<?> clazz)",4,1,4,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finishWithSuccess()",4,1,4,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finishWithSuccess()",4,1,4,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.handleFolderToSyncChange()",4,1,4,1,0
"sneer.bricks.network.computers.udp.server.impl.UdpSocketHolder.crash()",4,1,4,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpEvery(long period, Runnable stepper, boolean isPeriodic)",4,1,3,1,3
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.prepareReply(List<DatagramPacket> replies, StunReply reply, IpAddresses addr)",4,1,3,1,3
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.rename(String from, String to)",4,1,3,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.fileFor(FileEvent value, File parentFolder)",4,1,3,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.play(int x, int y)",4,1,3,1,2
"dfcsantos.music.impl.PeerTracks.onTrackKilled(Track victim)",4,1,3,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.accept(FileTransferSugestion sugestion)",4,1,3,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.stackAsString(Throwable throwable)",4,1,3,1,1
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.setLastSessionKey(ByteBuffer buf)",4,1,3,1,1
"sneer.bricks.skin.imgselector.impl.Keyhole.onMouseMove(MouseEvent e)",4,1,3,1,1
"sneer.bricks.skin.imgselector.impl.Keyhole.onMouseWheel(MouseWheelEvent e)",4,1,3,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.initGui(String title)",4,1,3,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.setSize(Dimension size)",4,1,3,1,1
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.isBrickDefinition(byte[] fileContents)",4,1,3,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.cleanStagedBrickFolder(File brickFolder)",4,1,3,1,1
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.handle(ChallengeAcceptance acceptance)",4,1,3,1,1
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.receive(DatagramPacket packet)",4,1,3,1,1
"dfcsantos.music.impl.TrackSourceStrategy.numberOfTracks()",4,1,3,1,0
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.load()",4,1,3,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finalize()",4,1,3,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finalize()",4,1,3,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.Invocation.produce()",4,1,3,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.restoreIp()",4,1,3,1,0
"sneer.bricks.skin.imgselector.impl.Keyhole.captureAvatar()",4,1,3,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.WindowSupport()",4,1,3,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl$SelectionSupport.SelectionSupport()",4,1,3,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.blackPiecesColorSettings()",4,1,3,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.pass()",4,1,3,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.cleanTmpBrickImplFolder()",4,1,3,1,0
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.addReplWindowToMenu()",4,1,3,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.testEmptyDir()",4,1,3,1,0
"sneer.bricks.softwaresharing.git.tests.GitTest.pullWithConflict()",4,1,3,1,0
"sneer.bricks.softwaresharing.git.tests.GitTest.pullWithError_UntrackedEmptyFileSameAsFileBeingPulled()",4,1,3,1,0
"dfcsantos.tracks.execution.player.impl.PausableInputStream.read(byte[] b, int off, int len)",4,1,2,1,3
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getScaledInstance(Image image, int width, int height)",4,1,2,1,3
"sneer.bricks.hardware.io.log.tests.LoggerMock.weaveInsets(String message, Object... messageInsets)",4,1,2,1,2
"sneer.bricks.hardware.io.prevalence.nature.impl.TransactionInvocation.executeAndQuery(Object prevalentSystem, Date executionTimeIgnored)",4,1,2,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.doMoveAddStone(int x, int y)",4,1,2,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.doMoveMarkStone(int x, int y)",4,1,2,1,2
"sneer.bricks.software.diff.tests.TextComparatorTest.check(String text1, String text2)",4,1,2,1,2
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.openSocket(String serverIpAddress, int serverPort)",4,1,2,1,2
"basis.brickness.impl.BricknessImpl.createCachingEnvironment(Bindings bindings)",4,1,2,1,1
"dfcsantos.tracks.execution.player.impl.PausableInputStream.read(byte[] b)",4,1,2,1,1
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.startMapping(final int port)",4,1,2,1,1
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField$ChangeInfoDecorator.ChangeInfoDecorator(JComponent target)",4,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.addLineSpace(JComponent root)",4,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.addStyleImage(Image image)",4,1,2,1,1
"sneer.bricks.software.code.jar.impl.JarBuilderImpl.JarBuilderImpl(File file)",4,1,2,1,1
"sneer.tests.adapters.SneerCommunity.crash(SovereignParty party)",4,1,2,1,1
"sneer.tests.freedom6.Freedom6Test.createFolder(String fileName)",4,1,2,1,1
"basis.lang.arrays.ImmutableByteArray.toStringLarge()",4,1,2,1,0
"dfcsantos.music.impl.TrackSourceStrategy.startKillTimer()",4,1,2,1,0
"dfcsantos.tracks.execution.player.impl.PausableInputStream.read()",4,1,2,1,0
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.chooseFileToSend()",4,1,2,1,0
"sneer.bricks.expression.tuples.impl.Subscription.startNotifyingSubscriber()",4,1,2,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.remoteSeal()",4,1,2,1,0
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpImpl.dispose()",4,1,2,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.TimerImpl()",4,1,2,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.TransactionInvocation.produceAndRegister()",4,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel.getSize()",4,1,2,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.init()",4,1,2,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.doMovePass()",4,1,2,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.placeScrollAtTheBegining()",4,1,2,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.setWindowBounds()",4,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.createLibFolder()",4,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.testCompile()",4,1,2,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.read()",4,1,2,1,0
"snype.whisper.speex.impl.DecoderImpl.getProcessedData()",4,1,2,1,0
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.visitFileOrFolder(String name, long lastModified, Hash hashOfContents)",4,1,1,1,3
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.putFolder(String path, Hash hash)",4,1,1,1,2
"sneer.bricks.expression.files.map.mapper.impl.FileMapperImpl.workerFor(final File fileOrFolder, final String... acceptedFileExtensions)",4,1,1,1,2
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpEvery(long period, Runnable stepper)",4,1,1,1,2
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.wakeUpInAtLeast(long millisFromCurrentTime, Runnable runnable)",4,1,1,1,2
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.getNextArray(ByteBuffer in, int length)",4,1,1,1,2
"sneer.bricks.pulp.probe.impl.ProbeManagerImpl.createProbe(Contact contact, Signal<Boolean> isConnected)",4,1,1,1,2
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel.ListSignalModel(ListSignal<T> input, SignalChooser<T> chooser)",4,1,1,1,2
"basis.brickness.impl.BricknessImpl.provideWithoutBlocking(Class<T> intrface)",4,1,1,1,1
"basis.brickness.impl.ClassLoaderForBrickLibs.sortAlphabetically(List<URL> list)",4,1,1,1,1
"basis.lang.Immutable.sort(Field[] fields)",4,1,1,1,1
"basis.lang.arrays.ImmutableByteArray.copyTo(byte[] dest)",4,1,1,1,1
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.AbstractPlaylist(File tracksFolder)",4,1,1,1,1
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.sortTracks(List<File> tracks)",4,1,1,1,1
"dfcsantos.tracks.tastematching.impl.FolderMatchCounter.matchCounterFor(String folder)",4,1,1,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.newFolderContents(Object response)",4,1,1,1,1
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpImpl.waitForAllDispatchingToFinishIn(Environment env)",4,1,1,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.startStepping(Closure stepper)",4,1,1,1,1
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.addActionListener(final Closure closure)",4,1,1,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.readLine(BufferedReader reader)",4,1,1,1,1
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.produceSuccessors(final T vertex)",4,1,1,1,1
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.sealRegisterGiven(final Contact contact)",4,1,1,1,1
"sneer.bricks.pulp.serialization.impl.XStreamPool.returnWorker(XStream worker)",4,1,1,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.setAdversary(Player adversary)",4,1,1,1,1
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl.sorted(Collection<String> unique)",4,1,1,1,1
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.listJarFiles(File libDir)",4,1,1,1,1
"sneer.tests.adapters.SneerCommunity.createParty(final String name)",4,1,1,1,1
"basis.util.concurrent.Latch.run()",4,1,1,1,0
"dfcsantos.music.ui.presenter.impl.FolderChoicesPoll.result()",4,1,1,1,0
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.waitUntilCrash()",4,1,1,1,0
"sneer.bricks.network.computers.addresses.own.port.impl.OwnPortImpl.randomPort()",4,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.startReceiving()",4,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.startSending()",4,1,1,1,0
"sneer.bricks.pulp.retrier.impl.RetrierImpl.giveUpIfStillTrying()",4,1,1,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.addInstrumentPanelResizer()",4,1,1,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.hideAllToolbars()",4,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.addFocusListenerToCommitWhenLost()",4,1,1,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.crash()",4,1,1,1,0
"sneer.tests.freedom6.Freedom6Test.syncOneFile()",4,1,1,1,0
"sneer.tests.freedom6.Freedom6Test.syncSeveralFiles()",4,1,1,1,0
"sneer.bricks.hardware.clock.timer.tests.TimerTest$Worker.Worker(int timeout, List<Integer> order, CountDownLatch latch)",4,1,0,1,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardPainter.setBoardDimensions(final int boardSize, final float boardImageSize, final float cellSize)",4,1,0,1,3
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.AttackOutcomeDrawer.AttackOutcomeDrawer(int x, int y)",4,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.DiceLeftDrawer.DiceLeftDrawer(int x, int y)",4,1,0,1,2
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.envolve(final Closure delegate)",4,1,0,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.UdpByteConnection(Contact contact)",4,1,0,1,1
"sneer.bricks.expression.files.map.impl.FolderContentsGetter.fileOrFolderNameComparator()",4,1,0,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.SerializerAdapter.transactionSkip()",4,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Requesting.react()",4,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.contentsCopy()",4,1,0,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.nicknameSetter()",4,1,0,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.initStatusRefresher()",4,1,0,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.setWindowTitle(Light light)",3,1,7,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HUDPainter.HUDPainter()",3,1,6,1,0
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.adversarySeal()",3,1,6,1,0
"sneer.bricks.network.computers.udp.server.impl.UdpSocketHolder.UdpSocketHolder(int port, Consumer<DatagramPacket> receiver)",3,1,5,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.header(Message message)",3,1,5,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.delete(File folder)",3,1,5,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.waitForSighting(Contact contact, String ip, int port)",3,1,4,1,3
"dfcsantos.music.ui.presenter.impl.FolderChoicesPoll.accumulateWithSubFolders(Path entry, List<String> result)",3,1,4,1,2
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.notifySighting(final Seal contactsSeal, ByteArraySocket socket)",3,1,4,1,2
"sneer.bricks.identity.seals.impl.OwnSealImpl.hash(PublicKey publicKey)",3,1,4,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.fillCircle(Graphics2D g2)",3,1,4,1,1
"snype.whisper.gui.impl.SnypeGUIImpl.setupConnection(Seal other)",3,1,4,1,1
"dfcsantos.music.impl.TrackSourceStrategy.nextTrack()",3,1,4,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.OwnIpDiscovererImpl()",3,1,4,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl$ChatClipboardSupport.copySelectedMessageToClipboard()",3,1,4,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl$SelectionSupport.tryEnableButtons()",3,1,4,1,0
"sneer.main.Sneer.Sneer()",3,1,4,1,0
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.putPath(String path, long size, long lastModified, Hash hash, boolean isFolder)",3,1,3,1,5
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, FriendlyException e, int timeout)",3,1,3,1,3
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.messageBalloon(String title, String message)",3,1,3,1,2
"sneer.bricks.hardware.io.log.formatter.impl.LogFormatterImpl.format(String message, Object... messageInsets)",3,1,3,1,2
"sneer.bricks.network.computers.tcp.connections.impl.SocketCloser.close(ByteArraySocket socket, String message)",3,1,3,1,2
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.tryToDefine(UnitAttribute attribute, Attributable thing)",3,1,3,1,2
"dfcsantos.music.impl.TrackSourceStrategy.meh(final Track rejected)",3,1,3,1,1
"dfcsantos.music.impl.TrackSourceStrategy.noWay(final Track rejected)",3,1,3,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.turnOnWaitingLight(FileTransferSugestion sugestion)",3,1,3,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.onFileDownload(FileEvent value)",3,1,3,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.currentContains(T element)",3,1,3,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.createText(Message message)",3,1,3,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.getSaturatedColor(Color color)",3,1,3,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.resetFolder(File tmpFolder)",3,1,3,1,1
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.asMine(DatagramPacket original)",3,1,3,1,1
"snype.whisper.skin.screenshotter.impl.ScreenshotterImpl.fullScreenSize(GraphicsDevice device)",3,1,3,1,1
"basis.lang.Immutable.toString()",3,1,3,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.cleanOldMapping()",3,1,3,1,0
"sneer.bricks.hardware.cpu.profiler.impl.ProfilerImpl.triggerFile()",3,1,3,1,0
"sneer.bricks.hardware.cpu.profiler.impl.Sampler.step()",3,1,3,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.currentElementsAsListChange()",3,1,3,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.refreshTextComponent()",3,1,3,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.prepareStagedBin()",3,1,3,1,0
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.sendProgressToSender(Integer value, String name, Seal sender)",3,1,2,1,3
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Sad.refreshErrorLight(String caption, String message, Exception e)",3,1,2,1,3
"sneer.bricks.hardware.cpu.crypto.impl.ECBCipherImpl.ECBCipherImpl(byte[] encryptKey, byte[] decryptKey)",3,1,2,1,2
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.removeEdge(T vertex, T successor)",3,1,2,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.lendSpaceTo(Contact contact, int megaBytes)",3,1,2,1,2
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.blink(Exception e, String situation)",3,1,2,1,2
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$BadAccountState.BadAccountState(UpdaterException e, DynDnsAccount account)",3,1,2,1,2
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.recordLastSuccess(String ip, String host)",3,1,2,1,2
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getIcon(Class<?> anchor, String relativeImagePath)",3,1,2,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$InstrumentGlasspane.paintLayer(Graphics2D g2, JXLayer<? extends JPanel> layer)",3,1,2,1,2
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl$ChatClipboardSupport.lostOwnership(Clipboard arg0, Transferable arg1)",3,1,2,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.accumulateTestFiles(Collection<File> testFiles, File brickFolder)",3,1,2,1,2
"sneer.bricks.software.code.jar.impl.JarBuilderImpl.add(String entryName, File file)",3,1,2,1,2
"basis.brickness.impl.ClassLoaderForBrickLibs.isEagerToLoad(String className)",3,1,2,1,1
"dfcsantos.music.impl.PeerTracks.createPlaylist(File tracksFolder)",3,1,2,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.mappedContentsBy(Hash hashOfContents)",3,1,2,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.mappedContentsBy(Hash hashOfContents)",3,1,2,1,1
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.visitFileContents(byte[] fileContents)",3,1,2,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.contains(Tuple tuple)",3,1,2,1,1
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.initRemoteEnviromentWith(Object... bindings)",3,1,2,1,1
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.startStepping(Closure steppable)",3,1,2,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.logBlockage(Thread thread)",3,1,2,1,1
"sneer.bricks.hardware.gui.guithread.impl.GuiThreadImpl.invokeLater(Closure closure)",3,1,2,1,1
"sneer.bricks.hardware.gui.images.impl.ImagesImpl.getImage(URL url)",3,1,2,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.newTestEnvironment(Object... bindings)",3,1,2,1,1
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.stackAsLines(Throwable throwable)",3,1,2,1,1
"sneer.bricks.identity.seals.contacts.impl.ContactSealsImpl.sealGiven(Contact contact)",3,1,2,1,1
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.dealWith(ByteArraySocket incomingSocket)",3,1,2,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.listener.impl.Listener.consume(DatagramPacket packet)",3,1,2,1,1
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Waiting.Waiting(IOException e)",3,1,2,1,1
"sneer.bricks.pulp.probe.impl.ProbeManagerImpl.stopProbeFor(Contact contact)",3,1,2,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.addPulseReceiver(Closure pulseReceiver)",3,1,2,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.addReceiver(Consumer<? super CollectionChange<T>> eventReceiver)",3,1,2,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.addAll(U[] elements)",3,1,2,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getImageUrl(String name)",3,1,2,1,1
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.addContactAction(ContactAction action)",3,1,2,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardPainter.paintBackground(Graphics2D buffer)",3,1,2,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.makeToroidal(Intersection[][] intersection)",3,1,2,1,1
"sneer.bricks.snapps.tasks.gui.impl.TaskWindowImpl.addTask(String text)",3,1,2,1,1
"sneer.bricks.software.code.classutils.impl.ClassUtilsImpl.relativeClassFileName(Class<?> clazz)",3,1,2,1,1
"sneer.bricks.software.code.classutils.impl.ClassUtilsImpl.relativeJavaFileName(Class<?> clazz)",3,1,2,1,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.BrickHistoryImpl(String brickName)",3,1,2,1,1
"sneer.bricks.softwaresharing.git.impl.GitImpl.isMergeRequired(Path repository)",3,1,2,1,1
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.wrapChild(int childIndex)",3,1,2,1,1
"sneer.tests.adapters.SneerCommunity.rootFolder(String name)",3,1,2,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.receive(byte[] array)",3,1,2,1,1
"snype.whisper.speex.impl.DecoderImpl.decode(final byte[] frame)",3,1,2,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.playInSequence(SpeexPacket packet)",3,1,2,1,1
"snype.whisper.speextuples.impl.SpeexTuplesImpl.playInSequence(SpeexPacket packet)",3,1,2,1,1
"basis.brickness.impl.ClassLoaderForPackage.toString()",3,1,2,1,0
"basis.brickness.impl.tests.fixtures.a.impl.BrickAImpl.classLoader()",3,1,2,1,0
"basis.brickness.impl.tests.fixtures.b.impl.BrickBImpl.classLoader()",3,1,2,1,0
"dfcsantos.music.impl.PeerTracks.tracksFolder()",3,1,2,1,0
"sneer.bricks.expression.files.map.impl.FileMapData.allPaths()",3,1,2,1,0
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.clearActions()",3,1,2,1,0
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.dispose()",3,1,2,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.folderToSyncSetter()",3,1,2,1,0
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.crash()",3,1,2,1,0
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketImpl.initSpace()",3,1,2,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.keepAlive()",3,1,2,1,0
"sneer.bricks.network.computers.udp.connections.tests.PacketProducerMock.highestPriorityPacketToSend()",3,1,2,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.iterator()",3,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.getText()",3,1,2,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.AlertWindowSupport()",3,1,2,1,0
"sneer.bricks.snapps.web.impl.WebImpl.getPort()",3,1,2,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitBrickMetadata()",3,1,2,1,0
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.resetConsole()",3,1,2,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.toString()",3,1,2,1,0
"snype.whisper.skin.audio.kernel.impl.AudioImpl.tryToOpenPlaybackLine()",3,1,2,1,0
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl$Visitor.visit(int version, int access, String className, String signature, String superName, String[] interfaces)",3,1,1,1,6
"basis.brickness.impl.ClassLoaderForPackage.ClassLoaderForPackage(Class<?> brick, File classpath, String packageName, List<Nature> natures, ClassLoader next)",3,1,1,1,5
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.FolderDownload(File folder, Hash hashOfFolder, Seal source, boolean copyLocalFiles)",3,1,1,1,4
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.FolderDownloadOld(File folder, Hash hashOfFolder, Seal source, boolean copyLocalFiles)",3,1,1,1,4
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOn(LightType type, String caption, String helpMessage, Throwable t)",3,1,1,1,4
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOn(LightType type, String caption, String helpMessage, int timeToLive)",3,1,1,1,4
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, String caption, String helpMessage, Throwable t)",3,1,1,1,4
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, String caption, String helpMessage, int timeout)",3,1,1,1,4
"sneer.bricks.expression.files.writer.atomic.impl.AtomicFileWriterImpl.writeAtomicallyTo(File file, long lastModified, byte[] contents)",3,1,1,1,3
"sneer.bricks.expression.files.writer.atomic.impl.AtomicFileWriterImpl.writeAtomicallyTo(File folder, long lastModified, FolderContents contents)",3,1,1,1,3
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOn(LightType type, String caption, String helpMessage)",3,1,1,1,3
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, String caption, String helpMessage)",3,1,1,1,3
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, String caption, Throwable t)",3,1,1,1,3
"basis.brickness.testsupport.TestMethodWithEnvironment.TestMethodWithEnvironment(Method method, TestClass testClass)",3,1,1,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.MapperWorker(Path fileOrFolder, String... acceptedFileExtensions)",3,1,1,1,2
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.GuidedTour(FolderStructureVisitor visitor, FolderContents contents)",3,1,1,1,2
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber)",3,1,1,1,2
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.keepChosen(Class<T> tupleType, Predicate<? super T> filter)",3,1,1,1,2
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.keepNewest(Class<T> tupleType, Functor<? super T,Object> grouping)",3,1,1,1,2
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.startStepping(String threadNameIgnored, Closure stepper)",3,1,1,1,2
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.turnOnIfNecessary(Light light, FriendlyException e)",3,1,1,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.updateScore(int blackScore, int whiteScore)",3,1,1,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.GameStateContextImpl(Board board, GameState gameState)",3,1,1,1,2
"sneer.bricks.snapps.gis.location.impl.LocationImpl.LocationImpl(final String address, Consumer<Location> receiver)",3,1,1,1,2
"sneer.bricks.snapps.gis.map.impl.MapRendererImpl.render(Consumer<Image> receiver, Location location)",3,1,1,1,2
"sneer.bricks.software.diff.impl.TextComparatorImpl.diff(String text1, String text2)",3,1,1,1,2
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.InProcessByteArraySocket(int port, InProcessByteArraySocket counterpart)",3,1,1,1,2
"basis.brickness.impl.BricknessImpl.provide(Class<T> intrface)",3,1,1,1,1
"basis.brickness.impl.ClassLoaderForPackage.isEagerToLoad(String className)",3,1,1,1,1
"dfcsantos.tracks.execution.player.impl.TrackContractImpl.volumePercent(int level)",3,1,1,1,1
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.finishWithLocalContents(Object contents)",3,1,1,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.finishWithLocalContents(Object contents)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.getFiles(Hash hash)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.getFolders(Hash hash)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.getLastModified(String path)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.getSize(String path)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.getFiles(Hash hash)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.getFolderContents(Hash hash)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.getFolders(Hash hash)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.getHash(String path)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.isFolder(String path)",3,1,1,1,1
"sneer.bricks.expression.files.map.impl.NormalizedFileMap.remove(String path)",3,1,1,1,1
"sneer.bricks.expression.tuples.floodcache.impl.FloodedTupleCacheImpl.contains(Tuple tuple)",3,1,1,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.keep(Class<? extends Tuple> tupleType)",3,1,1,1,1
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.remote(Object... bindings)",3,1,1,1,1
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.synchronizedWake(Alarm alarm)",3,1,1,1,1
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.addVertex(T vertex)",3,1,1,1,1
"sneer.bricks.network.computers.connections.impl.ConnectionManagerImpl.closeConnectionFor(Contact contact)",3,1,1,1,1
"sneer.bricks.network.computers.connections.impl.ConnectionManagerImpl.connectionFor(Contact contact)",3,1,1,1,1
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.readContactsName(ByteArraySocket socket)",3,1,1,1,1
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.readContactsSeal(ByteArraySocket socket)",3,1,1,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.connectionFor(Contact contact)",3,1,1,1,1
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.currentGet(int index)",3,1,1,1,1
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.currentIndexOf(VO element)",3,1,1,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.add(T elementAdded)",3,1,1,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.addAll(Collection<? extends T> elements)",3,1,1,1,1
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.remove(U elementRemoved)",3,1,1,1,1
"sneer.bricks.skin.image.impl.ImageFactoryImpl.getIcon(String relativeImagePath)",3,1,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel.getElementAt(int index)",3,1,1,1,1
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.removeContactAction(String contactActionCaption)",3,1,1,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.nextToPlay(StoneColor nextToPlay)",3,1,1,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.ToroidalGoBoard(String[] setup)",3,1,1,1,1
"sneer.bricks.snapps.games.go.impl.logic.ToroidalGoBoard.ToroidalGoBoard(int size)",3,1,1,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.addPlayListener(PlayListener playListener)",3,1,1,1,1
"sneer.tests.adapters.SneerCommunity.SneerCommunity(File tmpFolder)",3,1,1,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.InProcessByteArraySocket(int port)",3,1,1,1,1
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.openServerSocket(int port)",3,1,1,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.addTalker(Seal who)",3,1,1,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.removeTalker(Seal who)",3,1,1,1,1
"basis.util.concurrent.Latch.open()",3,1,1,1,0
"dfcsantos.music.impl.TrackSourceStrategy.stopKillTimer()",3,1,1,1,0
"dfcsantos.tracks.execution.playlist.tests.PlaylistTest.createTrackFiles()",3,1,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.dispose()",3,1,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finished()",3,1,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.dispose()",3,1,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finished()",3,1,1,1,0
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.crashed()",3,1,1,1,0
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.crashAllThreads()",3,1,1,1,0
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.crashed()",3,1,1,1,0
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.runPost()",3,1,1,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.building()",3,1,1,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.folderToSync()",3,1,1,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.isSynced()",3,1,1,1,0
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.get()",3,1,1,1,0
"sneer.bricks.network.computers.connections.impl.ConnectionManagerImpl.unknownCallers()",3,1,1,1,0
"sneer.bricks.network.computers.tcp.accepter.impl.SocketAccepterImpl.lastAcceptedSocket()",3,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.isConnected()",3,1,1,1,0
"sneer.bricks.network.computers.tcp.impl.ByteArrayServerSocketImpl.accept()",3,1,1,1,0
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnection.isConnected()",3,1,1,1,0
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.unknownCallers()",3,1,1,1,0
"sneer.bricks.network.social.impl.ContactImpl.nickname()",3,1,1,1,0
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.lights()",3,1,1,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Waiting.wakeUp()",3,1,1,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.ownIp()",3,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.currentElementsAsCollectionChange()",3,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl$MyOutput.size()",3,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.currentElements()",3,1,1,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl$MyOutput.size()",3,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.getMinimumSize()",3,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.getPreferredSize()",3,1,1,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.output()",3,1,1,1,0
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.actions()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.getWhoIsPlaying()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.canPass()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.getBoardCells()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.getPhase()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.getPhaseName()",3,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.getWhoIsPlaying()",3,1,1,1,0
"sneer.bricks.snapps.web.impl.WebImpl.crash()",3,1,1,1,0
"sneer.bricks.software.bricks.repl.gui.impl.ReplWindowImpl.open()",3,1,1,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.testBadCode()",3,1,1,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.status()",3,1,1,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.newBuildingFound()",3,1,1,1,0
"sneer.main.Sneer.independentClassLoader()",3,1,1,1,0
"snype.whisper.audio.SpeexMicrophone.close()",3,1,1,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.hasTalkers()",3,1,1,1,0
"basis.brickness.ClassDefinition.ClassDefinition(String name_, byte[] bytes_)",3,1,0,1,2
"basis.lang.Pair.Pair(A a_, B b_)",3,1,0,1,2
"sneer.bricks.expression.files.map.impl.FolderContentsGetter.FolderContentsGetter(FileMapData data, Hash hash)",3,1,0,1,2
"sneer.bricks.skin.imgselector.impl.Keyhole.setLocation(int x, int y)",3,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellsDrawer.CellsDrawer(GameStateContext gameContext, CellDrawer cellDrawer)",3,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PassButtonDrawer.PassButtonDrawer(int x, int y)",3,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowerImpl.DiceThrowerImpl(Dice atacker, Dice defense)",3,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.FirstAttacks(Player currentPlayer, Board board)",3,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerMock.DiceThrowerMock(int attackDiceResultForAllDice, int defenseDiceResultForAllDice)",3,1,0,1,2
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.AbstractTreeNodeWrapper(TreeNode parent, Object source)",3,1,0,1,2
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.InProcessUdpSocket(int portNumber, Functor<Integer,InProcessUdpSocket> socketsByNumberFinder)",3,1,0,1,2
"dfcsantos.tracks.impl.TracksImpl.newTrack(File trackFile)",3,1,0,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.joinWithoutInterruptions(Thread thread)",3,1,0,1,1
"sneer.bricks.hardware.gui.trayicon.impl.TrayIconImpl.setDefaultAction(Action defaultAction)",3,1,0,1,1
"sneer.bricks.network.computers.udp.connections.impl.UdpConnectionManagerImpl.closeConnectionFor(Contact contact)",3,1,0,1,1
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.init(Consumer<DatagramPacket> sender)",3,1,0,1,1
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.prepare(LightType type)",3,1,0,1,1
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.setBaseComponent(Component baseComponent)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellDrawer.selectedOrNull(BoardCell selectedCellOrNull)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.DiceLeftDrawer.diceLeft(int diceLeft)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.pass(final GameStateContext gameStateContext)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.pass(final GameStateContext gameStateContext)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.setAttackCallback(AttackCallback attackCallback)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.setDiceLeftCallback(DiceLeftCallback diceLeftCallback)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.setSelectedCellCallback(SelectedCallback selectedCellCall)",3,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.setState(GameState state)",3,1,0,1,1
"sneer.bricks.software.bricks.repl.impl.ReplConsoleImpl.ReplConsoleImpl(Evaluator evaluator)",3,1,0,1,1
"sneer.bricks.software.code.jar.impl.JarsImpl.builder(File file)",3,1,0,1,1
"sneer.tests.adapters.impl.utils.network.InProcessNetwork.remoteIpFor(ByteArraySocket socket)",3,1,0,1,1
"basis.brickness.impl.ClassLoaderForBrickLibs.kind()",3,1,0,1,0
"basis.brickness.impl.ClassLoaderForBrickLibs.shouldRealizeNatures()",3,1,0,1,0
"basis.brickness.impl.ClassLoaderForPackage.kind()",3,1,0,1,0
"basis.brickness.impl.tests.fixtures.a.impl.BrickAImpl.instantiationEnvironment()",3,1,0,1,0
"basis.lang.Pair.toString()",3,1,0,1,0
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.numberOfTracks()",3,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.FolderDownload.isWaitingForActivity()",3,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.FolderDownloadOld.isWaitingForActivity()",3,1,0,1,0
"sneer.bricks.expression.tuples.floodcache.impl.FloodedTupleCacheImpl.maxSize()",3,1,0,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.dispose()",3,1,0,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.toString()",3,1,0,1,0
"sneer.bricks.hardware.cpu.profiler.impl.Sampler.stop()",3,1,0,1,0
"sneer.bricks.hardware.cpu.threads.impl.Stepper.dispose()",3,1,0,1,0
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.waitUntilCrash()",3,1,0,1,0
"sneer.bricks.identity.seals.impl.OwnSealImpl.get()",3,1,0,1,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.impl.StunProtocolImpl.serverPort()",3,1,0,1,0
"sneer.bricks.network.computers.udp.receiver.impl.ReceiverThread.initIncomingPacket()",3,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$BadAccountState.wakeUp()",3,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Happy.wakeUp()",3,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Requesting.wakeUp()",3,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Waiting.react()",3,1,0,1,0
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.output()",3,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.ListRegisterImpl.output()",3,1,0,1,0
"sneer.bricks.pulp.reactive.collections.impl.SetRegisterImpl.output()",3,1,0,1,0
"sneer.bricks.pulp.serialization.impl.XStreamPool.createXStream()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.getMainWidget()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.getWidgets()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.output()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.setter()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.getComponent()",3,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.getMainWidget()",3,1,0,1,0
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.baseComponent()",3,1,0,1,0
"sneer.bricks.snapps.contacts.actions.impl.ContactActionManagerImpl.defaultAction()",3,1,0,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl.newPanel()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.AttackOutcomeDrawer.played()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellDrawer.played()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.canPass()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.getPhase()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.getPhaseName()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.getWhoIsPlaying()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.canPass()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.getPhase()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstAttacks.getPhaseName()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.canPass()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.getPhase()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.getPhaseName()",3,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.getWhoIsPlaying()",3,1,0,1,0
"sneer.bricks.snapps.gis.location.impl.LocationImpl.latitude()",3,1,0,1,0
"sneer.bricks.snapps.gis.location.impl.LocationImpl.longitude()",3,1,0,1,0
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.loadingFinished()",3,1,0,1,0
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.wereThrowablesCaughtWhenLoadingSnapps()",3,1,0,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.isSnapp()",3,1,0,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.name()",3,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.sourceObject()",3,1,0,1,0
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.crash()",3,1,0,1,0
"snype.whisper.skin.audio.kernel.impl.AudioImpl.defaultAudioFormat()",3,1,0,1,0
"snype.whisper.speex.impl.DecoderImpl.DecoderImpl()",2,1,7,1,0
"sneer.bricks.hardware.io.log.formatter.impl.LogFormatterImpl.appendTime(StringBuilder builder)",2,1,5,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.lentFolderFor(Seal publisher)",2,1,5,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitUnboxing(MethodVisitor mv, Type type)",2,1,4,1,2
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.hex(Hash hash)",2,1,4,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.hex(Hash hash)",2,1,4,1,1
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.showFile(File file)",2,1,4,1,1
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.nick(FileTransferSugestion sugestion)",2,1,4,1,1
"sneer.bricks.snapps.contacts.gui.comparator.impl.ContactComparatorImpl.isOnline(Contact contact)",2,1,4,1,1
"sneer.bricks.snapps.games.go.impl.GoMainImpl.isOwnGoMove(GoMove message)",2,1,4,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.srcFilesIn(File srcFolder)",2,1,4,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.capitalize(String className)",2,1,4,1,1
"sneer.bricks.software.code.classutils.impl.ClassUtilsImpl.packageName(Class<?> clazz)",2,1,4,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.sharedTracksPath()",2,1,4,1,0
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.selectedSeal()",2,1,4,1,0
"sneer.bricks.identity.keys.own.tests.OwnKeysPrevalenceTest.myPK()",2,1,4,1,0
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.hasSocketAlready()",2,1,4,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.ownNameBytes()",2,1,4,1,0
"sneer.bricks.network.computers.udp.connections.impl.UdpByteConnectionUtils.ownSealBytes()",2,1,4,1,0
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.ownSealBytes()",2,1,4,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.ownSeal()",2,1,4,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.selectedSeal()",2,1,4,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.updateTitle()",2,1,4,1,0
"sneer.bricks.softwaresharing.gui.impl.FileVersionWrapper.getIcon()",2,1,4,1,0
"sneer.main.SneerSessionBase.setContextClassLoader()",2,1,4,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitAutoBoxingInsn(MethodVisitor mv, String methodName, Type argType, Type returnType)",2,1,3,1,4
"sneer.bricks.expression.files.writer.atomic.impl.AtomicFileWriterImpl.writeToFile(File file, byte[] contents)",2,1,3,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.turnOnBlinkingLightFor(Exception e, String caption)",2,1,3,1,2
"sneer.bricks.pulp.blinkinglights.impl.BlinkingLightsImpl.log(LightType lightType, String caption)",2,1,3,1,2
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.isMouseOverInstrument(Point mousePoint, InstrumentPanelImpl instrument)",2,1,3,1,2
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.copyFolder(File from, File to)",2,1,3,1,2
"dfcsantos.music.impl.TrackSourceStrategy.initPlaylist(File tracksFolder)",2,1,3,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.listMp3Files(File folder)",2,1,3,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.isRecent(Tuple sug)",2,1,3,1,1
"sneer.bricks.network.computers.udp.holepuncher.client.tests.StunClientTest.setOwnPort(int value)",2,1,3,1,1
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.helpMessageFor(Class<?> invalidAttributeType)",2,1,3,1,1
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.hasModifier(KeyEvent e)",2,1,3,1,1
"sneer.bricks.snapps.contacts.gui.comparator.impl.ContactComparatorImpl.nick(Contact contact)",2,1,3,1,1
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl.loadIcon(String fileName)",2,1,3,1,1
"sneer.bricks.software.bricks.finder.impl.BrickFinderImpl$Visitor.Visitor(File classFile)",2,1,3,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.containsBrickInterface(String[] interfaces)",2,1,3,1,1
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.assertSuccess(Result result)",2,1,3,1,1
"sneer.bricks.software.code.jar.impl.JarsImpl.listFiles(File binFolder)",2,1,3,1,1
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.isAlreadyMapped(final BuildingHash buildingHash)",2,1,3,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.folderContents(BrickVersion version)",2,1,3,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.packageName(String brickName)",2,1,3,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.prepareStagedSrc(BrickHistory brickHistory)",2,1,3,1,1
"sneer.tests.freedom6.Freedom6Test.contents(File recoveredFile)",2,1,3,1,1
"snype.whisper.speextuples.tests.SpeexTuplesTest.setRoom(String name)",2,1,3,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.sharedTracksFolder()",2,1,3,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.isNotMapping()",2,1,3,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.recordActivity()",2,1,3,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.recordActivity()",2,1,3,1,0
"sneer.bricks.expression.files.transfer.gui.impl.FileTransferGuiImpl.selectedContact()",2,1,3,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.ownSeal()",2,1,3,1,0
"sneer.bricks.identity.seals.impl.OwnSealImpl.init()",2,1,3,1,0
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.ownPort()",2,1,3,1,0
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.output()",2,1,3,1,0
"sneer.bricks.network.social.navigation.gui.impl.ContactNavigationWindowImpl.selectedContact()",2,1,3,1,0
"sneer.bricks.pulp.reactive.gates.strings.impl.Concatenator.output()",2,1,3,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.now()",2,1,3,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.contact()",2,1,3,1,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickHistoryImpl.refreshStatus()",2,1,3,1,0
"sneer.bricks.softwaresharing.publisher.impl.BuildingPublisherImpl.srcFolder()",2,1,3,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.srcFolder()",2,1,3,1,0
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.stage()",2,1,3,1,0
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.showResult()",2,1,3,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.ownPublicKey()",2,1,3,1,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketCloser.close(ByteArraySocket socket, String message, IOException e)",2,1,2,1,3
"sneer.bricks.network.computers.udp.holepuncher.client.impl.StunClientImpl.keepSighting(Contact contact, InetAddress addr, int localPort)",2,1,2,1,3
"sneer.bricks.software.bricks.compiler.impl.Build.compile(Collection<File> sourceFiles, File destination, File... classpath)",2,1,2,1,3
"sneer.bricks.software.diff.tests.TextComparatorTest.check(String text1, String text2, int dualThreshold)",2,1,2,1,3
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.relativeNameWithin(String folder, File file)",2,1,2,1,2
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.relativeNameWithin(String folder, String fileName)",2,1,2,1,2
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.manageIncomingSocket(ByteArraySocket newSocket, Seal contactsSeal)",2,1,2,1,2
"sneer.bricks.software.bricks.compiler.impl.Build.copyFolder(File from, File to)",2,1,2,1,2
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.emitBoxing(MethodVisitor mv, Type type)",2,1,2,1,2
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.setProgress(float newValue)",2,1,2,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.timeout(String timeoutCase)",2,1,2,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.setProgress(float newValue)",2,1,2,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.timeout(String timeoutCase)",2,1,2,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.absolute(Path path)",2,1,2,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.lastModified(Path file)",2,1,2,1,1
"sneer.bricks.expression.files.server.impl.FileServerImpl.log(FileContents reply)",2,1,2,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.turnOff(final Light light)",2,1,2,1,1
"sneer.bricks.expression.tuples.impl.TupleSpaceImpl.logDuplicateTupleIgnored(Tuple tuple)",2,1,2,1,1
"sneer.bricks.hardware.cpu.threads.impl.ThreadsImpl.toSimpleClassName(String className)",2,1,2,1,1
"sneer.bricks.hardware.ram.reflection.visitation.impl.ReflectionGuideImpl.isStatic(Field field)",2,1,2,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.handleFileToRestore(final FileToRestore value)",2,1,2,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.handleFileToSync(final FileToSync value)",2,1,2,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.myAttributeValue(Class<? extends Attribute<T>> attribute)",2,1,2,1,1
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.setIsSync(boolean value)",2,1,2,1,1
"sneer.bricks.network.computers.addresses.own.ips.impl.OwnIpsImpl.main(String[] args)",2,1,2,1,1
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.socketHolderFor(Contact contact)",2,1,2,1,1
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.pretty(InternetGatewayDevice device)",2,1,2,1,1
"sneer.bricks.network.social.impl.ContactImpl.setNickname(String newNickname)",2,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl.isOld(Message message)",2,1,2,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessagePainter.getFormatedTime(Message message)",2,1,2,1,1
"sneer.bricks.software.bricks.compiler.impl.Build.toFileArray(List<File> list)",2,1,2,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.continuationConstructorArgTypesFor(InterceptedMethod m)",2,1,2,1,1
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.startAndKeep(final Class<?> brick)",2,1,2,1,1
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.folderContents(Hash srcFolderHash)",2,1,2,1,1
"sneer.bricks.softwaresharing.gui.impl.BrickHistoryTreeNode.loadIcon(String fileName)",2,1,2,1,1
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.loadIcon(String fileName)",2,1,2,1,1
"sneer.bricks.softwaresharing.gui.impl.FileVersionWrapper.loadIcon(String fileName)",2,1,2,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.packageFolder(BrickHistory brickInfo)",2,1,2,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.packageFolder(String brickName)",2,1,2,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.turnOnBlinkingLightError(Exception e)",2,1,2,1,1
"sneer.tests.adapters.SneerCommunity.newLogger(final String name)",2,1,2,1,1
"snype.whisper.speextuples.tests.SpeexTuplesTest.myPacket(byte[] pcm)",2,1,2,1,1
"dfcsantos.music.impl.PeerTracks.noveltiesFolder()",2,1,2,1,0
"dfcsantos.music.impl.TrackSourceStrategy.initPlaylist()",2,1,2,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.stopCurrentMapping()",2,1,2,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.remoteContact()",2,1,2,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl.currentTime()",2,1,2,1,0
"sneer.bricks.hardware.cpu.threads.impl.Daemons.allThreads()",2,1,2,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.prevalenceBase()",2,1,2,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.files()",2,1,2,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.importantFolder()",2,1,2,1,0
"sneer.bricks.hardwaresharing.backup.impl.SnackupImpl.tmpFolder()",2,1,2,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.uploadSpeed()",2,1,2,1,0
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.remoteIP()",2,1,2,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.localHostIp()",2,1,2,1,0
"sneer.bricks.network.computers.upnp.impl.UpnpImpl.ownPort()",2,1,2,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.currentAccount()",2,1,2,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.currentIp()",2,1,2,1,0
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.startDynDnsClientOnNewEnvironment()",2,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl$WindowSupport.reactiveTitle()",2,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardImpl.initGuiTimebox()",2,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.instrumentName()",2,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.currentValue()",2,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.getText()",2,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.currentImage()",2,1,2,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl$ChatClipboardSupport.getPortableSoModifiers()",2,1,2,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$AlertWindowSupport.scrollModel()",2,1,2,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.buildFoundation()",2,1,2,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.classpathForTests()",2,1,2,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.fileFilters()",2,1,2,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.files()",2,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.compiler()",2,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.createTempFile()",2,1,2,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.fileExtension()",2,1,2,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.selectedBrick()",2,1,2,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.selectedBrickVersion()",2,1,2,1,0
"sneer.bricks.softwaresharing.impl.BrickSpaceImpl.startReceivingBuildingsFromPeers()",2,1,2,1,0
"sneer.tests.adapters.SneerCommunity.startStunServer()",2,1,2,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.format()",2,1,2,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.oneFiftiethOfASecond()",2,1,2,1,0
"snype.whisper.skin.screenshotter.impl.ScreenshotterImpl.defaultDevice()",2,1,2,1,0
"sneer.bricks.expression.files.map.impl.FolderContentsGetter.accumulateDirectChild(String candidate, String folder, Collection<FileOrFolder> result)",2,1,1,1,3
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Sad.Sad(String caption, String message, Exception e)",2,1,1,1,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardPainter.BoardPainter(int bOARD_SIZE, float bOARD_IMAGE_SIZE, float cELL_SIZE)",2,1,1,1,3
"basis.lang.arrays.ImmutableByteArray.ImmutableByteArray(byte[] bufferToCopy, int bytesToCopy)",2,1,1,1,2
"basis.lang.arrays.ImmutableByteArray.copyTo(byte[] dest, int length)",2,1,1,1,2
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.unmap(String folderPath, FileOrFolder oldEntry)",2,1,1,1,2
"sneer.bricks.hardware.io.log.tests.BrickTestWithLogger.has(String line, String token)",2,1,1,1,2
"sneer.bricks.hardware.io.prevalence.nature.impl.SerializerAdapter.writeObject(OutputStream stream, Object object)",2,1,1,1,2
"sneer.bricks.network.computers.tcp.connections.impl.TieBreaker.manageOutgoingSocket(ByteArraySocket newSocket, Contact contact)",2,1,1,1,2
"sneer.bricks.skin.imgselector.impl.Keyhole.setTrueLocation(int x, int y)",2,1,1,1,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.paintPiece(BufferedImage image, final boolean black)",2,1,1,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.DiceDistribution(final Player currentPlaying, final Board board)",2,1,1,1,2
"sneer.bricks.software.diff.tests.TextComparatorTest.expectedBlock(TextBlockType expectedDiffType, String expectedContent)",2,1,1,1,2
"sneer.bricks.softwaresharing.tests.LocalBrickDiscoveryTest.isBrickAvailable(final String brickName, final Status status)",2,1,1,1,2
"basis.lang.arrays.ImmutableByteArray.ImmutableByteArray(byte[] bufferToCopy)",2,1,1,1,1
"dfcsantos.music.impl.TrackSourceStrategy.isMarkedForDisposal(Track suspect)",2,1,1,1,1
"dfcsantos.music.ui.presenter.impl.FolderChoicesPoll.FolderChoicesPoll(Path rootFolder)",2,1,1,1,1
"dfcsantos.tracks.exchange.endorsements.impl.TrackEndorserImpl.pickOneAtRandom(T[] list)",2,1,1,1,1
"sneer.bricks.expression.files.map.impl.FileMapData.entry(String paths)",2,1,1,1,1
"sneer.bricks.expression.files.map.visitors.impl.GuidedTour.showFile(byte[] contents)",2,1,1,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.getFile(FileTransferAccept accept)",2,1,1,1,1
"sneer.bricks.expression.files.transfer.impl.FileTransferImpl.handleStatus(FileTransferStatus status)",2,1,1,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.getStepper(int i)",2,1,1,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Invocation.marshal(Object[] args)",2,1,1,1,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Invocation.unmarshal(Object[] args)",2,1,1,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.impl.StunServerImpl.toString(byte[] arr)",2,1,1,1,1
"sneer.bricks.network.computers.udp.server.impl.UdpSocketHolder.threadName(int port)",2,1,1,1,1
"sneer.bricks.network.social.rendezvous.impl.RendezvousImpl.captionFor(Call call)",2,1,1,1,1
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.install(Instrument instrument)",2,1,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.ModelChangeReceiver(ListSignal<T> input)",2,1,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel.contentsChanged(final int index)",2,1,1,1,1
"sneer.bricks.skin.widgets.reactive.impl.RTextPaneImpl.isEnterKey(KeyEvent e)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.constructorDescriptor(Type[] ctorArgs)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.getInternalName(Class<?> klass)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.internalNameFromClassName(String className)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.isConstructor(String name)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.typeFromInternalName(String name)",2,1,1,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.uniqueName(String name)",2,1,1,1,1
"sneer.bricks.software.bricks.snapploader.impl.SnappLoaderImpl.isSnapp(Class<?> brick)",2,1,1,1,1
"sneer.bricks.softwaresharing.git.tests.GitTest.prepareConflictingRepo(Path path)",2,1,1,1,1
"sneer.bricks.softwaresharing.git.tests.GitTest.prepareEmptyRepo(Path path)",2,1,1,1,1
"sneer.bricks.softwaresharing.git.tests.GitTest.prepareRepoWithOneCommit(Path path)",2,1,1,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.brickSrcFolder(BrickHistory brickInfo)",2,1,1,1,1
"sneer.bricks.softwaresharing.stager.impl.BrickStagerImpl.staged(String folder)",2,1,1,1,1
"sneer.snapps.games.drones.ui.impl.DronesUIImpl.input(String attribute)",2,1,1,1,1
"basis.environments.Environments.current()",2,1,1,1,0
"basis.lang.arrays.ImmutableByteArray.copy()",2,1,1,1,0
"basis.lang.arrays.ImmutableByteArray.toStringSmall()",2,1,1,1,0
"basis.util.concurrent.Latch.isOpen()",2,1,1,1,0
"basis.util.concurrent.RefLatch.isOpen()",2,1,1,1,0
"dfcsantos.music.impl.TrackSourceStrategy.TrackSourceStrategy()",2,1,1,1,0
"dfcsantos.music.impl.TrackSourceStrategy.playlist()",2,1,1,1,0
"dfcsantos.tracks.execution.playlist.impl.AbstractPlaylist.rescan()",2,1,1,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.isFinished()",2,1,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.isFinished()",2,1,1,1,0
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.stop()",2,1,1,1,0
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.enterFolder()",2,1,1,1,0
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.leaveFolder()",2,1,1,1,0
"sneer.bricks.expression.tuples.testsupport.BrickTestWithTuples.waitForAllDispatchingToFinish()",2,1,1,1,0
"sneer.bricks.hardware.clock.timer.impl.TimerImpl$Alarm.isTimeToWakeUp()",2,1,1,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.isReplayingTransactions()",2,1,1,1,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevaylerHolder.waitForTransactionLogReplayIfNecessary()",2,1,1,1,0
"sneer.bricks.hardware.ram.graphs.impl.DirectedGraphImpl.vertices()",2,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.impl.IncomingHandShaker.unknownCallers()",2,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.contact()",2,1,1,1,0
"sneer.bricks.network.computers.tcp.connections.originator.impl.OutgoingAttempt.crash()",2,1,1,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.isConnected()",2,1,1,1,0
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.history()",2,1,1,1,0
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.historySet()",2,1,1,1,0
"sneer.bricks.network.computers.udp.connections.tests.LoggingSender.lastSessionKey()",2,1,1,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.lastHost()",2,1,1,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.lastIp()",2,1,1,1,0
"sneer.bricks.pulp.dyndns.client.tests.DynDnsClientTest.startDynDnsClient()",2,1,1,1,0
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.copyOfReceiversToAvoidConcurrentModificationAsResultOfNotifications()",2,1,1,1,0
"sneer.bricks.pulp.retrier.impl.RetrierImpl.turnLightOff()",2,1,1,1,0
"sneer.bricks.pulp.serialization.impl.ClassMapper.ClassMapper()",2,1,1,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelImpl$ChatClipboardSupport.ChatClipboardSupport()",2,1,1,1,0
"sneer.bricks.snapps.chat.gui.panels.impl.JTextPaneWithoutAutoScrollOnEdit.JTextPaneWithoutAutoScrollOnEdit()",2,1,1,1,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInfoWindowImpl.ContactInfoWindowImpl()",2,1,1,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.GuiPlayer.gameEnded()",2,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.currentPlayer()",2,1,1,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.GamePanel.stopGameThread()",2,1,1,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer$InterceptedMethod.isPrimitiveMethod()",2,1,1,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.internalClassName()",2,1,1,1,0
"sneer.bricks.softwaresharing.gui.impl.FileVersionWrapper.toString()",2,1,1,1,0
"sneer.main.SneerSessionBase.container()",2,1,1,1,0
"sneer.tests.adapters.SneerCommunity.allParties()",2,1,1,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.audio()",2,1,1,1,0
"snype.whisper.speextuples.tests.SpeexTuplesTest.contactKey()",2,1,1,1,0
"basis.brickness.impl.ClassLoaderForBrickLibs.ClassLoaderForBrickLibs(Class<?> brick, URL[] jars, List<Nature> natures, ClassLoader next)",2,1,0,1,4
"sneer.bricks.hardware.io.prevalence.nature.impl.TransactionInvocation.TransactionInvocation(ProducerX<Object,? extends Exception> targetProducer, Method method, Object[] args)",2,1,0,1,3
"basis.lang.Pair.of(A a, B b)",2,1,0,1,2
"sneer.bricks.network.computers.tcp.impl.ByteArraySocketImpl.ByteArraySocketImpl(String serverIpAddress, int serverPort)",2,1,0,1,2
"sneer.bricks.skin.widgets.reactive.impl.RAbstractField.RAbstractField(WIDGET textComponent, Signal<?> source)",2,1,0,1,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContextImpl.GameStateContextImpl(int numberOfPlayers, Board board)",2,1,0,1,2
"basis.lang.arrays.ImmutableByteArray.get(int index)",2,1,0,1,1
"sneer.bricks.expression.files.map.mapper.impl.MapperWorker.immutable(List<FileOrFolder> entries)",2,1,0,1,1
"sneer.bricks.expression.files.transfer.FileTransferUploads$Upload.Upload(FileTransferStatus status)",2,1,0,1,1
"sneer.bricks.expression.files.writer.folder.impl.FileWritingVisitor.FileWritingVisitor(File targetFileOrFolder)",2,1,0,1,1
"sneer.bricks.expression.tuples.keeper.impl.NewestTupleByGroup.NewestTupleByGroup(Functor<? super T,Object> grouping)",2,1,0,1,1
"sneer.bricks.hardware.cpu.threads.impl.Stepper.Stepper(Closure steppable)",2,1,0,1,1
"sneer.bricks.hardware.cpu.threads.mocks.ThreadsMock.ThreadsMock(String daemonNameFragmentToHold)",2,1,0,1,1
"sneer.bricks.hardware.cpu.utils.consumers.parsers.integer.impl.IntegerParserImpl.IntegerParserImpl(PickyConsumer<Integer> endConsumer)",2,1,0,1,1
"sneer.bricks.hardware.io.log.tests.LoggerMock.LoggerMock(Consumer<String> messageConsumer)",2,1,0,1,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Joiner.Joiner(Consumer<? super ByteBuffer> largePacketReceiver)",2,1,0,1,1
"sneer.bricks.network.computers.tcp.impl.ByteArrayServerSocketImpl.ByteArrayServerSocketImpl(int port)",2,1,0,1,1
"sneer.bricks.network.computers.udp.connections.tests.PacketProducerMock.PacketProducerMock(String... messages)",2,1,0,1,1
"sneer.bricks.network.social.attributes.impl.AttributeSubscriber.AttributeSubscriber(Class<? extends Attribute<T>> attribute)",2,1,0,1,1
"sneer.bricks.pulp.notifiers.impl.NotifierImpl.NotifierImpl(Producer<? extends T> welcomeEventProducer)",2,1,0,1,1
"sneer.bricks.pulp.reactive.gates.strings.impl.Concatenator.Concatenator(Signal<?>... chunks)",2,1,0,1,1
"sneer.bricks.skin.widgets.reactive.impl.RImageImpl.RImageImpl(Signal<Image> source)",2,1,0,1,1
"sneer.bricks.snapps.chat.gui.panels.impl.MessageListCellRenderer.MessageListCellRenderer(LabelProvider<Message> labelProvider)",2,1,0,1,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HUDPainter.setWinState(int winState)",2,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PassButtonDrawer.addClickListener(Runnable onClick)",2,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PassButtonDrawer.setVisible(boolean visible)",2,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.CellAttack.CellAttack(DiceThrower diceThrower)",2,1,0,1,1
"sneer.bricks.snapps.games.sliceWars.test.RunSliceWarsWithoutSneer.main(String[] args)",2,1,0,1,1
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.fieldName(int i)",2,1,0,1,1
"sneer.bricks.software.code.metaclass.asm.impl.VisitorAdapter.VisitorAdapter(Visitor visitor)",2,1,0,1,1
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockList.TextBlockList(LinkedList<name.fraser.neil.plaintext.diff_match_patch.Diff> diffs)",2,1,0,1,1
"sneer.bricks.software.diff.impl.TextComparatorImpl.adaptIterator(LinkedList<name.fraser.neil.plaintext.diff_match_patch.Diff> diffs)",2,1,0,1,1
"sneer.bricks.softwaresharing.git.impl.GitImpl.open(Path path)",2,1,0,1,1
"sneer.main.Sneer.main(String[] argsIgnored)",2,1,0,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.InProcessByteArrayServerSocket(int serverPort)",2,1,0,1,1
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.initialize(InProcessByteArraySocket counterpart)",2,1,0,1,1
"snype.whisper.audio.LoopbackDemo.main(String[] args)",2,1,0,1,1
"snype.whisper.skin.audio.kernel.impl.AudioImpl.helpMessageFor(String device)",2,1,0,1,1
"snype.whisper.skin.audio.mic.impl.MicLine.throwFriendly(String specifics)",2,1,0,1,1
"snype.whisper.speextuples.impl.SpeexTuples2Impl.immutable(byte[][] array2D)",2,1,0,1,1
"snype.whisper.speextuples.impl.SpeexTuplesImpl.immutable(byte[][] array2D)",2,1,0,1,1
"snype.whisper.speextuples.tests.SpeexTuplesTest.immutable(byte[][] array2D)",2,1,0,1,1
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxRunner.isDone()",2,1,0,1,0
"sneer.bricks.network.computers.tcp.connections.impl.ByteConnectionImpl.socketHolder()",2,1,0,1,0
"sneer.bricks.network.computers.udp.connections.impl.ConnectionMonitor.lastSighting()",2,1,0,1,0
"sneer.bricks.network.computers.udp.connections.tests.PacketProducerMock.previousPacketWasSent()",2,1,0,1,0
"sneer.bricks.network.social.rendezvous.impl.RendezvousImpl.helpMessage()",2,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Sad.retry()",2,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$Waiting.retryTimeoutImMillis()",2,1,0,1,0
"sneer.bricks.pulp.dyndns.ownip.impl.OwnIpDiscovererImpl.retryTimeMillis()",2,1,0,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel.scrollingOffset()",2,1,0,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.getHeight()",2,1,0,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.PiecePainter.getWidth()",2,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.CellDrawer.CellDrawer()",2,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrowOutcome.attackWins()",2,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceDistribution.getDiceToAdd()",2,1,0,1,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FirstDiceDistribution.getDiceToAdd()",2,1,0,1,0
"sneer.bricks.software.bricks.compiler.impl.Build.foundationSrcFolder()",2,1,0,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer$InterceptedMethod.isVoidMethod()",2,1,0,1,0
"sneer.bricks.software.bricks.interception.impl.ClassEnhancer.classType()",2,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.BricksGuiImpl.selectedBrickVersionTreeNode()",2,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.FileVersionWrapper.fileVersion()",2,1,0,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArrayServerSocket.isCrashed()",2,1,0,1,0
"sneer.tests.adapters.impl.utils.network.InProcessByteArraySocket.counterpart()",2,1,0,1,0
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpSocket.isCrashed()",2,1,0,1,0
"snype.whisper.skin.audio.mic.impl.MicLine.isAquired()",2,1,0,1,0
"snype.whisper.speextuples.impl.SpeexTuples2Impl.newFramesArray()",2,1,0,1,0
"snype.whisper.speextuples.impl.SpeexTuplesImpl.newFramesArray()",2,1,0,1,0
"sneer.bricks.expression.files.map.impl.FileMapData$Entry.Entry(Hash hash_, long size_, long lastModified_, boolean isFolder_)",1,1,0,1,4
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl.dummyMethodSoThisSnappIsntStarted()",1,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getIndex(TreeNode node)",0,1,4,1,1
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.availableMBs()",0,1,3,1,0
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.setPeak(int used)",0,1,2,1,1
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.setUsed(int current)",0,1,2,1,1
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$BlinkingLightsLabelProvider.imageFor(Light light)",0,1,2,1,1
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.shouldStop()",0,1,2,1,0
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.maxMBs()",0,1,2,1,0
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.peak()",0,1,2,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.showActionsPopUp()",0,1,2,1,0
"sneer.bricks.snapps.diff.text.gui.impl.TextDiffPanelsImpl$TextDiffPanelImpl.component()",0,1,2,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getChildCount()",0,1,2,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.isLeaf()",0,1,2,1,0
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.elementMoved(final int index, final int newIndex, T newElement)",0,1,1,1,3
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.elementReplaced(final int index, T oldValue, T newValue)",0,1,1,1,3
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.elementAdded(final int index, T value)",0,1,1,1,2
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.elementRemoved(final int index, T value)",0,1,1,1,2
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.elementSignalChanged(final T value)",0,1,1,1,1
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl$BlinkingLightsLabelProvider.textFor(Light light)",0,1,1,1,1
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockList.get(int index)",0,1,1,1,1
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getChildAt(int childIndex)",0,1,1,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.progress()",0,1,1,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.progress()",0,1,1,1,0
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.usedMBs()",0,1,1,1,0
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.usedMBsPeak()",0,1,1,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl$Toolbar.isVisible()",0,1,1,1,0
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockList.size()",0,1,1,1,0
"dfcsantos.music.impl.TrackSourceStrategy.createPlaylist(File tracksFolder)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.finishWithLocalContents(Object contents)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.getMappedPath(Hash hash)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.mappedContentsBy(Hash hashOfContents)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.finishWithLocalContents(Object contents)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.getMappedPath(Hash hash)",0,1,0,1,1
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.mappedContentsBy(Hash hashOfContents)",0,1,0,1,1
"sneer.bricks.hardware.ram.meter.impl.MemoryMeterImpl.toMBs(long bytes)",0,1,0,1,1
"sneer.bricks.network.computers.udp.holepuncher.server.listener.impl.Listener.repliesFor(DatagramPacket packet)",0,1,0,1,1
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockImpl.TextBlockImpl(name.fraser.neil.plaintext.diff_match_patch.Diff dif)",0,1,0,1,1
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.wrapChild(int childIndex)",0,1,0,1,1
"snype.whisper.audio.SpeexMicrophone$AudioConsumer.audio(byte[][] buffer)",0,1,0,1,1
"dfcsantos.music.impl.PeerTracks.PeerTracks()",0,1,0,1,0
"dfcsantos.music.impl.TrackSourceStrategy.tracksFolder()",0,1,0,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.shouldClean()",0,1,0,1,0
"dfcsantos.tracks.exchange.impl.TrackExchangeImpl.shouldStart()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.file()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.hash()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.isWaitingForActivity()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.requestsToPublishIfNecessary()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.source()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.subscribeToContents()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.impl.AbstractDownload.updateFileMap()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.file()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.hash()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.isWaitingForActivity()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.requestsToPublishIfNecessary()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.source()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.subscribeToContents()",0,1,0,1,0
"sneer.bricks.expression.files.client.downloads.old.impl.AbstractDownloadOld.updateFileMap()",0,1,0,1,0
"sneer.bricks.hardware.io.impl.IOImpl.fileFilters()",0,1,0,1,0
"sneer.bricks.hardware.io.impl.IOImpl.files()",0,1,0,1,0
"sneer.bricks.hardware.io.impl.IOImpl.streams()",0,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$State.react()",0,1,0,1,0
"sneer.bricks.pulp.dyndns.client.impl.DynDnsClientImpl$State.wakeUp()",0,1,0,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.actions()",0,1,0,1,0
"sneer.bricks.skin.main.dashboard.impl.DashboardPanel$InstrumentPanelImpl.contentPane()",0,1,0,1,0
"sneer.bricks.skin.widgets.reactive.impl.ListSignalModel$ModelChangeReceiver.signalChooser()",0,1,0,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.defaultHeight()",0,1,0,1,0
"sneer.bricks.snapps.system.blinkinglights.gui.impl.BlinkingLightsGuiImpl.title()",0,1,0,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.doTestBadCode()",0,1,0,1,0
"sneer.bricks.software.code.compilers.tests.LanguageCompilerTestBase.language()",0,1,0,1,0
"sneer.bricks.software.diff.impl.TextComparatorImpl$TextBlockImpl.content()",0,1,0,1,0
"sneer.bricks.softwaresharing.demolisher.impl.Demolition.enterFolder()",0,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getAllowsChildren()",0,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getIcon()",0,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.getParent()",0,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.listChildren()",0,1,0,1,0
"sneer.bricks.softwaresharing.gui.impl.AbstractTreeNodeWrapper.sourceObject()",0,1,0,1,0
"sneer.main.SneerSessionBase.start()",0,1,0,1,0
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.addMenu(final JPanel jPanel)",81,1,24,0,1
"dfcsantos.music.tests.MusicFunctionalTest.ownModeWithMultipleTracks()",78,1,68,0,0
"dfcsantos.music.ui.view.impl.MusicViewDemo.demo()",70,1,18,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.addSomeCellsAndSetOwners_CheckIfLinkedCellCountIsRight()",61,1,42,0,0
"sneer.bricks.pulp.reactive.gates.strings.tests.StringGatesTest.concat()",56,1,84,0,0
"sneer.bricks.snapps.games.go.impl.gui.gameSetup.GoSetupInvitation.GoSetupInvitation(final Seal _adversary, final int gameId)",47,1,14,0,2
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelDemo.demo()",47,1,11,0,0
"sneer.main.tests.StagedCodeInstallationTest.stagedCodeInstallation()",47,1,6,0,0
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest.test()",42,1,35,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.initGui()",42,1,28,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.FillAllCellPhaseTest.testState()",42,1,21,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.AttackPhaseTest.testState()",42,1,12,0,0
"dfcsantos.music.tests.MusicFunctionalTest.ownModeWithOneTrack()",41,1,42,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.signalChooserTest()",41,1,38,0,0
"sneer.bricks.pulp.dyndns.ownip.tests.OwnIpDiscovererTest.testDiscovery()",41,1,9,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.testVisitor()",39,1,19,0,0
"sneer.bricks.pulp.reactive.collections.setfilter.tests.SetFilterTest.changeValueTest()",38,1,53,0,0
"dfcsantos.music.tests.MusicFunctionalTest.peersMode()",38,1,40,0,0
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketOriginDetectionTest.incomingSocketOriginDetection()",38,1,10,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextTest.testGetAttackOutcome()",38,1,5,0,0
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketTieBreakTest.tieBreak()",37,1,9,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.DistributeDiePhaseTest.ifAlreadMaxedAllCells_GoToNextPhase()",35,1,3,0,0
"sneer.bricks.hardware.cpu.lang.tests.LangTest.insertionOfSeparatorsIntoString()",34,1,18,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.addSelectionSupport()",34,1,6,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.testUsers()",33,1,27,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.init(InstrumentPanel container)",33,1,15,0,1
"sneer.bricks.snapps.games.go.tests.logic.GoTest.deadGroup()",33,1,8,0,0
"sneer.bricks.expression.files.transfer.tests.FileTransferTest.transfer(final File fileOrFolder)",32,1,16,0,1
"sneer.bricks.softwaresharing.gui.impl.FakeModel.newBrickVersion(final Status status, final List<FileVersion> _fileVersions)",32,1,0,0,2
"sneer.bricks.pulp.datastructures.cache.tests.CacheTest.happyDayForCache()",31,1,32,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.DistributeDiePhaseTest.testState()",30,1,12,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testBigGroupCapture()",30,1,4,0,0
"sneer.bricks.snapps.chat.impl.ChatFrame.convert(final ChatMessage message)",30,1,0,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.removeTest()",29,1,21,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initFilterGui()",29,1,20,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.FirstDiceBatchDistributionTest.testState()",29,1,6,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.initModel()",29,1,2,0,0
"sneer.bricks.softwaresharing.gui.impl.FakeModel.bricks()",28,1,40,0,0
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.test()",28,1,27,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.addTest()",28,1,26,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.replaceTest()",28,1,19,0,0
"dfcsantos.tracks.exchange.endorsements.tests.TrackEndorserTest.trackEndorsements()",28,1,13,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.AttackPhaseTest.nextPlayerHasNoCells_ShouldSkipPlayerOnDistributeDie()",28,1,7,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.AttackPhaseTest.afterAttack_gameEnded()",28,1,6,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testSingleStoneCaptureToroidal_shouldCapture()",28,1,3,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testSingleStoneCaptureToroidal_shouldNotCapture()",28,1,3,0,0
"sneer.bricks.network.computers.udp.tests.UdpNetworkTest.packetsBackAndForth()",27,1,17,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.brickDependency()",27,1,10,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testMultipleGroupKill()",27,1,4,0,0
"basis.brickness.testsupport.BrickTestWithMockRunner.wrapMethod(Method method)",27,1,1,0,1
"sneer.tests.freedom2.Freedom2Test.testNicknames()",26,1,34,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testSingleStoneCaptureScore()",26,1,14,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.FirstAttackPhaseTest.testState()",26,1,12,0,0
"sneer.bricks.network.computers.tcp.connections.originator.tests.SocketOriginatorTest.openConnection()",26,1,10,0,0
"sneer.bricks.expression.files.map.visitors.tests.FileMapGuideTest.assertTour(String path, String... expected)",26,1,4,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.tests.SetFilterTest.addRemoveTest()",24,1,32,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.init(InstrumentPanel window)",24,1,19,0,1
"sneer.bricks.pulp.bandwidth.tests.BandwidthConsolidationTest.bandwidthConsolidation()",24,1,14,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.overridenMethods()",24,1,3,0,0
"sneer.bricks.pulp.reactive.collections.tests.SetRegisterTest.addAll()",23,1,20,0,0
"sneer.bricks.snapps.contacts.gui.comparator.tests.ContactComparatorTest.testComparator()",23,1,10,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.CellAttackTest.cellAttack_AttackWins()",23,1,10,0,0
"sneer.bricks.network.computers.channels.guaranteed.splitter.tests.PacketSplitterTest.splitAndJoin(final String expected, final int maxPieceSize)",23,1,6,0,2
"sneer.bricks.network.social.attributes.gui.window.impl.AttributesWindowImpl.attributes()",23,1,4,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.continuationWithParameters()",23,1,3,0,0
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.sequencing()",23,1,2,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListAdapter.ListAdapter(ListSignal<IN> input, final Functor<IN,OUT> functor)",23,1,1,0,2
"sneer.bricks.pulp.reactive.collections.tests.SetRegisterTest.size()",22,1,30,0,0
"sneer.tests.freedom7.Freedom7Test.meToo()",22,1,26,0,0
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.stun()",22,1,18,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.checkingMethodIsInvoked(final Class<?> brick, final String expectedMethodName, final Object[] expectedArgs, ClosureX<X> invocationBlock)",22,1,3,0,4
"dfcsantos.music.tests.MusicFunctionalTest.basicStuff()",21,1,35,0,0
"sneer.bricks.expression.tuples.tests.TupleKeepingTest.garbageCollectingOldTuplesByGroup()",21,1,22,0,0
"sneer.bricks.expression.tuples.remote.tests.RemoteTuplesTest.publishTuplesAndCheckForLoopback()",21,1,13,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initGui()",21,1,13,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.CellAttackTest.cellAttack_AttackLoses()",21,1,9,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.CellAttackTest.cellAttack_draw_AttackLoses()",21,1,9,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.libDependencies()",21,1,9,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stageOneBrick()",21,1,9,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.untoggleDeadGroup()",21,1,8,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.AttackPhaseTest.allCellsFilled_ShouldSkipDistributeDie()",21,1,7,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.illegalDependency()",21,1,7,0,0
"sneer.bricks.network.social.heartbeat.tests.HeartTest.heartIsBeating()",21,1,5,0,0
"sneer.bricks.snapps.contacts.gui.delete.impl.DeleteContactWindowImpl.addContactEditAction()",21,1,4,0,0
"sneer.bricks.network.computers.tcp.tests.Network2010Test.sameMachine()",20,1,9,0,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.GuiPlayer.GuiPlayer(final Player windowOwner, final RemotePlayListener remotePlayer, final long randomSeed, final int numberOfPlayers, final int lines, final int columns, final int randomlyRemoveCells)",20,1,6,0,7
"sneer.bricks.skin.widgets.autoscroll.impl.AutoScrollWorker.AutoScrollWorker(final JScrollPane subject)",20,1,4,0,1
"sneer.bricks.expression.tuples.tests.TuplePersistenceTest.tuplePersistence()",20,1,2,0,0
"sneer.bricks.pulp.reactive.collections.tests.ListRegisterTest.testSize()",19,1,25,0,0
"sneer.bricks.network.computers.udp.sightings.tests.SightingKeeperTest.onSighting_ShouldPublishTuple()",19,1,18,0,0
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.manyEdges()",19,1,17,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.askIfRemovingCellWillLeaveOrphanCells()",19,1,12,0,0
"sneer.bricks.pulp.reactive.tests.SignalUtilsTest.waitForNewElementWithPredicate()",19,1,8,0,0
"sneer.bricks.expression.files.map.tests.FileMapTest.rename()",18,1,32,0,0
"sneer.tests.freedom5.Freedom5TestShouts.shoutToTheWind()",18,1,19,0,0
"sneer.bricks.pulp.reactive.gates.logic.tests.AndTest.test()",18,1,16,0,0
"sneer.bricks.software.bricks.statestore.tests.BrickStateStoreTest.writeAndReadBrickState()",18,1,16,0,0
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.remappingAChangedFolder()",18,1,15,0,0
"sneer.bricks.expression.tuples.tests.TupleKeepingTest.duplicateKeptTuplesAreIgnored()",18,1,15,0,0
"sneer.bricks.pulp.datastructures.cache.tests.CacheTest.discardOldObjects()",18,1,14,0,0
"sneer.bricks.pulp.distribution.filtering.tests.TupleFilterManagerTest.testCensorship()",18,1,10,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.DarkBorderPainter.draw(Graphics graphics)",18,1,9,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.RemoteBucket.read(final long blockNumber)",18,1,6,0,1
"sneer.tests.freedom7.Freedom7Test.writeW(final JavaSourceWriter writer)",18,1,3,0,1
"sneer.bricks.snapps.games.sliceWars.impl.SliceWarsMainImpl.setupContextMenu()",18,1,2,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.allowingRealizeAndInstantiate(final Class<?> brickClass)",18,1,1,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onIdleRecognizeNewSighting()",17,1,21,0,0
"sneer.bricks.pulp.reactive.gates.logic.tests.NotTest.test()",17,1,15,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.addSomeCellsAndSetOwnersAndFillThem_ShouldSayPlayerCantPlay()",17,1,14,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.init(InstrumentPanel window)",17,1,13,0,1
"sneer.bricks.software.bricks.repl.tests.ReplConsoleTest.exceptionsAreReported()",17,1,8,0,0
"sneer.bricks.identity.seals.codec.impl.SealCodecImpl.formattedHexEncode(Seal seal)",17,1,7,0,1
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.initWidget()",17,1,7,0,0
"sneer.bricks.software.bricks.repl.tests.ReplConsoleTest.useConsoleHappyDay()",17,1,7,0,0
"sneer.bricks.pulp.reactive.gates.buffers.assync.impl.AssynchronousBufferImpl.AssynchronousBufferImpl(Source<T> input, String threadName)",17,1,3,0,2
"sneer.bricks.expression.files.map.tests.FileMapTest.remove()",16,1,21,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onDisconnect_ShouldChangeSessionKey()",16,1,20,0,0
"sneer.bricks.pulp.blinkinglights.tests.BlinkingLightsTest.testLights()",16,1,16,0,0
"sneer.bricks.pulp.notifiers.pulsers.tests.PulsersTest.receiveFromSeveralPulseSources()",16,1,14,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.addSomeCellsAndLinkThem_CheckIfOk()",16,1,13,0,0
"sneer.bricks.expression.files.map.tests.FileMapTest.getFolderContents()",16,1,11,0,0
"sneer.bricks.snapps.web.tests.WebTest.testHappyDay()",16,1,7,0,0
"sneer.bricks.software.bricks.repl.tests.ReplConsoleTest.useConsoleWithNullReturn()",16,1,6,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testKo()",16,1,5,0,0
"sneer.tests.freedom7.Freedom7Test.generateX()",16,1,5,0,0
"sneer.bricks.network.social.navigation.impl.tests.ContactNavigatorTest.requestContacts()",16,1,4,0,0
"sneer.bricks.pulp.dyndns.checkip.tests.CheckIpTest.test()",16,1,4,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.deadGroupMisclickOnFreeIntersectionDoesNotFreeze()",16,1,3,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testScore()",16,1,3,0,0
"sneer.bricks.pulp.propertystore.tests.PropertyStoreTest.testPropertyStore()",16,1,2,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initWindowListener()",16,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.brickWithLib()",16,1,1,0,0
"sneer.bricks.software.timing.impl.WindowOpacitySetterImpl.animator(final Window window, final float start, final float end, int forwardDuration, int backwardDuration)",16,1,0,0,5
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.baptismProblem()",15,1,12,0,0
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.cycleDetection()",15,1,12,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.shouldNotHandleDataPacket_UntilHandshakeIsCompleted()",15,1,12,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.receiveData()",15,1,10,0,0
"sneer.bricks.pulp.blinkinglights.tests.BlinkingLightsTest.testTimeout()",15,1,10,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.PlayerControlsPanel(MusicViewListener listener)",15,1,9,0,1
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.sequence(String packet1, int sequence1, String packet2, int sequence2)",15,1,6,0,4
"sneer.bricks.expression.files.map.mapper.tests.FileMappingStopTest.mapFolder()",15,1,4,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testSuicide()",15,1,4,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.objectsReturnedFromTransactionsAreAutomaticallyRegistered()",15,1,2,0,0
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.ECDHSecret()",14,1,22,0,0
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.init(InstrumentPanel window)",14,1,16,0,1
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testSingleStoneCapture()",14,1,11,0,0
"snype.whisper.skin.audio.mic.tests.MicTest.testIsRunningSignal()",14,1,11,0,0
"sneer.tests.freedom7.Freedom7Test.generateLib(final File libJar)",14,1,10,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.ContactsGuiImpl()",14,1,10,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.bubbleExpandsToQueriedValues()",14,1,9,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.autoScroll()",14,1,9,0,0
"dfcsantos.music.ui.view.impl.PlayingTrackPanel.PlayingTrackPanel(MusicViewListener listener)",14,1,7,0,1
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.LogConsoleImpl()",14,1,7,0,0
"sneer.bricks.software.bricks.interception.impl.InterceptionEnhancerImpl.realize(Class<?> targetBrick, Class<? extends Interceptor> interceptorClass, final ClassDefinition classDef)",14,1,3,0,3
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testKillOtherFirst()",14,1,2,0,0
"sneer.bricks.network.computers.channels.impl.ChannelImpl.open(final Producer<? extends ByteBuffer> sender, final Consumer<? super ByteBuffer> receiver)",14,1,1,0,2
"sneer.bricks.softwaresharing.gui.impl.FakeContent.first()",14,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.FakeContent.second()",14,1,0,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.keepAlive()",13,1,17,0,0
"sneer.bricks.software.bricks.finder.tests.BrickFinderTest.findBricks()",13,1,14,0,0
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.mapFolder()",13,1,12,0,0
"sneer.bricks.network.social.attributes.gui.impl.AttributePanel.AttributePanel(AttributePanelElement attribute)",13,1,11,0,1
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.FolderSelectionPanel(MusicViewListener listener)",13,1,10,0,1
"sneer.bricks.pulp.reactive.collections.tests.CollectionSignalsTest.adapt()",13,1,10,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.addSomeCells_ThenRemoveOne()",13,1,9,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.transactionAnnotation()",13,1,8,0,0
"sneer.bricks.software.bricks.interception.impl.BrickMetadataEmitter.emitBrickMetadataClass()",13,1,8,0,0
"basis.testsupport.tests.PrettyPrinterTest.usePrettyPrinterToCapitalizeStrings()",13,1,6,0,0
"dfcsantos.music.notification.playingtrack.tests.PlayingTrackTest.playingTrackBroadcast()",13,1,6,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.shuffleButton()",13,1,6,0,0
"dfcsantos.music.ui.view.impl.SmileyPanel.meTooButton()",13,1,6,0,0
"sneer.bricks.network.computers.channels.guaranteed.splitter.tests.PacketSplitterTest.splitAndJoinPackets()",13,1,6,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.addActionWithCheckBox(int positionInMenu, String caption, Signal<Boolean> isChecked, final Runnable action)",13,1,4,0,4
"sneer.bricks.snapps.games.sliceWars.impl.SliceWarsMainImpl.subscribeToReceiveSliceWarsMessages()",13,1,4,0,0
"sneer.bricks.hardware.io.log.stacktrace.tests.StackTraceLoggerTest.stackTraceLogging()",13,1,3,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.copyBrickBaseToSrcFolder()",13,1,3,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.addAction(int index, final String caption, final Runnable delegate)",13,1,1,0,3
"sneer.bricks.skin.popuptrigger.impl.PopupTriggerImpl.listen(Component sorce, final Consumer<MouseEvent> receiver)",13,1,1,0,2
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onDisconnect_ShouldStopSendPackets()",12,1,19,0,0
"sneer.bricks.expression.files.map.tests.FileMapTest.fileMapping()",12,1,15,0,0
"sneer.bricks.network.social.attributes.tests.AttributesTest.peerAttribute()",12,1,11,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.invocationPathWithArgs()",12,1,10,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.OwnInfoImpl()",12,1,7,0,0
"sneer.bricks.expression.files.map.visitors.tests.FileMapGuideTest.sparseMappingTour()",12,1,6,0,0
"sneer.bricks.hardware.cpu.threads.tests.ThreadsTest.crashHandlersAreNotified()",12,1,6,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.illegalApiDependency()",12,1,6,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.addAction(int positionInMenu, final Action action)",12,1,5,0,2
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.RCheckBoxImpl(Signal<Boolean> source, Consumer<Boolean> setter, Runnable cascadeRefreshOperations)",12,1,3,0,3
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelDemo.main(String[] args)",12,1,3,0,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.tests.PacketSplitterTest.packetTooBig()",12,1,2,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.copyRequiredFoundationFiles()",12,1,1,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.testStatusWithSparseMapping()",12,1,1,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.menuAction()",12,1,0,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onConnect_ShouldHandshake()",11,1,17,0,0
"sneer.tests.freedom2.Freedom2Test.testRemoteNameChange()",11,1,12,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onUnknownCaller_ShouldNotify()",11,1,11,0,0
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.testDigestWithSmallString()",11,1,10,0,0
"sneer.bricks.software.bricks.interception.impl.BrickMetadataEmitter.emitBrickMetadataInitializationCode(MethodVisitor mv)",11,1,9,0,1
"dfcsantos.tracks.tastematching.tests.TasteMatcherTest.opinions()",11,1,8,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.ReactiveSorter(CollectionSignal<T> input, Comparator<T> comparator, SignalChooser<T> chooser)",11,1,4,0,3
"sneer.bricks.network.computers.addresses.contacts.tcp.tests.ContactInternetAddressesTest.see(final String ip, final int port)",11,1,4,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.Filter(SetSignal<T> input, ReactivePredicate<T> predicate)",11,1,4,0,2
"sneer.tests.freedom7.Freedom7Test.writeY(File srcFolder)",11,1,4,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onStunPacketReceived_ShouldDelegateToStunClient()",11,1,4,0,0
"basis.testsupport.CleanTestRunner.invokeTestMethod(final Method method, RunNotifier notifier)",11,1,3,0,2
"sneer.bricks.hardware.gui.timebox.impl.TimeboxedEventQueueImpl.dispatchEvent(final AWTEvent event)",11,1,3,0,1
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.testECBCipher()",11,1,3,0,0
"sneer.bricks.hardware.cpu.threads.tests.ThreadsTest.environmentIsPropagatedToSteppables()",11,1,3,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.setUpHttpClientMockFor(final String hostname, final String ip, final String user, final String password, final String responseText)",11,1,1,0,5
"sneer.bricks.hardware.io.tests.IOTest.fileExtensionFilterTest()",10,1,17,0,0
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadPanel.DownloadPanel(Download download)",10,1,16,0,1
"sneer.bricks.expression.files.map.tests.FileMapTest.populateSubject()",10,1,16,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onHandshakeComplete_ShouldStopSendPackets()",10,1,15,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.sendData_ShouldUseReceivedHailSighting()",10,1,14,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onSighting_ShouldUseFastestAddress()",10,1,13,0,0
"basis.lang.tests.PairTest.testEquals()",10,1,11,0,0
"sneer.bricks.snapps.chat.impl.ChatFrame.ChatFrame(Contact con)",10,1,10,0,1
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.init(InstrumentPanel window)",10,1,10,0,1
"dfcsantos.music.ui.view.impl.MusicViewImpl.init(InstrumentPanel container)",10,1,8,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.lastModifiedDoesNotAffectHash()",10,1,8,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.initComponents()",10,1,8,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.BoardTest.addSomeCellsAndSetOwners_ShouldSayBoardIsFull()",10,1,8,0,0
"sneer.tests.freedom5.Freedom5TestShouts.canHearPastShouts()",10,1,8,0,0
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.AESTestVector()",10,1,7,0,0
"sneer.snapps.games.drones.units.tests.DroneUnitsTest.collision()",10,1,7,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.transactionMethodCallingTransactionMethod()",10,1,6,0,0
"dfcsantos.music.ui.view.impl.MusicViewImpl.initMenu(MenuGroup<? extends JComponent> actions)",10,1,5,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerTest.throwSomeLoadedDice_diceOutcomeShouldCheck()",10,1,5,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.createOwnSealPane()",10,1,4,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.setUpExpectations(final String responseText)",10,1,3,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.add(final T element)",10,1,3,0,1
"sneer.bricks.expression.tuples.tests.TupleSpaceResponsivenessTest.test()",10,1,3,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initClearLogAction()",10,1,3,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.initChoicesRefresh()",10,1,2,0,0
"dfcsantos.music.tests.MusicFunctionalTest.activateTrackEndorsementsFrom(Environment remoteEnvironment)",10,1,1,0,1
"sneer.bricks.snapps.games.go.impl.logic.Move.toString()",10,1,0,0,0
"sneer.bricks.hardware.io.tests.IOTest.folderCopySpike()",9,1,13,0,0
"sneer.bricks.software.code.compilers.java.tests.JavaCompilerTest.doTestBadCode()",9,1,13,0,0
"sneer.bricks.software.code.compilers.scala.tests.ScalaCompilerTest.doTestBadCode()",9,1,13,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.tests.ContactInternetAddressesTest.keptAddressesAreFound()",9,1,12,0,0
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.assertReply(DatagramPacket replyPacket, String ip, int port, byte[] seal, String peerIp, int peerPort, String peerAddressData)",9,1,11,0,7
"sneer.bricks.expression.tuples.tests.TuplePersistenceTest.filesAreClosedUponCrash()",9,1,11,0,0
"sneer.bricks.network.social.attributes.gui.window.impl.AttributesWindowImpl.initFrame()",9,1,11,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stagingFailureIsReportedAsBlinkingLight()",9,1,11,0,0
"sneer.tests.freedom7.Freedom7TestGit.meToo()",9,1,11,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.createOwnSealScrollPane()",9,1,9,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.play(Direction direction, int duration)",9,1,7,0,2
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.stunFrom(String nick)",9,1,7,0,1
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.removeEdge()",9,1,7,0,0
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.newGcButton()",9,1,6,0,0
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.testDigestWithLargeArray()",9,1,5,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.resizing()",9,1,5,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl.remove(K key)",9,1,4,0,1
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.hashCode()",9,1,4,0,0
"sneer.bricks.snapps.contacts.gui.delete.impl.DeleteContactWindowImpl.initGui()",9,1,4,0,0
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadListPanel.DownloadListPanel(final SetSignal<Download> downloads)",9,1,3,0,1
"sneer.bricks.network.social.attributes.gui.impl.AttributeListPanel.AttributeListPanel(CollectionSignal<AttributePanelElement> elements)",9,1,3,0,1
"sneer.bricks.network.computers.addresses.contacts.tcp.tests.ContactInternetAddressesTest.firstKeptAddress()",9,1,3,0,0
"sneer.bricks.network.computers.http.gateway.impl.HttpGatewayImpl.get(final String httpUrl, final Consumer<byte[]> client, final Consumer<IOException> exceptionHandler)",9,1,2,0,3
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.RLabelImpl(Signal<?> source, PickyConsumer<? super String> setter)",9,1,2,0,2
"sneer.bricks.network.computers.udp.tests.UdpNetworkTest.startUppercaseEchoOn(final UdpSocket socket)",9,1,2,0,1
"sneer.bricks.hardware.cpu.threads.tests.ThreadsTest.crashAllThreads()",9,1,2,0,0
"sneer.bricks.snapps.chat.impl.ChatImpl.handleReceivedMessages()",9,1,2,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.checkingMethodIsInvoked(final String expectedMethodName, final Object[] expectedArgs, ClosureX<X> invocationBlock)",9,1,1,0,3
"sneer.bricks.pulp.reactive.collections.impl.CollectionAdapter.CollectionAdapter(CollectionSignal<IN> input, final Functor<IN,OUT> functor)",9,1,1,0,2
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.submit()",9,1,1,0,0
"sneer.bricks.softwaresharing.gui.impl.FakeModel.newFileVersion(final String contents, final String currentContents, final String fileName, final sneer.bricks.softwaresharing.FileVersion.Status status)",9,1,0,0,4
"sneer.bricks.softwaresharing.gui.impl.FakeModel.newBrickInfo(final String name, final List<BrickVersion> versions, final BrickHistory.Status status)",9,1,0,0,3
"sneer.bricks.network.social.attributes.impl.AttributesImpl.attributeSetterFor(final Contact contact, final Class<? extends Attribute<T>> attribute)",9,1,0,0,2
"basis.environments.EnvironmentUtils.compose(final Environment... environments)",9,1,0,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.shouldNotSendPacket_UntilHandshakeIsCompleted()",8,1,14,0,0
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.twoEdges()",8,1,11,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.tests.ContactInternetAddressesTest.sightingAddressesAreFound()",8,1,10,0,0
"sneer.bricks.pulp.dyndns.ownaccount.tests.DynDnsAccountKeeperTest.testAccountKeeper()",8,1,10,0,0
"sneer.bricks.snapps.chat.gui.panels.impl.Resizer.pack(JComponent component, int maxWidth, int headerHeight)",8,1,9,0,3
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onNotConnected_ShouldSendHailPacketsToSightings()",8,1,9,0,0
"sneer.bricks.network.social.attributes.tests.AttributesTest.regsiterAttributes()",8,1,9,0,0
"sneer.tests.freedom2.Freedom2Test.isOnlineAfterNewSessionForBothSides()",8,1,9,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.getLastPlayedStone()",8,1,8,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testEndByPass()",8,1,8,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.handshakeFrom(String nick, byte[] publicKey)",8,1,7,0,2
"sneer.bricks.software.bricks.interception.impl.BrickMetadataEmitter.writeEmptyConstructor(ClassWriter cw)",8,1,7,0,1
"sneer.main.SneerCodeFolders.localRootFolder()",8,1,7,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.painters.RegularGoBoardImagePainter.drawBoardAndSurroundings(Graphics graphics, Rectangle boardImageRectangle, BufferedImage bufferImage)",8,1,6,0,3
"dfcsantos.tracks.tastematching.tests.TasteMatcherTest.parentFolderRatingOverridesZeroFolderRating()",8,1,6,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.stateIsPreserved()",8,1,6,0,0
"sneer.bricks.pulp.reactive.tests.SignalUtilsTest.waitForExistingElementWithPredicate()",8,1,6,0,0
"sneer.tests.prevalence.PrevalenceTest.test()",8,1,6,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.updateAddress(final String address, final int zoom)",8,1,5,0,2
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.newButton(final String iconName, final Insets margin)",8,1,5,0,2
"sneer.bricks.snapps.web.tests.SealForUrlTest.assertUrlMatchesNick(String url, String nick)",8,1,5,0,2
"basis.lang.arrays.tests.ImmutableArrayTest.toArray()",8,1,5,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.folderWithAFewFiles()",8,1,5,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.idempotencyIsTransitive()",8,1,5,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.multipleBricks()",8,1,5,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.write()",8,1,5,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.initExternalEvents()",8,1,4,0,0
"dfcsantos.music.ui.view.impl.SmileyPanel.mehButton()",8,1,4,0,0
"dfcsantos.music.ui.view.impl.SmileyPanel.noWayButton()",8,1,4,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.queriesThatReturnUnregisteredObjectsAreAssumedToBeIdempotent()",8,1,4,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.addCommitChangesListener()",8,1,4,0,0
"dfcsantos.music.impl.DJ.DJ(Source<Track> trackToPlay, Runnable toCallWhenDonePlayingATrack)",8,1,3,0,2
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.RListImpl(ListSignal<ELEMENT> source, LabelProvider<ELEMENT> labelProvider)",8,1,3,0,2
"sneer.bricks.software.folderconfig.testsupport.BrickTestBase.newTestEnvironment(Object... bindings)",8,1,3,0,1
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.skipButton()",8,1,3,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.stopButton()",8,1,3,0,0
"sneer.bricks.network.computers.tcp.connections.originator.impl.SocketOriginatorImpl.SocketOriginatorImpl()",8,1,3,0,0
"sneer.bricks.network.computers.tcp.connections.receiver.impl.SocketReceiverImpl.SocketReceiverImpl()",8,1,3,0,0
"sneer.bricks.hardware.gui.nature.impl.GUIImpl.invoke(Class<?> brick, Object instance, String methodName, final Object[] args, final Continuation continuation)",8,1,2,0,5
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.addWidget(Container container, JComponent widget, String label, int y)",8,1,2,0,4
"sneer.bricks.hardware.gui.nature.impl.GUIImpl.instantiate(Class<T> brick, Class<T> implClass, final Producer<T> producer)",8,1,2,0,3
"sneer.bricks.skin.filechooser.impl.FileChoosersImpl.choose(final int fileSelectionMode, final Consumer<File[]> consumer)",8,1,2,0,2
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.newLabel(final Signal<Integer> source, final String prefix)",8,1,2,0,2
"sneer.bricks.hardware.cpu.threads.tests.CpuThrottleDemo.main(String[] ignored)",8,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.RProgressBarImpl.RProgressBarImpl(Signal<Integer> source)",8,1,2,0,1
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.playButton()",8,1,2,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.unaccessibleMethodsAreNotIntercepted()",8,1,2,0,0
"sneer.bricks.pulp.reactive.impl.SignalAdapter.SignalAdapter(Signal<IN> input, final Functor<IN,Signal<OUT>> functor)",8,1,1,0,2
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.addEditLabelListener()",8,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.initModel()",8,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.environmentIsNotRequired()",8,1,1,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.sortBricks()",8,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.createLoopBackButtonListener()",8,1,1,0,0
"sneer.bricks.snapps.games.go.impl.logic.Move.Move(boolean resign_, boolean pass_, int x_, int y_, boolean mark_, int gameId)",8,1,0,0,6
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.newComponentListener()",8,1,0,0,0
"sneer.bricks.hardware.io.tests.IOTest.readBlockTest()",7,1,13,0,0
"sneer.bricks.pulp.serialization.tests.SerializerTest.classloaderHandling()",7,1,11,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.FirstDiceBatchDistributionTest.playTurn(int turn, FirstDiceDistribution subject)",7,1,10,0,2
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.initOrAddControls()",7,1,10,0,0
"sneer.bricks.softwaresharing.gui.impl.FakeModel.newVersions(List<FileVersion> files)",7,1,8,0,1
"basis.brickness.impl.tests.BricknessTest.brickLibsHaveSeparateClassloaders()",7,1,8,0,0
"sneer.bricks.pulp.probe.tests.ProbeManagerTest.assertPacketToSend(int id)",7,1,7,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.refreshChoices()",7,1,7,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.newTrackDownloadedIcon()",7,1,7,0,0
"sneer.bricks.pulp.distribution.filtering.tests.TupleFilterManagerTest.testTupleTypeBlocking()",7,1,7,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.PlayerTest.nextPlayerTest()",7,1,7,0,0
"sneer.bricks.snapps.wind.impl.WindImpl.WindImpl()",7,1,7,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.waitForAvailableBrickY()",7,1,7,0,0
"sneer.tests.freedom2.Freedom2Test.isOnlineAfterNewSession()",7,1,7,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.hailFrom(String nick, byte[] seal, int timestamp, String ip, int port)",7,1,6,0,5
"sneer.bricks.softwaresharing.git.impl.AutoCloseableRepository.AutoCloseableRepository(Path path)",7,1,6,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.readWithoutWrite()",7,1,6,0,0
"sneer.bricks.identity.name.tests.OwnNameTest.test()",7,1,6,0,0
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadListPanel.newDownloadPanelFor(Download download)",7,1,5,0,1
"sneer.bricks.network.social.attributes.gui.impl.AttributeListPanel.newAttributePanelFor(AttributePanelElement attribute)",7,1,5,0,1
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver$ElementReceiver.ElementReceiver(final T element)",7,1,5,0,1
"dfcsantos.tracks.tastematching.tests.TasteMatcherTest.foldersWithCommonPrefixAreNotSiblings()",7,1,5,0,0
"sneer.bricks.software.bricks.repl.tests.GroovyEvaluatorTest.variablesArePreservedBetweenEvaluations()",7,1,5,0,0
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddress.ContactAddress(Contact contact)",7,1,4,0,1
"sneer.bricks.skin.main.title.impl.ProcessTitleImpl.title()",7,1,4,0,0
"dfcsantos.music.tests.MusicFunctionalTest.trackNames(File[] trackFiles)",7,1,3,0,1
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.createFileWithContent(byte[] content)",7,1,3,0,1
"sneer.bricks.hardware.cpu.threads.tests.CpuThrottleDemo.startCharting(final String label)",7,1,3,0,1
"basis.lang.arrays.tests.ImmutableArrayTest.immutable()",7,1,3,0,0
"sneer.bricks.hardware.clock.ticker.tests.ClockTickerTest.waitForATick()",7,1,3,0,0
"sneer.bricks.hardware.cpu.threads.impl.Counter.entriesSortedByCountThenKey()",7,1,3,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.brickCommandCausesAnotherBrickInstantiation()",7,1,3,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerTest.attackDiceSumIsBigger_AtackWins()",7,1,3,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerTest.defenseDiceSumIsBigger_DefenseWins()",7,1,3,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.DiceThrowerTest.diceSumDraw_DefenseWins()",7,1,3,0,0
"sneer.bricks.skin.filechooser.impl.FileChoosersImpl.choose(final int fileSelectionMode, final File defaultFileOrDir, final Consumer<File> consumer)",7,1,2,0,3
"sneer.bricks.pulp.reactive.gates.logic.impl.And.And(Signal<Boolean> a, Signal<Boolean> b)",7,1,2,0,2
"sneer.bricks.pulp.reactive.gates.numbers.impl.Adder.Adder(Signal<Integer> a, Signal<Integer> b)",7,1,2,0,2
"sneer.tests.adapters.impl.utils.network.udp.impl.InProcessUdpNetworkImpl.openSocket(int portNumber)",7,1,2,0,1
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.newVolumeSlider()",7,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.REditableLabelImpl(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",7,1,1,0,3
"basis.lang.arrays.tests.ImmutableArrayTest.immutableUsingAlternateConstructor()",7,1,1,0,0
"sneer.bricks.hardware.io.log.tests.LoggerMocks.messageKeeper(final String prefix)",7,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.removerFor(final Item item)",7,1,0,0,1
"sneer.bricks.hardware.ram.deepcopy.DeepCopier.deepCopyThroughPipe(Object original)",7,1,0,0,1
"basis.environments.Bindings.environment()",7,1,0,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.newSelectorActionListener()",7,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.itemAdder_Idempotent()",7,1,0,0,0
"sneer.bricks.pulp.reactive.collections.setfilter.tests.SetFilterTest.reactivePredicate()",7,1,0,0,0
"snype.whisper.skin.audio.mic.tests.MicTest.soundExpectations()",7,1,0,0,0
"sneer.bricks.expression.files.map.tests.FileMapTest.fileAndFolderWithSameHash()",6,1,12,0,0
"dfcsantos.tracks.storage.rejected.tests.RejectedTracksKeeperTest.testTrackRejection()",6,1,11,0,0
"sneer.bricks.network.computers.tcp.connections.impl.OutgoingHandShaker.greet(ByteArraySocket socket, @SuppressWarnings('unused') Contact contact)",6,1,10,0,2
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.changeToPeersModeAndPlayTracks()",6,1,10,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onFirstPacket_ShouldConnect()",6,1,10,0,0
"sneer.bricks.expression.files.map.tests.FileMapTest.twoPathsWithSameHash()",6,1,9,0,0
"basis.testsupport.tests.PrettyPrinterTest.callToStringWithoutRegisteringPrettyPrinters()",6,1,8,0,0
"sneer.bricks.softwaresharing.demolisher.filestatus.tests.FileStatusCalculatorTest.extra()",6,1,8,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stagingFailureRollsBackStage()",6,1,8,0,0
"sneer.bricks.snapps.games.go.impl.gui.gameSetup.GoSetupInvitation.sendInvitation(final Seal _adversary)",6,1,7,0,1
"dfcsantos.music.ui.view.impl.DownloadsView.newReactiveFrame()",6,1,7,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.nullParameter()",6,1,7,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onSighting_ShouldHail()",6,1,7,0,0
"sneer.bricks.pulp.distribution.filtering.tests.TupleFilterManagerTest.testTupleTypeHierarchyBlocking()",6,1,7,0,0
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.submitUpdateRequest(final String host, final String user, final String password, String ip)",6,1,6,0,4
"sneer.bricks.expression.files.tests.RemoteCopyTest.partialDownloadRecovery(int size)",6,1,6,0,1
"sneer.bricks.snapps.contacts.gui.delete.impl.DeleteContactWindowImpl.open(final Contact contact)",6,1,6,0,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PhaseDescriptionDrawer.draw(Graphics2D g2)",6,1,6,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.datagramPacketFor(ByteBuffer buf, String ip, int port)",6,1,5,0,3
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.dataFrom(String nick, byte[] payload)",6,1,5,0,2
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.produceSeal(String nick, int seed)",6,1,5,0,2
"sneer.bricks.software.code.java.source.writer.impl.JavaSourceWriterImpl.write(String className, String sourceWithoutPackage)",6,1,5,0,2
"dfcsantos.music.ui.view.impl.SmileyPanel.SmileyPanel(MusicViewListener listener)",6,1,5,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.findPositionToInsert(T element)",6,1,5,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactLabelProvider.imageFor(final Contact contact)",6,1,5,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactLabelProvider.textFor(final Contact contact)",6,1,5,0,1
"basis.brickness.impl.tests.BricknessTest.bricksHaveSeparateClassloaders()",6,1,5,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onNotConnected_ShouldSendHailPacketsToAddressOfContact()",6,1,5,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testPass()",6,1,5,0,0
"sneer.bricks.snapps.games.go.tests.logic.GoTest.testResign()",6,1,5,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.PlayerTest.playerRotationTest()",6,1,5,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.prepareFolders()",6,1,5,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.preparePacket(UdpPacketType type, byte[] seal)",6,1,4,0,2
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.move(T element)",6,1,4,0,1
"sneer.bricks.network.social.attributes.impl.AttributesImpl.AttributesImpl()",6,1,4,0,0
"sneer.bricks.pulp.dyndns.checkip.impl.CheckIpImpl.check()",6,1,4,0,0
"sneer.snapps.games.drones.units.tests.DroneUnitsTest.units()",6,1,4,0,0
"sneer.tests.freedom1.Freedom1Test.testOwnName()",6,1,4,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickListCellRenderer.getListCellRendererComponent(JList<? extends Object> jList, Object element, int ignored2, boolean isSelected, boolean cellHasFocus)",6,1,3,0,5
"sneer.bricks.network.social.impl.ContactsImpl.addContact(String nickname)",6,1,3,0,1
"sneer.bricks.expression.files.transfer.tests.FileTransferTest.folderTransfer()",6,1,3,0,0
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.pluckWithCycles()",6,1,3,0,0
"sneer.bricks.network.social.attributes.gui.window.impl.AttributesWindowImpl.AttributesWindowImpl()",6,1,3,0,0
"sneer.bricks.software.bricks.repl.tests.GroovyEvaluatorTest.groovyRepl()",6,1,3,0,0
"basis.environments.EnvironmentUtils.produceIn(Environment environment, final ProducerX<T,X> producer)",6,1,2,0,2
"sneer.bricks.hardware.clock.ticker.custom.impl.CustomClockTickerImpl.start(final int millisToSleep, final long timeIncrement)",6,1,2,0,2
"sneer.bricks.hardware.clock.ticker.custom.impl.CustomClockTickerImpl.start(final int millisToSleep)",6,1,2,0,1
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.stackTrace(Throwable throwable)",6,1,2,0,1
"sneer.snapps.games.drones.units.impl.UnitImpl.receiveHit(int strength)",6,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.clearSelection()",6,1,2,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.listChildren()",6,1,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.FileVersionImpl(String path, byte[] contents, Functor<String,byte[]> currentContentsFinder, long lastModified, boolean isCurrent)",6,1,1,0,5
"sneer.bricks.expression.files.tests.RemoteCopyTest.copyFileFromFileMap(final Hash hashOfContents, final long size, final long lastModified, final File destination)",6,1,1,0,4
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initDeleteFilterAction(final ListRegister<String> whiteListEntries, final ListWidget<String> includes, JButton delButton)",6,1,1,0,3
"sneer.bricks.expression.files.tests.RemoteCopyTest.copyFolderFromFileMap(final Hash hashOfContents, final File destination)",6,1,1,0,2
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.manageOutgoingSocket(final ByteArraySocket socket, final Contact contact)",6,1,1,0,2
"sneer.bricks.pulp.notifiers.receivers.impl.Solder.Solder(Source<? extends T> eventSource, Consumer<? super T> receiver)",6,1,1,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.impl.SetFilterImpl.filter(final SetSignal<T> input, final Predicate<T> predicate)",6,1,1,0,2
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.manageIncomingSocket(final ByteArraySocket socket)",6,1,1,0,1
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newList(ListSignal<T> source)",6,1,1,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.addContactActions(MenuGroup<? extends JComponent> menuGroup)",6,1,1,0,1
"sneer.bricks.hardware.io.log.formatter.tests.LogFormatterTest.insets()",6,1,1,0,0
"sneer.bricks.hardware.io.log.formatter.tests.LogFormatterTest.noBrackets()",6,1,1,0,0
"sneer.bricks.hardware.io.log.formatter.tests.LogFormatterTest.noInsets()",6,1,1,0,0
"sneer.bricks.hardware.io.log.formatter.tests.LogFormatterTest.omittingLastBrackets()",6,1,1,0,0
"sneer.tests.SovereignFunctionalTestBase.releaseCommunity()",6,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.createWhisperButtonListener()",6,1,1,0,0
"sneer.bricks.expression.files.protocol.FileContents.FileContents(Seal adressee_, Hash hashOfFile_, int blockNumber_, ImmutableByteArray bytes_, String debugInfo_)",6,1,0,0,5
"sneer.bricks.expression.files.transfer.FileTransferSugestion.FileTransferSugestion(Seal addressee, String fileOrFolderName, boolean isFolder, long fileSize, long fileLastModified)",6,1,0,0,5
"sneer.bricks.expression.files.protocol.FileOrFolder.FileOrFolder(String name_, long size_, long lastModified_, Hash hashOfContents_)",6,1,0,0,4
"sneer.bricks.expression.files.protocol.FileOrFolder.FileOrFolder(String name_, Hash hashOfContents_)",6,1,0,0,2
"sneer.bricks.hardware.cpu.crypto.ecb.tests.NullECBCiphers.newAES256(byte[] encryptKey, byte[] decryptKey)",6,1,0,0,2
"sneer.bricks.network.social.attributes.impl.AttributesImpl.myAttributeSetter(final Class<? extends Attribute<T>> attribute)",6,1,0,0,1
"sneer.bricks.network.social.impl.ContactsImpl.nicknameSetterFor(final Contact contact)",6,1,0,0,1
"sneer.bricks.pulp.reactive.gates.buffers.assync.impl.AssynchronousBufferImpl.finalizer()",6,1,0,0,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInternetAddressList.reactivePredicate()",6,1,0,0,0
"sneer.tests.freedom1.Freedom1Test.testPublicKey()",6,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.assertBrickUsers(CacheMap<String,BrickHistory> result, String brickName, Contact... users)",5,1,7,0,3
"sneer.bricks.hardware.cpu.crypto.ecdh.impl.ECDHKeyAgreementImpl.generateSecret(byte[] peerPublicKey, byte[] sessionKey)",5,1,7,0,2
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.changeToOwnModeAndPlayTracksOf(String folderChosen)",5,1,7,0,1
"sneer.bricks.expression.files.tests.RemoteCopyTest.simulatePartialTransfer(File file, int size)",5,1,6,0,2
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.itemAdder_Idempotent_Transitive()",5,1,6,0,0
"sneer.tests.freedom7.Freedom7Test.testPublishBrickWithDependencies()",5,1,6,0,0
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.subjectsRepliesFor(byte[] ownSeal, InetAddress ip, int port, byte[] localAddressData, byte[]... peersToFind)",5,1,5,0,5
"sneer.bricks.hardware.io.log.exceptions.impl.ExceptionLoggerImpl.log(Throwable throwable, String message, Object... messageInsets)",5,1,5,0,3
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.invokeMethod(final String methodName)",5,1,5,0,1
"dfcsantos.tracks.tastematching.impl.TasteMatcherImpl.rateEndorsement(Contact sender, String folder, Boolean opinion)",5,1,4,0,3
"basis.environments.ProxyInEnvironment.newInstance(Environment environment, final T component)",5,1,4,0,2
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.assertECB(ECBCipher cipher, String message)",5,1,4,0,2
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.BrickVersionTreeNode(TreeNode parent, BrickVersion brickVersion)",5,1,4,0,2
"sneer.bricks.hardware.io.log.tests.LoggerMocks.newInstance(String name)",5,1,4,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.findPositionToMove(T element)",5,1,4,0,1
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.recordEvent(ListDataEvent event)",5,1,4,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.GameMenu(final JPanel jPanel)",5,1,4,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.CellAttackTest.assertDiceThrowResults(DiceThrowOutcome diceThrowOutcome)",5,1,4,0,1
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.runCheckingMockery(ClosureX<X> block)",5,1,4,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl$Visitor.visitFileContents(byte[] fileContents)",5,1,4,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingInboxFolder()",5,1,4,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingTrackName()",5,1,4,0,0
"dfcsantos.music.ui.view.impl.SmileyPanel.deleteAndNowayPanel()",5,1,4,0,0
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.unmarshalPublicKeyFromKeyBytes()",5,1,4,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.dotPartExclusionFilter()",5,1,4,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.load()",5,1,4,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.generateBrickY()",5,1,4,0,0
"snype.whisper.skin.audio.loopback.impl.LoopbackTesterImpl.stop()",5,1,4,0,0
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.invoke(Object proxyImplied, Method method, Object[] args)",5,1,3,0,3
"sneer.bricks.skin.main.icons.impl.IconsImpl.load(final Class<?> resourceBase, final String resourceName)",5,1,3,0,2
"dfcsantos.music.ui.presenter.contactstatus.impl.ContactMusicStatusImpl.textFor(Contact contact)",5,1,3,0,1
"dfcsantos.music.ui.view.impl.MusicViewDemo.main(String[] args)",5,1,3,0,1
"sneer.bricks.network.social.impl.ContactsImpl.doAddContact(String nickname)",5,1,3,0,1
"sneer.bricks.snapps.wind.gui.impl.WindGuiImpl.init(InstrumentPanel window)",5,1,3,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.chooseTracksFolder()",5,1,3,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.testWithLargeFile()",5,1,3,0,0
"sneer.bricks.hardware.cpu.threads.throttle.impl.Throttle.yield()",5,1,3,0,0
"sneer.bricks.network.social.attributes.tests.AttributesTest.ownAttribute()",5,1,3,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl$ListContactsPopUpSupport.ListContactsPopUpSupport()",5,1,3,0,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalentImpl.instantiate(final Class<T> prevalentBrick, Class<T> implClassIgnored, final Producer<T> instantiator)",5,1,2,0,3
"sneer.bricks.skin.filechooser.impl.FileChoosersImpl.newfileChooser(int fileSelectionMode, final File defaultFileOrDir)",5,1,2,0,2
"sneer.bricks.hardware.cpu.threads.impl.Counter.increment(String key)",5,1,2,0,1
"sneer.bricks.hardware.cpu.threads.impl.Counter.incrementByKey(String key)",5,1,2,0,1
"sneer.bricks.pulp.reactive.gates.logic.impl.LogicGatesImpl.not(Signal<Boolean> signal)",5,1,2,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactLabelProvider.register(ContactTextProvider textProvider)",5,1,2,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.attack(BoardCell other)",5,1,2,0,1
"sneer.bricks.softwaresharing.demolisher.impl.DemolisherImpl.demolishOwnBuilding(Hash ownBuildingHash)",5,1,2,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.garbageCollect()",5,1,2,0,0
"sneer.bricks.hardware.cpu.threads.tests.ThreadsTest.threadsAreCrashed()",5,1,2,0,0
"sneer.bricks.snapps.chat.impl.ChatImpl.handleTrayIconBaloonAction()",5,1,2,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.addDefaultContactAction()",5,1,2,0,0
"snype.whisper.speex.impl.EncoderImpl.getProcessedData()",5,1,2,0,0
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.manageSocket(final ByteArraySocket socket, String direction, ClosureX<IOException> closure)",5,1,1,0,3
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl$Visitor.visitFileOrFolder(String name, long lastModified, Hash hashOfContents)",5,1,1,0,3
"sneer.bricks.expression.tuples.remote.impl.RemoteTuplesImpl.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber)",5,1,1,0,2
"sneer.bricks.hardware.ram.ref.weak.keeper.impl.WeakReferenceKeeperImpl.keep(T holder, Object toBeHeld)",5,1,1,0,2
"sneer.bricks.network.computers.http.gateway.impl.HttpGatewayImpl.get(final String httpUrl, Consumer<byte[]> client)",5,1,1,0,2
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ListSorterImpl.sort(final CollectionSignal<T> input, final Comparator<T> comparator)",5,1,1,0,2
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver.SignalChooserReceiver(CollectionSignal<T> input, ListOfSignalsReceiver<T> listOfSignalsReceiver)",5,1,1,0,2
"sneer.bricks.skin.filechooser.impl.FileChoosersImpl.newfileChooser(int fileSelectionMode)",5,1,1,0,1
"sneer.bricks.snapps.web.tests.ContactProviderMock.getSealForNickOrNull(String nickName)",5,1,1,0,1
"basis.brickness.impl.tests.BricknessEnvironmentTest.brickInstantiationPreservesEnvironment()",5,1,1,0,0
"sneer.bricks.expression.files.transfer.tests.FileTransferTest.ignoredTransfer()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.existingStaticInitializer()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.primitiveParametersWithPrimitiveReturnValue()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.primitiveReturnValue()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.protectedMethodsAreIntercepted()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.referenceReturnValue()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.voidMethodNoArgs()",5,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.voidMethodRefArg()",5,1,1,0,0
"dfcsantos.tracks.exchange.endorsements.TrackEndorsement.TrackEndorsement(String path_, long size_, long lastModified_, Hash hash_)",5,1,0,0,4
"sneer.bricks.expression.files.protocol.FileRequest.FileRequest(Seal addressee_, Hash hashOfContents_, ImmutableArray<Integer> blockNumbers_, String debugInfo_)",5,1,0,0,4
"sneer.bricks.hardware.cpu.utils.consumers.validators.bounds.integer.impl.IntegerBoundsImpl$IntegerBoundsInstance.IntegerBoundsInstance(String friendlyName, PickyConsumer<Integer> endConsumer, int min, int max)",5,1,0,0,4
"sneer.bricks.hardwaresharing.backup.FileEvent.FileEvent(Hash hash_, long size_, long lastModified_, String relativePath_)",5,1,0,0,4
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunReply.StunReply(byte[] peerSeal_, InetAddress peerIp_, int peerPort_, byte[] peerLocalAddressData_)",5,1,0,0,4
"sneer.bricks.snapps.games.go.impl.network.GoInvitation.GoInvitation(Seal addressee_, String text_, int size, int gameId)",5,1,0,0,4
"sneer.snapps.games.drones.ChallengeAcceptance.ChallengeAcceptance(Seal challenger, String hitpoints, String strength, String armor)",5,1,0,0,4
"snype.whisper.speextuples.SpeexPacket.SpeexPacket(Seal to_, ImmutableByteArray2D frames_, String room_, short sequence_)",5,1,0,0,4
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxImpl.prepare(final int durationInMillis, final Runnable toRun, final Runnable toCallWhenBlocked)",5,1,0,0,3
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.PhaseDescriptionDrawer.PhaseDescriptionDrawer(int x, int y, GameStateContext phase)",5,1,0,0,3
"sneer.bricks.pulp.reactive.impl.SignalsImpl.adapt(final Consumer<B> delegate, final Functor<A,B> functor)",5,1,0,0,2
"sneer.bricks.pulp.reactive.impl.SignalsImpl.adapt(final PickyConsumer<B> delegate, final FunctorX<A,B,Refusal> functor)",5,1,0,0,2
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.signalChooser()",5,1,0,0,0
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.eventRecorder()",5,1,0,0,0
"sneer.bricks.snapps.wind.impl.WindImpl.megaphone()",5,1,0,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.writeLib(String filename, Class<Foo> clazz)",4,1,9,0,2
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.unmarshalReply(DatagramPacket packet)",4,1,6,0,1
"dfcsantos.music.ui.view.impl.DownloadsView.DownloadsView()",4,1,6,0,0
"sneer.bricks.network.social.attributes.tests.AttributesTest.defaultValue()",4,1,6,0,0
"sneer.tests.freedom2.Freedom2Test.isOnline()",4,1,6,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.writeBrick(String brickName, File srcFolder)",4,1,5,0,2
"dfcsantos.tracks.execution.playlist.impl.RandomPlaylist.sortTracks(List<File> tracks)",4,1,5,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.objectsReturnedByTransactionsAreRegistered()",4,1,5,0,0
"sneer.bricks.hardware.ram.graphs.tests.GraphsTest.noVertices()",4,1,5,0,0
"sneer.bricks.identity.keys.own.tests.OwnKeysTest.keyGeneration()",4,1,5,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.onHandshake_ShouldCheckPublicKey()",4,1,5,0,0
"sneer.bricks.skin.main.menu.impl.MainMenuImpl.initMenu()",4,1,5,0,0
"dfcsantos.music.impl.MusicImpl.setPlayingFolder(File playingFolder)",4,1,4,0,1
"sneer.bricks.expression.tuples.tests.TuplePersistenceTest.runInNewEnvironment(Closure closure)",4,1,4,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.impl.PrevalentBrick2Impl.addItemToSomePrevalentBrick(String name)",4,1,4,0,1
"sneer.bricks.pulp.propertystore.tests.PropertyStoreTest.runInNewEnvironment(Closure closure)",4,1,4,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.copySourceFile(Class<?> clazz)",4,1,4,0,1
"basis.brickness.impl.tests.BricknessTest.environmentProvision()",4,1,4,0,0
"sneer.bricks.hardware.gui.timebox.impl.TimeboxedEventQueueImpl.startNewQueue()",4,1,4,0,0
"sneer.bricks.pulp.datastructures.cache.tests.CacheTest.unknownHandles()",4,1,4,0,0
"sneer.bricks.skin.imgselector.impl.Picture.getPreferredSize()",4,1,4,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.ownPortSetter()",4,1,4,0,0
"sneer.bricks.software.code.compilers.java.impl.CompilationErrorImpl.CompilationErrorImpl(String fileName, int lineNumber, String errorMessage)",4,1,3,0,3
"sneer.bricks.hardware.io.tests.IOTest.listFileNames(File folder, String... fileExtensions)",4,1,3,0,2
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.centerScrollBar(JScrollBar bar, int offset)",4,1,3,0,2
"sneer.bricks.expression.files.tests.RemoteCopyTest.copyFromFileMap(ClosureX<Exception> closure)",4,1,3,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.addItem(String name)",4,1,3,0,1
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.addElement(String value)",4,1,3,0,1
"basis.testsupport.tests.CleanTestBaseTest.tmpFolderIsDeleted1()",4,1,3,0,0
"dfcsantos.music.impl.MusicImpl.meToo()",4,1,3,0,0
"dfcsantos.music.impl.OwnTracks.OwnTracks()",4,1,3,0,0
"sneer.bricks.network.computers.addresses.own.port.tests.OwnPortTest.setOwnPort()",4,1,3,0,0
"sneer.bricks.software.code.compilers.java.tests.JavaCompilerTest.language()",4,1,3,0,0
"sneer.bricks.software.code.compilers.scala.tests.ScalaCompilerTest.language()",4,1,3,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.findFiles()",4,1,3,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.errorLights()",4,1,3,0,0
"sneer.tests.freedom7.Freedom7Test.generateW()",4,1,3,0,0
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newCheckBox(Signal<Boolean> source, Consumer<Boolean> setter, Runnable cascadeRefreshOperations)",4,1,2,0,3
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newEditableLabel(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",4,1,2,0,3
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newTextField(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",4,1,2,0,3
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newTextPane(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",4,1,2,0,3
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.createTmpFileWithFileNameAsContent(String fileName, long lastModified)",4,1,2,0,2
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.keepChosen(Class<T> tupleType, Predicate<? super T> filter)",4,1,2,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalentBuilding.get(Class<T> brick, Producer<T> producerToUseIfAbsent)",4,1,2,0,2
"sneer.bricks.network.social.attributes.tests.AttributesTest.setPeerAttribute(final Class<? extends Attribute<T>> attribute, final T value)",4,1,2,0,2
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newCheckBox(Signal<Boolean> source, Consumer<Boolean> setter)",4,1,2,0,2
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.brickFolderIn(File parent, Class<?> brick)",4,1,2,0,2
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.resizeSelectorToShowTrackDownloadedIcon(int panelWidth)",4,1,2,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.newFolder(String name)",4,1,2,0,1
"sneer.bricks.hardware.cpu.threads.tests.CpuThrottleDemo.startChartingWithThrottle(final int maxCpuUsage)",4,1,2,0,1
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.overrideSocket(ByteArraySocket newSocket)",4,1,2,0,1
"sneer.bricks.pulp.dyndns.checkip.impl.CheckIpImpl.throwBadResponse(String responseBody)",4,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newFrame(Signal<?> source)",4,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newImage(Signal<Image> source)",4,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newLabel(Signal<?> source)",4,1,2,0,1
"sneer.bricks.snapps.games.sliceWars.impl.sneer.SneerPlayer.play(RemotePlay play)",4,1,2,0,1
"sneer.bricks.snapps.wind.gui.impl.WindGuiImpl.convert(ListSignal<ChatMessage> shoutsHeard)",4,1,2,0,1
"sneer.bricks.software.timing.impl.AnimatorAdapter.AnimatorAdapter(org.jdesktop.animation.timing.Animator animator)",4,1,2,0,1
"basis.brickness.testsupport.tests.BrickTestTest.test()",4,1,2,0,0
"basis.lang.arrays.tests.ImmutableArrayTest.iterable()",4,1,2,0,0
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.newSelector()",4,1,2,0,0
"sneer.bricks.expression.files.transfer.tests.FileTransferTest.singleFileTransfer()",4,1,2,0,0
"sneer.bricks.hardware.clock.ticker.tests.ClockTickerTest.testTicking()",4,1,2,0,0
"sneer.bricks.network.computers.udp.server.impl.UdpServerImpl.crash()",4,1,2,0,0
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.initReceivers()",4,1,2,0,0
"sneer.bricks.pulp.notifiers.impl.WeakRefWithAlias.hashCode()",4,1,2,0,0
"sneer.bricks.skin.imgselector.impl.Picture.getLocation()",4,1,2,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.addOpenWindowAction()",4,1,2,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.addMenuAction()",4,1,2,0,0
"sneer.tests.freedom7.Freedom7Test.generateY()",4,1,2,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.initAddFilterAction(final ListRegister<String> whiteListEntries, final JTextField newInclude, JButton addButton)",4,1,1,0,3
"basis.environments.EnvironmentUtils.retrieveFrom(Environment environment, final Class<T> need)",4,1,1,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.wrapped(final Object object, final ProducerX<Object,? extends Exception> path)",4,1,1,0,2
"sneer.bricks.pulp.reactive.impl.Adapter.Adapter(Signal<IN> input, final Functor<IN,OUT> functor)",4,1,1,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.BoardCellImpl(final Polygon p, final CellAttack cellAttack)",4,1,1,0,2
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.MetaClassSupport(File root, File classFile)",4,1,1,0,2
"sneer.bricks.software.timing.impl.AnimatorAdapter.AnimatorAdapter(org.jdesktop.animation.timing.Animator forwardAnimator, int backwardDuration)",4,1,1,0,2
"basis.brickness.impl.BrickImplLoader.implClassLoaderFor(final String brickName)",4,1,1,0,1
"basis.environments.CachingEnvironment.provideWithoutBlocking(Class<T> need)",4,1,1,0,1
"basis.lang.ByRef.newInstance(T value_)",4,1,1,0,1
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.resizeSelectorToHideTrackDownloadedIcon(int panelWidth)",4,1,1,0,1
"dfcsantos.tracks.tastematching.impl.TasteMatcherImpl.matchCounterFor(Contact peer)",4,1,1,0,1
"sneer.bricks.expression.files.tests.FileCopyTestBase.pseudoRandomBytes(int size)",4,1,1,0,1
"sneer.bricks.hardware.cpu.threads.impl.Counter.decrement(String key)",4,1,1,0,1
"sneer.bricks.hardware.cpu.threads.tests.BrickTestWithThreads.crash(Environment environment)",4,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.addItemWithoutRegistering(String name)",4,1,1,0,1
"sneer.bricks.network.computers.tcp.connections.impl.ConnectionsByContact.get(Contact contact)",4,1,1,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.publicKey(int id)",4,1,1,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.seal(int number)",4,1,1,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.isAliveRegister(Contact contact)",4,1,1,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.lastBeatTime(Contact contact)",4,1,1,0,1
"sneer.bricks.network.social.impl.ContactsImpl.isNicknameAlreadyUsed(String nickname)",4,1,1,0,1
"sneer.bricks.network.social.impl.ContactsImpl.removeContact(Contact contact)",4,1,1,0,1
"sneer.bricks.pulp.reactive.collections.tests.SetRegisterTest.sorted(Collection<String> elements)",4,1,1,0,1
"sneer.bricks.skin.widgets.reactive.impl.RFrameImpl.RFrameImpl(Signal<?> titleSignal)",4,1,1,0,1
"sneer.bricks.snapps.chat.impl.ChatImpl.frameFor(final Contact contact)",4,1,1,0,1
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.RootTreeNode(List<BrickHistory> infos)",4,1,1,0,1
"basis.testsupport.CleanTestRunner.createTest()",4,1,1,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.volumeControl()",4,1,1,0,0
"sneer.bricks.expression.files.tests.RemoteCopyTest.partialDownloadRecoveryWithSizeDivisibleByBlock()",4,1,1,0,0
"sneer.bricks.expression.files.tests.RemoteCopyTest.partialDownloadRecoveryWithSizeNotDivisibleByBlock()",4,1,1,0,0
"sneer.bricks.hardware.cpu.crypto.ecdh.test.NullECDHKeyAgreemnent.hash()",4,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.initActionListerner()",4,1,1,0,0
"sneer.bricks.software.bricks.repl.gui.tests.ReplWindowTest.exceptionsAreReportedToTheConsole()",4,1,1,0,0
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.getName()",4,1,1,0,0
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.getPackageName()",4,1,1,0,0
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.isInterface()",4,1,1,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.testStatus()",4,1,1,0,0
"sneer.bricks.expression.files.client.downloads.impl.DownloadsImpl.newFileDownload(File file, long size, long lastModified, Hash hashOfFile, Seal source)",4,1,0,0,5
"sneer.bricks.expression.files.client.downloads.impl.DownloadsImpl.newFolderDownload(File folder, Hash hashOfFolder, Seal source, boolean copyLocalFiles)",4,1,0,0,4
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFileConsideredImportant(String relativePath, Hash hashOfFile, long sizeOfFile, long lastModified)",4,1,0,0,4
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFileConsideredImportant(Contact contact, String relativePath, Hash hashOfFile, long sizeOfFile)",4,1,0,0,4
"sneer.bricks.expression.files.transfer.FileTransferStatus.FileTransferStatus(String path, int completion, Seal sender)",4,1,0,0,3
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.TourImpl(Tour tillHere, String direction, Object attraction)",4,1,0,0,3
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFileReceivedByPeer(Contact peer, String relativePath, Hash hashOfFile)",4,1,0,0,3
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunRequest.StunRequest(byte[] seal_, byte[][] peerSealsToFind_, byte[] localAddressData_)",4,1,0,0,3
"sneer.bricks.network.computers.udp.holepuncher.server.impl.IpAddresses.IpAddresses(InetAddress publicInternetAddr_, int publicInternetPort_, byte[] localAddressData_)",4,1,0,0,3
"sneer.bricks.network.computers.udp.sightings.UdpSighting.UdpSighting(Seal peerSeal, String host, int port)",4,1,0,0,3
"sneer.bricks.network.social.attributes.AttributeValue.AttributeValue(Seal addressee_, String attributeName_, ImmutableByteArray serializedValue_)",4,1,0,0,3
"sneer.bricks.network.social.navigation.ContactOfContact.ContactOfContact(String nick_, Seal contactSeal_, Seal adressee)",4,1,0,0,3
"sneer.bricks.pulp.dyndns.ownaccount.DynDnsAccount.DynDnsAccount(String host_, String dynDnsUser_, String password_)",4,1,0,0,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.AttackOutcome.AttackOutcome(Cell newAttackCellAfterAttack, Cell newDefenseCellAfterAttack, DiceThrowOutcome diceOutcome)",4,1,0,0,3
"sneer.bricks.software.timing.impl.AnimatorAdapter.AnimatorAdapter(org.jdesktop.animation.timing.TimingTargetAdapter tta, int forwardDuration, int backwardDuration)",4,1,0,0,3
"sneer.snapps.games.drones.units.impl.UnitImpl.UnitImpl(int i, Direction direction, String name)",4,1,0,0,3
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.SneerPartyApiClassLoaderImpl(URL[] urls, ClassLoader next, String name)",4,1,0,0,3
"snype.whisper.speextuples.SpeexPacket.SpeexPacket(ImmutableByteArray2D frames_, String room_, short sequence_)",4,1,0,0,3
"sneer.bricks.pulp.serialization.Serializer.serialize(OutputStream stream, Object object)",4,1,0,0,2
"snype.whisper.audio.AudioUtil.byteToShort(byte[] buffer, int offset)",4,1,0,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.withPrevayler(final TransactionInvocation transaction)",4,1,0,0,1
"sneer.bricks.hardware.ram.collections.impl.CollectionUtilsImpl.adapt(final Functor<? super I,? extends O> delegate)",4,1,0,0,1
"sneer.bricks.hardware.ram.collections.impl.CollectionUtilsImpl.adapt(final Predicate<T> delegate)",4,1,0,0,1
"sneer.bricks.pulp.serialization.Serializer.deserialize(InputStream stream)",4,1,0,0,1
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInternetAddressList.contactToBolean(final InternetAddress address)",4,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.setBoardImageSize(float boardImageSize)",4,1,0,0,1
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.newTrackDonwloadedIconMouseListenter()",4,1,0,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.integerComparator()",4,1,0,0,0
"sneer.bricks.pulp.reactive.impl.RegisterImpl$MyOutput.currentValue()",4,1,0,0,0
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.sequenceRecorder()",4,1,0,0,0
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.chooser()",4,1,0,0,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInternetAddressList.sortByHostName()",4,1,0,0,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInternetAddressList.ContactInternetAddressList()",3,1,8,0,0
"sneer.bricks.network.computers.udp.sightings.impl.SightingKeeperImpl.publishSighting(Contact contact, InetSocketAddress sighting)",3,1,7,0,2
"sneer.bricks.network.computers.udp.tests.UdpNetworkTest.convertToUppercase(DatagramPacket packet)",3,1,7,0,1
"sneer.bricks.software.folderconfig.testsupport.BrickTestBase.configureStorageFoldersIfNecessary()",3,1,6,0,0
"dfcsantos.music.impl.DJ.play(final Track track)",3,1,5,0,1
"dfcsantos.music.ui.view.impl.PlayingTrackPanel.setTrackName(String name)",3,1,5,0,1
"sneer.bricks.network.social.attributes.tests.AttributesTest.testOwnAttribute(String value)",3,1,5,0,1
"sneer.bricks.software.code.metaclass.impl.MetaClassesImpl.metaClass(Class<?> clazz)",3,1,5,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.copyJUnitJarToSrcFolder()",3,1,5,0,0
"snype.whisper.audio.AudioDevice.completeName()",3,1,5,0,0
"sneer.bricks.hardware.io.log.formatter.tests.LogFormatterTest.assertFormatting(String expected, String message, Object... insets)",3,1,4,0,3
"sneer.bricks.snapps.contacts.gui.comparator.tests.ContactMock.ContactMock(String nick, boolean isOnline)",3,1,4,0,2
"sneer.bricks.snapps.games.go.tests.logic.GoTest.assertScore(int black, int white)",3,1,4,0,2
"basis.brickness.impl.BrickImplLoader.loadImplClassFor(final Class<T> brick)",3,1,4,0,1
"dfcsantos.music.impl.DJ.volumePercent(int level)",3,1,4,0,1
"dfcsantos.tracks.impl.TrackImpl.TrackImpl(File file)",3,1,4,0,1
"sneer.bricks.identity.seals.codec.impl.SealCodecImpl.hexEncode(Seal seal)",3,1,4,0,1
"sneer.bricks.skin.widgets.autoscroll.impl.AutoScrollWorker.isAtEnd(final JScrollPane scrollPane)",3,1,4,0,1
"sneer.bricks.snapps.wind.impl.WindImpl.shout(String phrase)",3,1,4,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.single(Collection<T> collection)",3,1,4,0,1
"basis.testsupport.tests.CleanTestBaseTest.consistentTmpFolderName()",3,1,4,0,0
"sneer.bricks.pulp.reactive.gates.numbers.impl.Adder.refresh()",3,1,4,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.chooseYForExecution()",3,1,4,0,0
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.logStackTrace(Thread thread, String message, Object... insets)",3,1,3,0,3
"sneer.bricks.expression.files.map.impl.FileMapImpl.rename(String fromPath, String toPath)",3,1,3,0,2
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.mapAndAssert(File fileOrFolder, byte[] expectedHashStart)",3,1,3,0,2
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.open(Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",3,1,3,0,2
"sneer.bricks.snapps.games.go.tests.logic.GoTest.play(int x, int y)",3,1,3,0,2
"sneer.tests.freedom1.Freedom1Test.changeNameTo(SovereignParty party, String newName)",3,1,3,0,2
"basis.brickness.BrickConventions.implClassNameFor(String brickName)",3,1,3,0,1
"dfcsantos.music.impl.MusicImpl.setTracksFolder(File tracksFolder)",3,1,3,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.hashOfFile(String fileMane)",3,1,3,0,1
"sneer.bricks.hardware.clock.ticker.custom.impl.CustomClockTickerImpl.tick(int millisToSleep)",3,1,3,0,1
"sneer.bricks.identity.seals.codec.impl.SealCodecImpl.hexDecode(String seal)",3,1,3,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.isConnected(String nick)",3,1,3,0,1
"sneer.bricks.pulp.datastructures.cache.tests.CacheTest.assertHandle(Object obj)",3,1,3,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.remove(T element)",3,1,3,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest.assertEvents(String expected)",3,1,3,0,1
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.assertEvents(String expected)",3,1,3,0,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.GuiPlayer.play(RemotePlay play)",3,1,3,0,1
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.newIcon(final String imageName)",3,1,3,0,1
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.storageFolderFor(Class<?> brick)",3,1,3,0,1
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.tmpFolderFor(Class<?> brick)",3,1,3,0,1
"sneer.snapps.games.drones.units.impl.UnitImpl.collidesWith(Unit other)",3,1,3,0,1
"basis.brickness.testsupport.tests.BrickTestRunnerTest.testBrickSeesTestEnvironment()",3,1,3,0,0
"dfcsantos.music.impl.OwnTracks.tracksFolder()",3,1,3,0,0
"dfcsantos.tracks.exchange.downloads.counter.impl.TrackDownloadCounterImpl.refresh()",3,1,3,0,0
"sneer.bricks.expression.tuples.tests.TupleKeepingTest.flushCache()",3,1,3,0,0
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.logStackTrace()",3,1,3,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.beforeUdpConnectionManagerTest()",3,1,3,0,0
"sneer.bricks.snapps.contacts.gui.comparator.tests.ContactMock.toString()",3,1,3,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.bytes()",3,1,3,0,0
"sneer.tests.freedom7.Freedom7Test.isRunningOnWindows()",3,1,3,0,0
"sneer.bricks.expression.files.map.impl.FileMapImpl.putFile(String path, long size, long lastModified, Hash hash)",3,1,2,0,4
"dfcsantos.tracks.tastematching.tests.TasteMatcherTest.assertRating(float expected, String folder, Boolean opinion)",3,1,2,0,3
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.setKBytesPerSecond(Register<Integer> speed, int byteCount, long deltaMillis)",3,1,2,0,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.DarkBorderPainter.paintMenuBackground(Graphics graphics, final int height, final int borderWidth)",3,1,2,0,3
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.demolishBuildingInto(CacheMap<String,BrickHistory> result, File building, Contact owner)",3,1,2,0,3
"sneer.bricks.expression.files.map.impl.FileMapImpl.putFolder(String path, Hash hash)",3,1,2,0,2
"sneer.bricks.expression.files.writer.folder.impl.FolderContentsWriterImpl.writeToFolder(File folder, FolderContents contents)",3,1,2,0,2
"sneer.bricks.hardware.clock.ticker.custom.impl.CustomClockTickerImpl.tick(int millisToSleep, long timeIncrement)",3,1,2,0,2
"sneer.bricks.hardware.cpu.crypto.ecb.impl.ECBCiphersImpl.newAES256(byte[] encryptKey, byte[] decryptKey)",3,1,2,0,2
"sneer.bricks.hardware.gui.nature.impl.GUIImpl.realize(Class<?> brick, ClassDefinition classDef)",3,1,2,0,2
"sneer.bricks.hardware.ram.collections.impl.CollectionUtilsImpl.filter(Collection<T> inputCollection, Predicate<T> predicate)",3,1,2,0,2
"sneer.bricks.hardware.ram.collections.impl.CollectionUtilsImpl.map(Collection<I> inputCollection, Functor<? super I,? extends O> functor)",3,1,2,0,2
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.CollectionChangeImpl(Collection<? extends T> added, Collection<T> removed)",3,1,2,0,2
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.addGroup(int positionInMenu, MenuGroup<JMenu> group)",3,1,2,0,2
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newList(ListSignal<T> source, LabelProvider<T> provider)",3,1,2,0,2
"sneer.bricks.snapps.contacts.gui.delete.impl.DeleteContactWindowImpl.add(int x, JButton btn)",3,1,2,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.updateScore(int blackScore, int whiteScore)",3,1,2,0,2
"sneer.bricks.snapps.games.go.impl.sneerSpecifics.SneerTimerFactory.wakeUpEvery(int interval, Runnable runnable)",3,1,2,0,2
"dfcsantos.music.impl.MusicImpl.setOperatingMode(OperatingMode mode)",3,1,2,0,1
"dfcsantos.music.ui.view.impl.PlayingTrackPanel.setTrackTime(Integer timeElapsed)",3,1,2,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.dir(String path)",3,1,2,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.getHash(String path)",3,1,2,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.getLastModified(String file)",3,1,2,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.remove(String path)",3,1,2,0,1
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.digest(byte[] bytes)",3,1,2,0,1
"sneer.bricks.hardware.io.log.exceptions.impl.ExceptionLoggerImpl.log(Throwable throwable)",3,1,2,0,1
"sneer.bricks.hardware.io.log.tests.LoggerMocks.pad(int number)",3,1,2,0,1
"sneer.bricks.hardware.ram.iterables.impl.IterablesImpl.toList(Iterable<E> iterable)",3,1,2,0,1
"sneer.bricks.network.computers.channels.impl.ChannelsImpl.createControl(Contact contact)",3,1,2,0,1
"sneer.bricks.network.computers.tcp.connections.originator.impl.SocketOriginatorImpl.stopAddressing(InternetAddress address)",3,1,2,0,1
"sneer.bricks.network.computers.udp.sightings.impl.SightingKeeperImpl.sightingsOf(Contact contact)",3,1,2,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.isAlive(Contact contact)",3,1,2,0,1
"sneer.bricks.pulp.notifiers.impl.WeakRefWithAlias.aliasFor(Object object)",3,1,2,0,1
"sneer.bricks.pulp.notifiers.impl.WeakRefWithAlias.equals(Object other)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.addListReceiver(Consumer<? super ListChange<T>> receiver)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.addPulseReceiver(Closure pulseReceiver)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.addReceiver(Consumer<? super CollectionChange<T>> receiver)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.notifyReceivers(final AbstractListValueChange<T> valueChange)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyEntry.setValue(V value)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.addReceiver(Consumer<? super CollectionChange<Entry<K,V>>> eventReceiver)",3,1,2,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.currentContains(Entry<K,V> entry)",3,1,2,0,1
"sneer.bricks.pulp.reactive.impl.AbstractSignal.addPulseReceiver(Closure pulseReceiver)",3,1,2,0,1
"sneer.bricks.pulp.reactive.impl.AbstractSignal.addReceiver(Consumer<? super T> eventReceiver)",3,1,2,0,1
"sneer.bricks.snapps.contacts.gui.comparator.tests.StethoscopeMock.isAlive(final Contact contact)",3,1,2,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.attack(BoardCell other)",3,1,2,0,1
"sneer.bricks.snapps.web.impl.SealForUrl.getSealForUrlOrNull(String url)",3,1,2,0,1
"sneer.bricks.snapps.web.impl.WebRequest.respond(String contents)",3,1,2,0,1
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.demolishOwnBuilding(File building)",3,1,2,0,1
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.wrapChild(int childIndex)",3,1,2,0,1
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.wrapChild(int childIndex)",3,1,2,0,1
"basis.brickness.impl.tests.BricknessTest.brickProvision()",3,1,2,0,0
"basis.brickness.testsupport.BrickTestWithMocks.afterBrickTest()",3,1,2,0,0
"basis.brickness.testsupport.tests.BrickTestRunnerTest.testContributedField()",3,1,2,0,0
"basis.brickness.testsupport.tests.BrickTestRunnerTest.testNonContributedField()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.activeDownloads()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.isTrackExchangeActive()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.numberOfPeerTracks()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.shuffle()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.tracksFolder()",3,1,2,0,0
"dfcsantos.music.impl.MusicImpl.volumePercent()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.isPlaying()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.isTrackExchangeActive()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.meToo()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.meh()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.noWay()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.pauseResume()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingTrackTime()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.shuffle()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.skip()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.stop()",3,1,2,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.volumePercent()",3,1,2,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.testWithFolder()",3,1,2,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.testWithSmallFile()",3,1,2,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.testWithZeroLengthFile()",3,1,2,0,0
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.digest()",3,1,2,0,0
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.stackTrace()",3,1,2,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.impl.PrevalentBrick2Impl.rememberItemCount()",3,1,2,0,0
"sneer.bricks.identity.keys.gui.impl.tests.PassphraseTest.passphrases()",3,1,2,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.port()",3,1,2,0,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunRequest.toString()",3,1,2,0,0
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.DynDnsAccountKeeperImpl()",3,1,2,0,0
"sneer.bricks.pulp.reactive.collections.impl.AbstractListValueChange.toString()",3,1,2,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.iterator()",3,1,2,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.rebuildMenu()",3,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.commitChanges()",3,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RPanel.getMaximumSize()",3,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RPanel.getMinimumSize()",3,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RPanel.getPreferredSize()",3,1,2,0,0
"sneer.bricks.snapps.contacts.gui.delete.impl.DeleteContactWindowImpl.DeleteContactWindowImpl()",3,1,2,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.setGameEnded()",3,1,2,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.prepareBrickY()",3,1,2,0,0
"sneer.snapps.games.drones.matches.impl.MatchImpl.battle()",3,1,2,0,0
"sneer.snapps.games.drones.matches.impl.MatchImpl.isOver()",3,1,2,0,0
"sneer.snapps.games.drones.matches.impl.MatchImpl.moveUnits()",3,1,2,0,0
"sneer.bricks.expression.files.tests.LocalCopyTest.copyFileFromFileMap(Hash hashOfContents, long size, long lastModified, File destination)",3,1,1,0,4
"sneer.bricks.software.timing.impl.WindowOpacitySetterImpl.animator(Window window, float start, float end, int duration)",3,1,1,0,4
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.update(byte[] bytes, int offset, int length)",3,1,1,0,3
"sneer.bricks.network.social.attributes.impl.AttributesImpl.attributeValueFor(Contact contact, final Class<? extends Attribute<T>> attribute, Class<T> valueType)",3,1,1,0,3
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ListSorterImpl.sort(final CollectionSignal<T> input, final Comparator<T> comparator, final SignalChooser<T> chooser)",3,1,1,0,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.HoverStonePainter(StonePainter stonePainter, int bOARD_SIZE, float cELL_SIZE)",3,1,1,0,3
"basis.lang.exceptions.FriendlyException.FriendlyException(Throwable cause, String help)",3,1,1,0,2
"sneer.bricks.expression.files.tests.LocalCopyTest.copyFolderFromFileMap(Hash hashOfContents, File destination)",3,1,1,0,2
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.keepNewest(Class<T> tupleType, Functor<? super T,Object> grouping)",3,1,1,0,2
"sneer.bricks.hardware.cpu.crypto.ecdh.test.NullECDHKeyAgreemnent.generateSecret(byte[] peerPublicKey, byte[] sessionKey)",3,1,1,0,2
"sneer.bricks.hardware.cpu.timebox.impl.TimeIsUp.TimeIsUp(StackTraceElement[] stackTrace, String message)",3,1,1,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalentImpl.realize(Class<?> brick, ClassDefinition classDef)",3,1,1,0,2
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelImpl.open(Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",3,1,1,0,2
"sneer.bricks.network.computers.udp.tests.UdpNetworkTest.marshal(String string, int portNumber)",3,1,1,0,2
"sneer.bricks.pulp.datastore.impl.DataStoreImpl.set(String key, String value)",3,1,1,0,2
"sneer.bricks.pulp.datastore.impl.DataStoreImpl.set(String key, long value)",3,1,1,0,2
"sneer.bricks.pulp.propertystore.mocks.TransientPropertyStore.set(String key, String value)",3,1,1,0,2
"sneer.bricks.pulp.reactive.collections.impl.CollectionSignalsImpl.adapt(CollectionSignal<A> input, Functor<A,B> functor)",3,1,1,0,2
"sneer.bricks.pulp.reactive.collections.impl.CollectionSignalsImpl.adapt(ListSignal<A> input, Functor<A,B> functor)",3,1,1,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.impl.SetFilterImpl.filter(SetSignal<T> input, ReactivePredicate<T> predicate)",3,1,1,0,2
"sneer.bricks.pulp.reactive.gates.buffers.assync.impl.AssynchronousBuffersImpl.createFor(Source<T> input, String threadName)",3,1,1,0,2
"sneer.bricks.pulp.reactive.gates.logic.impl.LogicGatesImpl.and(Signal<Boolean> a, Signal<Boolean> b)",3,1,1,0,2
"sneer.bricks.pulp.reactive.gates.numbers.impl.NumberGatesImpl.add(Signal<Integer> a, Signal<Integer> b)",3,1,1,0,2
"sneer.bricks.pulp.reactive.gates.strings.impl.StringGatesImpl.concat(String separator, Signal<?>... objects)",3,1,1,0,2
"sneer.bricks.pulp.reactive.impl.SignalsImpl.adapt(Signal<A> input, Functor<A,B> functor)",3,1,1,0,2
"sneer.bricks.pulp.reactive.impl.SignalsImpl.adaptSignal(Signal<A> input, Functor<A,Signal<B>> functor)",3,1,1,0,2
"sneer.bricks.skin.imgselector.impl.Picture.setLocation(int x, int y)",3,1,1,0,2
"sneer.bricks.software.code.compilers.impl.LanguageRegistryImpl.addLanguage(String fileExtension, LanguageCompiler compiler)",3,1,1,0,2
"snype.whisper.audio.AudioDevice.AudioDevice(Mixer mixer, AudioFormat format)",3,1,1,0,2
"basis.environments.CachingEnvironment.provide(Class<T> need)",3,1,1,0,1
"dfcsantos.music.impl.OwnTracks.setShuffle(boolean shuffle)",3,1,1,0,1
"dfcsantos.tracks.storage.rejected.impl.RejectedTracksKeeperImpl.isWeakRejected(Hash hash)",3,1,1,0,1
"dfcsantos.tracks.storage.rejected.impl.RejectedTracksKeeperImpl.strongReject(Hash hash)",3,1,1,0,1
"dfcsantos.tracks.storage.rejected.impl.RejectedTracksKeeperImpl.weakReject(Hash hash)",3,1,1,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.getFiles(Hash hash)",3,1,1,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.getFolderContents(Hash hash)",3,1,1,0,1
"sneer.bricks.expression.files.map.impl.FileMapImpl.getFolders(Hash hash)",3,1,1,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.contains(Tuple tuple)",3,1,1,0,1
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.keepType(Class<? extends Tuple> tupleType)",3,1,1,0,1
"sneer.bricks.expression.tuples.kept.impl.KeptTuplesImpl.add(Tuple tuple)",3,1,1,0,1
"sneer.bricks.expression.tuples.kept.impl.KeptTuplesImpl.contains(Tuple tuple)",3,1,1,0,1
"sneer.bricks.expression.tuples.kept.impl.KeptTuplesImpl.remove(Tuple tuple)",3,1,1,0,1
"sneer.bricks.expression.tuples.testsupport.pump.impl.TuplePumpsImpl.startPumpingWith(Environment otherEnviroment)",3,1,1,0,1
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.update(byte[] bytes)",3,1,1,0,1
"sneer.bricks.hardware.cpu.lang.contracts.impl.WeakContractImpl.WeakContractImpl(Disposable service)",3,1,1,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.PrevalenceMapImpl.isRegistered(Object object)",3,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.addItemAndReturnIt_AnnotatedAsTransaction(String name)",3,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.removeItem(Item item)",3,1,1,0,1
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddressesImpl.given(Contact contact)",3,1,1,0,1
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.connectionFor(final Contact contact)",3,1,1,0,1
"sneer.bricks.network.computers.tcp.connections.originator.impl.SocketOriginatorImpl.startAddressing(InternetAddress address)",3,1,1,0,1
"sneer.bricks.network.computers.tcp.impl.TcpNetworkImpl.remoteIpFor(ByteArraySocket socket)",3,1,1,0,1
"sneer.bricks.network.computers.udp.impl.UdpSocketImpl.receive(DatagramPacket packet)",3,1,1,0,1
"sneer.bricks.network.computers.udp.impl.UdpSocketImpl.send(DatagramPacket packet)",3,1,1,0,1
"sneer.bricks.network.social.attributes.impl.AttributesImpl.myAttributeValue(Class<? extends Attribute<T>> attribute)",3,1,1,0,1
"sneer.bricks.network.social.attributes.impl.AttributesImpl.registerAttribute(Class<? extends Attribute<?>> newAttribute)",3,1,1,0,1
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.addAction(Action action)",3,1,1,0,1
"sneer.bricks.pulp.datastore.impl.DataStoreImpl.containsKey(String key)",3,1,1,0,1
"sneer.bricks.pulp.datastore.impl.DataStoreImpl.get(String key)",3,1,1,0,1
"sneer.bricks.pulp.datastructures.cache.impl.CacheImpl.contains(T obj)",3,1,1,0,1
"sneer.bricks.pulp.datastructures.cache.impl.CacheImpl.handleFor(T object)",3,1,1,0,1
"sneer.bricks.pulp.distribution.filtering.impl.TupleFilterManagerImpl.block(Class<? extends Tuple> tupleType)",3,1,1,0,1
"sneer.bricks.pulp.notifiers.impl.WeakRefWithAlias.WeakRefWithAlias(T object)",3,1,1,0,1
"sneer.bricks.pulp.propertystore.mocks.TransientPropertyStore.containsKey(String property)",3,1,1,0,1
"sneer.bricks.pulp.propertystore.mocks.TransientPropertyStore.get(String key)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.addListReceiverAsVisitor(Visitor<T> visitor)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.ListElementAdded.accept(Visitor<T> visitor)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.ListElementMoved.accept(Visitor<T> visitor)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.ListElementRemoved.accept(Visitor<T> visitor)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.ListElementReplaced.accept(Visitor<T> visitor)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.currentGet(K key)",3,1,1,0,1
"sneer.bricks.pulp.reactive.collections.impl.VisitingListReceiver.consume(ListChange<T> listChange)",3,1,1,0,1
"sneer.bricks.pulp.reactive.gates.strings.impl.StringGatesImpl.concat(Signal<?>... objects)",3,1,1,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest.addElement(Register<String> register)",3,1,1,0,1
"sneer.bricks.skin.main.instrumentregistry.impl.InstrumentRegistryImpl.registerInstrument(Instrument instrument)",3,1,1,0,1
"sneer.bricks.skin.menu.impl.MenuGroupImpl.MenuGroupImpl(String text)",3,1,1,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.setSelectedElement(ELEMENT element)",3,1,1,0,1
"sneer.bricks.snapps.chat.impl.ChatImpl.convert(ChatMessage message)",3,1,1,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.registerContactTextProvider(ContactTextProvider textProvider)",3,1,1,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.setSelectedContact(Contact contact)",3,1,1,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.increaseXOffset(final float xIncrease)",3,1,1,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.increaseYOffset(final float yIncrease)",3,1,1,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.setDiceCount(int newDiceCount)",3,1,1,0,1
"sneer.bricks.software.bricks.repl.impl.GroovyEvaluator.eval(String code)",3,1,1,0,1
"sneer.bricks.software.code.compilers.CompilerException.CompilerException(Result result)",3,1,1,0,1
"sneer.snapps.games.drones.units.impl.UnitImpl.attack(Unit otherUnit)",3,1,1,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.isEagerToLoad(String className)",3,1,1,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.loadUnsharedBrickClass(String brickName)",3,1,1,0,1
"snype.whisper.skin.audio.speaker.impl.LineImpl.consume(byte[] packet)",3,1,1,0,1
"snype.whisper.speex.impl.EncoderImpl.processData(byte[] pcmBuffer)",3,1,1,0,1
"basis.brickness.impl.tests.BricknessTest.interfaceWithoutImpl()",3,1,1,0,0
"basis.brickness.impl.tests.BricknessTest.noBrickInterfaceFound()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.isPlaying()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.numberOfOwnTracks()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.operatingMode()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.playingFolder()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.playingTrack()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.playingTrackTime()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.reset()",3,1,1,0,0
"dfcsantos.music.impl.MusicImpl.stop()",3,1,1,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.choiceSelected()",3,1,1,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.enableMeToo()",3,1,1,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.enableTrackDownloaded()",3,1,1,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.playingFolderChoices()",3,1,1,0,0
"dfcsantos.tracks.exchange.downloads.counter.impl.TrackDownloadCounterImpl.count()",3,1,1,0,0
"dfcsantos.tracks.impl.TrackImpl.hashCode()",3,1,1,0,0
"dfcsantos.tracks.impl.TrackImpl.toString()",3,1,1,0,0
"sneer.bricks.expression.tuples.keeper.impl.TupleKeeperImpl.keptTuples()",3,1,1,0,0
"sneer.bricks.expression.tuples.kept.impl.KeptTuplesImpl.all()",3,1,1,0,0
"sneer.bricks.hardware.cpu.threads.tests.BrickTestWithThreads.afterBrickTestWithTreads()",3,1,1,0,0
"sneer.bricks.hardware.io.log.notifier.impl.LogNotifierImpl.loggedMessages()",3,1,1,0,0
"sneer.bricks.hardware.io.prevalence.nature.impl.MapLookup.produce()",3,1,1,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.itemCount()",3,1,1,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.afterBucketTest()",3,1,1,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.readInAVacuum()",3,1,1,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.tests.BucketTest.writeInAVacuum()",3,1,1,0,0
"sneer.bricks.identity.keys.own.impl.OwnKeysImpl.ownPrivateKey()",3,1,1,0,0
"sneer.bricks.identity.keys.own.impl.OwnKeysImpl.ownPublicKey()",3,1,1,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.ContactInternetAddressesImpl.addresses()",3,1,1,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.toString()",3,1,1,0,0
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelImpl.id()",3,1,1,0,0
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelImpl.isUp()",3,1,1,0,0
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelImpl.maxPacketSize()",3,1,1,0,0
"sneer.bricks.network.computers.channels.impl.ChannelImpl.isUp()",3,1,1,0,0
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.id()",3,1,1,0,0
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.isUp()",3,1,1,0,0
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.maxPacketSize()",3,1,1,0,0
"sneer.bricks.network.computers.tcp.connections.impl.TcpConnectionManagerImpl.unknownCallers()",3,1,1,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.invalidPacket()",3,1,1,0,0
"sneer.bricks.network.computers.udp.impl.UdpSocketImpl.crash()",3,1,1,0,0
"sneer.bricks.network.social.attributes.impl.AttributesImpl.all()",3,1,1,0,0
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.run()",3,1,1,0,0
"sneer.bricks.network.social.impl.ContactsImpl.contacts()",3,1,1,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.actions()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.accountSetter()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.ownaccount.impl.DynDnsAccountKeeperImpl.ownAccount()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.test911()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testAbuse()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testBadAuth()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testDnsError()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testNoChange()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testNoHost()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testNotFullyQualifiedDomainName()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testNumHost()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testUnexpectedResponse()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testUpdateSuccess()",3,1,1,0,0
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.testUpdateSuccessNot()",3,1,1,0,0
"sneer.bricks.pulp.notifiers.impl.NotifiersImpl.newInstance()",3,1,1,0,0
"sneer.bricks.pulp.notifiers.pulsers.impl.PulserSenderImpl.output()",3,1,1,0,0
"sneer.bricks.pulp.notifiers.pulsers.impl.PulserSenderImpl.sendPulse()",3,1,1,0,0
"sneer.bricks.pulp.notifiers.pulsers.impl.UmbrellaContract.finalize()",3,1,1,0,0
"sneer.bricks.pulp.propertystore.mocks.TransientPropertyStore.toString()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListElementAdded.elementsAdded()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListElementRemoved.elementsRemoved()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListElementReplaced.elementsAdded()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListElementReplaced.elementsRemoved()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.currentElements()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.keys()",3,1,1,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.size()",3,1,1,0,0
"sneer.bricks.pulp.serialization.fixtures.brickwithlib.impl.BrickToBeSerializedImpl.libClassLoader()",3,1,1,0,0
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.correctOrder()",3,1,1,0,0
"sneer.bricks.pulp.streams.sequencer.tests.SequencerTest.inverseOrder()",3,1,1,0,0
"sneer.bricks.skin.main.instrumentregistry.impl.InstrumentRegistryImpl.installedInstruments()",3,1,1,0,0
"sneer.bricks.skin.rooms.impl.ActiveRoomKeeperImpl.room()",3,1,1,0,0
"sneer.bricks.skin.rooms.impl.ActiveRoomKeeperImpl.setter()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.getMainWidget()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.getMainWidget()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.getWidgets()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.getMainWidget()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.getWidgets()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.selectedElement()",3,1,1,0,0
"sneer.bricks.skin.widgets.reactive.impl.RProgressBarImpl.getMainWidget()",3,1,1,0,0
"sneer.bricks.snapps.contacts.gui.comparator.tests.ContactMock.nickname()",3,1,1,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.selectedContact()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.addDie()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.canAddDie()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.getDiceCount()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceImpl.roll()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.getPhaseName()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.getPhase()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.getPhaseName()",3,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.getWhoIsPlaying()",3,1,1,0,0
"sneer.bricks.snapps.web.tests.SealForUrlTest.requestUrlForJhon()",3,1,1,0,0
"sneer.bricks.snapps.web.tests.SealForUrlTest.requestUrlForMary()",3,1,1,0,0
"sneer.bricks.software.bricks.interception.fixtures.brickwithlib.impl.BrickWithLibImpl.fooBar()",3,1,1,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.intraBrickMethod()",3,1,1,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.Greeter2.hello()",3,1,1,0,0
"sneer.bricks.software.code.compilers.impl.LanguageRegistryImpl.languages()",3,1,1,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.users()",3,1,1,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.contentsInCurrentVersion()",3,1,1,0,0
"sneer.bricks.softwaresharing.git.impl.AutoCloseableRepository.close()",3,1,1,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.RootTreeNode()",3,1,1,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.beforeBrickStagerTest()",3,1,1,0,0
"sneer.main.stun.StunServerSession.start()",3,1,1,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.move()",3,1,1,0,0
"sneer.tests.SovereignFunctionalTestBase.a()",3,1,1,0,0
"sneer.tests.SovereignFunctionalTestBase.b()",3,1,1,0,0
"sneer.tests.SovereignFunctionalTestBase.createNewCommunity()",3,1,1,0,0
"snype.whisper.audio.AudioDevice.toString()",3,1,1,0,0
"snype.whisper.skin.audio.speaker.impl.LineImpl.close()",3,1,1,0,0
"sneer.bricks.expression.files.client.downloads.old.impl.DownloadsOldImpl.newFileDownload(File file, long size, long lastModified, Hash hashOfFile, Seal source)",3,1,0,0,5
"dfcsantos.tracks.execution.player.impl.TrackPlayerImpl.startPlaying(Track track, Signal<Boolean> isPlaying, Signal<Integer> volumePercent, final Runnable toCallWhenFinished)",3,1,0,0,4
"sneer.bricks.expression.files.client.downloads.old.impl.DownloadsOldImpl.newFolderDownload(File folder, Hash hashOfFolder, Seal source, boolean copyLocalFiles)",3,1,0,0,4
"sneer.bricks.hardware.cpu.utils.consumers.validators.bounds.integer.impl.IntegerBoundsImpl.newInstance(String friendlyName, PickyConsumer<Integer> endConsumer, int min, int max)",3,1,0,0,4
"basis.lang.exceptions.FriendlyException.FriendlyException(Throwable cause, String message, String help)",3,1,0,0,3
"sneer.bricks.hardware.cpu.timebox.impl.TimeboxImpl.run(int durationInMillis, final Runnable toRun, final Runnable toCallWhenBlocked)",3,1,0,0,3
"sneer.bricks.network.computers.udp.receiver.impl.ReceiverThreadsImpl.start(String threadName, UdpSocket socket, Consumer<DatagramPacket> receiver)",3,1,0,0,3
"sneer.bricks.pulp.reactive.collections.impl.ListElementMoved.ListElementMoved(int oldIndex, int newIndex, T element)",3,1,0,0,3
"sneer.bricks.pulp.reactive.collections.impl.ListElementReplaced.ListElementReplaced(int index, T oldElement, T newElement)",3,1,0,0,3
"sneer.bricks.pulp.streams.sequencer.impl.SequencersImpl.createSequencerFor(short bufferSize, short maxGap, Consumer<T> consumer)",3,1,0,0,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.play(int x, int y, GameStateContext gameStateContext)",3,1,0,0,3
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.play(int x, int y, GameStateContext gameStateContext)",3,1,0,0,3
"sneer.bricks.softwaresharing.demolisher.impl.DemolisherImpl.demolishBuildingInto(CacheMap<String,BrickHistory> bricksByName, Hash srcFolderHash, Contact owner)",3,1,0,0,3
"sneer.snapps.games.drones.units.impl.UnitsImpl.create(int x, Direction direction, String name)",3,1,0,0,3
"snype.whisper.audio.AudioUtil.shortToByte(byte[] buffer, int offset, int value)",3,1,0,0,3
"basis.brickness.impl.BrickSerializationMapperImpl.BrickSerializationMapperImpl(ByRef<ClassLoader> apiClassLoader, BrickImplLoader brickImplLoader)",3,1,0,0,2
"basis.brickness.impl.EagerClassLoader.EagerClassLoader(URL[] urls, ClassLoader next)",3,1,0,0,2
"basis.environments.ProxyInEnvironment.ProxyInEnvironment(Environment environment, Object component)",3,1,0,0,2
"basis.lang.exceptions.FriendlyException.FriendlyException(String message, String help)",3,1,0,0,2
"sneer.bricks.expression.files.map.visitors.impl.FileMapGuideImpl.guide(FolderStructureVisitor visitor, FolderContents contents)",3,1,0,0,2
"sneer.bricks.expression.files.transfer.FileTransferDetails.FileTransferDetails(FileTransferAccept accept, Hash hash)",3,1,0,0,2
"sneer.bricks.expression.snoard.SnoardTuple.SnoardTuple(Object clipValue, Seal addressee)",3,1,0,0,2
"sneer.bricks.hardware.io.prevalence.nature.impl.BrickProvision.BrickProvision(Class<?> prevalentBrick, Object brickInstance)",3,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.lendSpaceTo(Contact contact, int megaBytes)",3,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFileForgottenByPeer(Contact peer, Hash hashOfFile)",3,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFileDeleted(Contact contact, String relativePath)",3,1,0,0,2
"sneer.bricks.hardwaresharing.dataspace.buckets.BlockRead.BlockRead(Seal seal, long blockNumber_)",3,1,0,0,2
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.RemoteBucket.write(long blockNumber, byte[] block)",3,1,0,0,2
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.InternetAddressImpl(Contact contact, TcpSighting sighting)",3,1,0,0,2
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.PacketSplittersImpl.newSplitter(final Producer<? extends ByteBuffer> largePacketSender, final int maxPieceSize)",3,1,0,0,2
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.Splitter.Splitter(Producer<? extends ByteBuffer> largePacketSender, int maxPieceSize)",3,1,0,0,2
"sneer.bricks.network.computers.channels.impl.ChannelsImpl.create(Contact contact, Priority priority)",3,1,0,0,2
"sneer.bricks.network.computers.tcp.connections.TcpSighting.TcpSighting(Seal seal_, String ip_)",3,1,0,0,2
"sneer.bricks.network.computers.tcp.connections.impl.CallImpl.CallImpl(String callerName, Seal callerSeal)",3,1,0,0,2
"sneer.bricks.network.computers.tcp.impl.TcpNetworkImpl.openSocket(String remoteHost, int remotePort)",3,1,0,0,2
"sneer.bricks.pulp.notifiers.pulsers.impl.PulseSendersImpl.receive(Closure receiver, Pulser... multipleSources)",3,1,0,0,2
"sneer.bricks.pulp.reactive.collections.impl.AbstractListValueChange.AbstractListValueChange(int index, T element)",3,1,0,0,2
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyEntry.MyEntry(K key, V value)",3,1,0,0,2
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChoosersImpl.receive(CollectionSignal<T> input, ListOfSignalsReceiver<T> listOfSignalsReceiver)",3,1,0,0,2
"sneer.bricks.pulp.retrier.impl.RetrierManagerImpl.startRetrier(int periodBetweenAttempts, Task task)",3,1,0,0,2
"sneer.bricks.pulp.streams.sequencer.impl.Packet.Packet(T payload, short sequence)",3,1,0,0,2
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newListSignalModel(ListSignal<T> input, SignalChooser<T> chooser)",3,1,0,0,2
"sneer.bricks.snapps.chat.ChatMessage.ChatMessage(Seal addressee_, String text_)",3,1,0,0,2
"sneer.bricks.snapps.chat.gui.panels.impl.ChatPanelsImpl.newPanel(ListSignal<Message> messages, Consumer<String> messageSender)",3,1,0,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.DarkBorderPainter.DarkBorderPainter(int boardWidth, int rightMenuWidth)",3,1,0,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.setBoardDimensions(final int boardSize, final float cellSize)",3,1,0,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.setOffset(int xOffsetMeasuredByPieces, int yOffsetMeasuredByPieces)",3,1,0,0,2
"sneer.bricks.snapps.games.go.impl.network.AcknowledgeReceive.AcknowledgeReceive(Move move, StoneColor color)",3,1,0,0,2
"sneer.bricks.snapps.games.go.impl.network.GoMove.GoMove(Seal addressee_, Move move_)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.RemotePlay.RemotePlay(int x, int y)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.Player(int player, int playerCount)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.FillAllCell(Player currentPlaying, Board board)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.sneer.SliceWarsInvitation.SliceWarsInvitation(Seal addressee_, long _seed)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.sneer.SliceWarsPlay.SliceWarsPlay(Seal addressee_, RemotePlay _remotePlay)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.areLinked(BoardCell c1, BoardCell c2)",3,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.getCellAtOrNull(int x, int y)",3,1,0,0,2
"sneer.bricks.snapps.gis.location.impl.LocationsImpl.find(final String address, Consumer<Location> receiver)",3,1,0,0,2
"sneer.bricks.snapps.web.impl.WebResponse.WebResponse(Seal publisher, String contents)",3,1,0,0,2
"sneer.bricks.snapps.web.tests.ContactProviderMock.addContact(String nick, Seal seal)",3,1,0,0,2
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.add(int i, int j)",3,1,0,0,2
"sneer.bricks.software.bricks.interception.impl.BrickMetadataEmitter.BrickMetadataEmitter(Class<?> targetBrick, Class<? extends Interceptor> interceptorClass)",3,1,0,0,2
"sneer.bricks.software.code.compilers.impl.LanguageImpl.LanguageImpl(String fileExtension, LanguageCompiler compiler)",3,1,0,0,2
"sneer.bricks.software.code.metaclass.impl.MetaClassesImpl.metaClass(File rootFolder, File classFile)",3,1,0,0,2
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.StringTreeNode(TreeNode parent, String name)",3,1,0,0,2
"basis.lang.exceptions.FriendlyException.FriendlyException(String veryHelpfulMessage)",3,1,0,0,1
"dfcsantos.tracks.execution.playlist.impl.PlaylistsImpl.newRandomPlaylist(File tracksFolder)",3,1,0,0,1
"dfcsantos.tracks.execution.playlist.impl.PlaylistsImpl.newSequentialPlaylist(File tracksFolder)",3,1,0,0,1
"sneer.bricks.expression.files.client.downloads.gui.impl.DownloadListPanelsImpl.produce(SetSignal<Download> downloads)",3,1,0,0,1
"sneer.bricks.expression.tuples.tests.GcTestTuple.GcTestTuple(int intValue_)",3,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.generateSeed(int numBytes)",3,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.setSeed(byte[] seed)",3,1,0,0,1
"sneer.bricks.hardware.cpu.lang.contracts.impl.ContractsImpl.weakContractFor(Disposable service)",3,1,0,0,1
"sneer.bricks.hardware.cpu.utils.consumers.parsers.integer.impl.IntegerParsersImpl.newIntegerParser(PickyConsumer<Integer> delegate)",3,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl$ItemImpl.name(String value)",3,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.set(String string)",3,1,0,0,1
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferencesImpl.newInstance(T value)",3,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFileDeleted(String relativePath)",3,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFileForgotten(Hash hash)",3,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFileReceived(Hash hash)",3,1,0,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.RemoteBucket.setSize(long sizeInBlocks)",3,1,0,0,1
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelsImpl.guarantee(Channel channel)",3,1,0,0,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.impl.PacketSplittersImpl.newJoiner(final Consumer<? super ByteBuffer> largePacketReceiver)",3,1,0,0,1
"sneer.bricks.network.computers.channels.impl.ChannelImpl.ChannelImpl(ByteConnection connection)",3,1,0,0,1
"sneer.bricks.network.computers.channels.impl.ChannelsImpl.accept(long id)",3,1,0,0,1
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelsImpl.enhance(Channel delegate)",3,1,0,0,1
"sneer.bricks.network.computers.tcp.impl.TcpNetworkImpl.openServerSocket(int port)",3,1,0,0,1
"sneer.bricks.network.computers.udp.impl.UdpNetworkImpl.openSocket(int port)",3,1,0,0,1
"sneer.bricks.network.social.attributes.gui.impl.AttributeListPanelsImpl.produce(CollectionSignal<AttributePanelElement> elements)",3,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.impl.CacheFactoryImpl.createWithCapacity(int capacity)",3,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.impl.CacheImpl.CacheImpl(int capacity)",3,1,0,0,1
"sneer.bricks.pulp.notifiers.impl.NotifiersImpl.newInstance(Producer<? extends T> welcomeEventProducer)",3,1,0,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.addPulseReceiver(Closure pulseReceiver)",3,1,0,0,1
"sneer.bricks.pulp.reactive.impl.SignalsImpl.constant(T value)",3,1,0,0,1
"sneer.bricks.pulp.reactive.impl.SignalsImpl.newRegister(T initialValue)",3,1,0,0,1
"sneer.bricks.skin.menu.impl.MenuFactoryImpl.createMenuGroup(String name)",3,1,0,0,1
"sneer.bricks.skin.widgets.autoscroll.impl.AutoScrollImpl.autoscroll(JScrollPane subject)",3,1,0,0,1
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newProgressBar(Signal<Integer> source)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.increaseXOffset(float xIncrease)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.increaseYOffset(float yIncrease)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.setXOffset(float newXOffset)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.setYOffset(float newYOffset)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.setBoardImageSize(float boardImageSize)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.setXOffset(final float newXOffset)",3,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.setYOffset(final float newYOffset)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.setCell(Cell newCell)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.setOwner(Player newOwner)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.pass(GameStateContext gameStateContext)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.pass(GameStateContext gameStateContext)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.areaAllCellsFilledByPlayer(Player currentPlaying)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.getBiggestLinkedCellCountForPlayer(Player player)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.removingCellWillLeaveOrphans(BoardCell cell)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.setState(GameState state)",3,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.pass(GameStateContext gameStateContext)",3,1,0,0,1
"sneer.bricks.software.bricks.repl.impl.ReplImpl.newConsoleFor(Evaluator evaluator)",3,1,0,0,1
"sneer.bricks.software.bricks.repl.impl.ReplImpl.newEvaluatorFor(ReplLang language)",3,1,0,0,1
"sneer.bricks.software.bricks.statestore.tests.BrickStateStoreMock.readObjectFor(Class<?> brick)",3,1,0,0,1
"sneer.bricks.software.code.java.source.writer.impl.JavaSourceWritersImpl.newInstance(File srcFolder)",3,1,0,0,1
"sneer.bricks.software.code.metaclass.asm.impl.ASMImpl.newClassReader(File classFile)",3,1,0,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.setRejected(boolean rejected)",3,1,0,0,1
"basis.brickness.testsupport.tests.foo.impl.FooBrickImpl.bar()",3,1,0,0,0
"basis.lang.exceptions.FriendlyException.getHelp()",3,1,0,0,0
"dfcsantos.music.store.impl.MusicStoreImpl.isExchangeTracksOn()",3,1,0,0,0
"dfcsantos.music.store.impl.MusicStoreImpl.shuffle()",3,1,0,0,0
"dfcsantos.music.store.impl.MusicStoreImpl.volumePercent()",3,1,0,0,0
"dfcsantos.music.ui.view.impl.MusicViewImpl.defaultHeight()",3,1,0,0,0
"dfcsantos.music.ui.view.impl.MusicViewImpl.title()",3,1,0,0,0
"dfcsantos.tracks.impl.TrackImpl.file()",3,1,0,0,0
"dfcsantos.tracks.impl.TrackImpl.name()",3,1,0,0,0
"sneer.bricks.expression.files.transfer.FileTransferStatus.toString()",3,1,0,0,0
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.getAlgorithm()",3,1,0,0,0
"sneer.bricks.hardware.cpu.timebox.impl.TimeIsUp.fillInStackTrace()",3,1,0,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.dotPartExtention()",3,1,0,0,0
"sneer.bricks.hardware.io.log.exceptions.robust.impl.RobustExceptionLoggingImpl.isOn()",3,1,0,0,0
"sneer.bricks.hardware.io.log.exceptions.robust.impl.RobustExceptionLoggingImpl.turnOn()",3,1,0,0,0
"sneer.bricks.hardware.io.log.filter.impl.LogFilterImpl.whiteListEntries()",3,1,0,0,0
"sneer.bricks.hardware.io.log.worker.impl.LogWorkerHolderImpl.worker()",3,1,0,0,0
"sneer.bricks.hardware.io.prevalence.flag.impl.PrevalenceFlagImpl.isInsidePrevalence()",3,1,0,0,0
"sneer.bricks.hardware.io.prevalence.map.impl.OID.toString()",3,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.impl.PrevalentBrick2Impl.recallItemCount()",3,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl$ItemImpl.name()",3,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl.get()",3,1,0,0,0
"sneer.bricks.hardware.ram.graphs.impl.GraphsImpl.createDirectedGraph()",3,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferenceImpl.isAlreadySet()",3,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferencesImpl.newInstance()",3,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.direction()",3,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.target()",3,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.tillHere()",3,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.tests.ReflectionGuideTest.testNavigation()",3,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFilesConsideredImportant()",3,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.ownFilesRedundancy()",3,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFilesToBeDownloaded()",3,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.impl.SnackupKernelImpl.peerFilesToForget()",3,1,0,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.BucketsImpl.produce()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.contact()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.impl.InternetAddressImpl.host()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressImpl.contact()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressImpl.host()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressImpl.port()",3,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.impl.InternetAddressImpl.toString()",3,1,0,0,0
"sneer.bricks.network.computers.channels.impl.ChannelImpl.id()",3,1,0,0,0
"sneer.bricks.network.computers.channels.impl.ChannelImpl.maxPacketSize()",3,1,0,0,0
"sneer.bricks.network.computers.tcp.connections.TcpSighting.toString()",3,1,0,0,0
"sneer.bricks.network.computers.tcp.connections.impl.CallImpl.callerName()",3,1,0,0,0
"sneer.bricks.network.computers.tcp.connections.impl.CallImpl.callerSeal()",3,1,0,0,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.socket()",3,1,0,0,0
"sneer.bricks.pulp.notifiers.impl.WeakRefWithAlias.toString()",3,1,0,0,0
"sneer.bricks.pulp.notifiers.pulsers.impl.PulseSendersImpl.newInstance()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.AbstractListValueChange.elementsAdded()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.AbstractListValueChange.elementsRemoved()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.elementsAdded()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.elementsRemoved()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionSignalsImpl.newListRegister()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionSignalsImpl.newMapRegister()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionSignalsImpl.newSetRegister()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyEntry.getKey()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyEntry.getValue()",3,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl.output()",3,1,0,0,0
"sneer.bricks.pulp.reactive.impl.ConstantImpl.currentValue()",3,1,0,0,0
"sneer.bricks.pulp.reactive.impl.RegisterImpl.setter()",3,1,0,0,0
"sneer.bricks.pulp.reactive.impl.SignalsImpl.sink()",3,1,0,0,0
"sneer.bricks.pulp.streams.sequencer.impl.Packet.toString()",3,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuBarImpl.getWidget()",3,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuFactoryImpl.createMenuBar()",3,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuFactoryImpl.createPopupMenu()",3,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuGroupImpl.getWidget()",3,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuPopupImpl.getWidget()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.output()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.setter()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.output()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.REditableLabelImpl.setter()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RFrameImpl.getMainWidget()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.output()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.getComponent()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.getMainWidget()",3,1,0,0,0
"sneer.bricks.skin.widgets.reactive.impl.RPanel.getComponent()",3,1,0,0,0
"sneer.bricks.snapps.chat.ChatMessage.toString()",3,1,0,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.defaultHeight()",3,1,0,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.title()",3,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.getXOffset()",3,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.FixedCentralizedOffset.getYOffset()",3,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.getXOffset()",3,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.MutableOffset.getYOffset()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.getCell()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.getOwner()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCellImpl.getPolygon()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.canPass()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.getPhase()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.getPhaseName()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.FillAllCell.getWhoIsPlaying()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.canPass()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.getPhase()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.getWhoIsPlaying()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.LoadedDice.roll()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.addDie()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.canAddDie()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.getCell()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.getDiceCount()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.getOwner()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.getPolygon()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.getBoardCells()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.getCellCount()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.isFilled()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.canPass()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.getBoardCells()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.canPass()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.getPhase()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.getPhaseName()",3,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateMockAdapter.getWhoIsPlaying()",3,1,0,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.defaultHeight()",3,1,0,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.title()",3,1,0,0,0
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.defaultHeight()",3,1,0,0,0
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.title()",3,1,0,0,0
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.defaultHeight()",3,1,0,0,0
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.title()",3,1,0,0,0
"sneer.bricks.snapps.tasks.impl.Task.toString()",3,1,0,0,0
"sneer.bricks.snapps.wind.impl.WindImpl.shoutsHeard()",3,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.newGreeter()",3,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.privateMethod()",3,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.GreeterBase.hello()",3,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.primitivemethods.noargs.impl.PrimitiveMethodNoArgsImpl.baz()",3,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.refmethods.noargs.impl.RefMethodsNoArgsImpl.bar()",3,1,0,0,0
"sneer.bricks.software.bricks.repl.impl.GroovyEvaluator.reset()",3,1,0,0,0
"sneer.bricks.software.code.compilers.impl.LanguageImpl.compiler()",3,1,0,0,0
"sneer.bricks.software.code.compilers.impl.LanguageImpl.fileExtension()",3,1,0,0,0
"sneer.bricks.software.code.compilers.java.impl.CompilationErrorImpl.fileName()",3,1,0,0,0
"sneer.bricks.software.code.compilers.java.impl.CompilationErrorImpl.lineNumber()",3,1,0,0,0
"sneer.bricks.software.code.compilers.java.impl.CompilationErrorImpl.message()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.asm.impl.ASMImpl.opcodes()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.parse()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.classFile()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.getName()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.getPackageName()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.isInterface()",3,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.toString()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.binFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.gitFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.ownBinFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.ownSrcFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.srcFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.stageFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.storageFolder()",3,1,0,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.tmpFolder()",3,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.publicationDate()",3,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.contents()",3,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.lastModified()",3,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.relativePath()",3,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.FileVersionImpl.status()",3,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.sourceObject()",3,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.listChildren()",3,1,0,0,0
"sneer.snapps.games.drones.matches.impl.MatchImpl.unit1()",3,1,0,0,0
"sneer.snapps.games.drones.matches.impl.MatchImpl.unit2()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.attributes()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.hitpoints()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.isAlive()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.size()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.toString()",3,1,0,0,0
"sneer.snapps.games.drones.units.impl.UnitImpl.x()",3,1,0,0,0
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.toString()",3,1,0,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.defaultHeight()",3,1,0,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.title()",3,1,0,0,0
"snype.whisper.skin.audio.speaker.impl.SpeakerImpl.acquireLine()",3,1,0,0,0
"snype.whisper.speex.impl.SpeexImpl.createDecoder()",3,1,0,0,0
"snype.whisper.speex.impl.SpeexImpl.createEncoder()",3,1,0,0,0
"sneer.bricks.pulp.blinkinglights.tests.BlinkingLightsTest.assertLightCount(int count, BlinkingLights _lights)",2,1,5,0,2
"sneer.bricks.expression.files.tests.FileCopyTestBase.writePseudoRandomBytesTo(File file, int size)",2,1,4,0,2
"sneer.bricks.expression.files.tests.LocalCopyTest.copyFile(File destination, File file)",2,1,4,0,2
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.assertHexa(String expected, byte[] hash)",2,1,4,0,2
"sneer.bricks.hardware.io.tests.IOTest.listFiles(File folder, String... fileExtensions)",2,1,4,0,2
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$EventRecorder.record(String name, String value)",2,1,4,0,2
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.writeSourceFile(String filename, String data)",2,1,4,0,2
"sneer.bricks.expression.files.tests.RemoteCopyTest.hex(Hash hash)",2,1,4,0,1
"sneer.bricks.expression.tuples.Tuple.Tuple(Seal addressee_)",2,1,4,0,1
"sneer.bricks.network.computers.http.gateway.impl.HttpGatewayImpl.getResponse(final String httpUrl)",2,1,4,0,1
"sneer.bricks.pulp.reactive.gates.logic.tests.NotTest.toggle(Register<Boolean> register)",2,1,4,0,1
"sneer.bricks.snapps.chat.impl.ChatImpl.isByMe(ChatMessage message)",2,1,4,0,1
"dfcsantos.tracks.exchange.downloads.counter.impl.TrackDownloadCounterImpl.numberOfTracksInTheDownloadsFolder()",2,1,4,0,0
"dfcsantos.tracks.exchange.endorsements.tests.TrackEndorserTest.activateTrackEndorser()",2,1,4,0,0
"sneer.bricks.network.computers.addresses.own.port.tests.OwnPortTest.ownPort()",2,1,4,0,0
"sneer.bricks.pulp.reactive.gates.buffers.assync.impl.AssynchronousBufferImpl.output()",2,1,4,0,0
"sneer.bricks.pulp.reactive.gates.logic.impl.And.refresh()",2,1,4,0,0
"sneer.bricks.snapps.gis.map.gui.impl.MapGuiImpl.MapGuiImpl()",2,1,4,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.storeFieldData()",2,1,4,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.updateTitle()",2,1,4,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.assertSameContents(File file1, File file2)",2,1,3,0,2
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.unknownHailFrom(String nick, int seal)",2,1,3,0,2
"sneer.bricks.pulp.reactive.gates.logic.tests.NotTest.assertInverse(Signal<Boolean> original, Signal<Boolean> inverse)",2,1,3,0,2
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.copyFile(File from, File to)",2,1,3,0,2
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.assertSameContents(File folder1, File folder2)",2,1,3,0,2
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.copyFile(File from, File to)",2,1,3,0,2
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.load(String icon)",2,1,3,0,1
"dfcsantos.music.ui.view.impl.SmileyPanel.load(String icon)",2,1,3,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.isMapped(File file)",2,1,3,0,1
"sneer.bricks.expression.files.tests.LocalCopyTest.bytes(File file)",2,1,3,0,1
"sneer.bricks.expression.files.transfer.tests.FileTransferTest.setDownloadFolder(String path)",2,1,3,0,1
"sneer.bricks.hardware.cpu.crypto.tests.CryptoTest.fromHex(String hexString)",2,1,3,0,1
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.dotPartFilesRecursivelyIn(File folder)",2,1,3,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.PrevalentNatureTest.runInNewTestEnvironment(Closure closure)",2,1,3,0,1
"sneer.bricks.identity.name.tests.OwnNameTest.setOwnName(String name)",2,1,3,0,1
"sneer.bricks.network.computers.addresses.own.port.tests.OwnPortTest.setOwnPort(int port)",2,1,3,0,1
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.splitter(Producer<? extends ByteBuffer> sender)",2,1,3,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.hash(byte[] key)",2,1,3,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.seeNeideIn(InetSocketAddress sighting)",2,1,3,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.setOwnName(String name)",2,1,3,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.asBuffer(DatagramPacket packet)",2,1,3,0,1
"sneer.bricks.pulp.bandwidth.tests.BandwidthConsolidationTest.assertDownloadSpeed(int expected)",2,1,3,0,1
"sneer.bricks.pulp.bandwidth.tests.BandwidthConsolidationTest.assertUploadSpeed(int expected)",2,1,3,0,1
"sneer.bricks.pulp.dyndns.updater.impl.UpdaterImpl.encode(final String text)",2,1,3,0,1
"sneer.bricks.pulp.dyndns.updater.tests.UpdaterTest.encode(String value)",2,1,3,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.listSize(ListSignal<Signal<Integer>> sortedList)",2,1,3,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.tests.SetFilterTest.listSize(SetSignal<Signal<Integer>> sortedList)",2,1,3,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest.addElement(String value)",2,1,3,0,1
"sneer.bricks.snapps.contacts.gui.impl.ContactLabelProvider.getImage(String key)",2,1,3,0,1
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.newLabel(final Signal<Integer> source)",2,1,3,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.addMissingFile(FileVersion currentFile)",2,1,3,0,1
"sneer.bricks.softwaresharing.gui.impl.FileVersionListModel.getElementAt(int index)",2,1,3,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.copyClassToSrcFolder(final Class<?> clazz)",2,1,3,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.repositorySrcFileFor(final Class<?> clazz)",2,1,3,0,1
"dfcsantos.music.impl.DJ.pauseResume()",2,1,3,0,0
"dfcsantos.music.tests.MusicFunctionalTest.playingTrack()",2,1,3,0,0
"dfcsantos.music.tests.MusicFunctionalTest.sharedTracksFolder()",2,1,3,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.currentSharedTracksFolder()",2,1,3,0,0
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.inboxChoice()",2,1,3,0,0
"sneer.bricks.expression.files.client.tests.FileClientTest.anySmallFile()",2,1,3,0,0
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.myClassFile()",2,1,3,0,0
"sneer.bricks.expression.files.map.mapper.tests.FileMappingStopTest.myClassFile()",2,1,3,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.myClassFile()",2,1,3,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.impl.DotPartsImpl.dotPartFilter()",2,1,3,0,0
"sneer.bricks.identity.name.tests.OwnNameTest.ownName()",2,1,3,0,0
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddress.output()",2,1,3,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.tests.ContactInternetAddressesTest.ownSeal()",2,1,3,0,0
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.now()",2,1,3,0,0
"sneer.bricks.network.social.navigation.impl.tests.ContactNavigatorTest.ownSeal()",2,1,3,0,0
"sneer.bricks.pulp.reactive.collections.impl.CollectionAdapter.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.collections.impl.ListAdapter.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl.updateSize()",2,1,3,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.collections.setfilter.impl.Filter.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.gates.logic.impl.And.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.gates.numbers.impl.Adder.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.impl.Adapter.output()",2,1,3,0,0
"sneer.bricks.pulp.reactive.impl.SignalAdapter.output()",2,1,3,0,0
"sneer.bricks.skin.main.dashboard.impl.IconUtil.getLogo()",2,1,3,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.copySealToClipboard()",2,1,3,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl$Visitor.pathToString()",2,1,3,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.usersCount()",2,1,3,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.blinkingLights()",2,1,3,0,0
"snype.whisper.speex.impl.EncoderImpl.EncoderImpl()",2,1,3,0,0
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.hailFrom(String nick, int timestamp, String ip, int port)",2,1,2,0,4
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.asPacket(ByteBuffer buf, InetAddress ip, int port)",2,1,2,0,3
"basis.brickness.impl.BrickImplLoader.loadImplClassFor(String brick, String klass)",2,1,2,0,2
"basis.brickness.impl.BrickImplLoader.loadLibClassFor(String brick, String klass)",2,1,2,0,2
"dfcsantos.music.tests.MusicFunctionalTest.waitForSignalValue(Signal<T> signal, T value)",2,1,2,0,2
"sneer.bricks.expression.files.map.visitors.tests.FileMapGuideTest.mapFolder(String path, int hash)",2,1,2,0,2
"sneer.bricks.expression.files.tests.LocalCopyTest.copyFolder(FolderContents folder, File destination)",2,1,2,0,2
"sneer.bricks.network.computers.udp.sightings.impl.SightingKeeperImpl.addSighting(Contact contact, InetSocketAddress sighting)",2,1,2,0,2
"sneer.bricks.pulp.reactive.collections.impl.CollectionChangeImpl.CollectionChangeImpl(T elementAdded, T elementRemoved)",2,1,2,0,2
"sneer.bricks.snapps.chat.impl.ChatFrame.sendTo(Seal to, String text)",2,1,2,0,2
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.newTextField(final Signal<?> signal, final PickyConsumer<String> setter)",2,1,2,0,2
"sneer.bricks.softwaresharing.demolisher.filestatus.tests.FileStatusCalculatorTest.calculate(byte[] contents, byte[] contentsInCurrentVersion)",2,1,2,0,2
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.javaFileNameAt(File rootFolder, Class<?> clazz)",2,1,2,0,2
"basis.brickness.BrickConventions.implPackageFor(String brickName)",2,1,2,0,1
"basis.brickness.testsupport.BrickTestWithMocks.newTestEnvironment(Object... bindings)",2,1,2,0,1
"basis.environments.Bindings.Bindings(Object... bindings)",2,1,2,0,1
"basis.environments.ProxyInEnvironment.newInstance(T component)",2,1,2,0,1
"dfcsantos.music.impl.DJ.setPlaying(boolean isPlaying)",2,1,2,0,1
"dfcsantos.music.notification.playingtrack.tests.PlayingTrackTest.newTrack(final String name)",2,1,2,0,1
"dfcsantos.music.ui.presenter.contactstatus.impl.ContactMusicStatusImpl.playingTrackFor(Contact contact)",2,1,2,0,1
"dfcsantos.music.ui.view.impl.FolderSelectionPanel.resizeSelector(int width)",2,1,2,0,1
"sneer.bricks.expression.files.map.tests.FileMapTest.hash(int b)",2,1,2,0,1
"sneer.bricks.expression.files.map.visitors.tests.FileMapGuideTest.hash(int b)",2,1,2,0,1
"sneer.bricks.hardware.gui.nature.tests.GUINatureTest.isGuiThread(Thread thread)",2,1,2,0,1
"sneer.bricks.hardware.io.log.stacktrace.impl.StackTraceLoggerImpl.report(Thread thread)",2,1,2,0,1
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.joiner(Consumer<? super ByteBuffer> receiver)",2,1,2,0,1
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketOriginDetectionTest.constant(Seal seal)",2,1,2,0,1
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketTieBreakTest.constant(Seal seal)",2,1,2,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.connectionFor(String nick)",2,1,2,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.hailFrom(String nick)",2,1,2,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.handshakeFrom(String nick)",2,1,2,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.produceContact(String nick)",2,1,2,0,1
"sneer.bricks.network.computers.udp.tests.UdpNetworkTest.unmarshal(DatagramPacket packet)",2,1,2,0,1
"sneer.bricks.network.social.attributes.impl.AttributesImpl.serialize(Object value)",2,1,2,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.impl.StethoscopeImpl.contact(Heartbeat beat)",2,1,2,0,1
"sneer.bricks.pulp.blinkinglights.tests.BlinkingLightsTest.assertFalse(Signal<Boolean> booleanSignal)",2,1,2,0,1
"sneer.bricks.pulp.blinkinglights.tests.BlinkingLightsTest.assertTrue(Signal<Boolean> booleanSignal)",2,1,2,0,1
"sneer.bricks.pulp.probe.tests.ProbeManagerTest.desserialize(byte[] packet)",2,1,2,0,1
"sneer.bricks.pulp.reactive.impl.RegisterImpl.RegisterImpl(T initialValue)",2,1,2,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.value(Register<String> element)",2,1,2,0,1
"sneer.bricks.skin.widgets.autoscroll.impl.AutoScrollWorker.model(JScrollPane scrollPane)",2,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListCellRenderer.imageFor(ELEMENT element)",2,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListCellRenderer.textFor(ELEMENT element)",2,1,2,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListImpl.changeSelectedElement(ELEMENT element)",2,1,2,0,1
"sneer.bricks.snapps.chat.impl.ChatImpl.showFrameFor(final Contact contact)",2,1,2,0,1
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.trim(JTextField field)",2,1,2,0,1
"sneer.bricks.snapps.system.meter.bandwidth.gui.impl.BandwidthMeterGuiImpl.maxHolder(Signal<Integer> input)",2,1,2,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.relativeJavaFileName(Class<?> clazz)",2,1,2,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.repositorySourceFileFor(Class<?> clazz)",2,1,2,0,1
"sneer.bricks.software.bricks.interception.impl.Types.isPrimitive(Type type)",2,1,2,0,1
"sneer.bricks.software.code.java.source.writer.impl.JavaSourceWriterImpl.packageName(String className)",2,1,2,0,1
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.mapFileOrFolder(File fileOrFolder)",2,1,2,0,1
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.loadIcon(String fileName)",2,1,2,0,1
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.loadIcon(String fileName)",2,1,2,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.assertStagedFileExists(String fileName)",2,1,2,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.srcFileFor(final Class<?> clazz)",2,1,2,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.srcWriterFor(File srcFolder)",2,1,2,0,1
"sneer.tests.freedom7.Freedom7Test.javaSourceWriterFor(File srcFolder)",2,1,2,0,1
"dfcsantos.tracks.exchange.downloads.counter.impl.TrackDownloadCounterImpl.downloadsFolder()",2,1,2,0,0
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.initInboxFolder()",2,1,2,0,0
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.tmpFolder()",2,1,2,0,0
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.fixturesFolder()",2,1,2,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.zeroLengthFile()",2,1,2,0,0
"sneer.bricks.expression.files.tests.RemoteCopyTest.avoidDuplicateTuples()",2,1,2,0,0
"sneer.bricks.hardware.clock.ticker.impl.ClockTickerImpl.ClockTickerImpl()",2,1,2,0,0
"sneer.bricks.hardware.cpu.threads.tests.BrickTestWithThreads.crash()",2,1,2,0,0
"sneer.bricks.hardware.io.tests.IOTest.createTmpSubfolder()",2,1,2,0,0
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddress.host()",2,1,2,0,0
"sneer.bricks.network.computers.addresses.contacts.impl.ContactAddress.port()",2,1,2,0,0
"sneer.bricks.network.computers.udp.server.impl.UdpServerImpl.ownPort()",2,1,2,0,0
"sneer.bricks.network.social.heartbeat.impl.HeartImpl.beat()",2,1,2,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.turnOff()",2,1,2,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.turnOn()",2,1,2,0,0
"sneer.bricks.pulp.dyndns.ownaccount.tests.DynDnsAccountKeeperTest.ownAccount()",2,1,2,0,0
"sneer.bricks.skin.main.dashboard.impl.IconUtil.getLogoURL()",2,1,2,0,0
"sneer.bricks.skin.menu.impl.AbstractMenuGroup.removeAllIntems()",2,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RCheckBoxImpl.component()",2,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.textComponent()",2,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.RProgressBarImpl.component()",2,1,2,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.newContact()",2,1,2,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.ownName()",2,1,2,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.ownNameSetter()",2,1,2,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.ownPort()",2,1,2,0,0
"sneer.bricks.snapps.wind.gui.impl.WindGuiImpl.WindGuiImpl()",2,1,2,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.repositoryBinFolder()",2,1,2,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.repositorySrcFolder()",2,1,2,0,0
"sneer.bricks.software.folderconfig.impl.FolderConfigImpl.immutable()",2,1,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.isCurrent()",2,1,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.setCurrent()",2,1,2,0,0
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.files()",2,1,2,0,0
"sneer.bricks.softwaresharing.gui.impl.FileVersionListModel.getSize()",2,1,2,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.newJavaSourceWriter()",2,1,2,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.repositoryBinFolder()",2,1,2,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.repositorySrcFolder()",2,1,2,0,0
"snype.whisper.skin.audio.speaker.impl.LineImpl.LineImpl()",2,1,2,0,0
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$EventRecorder.record(String name, String oldValue, String newValue)",2,1,1,0,3
"basis.testsupport.PrettyPrinter.registerFor(Class<T> type, Functor<T,String> prettyPrinter)",2,1,1,0,2
"basis.testsupport.TestWithMocks.mock(String name, Class<T> type)",2,1,1,0,2
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl.notifyReceivers(Entry<K,V> added, Entry<K,V> removed)",2,1,1,0,2
"sneer.tests.SovereignFunctionalTestBase.connect(SovereignParty a, SovereignParty b)",2,1,1,0,2
"basis.brickness.impl.BrickImplLoader.implNameFor(final String brickInterfaceName)",2,1,1,0,1
"basis.brickness.impl.BrickImplLoader.libClassLoaderFor(String brick)",2,1,1,0,1
"basis.brickness.impl.EagerClassLoader.doLoadClass(String name)",2,1,1,0,1
"basis.brickness.impl.tests.BricknessTest.provide(final Class<T> brick)",2,1,1,0,1
"basis.environments.CachingEnvironment.CachingEnvironment(Environment delegate)",2,1,1,0,1
"basis.lang.arrays.ImmutableByteArray2D.ImmutableByteArray2D(byte[][] bufferToCopy)",2,1,1,0,1
"basis.testsupport.TestWithMocks.checking(ExpectationBuilder expectations)",2,1,1,0,1
"basis.testsupport.TestWithMocks.mock(Class<T> type)",2,1,1,0,1
"basis.testsupport.TestWithMocks.newSequence(String name)",2,1,1,0,1
"dfcsantos.music.ui.presenter.impl.MusicPresenterImpl.addChoice(String choice)",2,1,1,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.fixture(String name)",2,1,1,0,1
"sneer.bricks.expression.files.map.mapper.tests.FileMapperTest.map(File fileOrFolder)",2,1,1,0,1
"sneer.bricks.expression.files.tests.FileCopyTestBase.hash(File fileOrFolder)",2,1,1,0,1
"sneer.bricks.hardware.gui.timebox.impl.TimeboxedEventQueueImpl.superDispatchEvent(final AWTEvent event)",2,1,1,0,1
"sneer.bricks.hardware.io.log.tests.LoggerMocks.prefix(String label)",2,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.isRegistered(Object object)",2,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.MapLookup.MapLookup(Object delegate)",2,1,1,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalentBuilding.get(Class<T> brick)",2,1,1,0,1
"sneer.bricks.network.computers.tcp.connections.impl.ConnectionsByContact.remove(Contact contact)",2,1,1,0,1
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.bytes(String message)",2,1,1,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.assertEmpty(DatagramPacket[] replies)",2,1,1,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.ip(String address)",2,1,1,0,1
"sneer.bricks.network.computers.udp.sightings.impl.SightingKeeperImpl.sightingsRegisterOf(Contact contact)",2,1,1,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.tests.ListSorterTest.signal(Register<Integer> register)",2,1,1,0,1
"sneer.bricks.pulp.reactive.collections.setfilter.tests.SetFilterTest.signal(Register<Integer> register)",2,1,1,0,1
"sneer.bricks.pulp.reactive.impl.AbstractSignal.notifyReceivers(T value)",2,1,1,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.MyListOfSignalsReceiver(ListSignal<Register<String>> input)",2,1,1,0,1
"sneer.bricks.snapps.chat.impl.ChatFrame.showMessage(Message message)",2,1,1,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.setMessage(String message)",2,1,1,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.setMyTurn(boolean enable)",2,1,1,0,1
"sneer.bricks.snapps.system.log.sysout.impl.LogToSysoutImpl.log(String msg)",2,1,1,0,1
"sneer.bricks.snapps.tasks.impl.TaskMessage.TaskMessage(Task task)",2,1,1,0,1
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.testSrcFile(String filename)",2,1,1,0,1
"sneer.bricks.software.bricks.interception.fixtures.brickwithlib.impl.BrickWithLibImpl.useLibType(foo.Foo foo)",2,1,1,0,1
"sneer.bricks.software.code.java.source.writer.impl.JavaSourceWriterImpl.javaFile(String className)",2,1,1,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickFilter.packageContents(Hash hashOfPackage)",2,1,1,0,1
"sneer.bricks.softwaresharing.demolisher.tests.DemolisherTest.qualifiedBrickName(String brickName)",2,1,1,0,1
"sneer.bricks.softwaresharing.gui.impl.BrickTreeCellRenderer.isStaged(JLabel result)",2,1,1,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stagedFile(String fileName)",2,1,1,0,1
"sneer.main.tests.StagedCodeInstallationTest.tmpFolder(String folderName)",2,1,1,0,1
"sneer.tests.SovereignFunctionalTestBase.createParty(String name)",2,1,1,0,1
"sneer.tests.adapters.impl.SneerPartyApiClassLoaderImpl.isSneerBrick(String className)",2,1,1,0,1
"sneer.tests.freedom7.Freedom7Test.sourceFolder(String sourceFolder)",2,1,1,0,1
"basis.brickness.testsupport.tests.BrickTestWithMockRunnerTest.check()",2,1,1,0,0
"basis.brickness.testsupport.tests.BrickTestWithMockRunnerTest.test()",2,1,1,0,0
"basis.environments.CachingEnvironment.clear()",2,1,1,0,0
"basis.lang.arrays.ImmutableByteArray2D.copy()",2,1,1,0,0
"dfcsantos.music.impl.DJ.isPlaying()",2,1,1,0,0
"dfcsantos.music.impl.DJ.trackElapsedTime()",2,1,1,0,0
"dfcsantos.music.impl.DJ.volumePercent()",2,1,1,0,0
"dfcsantos.music.ui.view.impl.DownloadsView.show()",2,1,1,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.setPauseIconToPlayButton()",2,1,1,0,0
"dfcsantos.music.ui.view.impl.PlayerControlsPanel.setPlayIconToPlayButton()",2,1,1,0,0
"sneer.bricks.expression.files.tests.FileCopyTestBase.anySmallFile()",2,1,1,0,0
"sneer.bricks.expression.files.tests.LocalCopyTest.anyReasonableDate()",2,1,1,0,0
"sneer.bricks.expression.tuples.tests.TupleKeepingTest.subject()",2,1,1,0,0
"sneer.bricks.expression.tuples.tests.TuplePersistenceTest.createSubject()",2,1,1,0,0
"sneer.bricks.hardware.cpu.threads.throttle.impl.Throttle.now()",2,1,1,0,0
"sneer.bricks.hardware.io.log.tests.LoggerMocks.newInstance()",2,1,1,0,0
"sneer.bricks.hardware.ram.recycler.impl.MemoryRecyclerImpl.usedMemorySafeLimit()",2,1,1,0,0
"sneer.bricks.hardware.ram.ref.weak.keeper.impl.WeakReferenceKeeperImpl.forceWeakMapToCleanStaleReferences()",2,1,1,0,0
"sneer.bricks.network.computers.tcp.connections.impl.ConnectionsByContact.all()",2,1,1,0,0
"sneer.bricks.network.computers.tcp.connections.impl.SocketHolder.isConnected()",2,1,1,0,0
"sneer.bricks.network.computers.udp.holepuncher.server.tests.StunServerTest.newBuf()",2,1,1,0,0
"sneer.bricks.pulp.dyndns.checkip.impl.CheckIpImpl.submitHttpRequest()",2,1,1,0,0
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver.signalChooser()",2,1,1,0,0
"sneer.bricks.skin.main.menu.impl.MainMenuImpl.getMenuBarWidget()",2,1,1,0,0
"sneer.bricks.snapps.chat.impl.ChatFrame.show()",2,1,1,0,0
"sneer.bricks.snapps.contacts.gui.impl.ContactsGuiImpl.contactList()",2,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.gui.GuiPlayer.setKillOnClose()",2,1,1,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Cell.canAddDie()",2,1,1,0,0
"sneer.bricks.snapps.system.log.gui.impl.LogConsoleImpl.open()",2,1,1,0,0
"sneer.bricks.snapps.system.meter.memory.gui.impl.MemoryMeterGuiImpl.MemoryMeterGuiImpl()",2,1,1,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.testBinFolder()",2,1,1,0,0
"sneer.bricks.software.bricks.compiler.tests.BuilderTest.testSrcFolder()",2,1,1,0,0
"sneer.bricks.software.bricks.interception.fixtures.staticinitializer.impl.StaticInitializerImpl.nop()",2,1,1,0,0
"sneer.bricks.software.bricks.interception.tests.InterceptionTest.allowingRealizeAndInstantiate()",2,1,1,0,0
"sneer.bricks.software.bricks.repl.tests.GroovyEvaluatorTest.createEvaluator()",2,1,1,0,0
"sneer.bricks.software.folderconfig.testsupport.BrickTestBase.currentEnvironmentLabel()",2,1,1,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.classUtils()",2,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.WhisperGuiImpl()",2,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.isRunning()",2,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.whisperOff()",2,1,1,0,0
"snype.whisper.gui.impl.WhisperGuiImpl.whisperOn()",2,1,1,0,0
"sneer.bricks.hardwaresharing.backup.FileToRestore.FileToRestore(Hash hash_, long size, long lastModified_, String relativePath_)",2,1,0,0,4
"sneer.bricks.hardwaresharing.backup.FileToSync.FileToSync(Hash hash_, long size, long lastModified_, String relativePath_)",2,1,0,0,4
"dfcsantos.tracks.tastematching.TasteMatcher.rateEndorsement(Contact sender, String folder, Boolean opinion)",2,1,0,0,3
"sneer.bricks.expression.files.writer.atomic.AtomicFileWriter.writeAtomicallyTo(File file, long lastModified, byte[] contents)",2,1,0,0,3
"sneer.bricks.expression.files.writer.atomic.AtomicFileWriter.writeAtomicallyTo(File folder, long lastModified, FolderContents contents)",2,1,0,0,3
"sneer.bricks.skin.widgets.reactive.impl.RTextFieldImpl.RTextFieldImpl(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",2,1,0,0,3
"sneer.bricks.softwaresharing.demolisher.Demolisher.demolishBuildingInto(CacheMap<String,BrickHistory> bricksByName, Hash srcFolderHash, Contact owner)",2,1,0,0,3
"basis.brickness.impl.BrickLoadingException.BrickLoadingException(String message, Throwable cause)",2,1,0,0,2
"basis.lang.exceptions.NotImplementedYet.NotImplementedYet(String message, Throwable unhandledThrowable)",2,1,0,0,2
"sneer.bricks.expression.files.map.mapper.FileMapper.mapFileOrFolder(File fileOrFolder, String... acceptedFileExtensions)",2,1,0,0,2
"sneer.bricks.hardware.cpu.codec.DecodeException.DecodeException(String message, Throwable cause)",2,1,0,0,2
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.fork(String direction, Object attraction)",2,1,0,0,2
"sneer.bricks.network.computers.udp.connections.tests.UdpConnectionManagerTest.mockContactAddressAttributes(final String host, final int port)",2,1,0,0,2
"sneer.bricks.pulp.dyndns.updater.UpdaterException.UpdaterException(String message, String help)",2,1,0,0,2
"sneer.bricks.pulp.dyndns.updater.UpdaterException.UpdaterException(Throwable cause, String help)",2,1,0,0,2
"sneer.bricks.pulp.reactive.collections.impl.ListElementAdded.ListElementAdded(int index, T element)",2,1,0,0,2
"sneer.bricks.pulp.reactive.collections.impl.ListElementRemoved.ListElementRemoved(int index, T element)",2,1,0,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.unscrollX(int x, int _scrollX)",2,1,0,0,2
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.unscrollY(int y, int _scrollY)",2,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.play(int x, int y)",2,1,0,0,2
"sneer.bricks.software.code.metaclass.asm.impl.ASMException.ASMException(String message, Throwable t)",2,1,0,0,2
"sneer.bricks.software.code.metaclass.impl.ASMMetaClass.ASMMetaClass(File root, File classFile)",2,1,0,0,2
"sneer.bricks.software.code.metaclass.impl.MetaClassException.MetaClassException(String message, Throwable t)",2,1,0,0,2
"sneer.bricks.software.code.metaclass.impl.SimpleMetaClass.SimpleMetaClass(File rootFolder, File classFile)",2,1,0,0,2
"sneer.bricks.software.timing.impl.AnimatorAdapter.AnimatorAdapter(org.jdesktop.animation.timing.TimingTargetAdapter tta, int duration)",2,1,0,0,2
"basis.brickness.Brickness.newBrickContainer(Object... bindings)",2,1,0,0,1
"basis.brickness.impl.BrickImplLoader.BrickImplLoader(ByRef<ClassLoader> apiClassLoader)",2,1,0,0,1
"basis.brickness.impl.BrickLoadingException.BrickLoadingException(String message)",2,1,0,0,1
"basis.brickness.impl.BrickLoadingException.BrickLoadingException(Throwable cause)",2,1,0,0,1
"basis.brickness.testsupport.BrickTestWithMockRunner.BrickTestWithMockRunner(Class<?> testClass)",2,1,0,0,1
"basis.lang.arrays.ImmutableByteArray2D.get(@SuppressWarnings('unused') int index)",2,1,0,0,1
"basis.lang.exceptions.NotImplementedYet.NotImplementedYet(String message)",2,1,0,0,1
"basis.lang.exceptions.NotImplementedYet.NotImplementedYet(Throwable unhandledThrowable)",2,1,0,0,1
"basis.lang.exceptions.Refusal.Refusal(String veryHelpfulMessage)",2,1,0,0,1
"basis.testsupport.CleanTestRunner.CleanTestRunner(Class<?> testClass)",2,1,0,0,1
"dfcsantos.tracks.execution.playlist.impl.RandomPlaylist.RandomPlaylist(File tracksFolder)",2,1,0,0,1
"dfcsantos.tracks.execution.playlist.impl.SequentialPlaylist.SequentialPlaylist(File tracksFolder)",2,1,0,0,1
"dfcsantos.tracks.storage.rejected.tests.RejectedTracksKeeperTest.hash(int byte_)",2,1,0,0,1
"sneer.bricks.expression.files.client.downloads.TimeoutException.TimeoutException(String msg)",2,1,0,0,1
"sneer.bricks.expression.files.protocol.FolderContents.FolderContents(ImmutableArray<FileOrFolder> contents_)",2,1,0,0,1
"sneer.bricks.expression.files.transfer.FileTransferAccept.FileTransferAccept(FileTransferSugestion sugestion)",2,1,0,0,1
"sneer.bricks.expression.tuples.tests.KeptTuple.KeptTuple(int number_)",2,1,0,0,1
"sneer.bricks.expression.tuples.tests.TestTuple.TestTuple(int intValue_)",2,1,0,0,1
"sneer.bricks.expression.tuples.tests.TuplePersistenceTest.tuple(int i)",2,1,0,0,1
"sneer.bricks.hardware.cpu.codec.DecodeException.DecodeException(String message)",2,1,0,0,1
"sneer.bricks.hardware.cpu.codec.DecodeException.DecodeException(Throwable cause)",2,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Hash.Hash(ImmutableByteArray bytes_)",2,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Hash.Hash(byte[] bytes_)",2,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.DigesterImpl(MessageDigest sha512)",2,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.DigesterImpl.wrap(byte[] bytes)",2,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.impl.RandomWrapper.RandomWrapper(byte[] randomBytes)",2,1,0,0,1
"sneer.bricks.hardware.io.log.filter.LogWhiteListEntry.LogWhiteListEntry(String phrase_)",2,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.impl.OID.OID(long id)",2,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.impl.Bubble.Bubble(ProducerX<Object,? extends Exception> producer)",2,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.impl.SomePrevalentBrickImpl$ItemImpl.ItemImpl(String name)",2,1,0,0,1
"sneer.bricks.hardware.ram.reflection.visitation.impl.TourImpl.TourImpl(Object start)",2,1,0,0,1
"sneer.bricks.hardwaresharing.backup.InSync.InSync(Seal addressee_)",2,1,0,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.BlockNumberOutOfRange.BlockNumberOutOfRange(String message)",2,1,0,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.RemoteBucket.RemoteBucket(Seal seal)",2,1,0,0,1
"sneer.bricks.identity.seals.Seal.Seal(ImmutableByteArray bytes_)",2,1,0,0,1
"sneer.bricks.identity.seals.Seal.Seal(byte[] bytes_)",2,1,0,0,1
"sneer.bricks.network.computers.channels.guaranteed.impl.GuaranteedChannelImpl.GuaranteedChannelImpl(Channel delegate)",2,1,0,0,1
"sneer.bricks.network.computers.channels.largepackets.impl.LargePacketChannelImpl.LargePacketChannelImpl(Channel delegate)",2,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.originator.tests.SocketOriginatorTest.newSeal(byte[] bytes)",2,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketOriginDetectionTest.newSeal(byte[] bytes)",2,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.tests.IncomingSocketTieBreakTest.newSeal(byte[] bytes)",2,1,0,0,1
"sneer.bricks.network.computers.udp.impl.UdpSocketImpl.UdpSocketImpl(int portNumber)",2,1,0,0,1
"sneer.bricks.network.social.Contacts.addContact(String nickname)",2,1,0,0,1
"sneer.bricks.network.social.Contacts.produceContact(String nickname)",2,1,0,0,1
"sneer.bricks.network.social.navigation.ContactsRequest.ContactsRequest(Seal adressee)",2,1,0,0,1
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.LightImpl(LightType type)",2,1,0,0,1
"sneer.bricks.pulp.dyndns.updater.InvalidHostException.InvalidHostException(String code)",2,1,0,0,1
"sneer.bricks.pulp.dyndns.updater.ServerErrorException.ServerErrorException(String code)",2,1,0,0,1
"sneer.bricks.pulp.dyndns.updater.UnexpectedResponseException.UnexpectedResponseException(String message)",2,1,0,0,1
"sneer.bricks.pulp.probe.tests.ProbeManagerTest.newSeal(byte[] bytes)",2,1,0,0,1
"sneer.bricks.pulp.probe.tests.TupleTypeA.TupleTypeA(int id_)",2,1,0,0,1
"sneer.bricks.pulp.probe.tests.TupleTypeB.TupleTypeB(int id_)",2,1,0,0,1
"sneer.bricks.pulp.probe.tests.TupleWithId.TupleWithId(int id_)",2,1,0,0,1
"sneer.bricks.pulp.reactive.collections.impl.CurrentListElements.CurrentListElements(List<VO> elements)",2,1,0,0,1
"sneer.bricks.pulp.reactive.collections.impl.MapRegisterImpl$MyOutput.asChange(Collection<Entry<K,V>> entries)",2,1,0,0,1
"sneer.bricks.pulp.reactive.collections.impl.VisitingListReceiver.VisitingListReceiver(Visitor<T> delegate)",2,1,0,0,1
"sneer.bricks.pulp.reactive.impl.ConstantImpl.ConstantImpl(TYPE constantValue)",2,1,0,0,1
"sneer.bricks.skin.widgets.reactive.impl.RLabelImpl.RLabelImpl(Signal<?> text)",2,1,0,0,1
"sneer.bricks.skin.widgets.reactive.impl.RListCellRenderer.RListCellRenderer(LabelProvider<ELEMENT> labelProvider)",2,1,0,0,1
"sneer.bricks.snapps.chat.ChatMessage.ChatMessage(String phrase)",2,1,0,0,1
"sneer.bricks.snapps.chat.impl.ChatImpl.isPublic(ChatMessage message)",2,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.setHoverX(int hoverX)",2,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.setHoverY(int hoverY)",2,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.painters.HoverStonePainter.toCoordinateSmall(int position)",2,1,0,0,1
"sneer.bricks.snapps.games.go.impl.network.GoMessage.GoMessage(Seal addressee_)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Cell.setDiceCount(int newDiceCount)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceImpl.DiceImpl(final Random random)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.PlayOutcome(AttackOutcome attackOutcome)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.PlayOutcome(int diceLeft)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.selectedACell(BoardCell cell)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.Player(int player)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameEnded.GameEnded(Player winner)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.sneer.SneerPlayer.SneerPlayer(Seal addressee)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.LoadedDice.LoadedDice(int result)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.BoardCellMock(Player player)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.setCell(Cell attackCellAfterAttack)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.setDiceCount(int newDiceCount)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.setOwner(Player player1)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardMockAdapter.remove(BoardCell cell)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.addPlayListener(PlayListener playCallback)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.setAttackCallback(AttackCallback attackCallback)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.setDiceLeftCallback(DiceLeftCallback diceLeftCallback)",2,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.setSelectedCellCallback(SelectedCallback selectedCellCall)",2,1,0,0,1
"sneer.bricks.snapps.tasks.impl.Task.Task(String description)",2,1,0,0,1
"sneer.bricks.snapps.tasks.impl.TaskMessage.setTask(Task _task)",2,1,0,0,1
"sneer.bricks.snapps.web.impl.SealForUrl.SealForUrl(ContactProvider contactProvider)",2,1,0,0,1
"sneer.bricks.snapps.web.impl.WebRequest.WebRequest(Seal addressee)",2,1,0,0,1
"sneer.bricks.software.bricks.compiler.BrickCompilerException.BrickCompilerException(Exception cause)",2,1,0,0,1
"sneer.bricks.software.bricks.compiler.BrickCompilerException.BrickCompilerException(String message)",2,1,0,0,1
"sneer.bricks.software.bricks.interception.fixtures.voidmethods.onearg.impl.VoidMethodsRefArgImpl.foo(String arg)",2,1,0,0,1
"sneer.bricks.software.bricks.interception.impl.UniqueNameProvider.uniqueName(String token)",2,1,0,0,1
"sneer.bricks.software.code.java.source.writer.impl.JavaSourceWriterImpl.JavaSourceWriterImpl(File srcFolder)",2,1,0,0,1
"sneer.bricks.software.code.metaclass.asm.impl.ASMException.ASMException(String message)",2,1,0,0,1
"sneer.bricks.software.code.metaclass.asm.impl.AnnotationInfoImpl.AnnotationInfoImpl(org.objectweb.asm.AnnotationVisitor result)",2,1,0,0,1
"sneer.bricks.software.code.metaclass.impl.MetaClassException.MetaClassException(String message)",2,1,0,0,1
"sneer.bricks.software.timing.impl.AnimatorAdapter.adapt(TimingTarget target)",2,1,0,0,1
"sneer.bricks.software.timing.impl.TimingTargetAdapter.TimingTargetAdapter(TimingTarget target)",2,1,0,0,1
"sneer.bricks.softwaresharing.demolisher.Demolisher.demolishOwnBuilding(Hash ownBuildingHash)",2,1,0,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickFilter.asTuple(List<FileOrFolder> result)",2,1,0,0,1
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.setChosenForExecution(boolean value)",2,1,0,0,1
"sneer.bricks.softwaresharing.gui.impl.FileVersionListModel.FileVersionListModel(BrickVersion brickVersion)",2,1,0,0,1
"sneer.bricks.softwaresharing.gui.impl.FileVersionListModel.wrap(FileVersion fileVersion)",2,1,0,0,1
"sneer.bricks.softwaresharing.publisher.BuildingHash.BuildingHash(Hash buildingHash_)",2,1,0,0,1
"sneer.main.stun.StunServerSession.main(String[] args)",2,1,0,0,1
"sneer.snapps.games.drones.Challenge.Challenge(Seal adversary)",2,1,0,0,1
"snype.whisper.AudioPacket.AudioPacket(byte[][] content)",2,1,0,0,1
"snype.whisper.audio.AudioDevice.setFormat(AudioFormat format)",2,1,0,0,1
"snype.whisper.audio.AudioDevice.setMixer(Mixer mixer)",2,1,0,0,1
"snype.whisper.gui.SnypeAcceptTuple.SnypeAcceptTuple(Seal addressee_)",2,1,0,0,1
"snype.whisper.gui.SnypeCall.SnypeCall(Seal addressee_)",2,1,0,0,1
"snype.whisper.gui.SnypeStopTuple.SnypeStopTuple(Seal addressee_)",2,1,0,0,1
"snype.whisper.speextuples.tests.PcmSoundPacket.PcmSoundPacket(ImmutableByteArray payload_)",2,1,0,0,1
"basis.brickness.impl.BrickImplLoader.apiClassLoader()",2,1,0,0,0
"basis.brickness.impl.BrickSerializationMapperImpl.apiClassLoader()",2,1,0,0,0
"basis.brickness.testsupport.BrickTestWithMocks.BrickTestWithMocks()",2,1,0,0,0
"basis.lang.ByRef.newInstance()",2,1,0,0,0
"basis.lang.arrays.ImmutableByteArray2D.length()",2,1,0,0,0
"basis.lang.exceptions.Crashed.Crashed()",2,1,0,0,0
"basis.lang.exceptions.NotImplementedYet.NotImplementedYet()",2,1,0,0,0
"basis.testsupport.TestWithMocks.TestWithMocks()",2,1,0,0,0
"basis.testsupport.tests.CleanTestBaseTest.wasRunInSeparateVM()",2,1,0,0,0
"dfcsantos.music.ui.presenter.contactstatus.impl.ContactMusicStatusImpl.position()",2,1,0,0,0
"sneer.bricks.expression.tuples.Tuple.Tuple()",2,1,0,0,0
"sneer.bricks.hardware.cpu.codec.DecodeException.DecodeException()",2,1,0,0,0
"sneer.bricks.hardware.cpu.lang.contracts.Contract.dispose()",2,1,0,0,0
"sneer.bricks.hardware.cpu.lang.contracts.WeakContract.dispose()",2,1,0,0,0
"sneer.bricks.hardware.gui.trayicon.SystemTrayNotSupported.SystemTrayNotSupported()",2,1,0,0,0
"sneer.bricks.hardware.ram.graphs.DirectedGraph.pluck()",2,1,0,0,0
"sneer.bricks.pulp.dyndns.updater.BadAuthException.BadAuthException()",2,1,0,0,0
"sneer.bricks.pulp.dyndns.updater.RedundantUpdateException.RedundantUpdateException()",2,1,0,0,0
"sneer.bricks.pulp.reactive.signalchooser.impl.SignalChooserReceiver$ElementReceiver.startNotifyingReceiver()",2,1,0,0,0
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$EventRecorder.clear()",2,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuBarImpl.MenuBarImpl()",2,1,0,0,0
"sneer.bricks.skin.menu.impl.MenuPopupImpl.MenuPopupImpl()",2,1,0,0,0
"sneer.bricks.skin.widgets.reactive.tests.ListSignalModelTest.clearEvents()",2,1,0,0,0
"sneer.bricks.snapps.contacts.gui.info.impl.ContactInternetAddressList.addresses()",2,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.GameMenu.getMenuWidth()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.RemotePlay.getX()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.RemotePlay.getY()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Cell.getDiceCount()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.getAttackOutcome()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.getDiceLeft()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.getSelectedCellOrNull()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.isAttackOutcome()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.getPlayerNumber()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.getPlayersCount()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Player.isLastPlayer()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.BoardCellMock.wasAttacked()",2,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.test.logic.gameStates.GameStateContextMock.pass()",2,1,0,0,0
"sneer.bricks.snapps.tasks.impl.TaskMessage.getTask()",2,1,0,0,0
"sneer.bricks.snapps.web.tests.ContactProviderMock.wasCalled()",2,1,0,0,0
"sneer.bricks.software.bricks.compiler.tests.fixtures.Foo.bar()",2,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.packageMethod()",2,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.impl.BrickOfSomeInterceptingNatureImpl.protectedMethod()",2,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.voidmethods.noargs.impl.VoidMethodsNoArgsImpl.foo()",2,1,0,0,0
"sneer.bricks.software.code.compilers.CompilerException.result()",2,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.folderContents()",2,1,0,0,0
"snype.whisper.audio.AudioDevice.getFormat()",2,1,0,0,0
"snype.whisper.audio.AudioDevice.getMixer()",2,1,0,0,0
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.elementReplaced(int index, Register<String> oldElement, Register<String> newElement)",1,1,3,0,3
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.elementAdded(int index, Register<String> element)",1,1,2,0,2
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.elementRemoved(int index, Register<String> element)",1,1,2,0,2
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.elementSignalChanged(Register<String> element)",1,1,2,0,1
"sneer.bricks.pulp.reactive.signalchooser.tests.ListOfSignalsReceiverTest$MyListOfSignalsReceiver.elementMoved(int index, int newIndex, Register<String> newElement)",1,1,1,0,3
"sneer.bricks.hardware.cpu.timebox.Timebox.run(int durationInMillis, Runnable toRun, Runnable toCallWhenBlocked)",1,1,0,0,3
"basis.brickness.testsupport.BrickTestWithMocks.afterFailedtest(Method method, Throwable thrown)",1,1,0,0,2
"sneer.bricks.expression.tuples.remote.RemoteTuples.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber)",1,1,0,0,2
"sneer.bricks.hardware.cpu.threads.throttle.CpuThrottle.limitMaxCpuUsage(int percentage, ClosureX<X> closure)",1,1,0,0,2
"sneer.bricks.hardware.ram.graphs.DirectedGraph.addEdge(T vertex, T successorVertex)",1,1,0,0,2
"sneer.bricks.hardware.ram.ref.weak.keeper.WeakReferenceKeeper.keep(T holder, Object toBeHeld)",1,1,0,0,2
"sneer.bricks.pulp.distribution.filtering.TupleFilterManager.setCensor(Class<T> tupleType, Predicate<? super T> censor)",1,1,0,0,2
"sneer.bricks.snapps.contacts.gui.comparator.ContactComparator.compare(Contact contact1, Contact contact2)",1,1,0,0,2
"sneer.bricks.software.bricks.statestore.tests.BrickStateStoreMock.writeObjectFor(Class<?> brickIgnored, Object objectIgnored)",1,1,0,0,2
"basis.environments.NonBlockingEnvironment.provideWithoutBlocking(Class<T> need)",1,1,0,0,1
"basis.lang.Consumer.consume(T value)",1,1,0,0,1
"basis.lang.Functor.evaluate(A value)",1,1,0,0,1
"basis.lang.PickyConsumer.consume(T value)",1,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.remove(String path)",1,1,0,0,1
"sneer.bricks.expression.files.map.mapper.FileMapper.getExistingMappedFile(Hash hash)",1,1,0,0,1
"sneer.bricks.expression.files.map.mapper.FileMapper.stopMapping(File fileOrFolder)",1,1,0,0,1
"sneer.bricks.hardware.cpu.threads.Threads.startStepping(Closure steppable)",1,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.addItemAndReturnIt_AnnotatedAsTransaction(String name)",1,1,0,0,1
"sneer.bricks.hardware.ram.deepcopy.DeepCopier.deepCopy(T original)",1,1,0,0,1
"sneer.bricks.hardware.ram.graphs.DirectedGraph.addVertex(T vertex)",1,1,0,0,1
"sneer.bricks.hardware.ram.ref.immutable.ImmutableReferences.newInstance(T value)",1,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.TcpConnectionManager.closeConnectionFor(Contact contact)",1,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.TcpConnectionManager.connectionFor(Contact contact)",1,1,0,0,1
"sneer.bricks.pulp.notifiers.Notifiers.newInstance(Producer<? extends T> welcomer)",1,1,0,0,1
"basis.lang.ByRef.ByRef()",1,1,0,0,0
"basis.lang.Closure.run()",1,1,0,0,0
"basis.lang.Producer.produce()",1,1,0,0,0
"sneer.bricks.expression.files.client.downloads.TimeoutException.TimeoutException()",1,1,0,0,0
"sneer.bricks.hardware.clock.Clock.preciseTime()",1,1,0,0,0
"sneer.bricks.hardware.cpu.threads.Threads.waitUntilCrash()",1,1,0,0,0
"sneer.bricks.hardware.cpu.threads.throttle.CpuThrottle.yield()",1,1,0,0,0
"sneer.bricks.hardware.ram.graphs.DirectedGraph.detectCycle()",1,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.ImmutableReferences.newInstance()",1,1,0,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.impl.RemoteBucket.crash()",1,1,0,0,0
"sneer.bricks.network.computers.tcp.connections.TcpConnectionManager.unknownCallers()",1,1,0,0,0
"sneer.bricks.pulp.dyndns.checkip.CheckIp.check()",1,1,0,0,0
"sneer.bricks.pulp.notifiers.pulsers.PulseSender.sendPulse()",1,1,0,0,0
"sneer.bricks.pulp.reactive.collections.ListRegister.output()",1,1,0,0,0
"sneer.bricks.pulp.reactive.collections.ListSignal.currentElements()",1,1,0,0,0
"sneer.bricks.pulp.reactive.collections.SetRegister.output()",1,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.PlayOutcome.PlayOutcome()",1,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.staticinitializer.impl.StaticInitializerImpl.foo()",1,1,0,0,0
"sneer.bricks.softwaresharing.FileVersion.contentsInCurrentVersion()",1,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl$Visitor.enterFolder()",1,1,0,0,0
"snype.whisper.audio.AudioUtil.AudioUtil()",1,1,0,0,0
"snype.whisper.skin.audio.mic.Mic.open()",1,1,0,0,0
"snype.whisper.skin.audio.mic.Mic.sound()",1,1,0,0,0
"snype.whisper.skin.audio.speaker.Speaker.acquireLine()",1,1,0,0,0
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.setPlayingFolder(String playingFolder)",0,1,3,0,1
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.setTracksFolder(String sharedTracksFolder)",0,1,3,0,1
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.srcFolder()",0,1,3,0,0
"sneer.bricks.softwaresharing.stager.tests.BrickStagerTest.stageFolder()",0,1,3,0,0
"sneer.bricks.snapps.owninfo.impl.OwnInfoImpl.addWidget(JComponent widget, String label, int y)",0,1,2,0,3
"sneer.bricks.hardware.clock.impl.ClockImpl.advanceTime(long deltaMillis)",0,1,2,0,1
"sneer.bricks.hardware.clock.impl.ClockImpl.advanceTimeTo(long absoluteTimeMillis)",0,1,2,0,1
"sneer.bricks.software.timing.impl.AnimatorAdapter.addTarget(TimingTarget target)",0,1,2,0,1
"sneer.bricks.software.timing.impl.AnimatorAdapter.removeTarget(TimingTarget target)",0,1,2,0,1
"sneer.bricks.hardware.clock.impl.ClockImpl.currentTime()",0,1,2,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.hash()",0,1,2,0,0
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newEditableLabel(Signal<?> source, PickyConsumer<? super String> setter)",0,1,1,0,2
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newTextField(Signal<?> source, PickyConsumer<? super String> setter)",0,1,1,0,2
"sneer.bricks.skin.widgets.reactive.impl.ReactiveWidgetFactoryImpl.newTextPane(Signal<?> source, PickyConsumer<? super String> setter)",0,1,1,0,2
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferenceImpl.ImmutableReferenceImpl(T value)",0,1,1,0,1
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.elementSignalChanged(T element)",0,1,1,0,1
"sneer.bricks.software.bricks.interception.Boxing.unboxBoolean(Object value)",0,1,1,0,1
"sneer.bricks.software.bricks.interception.Boxing.unboxInt(Object value)",0,1,1,0,1
"sneer.bricks.software.timing.impl.TimingTargetAdapter.timingEvent(float time)",0,1,1,0,1
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.playingFolder()",0,1,1,0,0
"dfcsantos.tracks.storage.folder.impl.TracksFolderKeeperImpl.tracksFolder()",0,1,1,0,0
"sneer.bricks.hardware.clock.impl.ClockImpl.time()",0,1,1,0,0
"sneer.bricks.hardware.io.prevalence.nature.impl.PrevalenceEnvironment.PrevalenceEnvironment()",0,1,1,0,0
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.downloadSpeedInKBperSecond()",0,1,1,0,0
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.uploadSpeedInKBperSecond()",0,1,1,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.caption()",0,1,1,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.isOn()",0,1,1,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.pause()",0,1,1,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.playBackward()",0,1,1,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.playForward()",0,1,1,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.resume()",0,1,1,0,0
"sneer.bricks.software.timing.impl.AnimatorAdapter.stop()",0,1,1,0,0
"sneer.bricks.software.timing.impl.TimingTargetAdapter.begin()",0,1,1,0,0
"sneer.bricks.software.timing.impl.TimingTargetAdapter.end()",0,1,1,0,0
"sneer.bricks.software.timing.impl.TimingTargetAdapter.repeat()",0,1,1,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.status()",0,1,1,0,0
"sneer.tests.adapters.SneerParty.configDirectories(File dataFolder, File tmpFolder, File currentCodeFolder, File srcFolder, File binFolder, File stageFolder, Path gitFolder)",0,1,0,0,7
"sneer.bricks.expression.files.client.FileClient.startDownload(File file, boolean isFolder, long size, long lastModified, Hash hashOfFile, Seal source)",0,1,0,0,6
"sneer.bricks.software.code.metaclass.asm.ClassVisitor.visit(int version, int access, String name, String signature, String superName, String[] interfaces)",0,1,0,0,6
"sneer.bricks.expression.files.client.FileClient.startFileDownload(File file, long size, long lastModified, Hash hashOfFile, Seal source)",0,1,0,0,5
"sneer.bricks.expression.files.client.downloads.Downloads.newFileDownload(File file, long size, long lastModified, Hash hashOfFile, Seal source)",0,1,0,0,5
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOn(LightType type, String caption, String helpMessage, Throwable t, int timeToLive)",0,1,0,0,5
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, String caption, String helpMessage, Throwable t, int timeout)",0,1,0,0,5
"sneer.bricks.software.bricks.interception.Interceptor.invoke(Class<?> brick, Object instance, String methodName, Object[] args, Continuation defaultInvocation)",0,1,0,0,5
"sneer.bricks.software.timing.PropertySetter.animator(int forwardDuration, int backwardDuration, Object object, String propertyName, T... params)",0,1,0,0,5
"sneer.bricks.software.timing.WindowOpacitySetter.animator(Window window, float start, float end, int forwardDuration, int backwardDuration)",0,1,0,0,5
"dfcsantos.tracks.execution.player.TrackPlayer.startPlaying(Track track, Signal<Boolean> isPlaying, Signal<Integer> volumePercent, Runnable toCallWhenFinished)",0,1,0,0,4
"sneer.bricks.expression.files.client.downloads.Downloads.newFolderDownload(File folder, Hash hashOfFolder, Seal source, boolean copyLocalFiles)",0,1,0,0,4
"sneer.bricks.expression.files.map.FileMap.putFile(String path, long size, long lastModified, Hash hash)",0,1,0,0,4
"sneer.bricks.expression.files.tests.FileCopyTestBase.copyFileFromFileMap(Hash hashOfContents, long size, long lastModified, File destination)",0,1,0,0,4
"sneer.bricks.hardware.cpu.utils.consumers.validators.bounds.integer.IntegerBounds.newInstance(String friendlyName, PickyConsumer<Integer> delegate, int min, int max)",0,1,0,0,4
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFileConsideredImportant(String relativePath, Hash hashOfFile, long sizeOfFile, long lastModified)",0,1,0,0,4
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFileConsideredImportant(Contact contact, String relativePath, Hash hashOfFile, long sizeOfFile)",0,1,0,0,4
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOn(LightType type, String caption, String helpMessage, Throwable t)",0,1,0,0,4
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOn(LightType type, String caption, String helpMessage, int timeToLive)",0,1,0,0,4
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, String caption, String helpMessage, Throwable t)",0,1,0,0,4
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, String caption, String helpMessage, int timeout)",0,1,0,0,4
"sneer.bricks.pulp.dyndns.updater.Updater.update(String dynDnsHost, String dynDnsUser, String password, String newIp)",0,1,0,0,4
"sneer.bricks.skin.image.ImageFactory.getScaledInstance(Image image, int width, int height, GraphicsConfiguration gc)",0,1,0,0,4
"sneer.bricks.skin.menu.MenuGroup.addActionWithCheckBox(int positionInMenu, String caption, Signal<Boolean> checked, Runnable action)",0,1,0,0,4
"sneer.bricks.software.timing.PropertySetter.animator(int duration, Object object, String propertyName, T... params)",0,1,0,0,4
"sneer.bricks.software.timing.WindowOpacitySetter.animator(Window window, float start, float end, int duration)",0,1,0,0,4
"basis.brickness.Nature.instantiate(Class<T> brick, Class<T> implClass, Producer<T> defaultInstantiator)",0,1,0,0,3
"sneer.bricks.expression.files.client.FileClient.startFolderDeltasDownload(File folder, Hash hashOfFolder, Seal source)",0,1,0,0,3
"sneer.bricks.expression.files.client.FileClient.startFolderDownload(File folder, Hash hashOfFolder, Seal source)",0,1,0,0,3
"sneer.bricks.expression.files.map.visitors.FolderStructureVisitor.visitFileOrFolder(String name, long lastModified, Hash hashOfContents)",0,1,0,0,3
"sneer.bricks.expression.tuples.TupleSpace.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber, Predicate<? super T> filter)",0,1,0,0,3
"sneer.bricks.expression.tuples.dispatcher.TupleDispatcher.dispatch(Tuple tuple, Consumer<? super Tuple> subscriber, Environment environment)",0,1,0,0,3
"sneer.bricks.hardware.cpu.crypto.Crypto.secretKeyFrom(PublicKey publicKey, PrivateKey privateKey, byte[] sessionKey)",0,1,0,0,3
"sneer.bricks.hardware.cpu.crypto.Digester.update(byte[] bytes, int offset, int length)",0,1,0,0,3
"sneer.bricks.hardware.cpu.lang.Lang$Strings.insertSpacedSeparators(String str, String separator, int interval)",0,1,0,0,3
"sneer.bricks.hardware.cpu.lang.Lang$Strings.splitRight(String line, char separator, int maxParts)",0,1,0,0,3
"sneer.bricks.hardware.cpu.timebox.Timebox.prepare(int durationInMillis, Runnable toRun, Runnable toCallWhenBlocked)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$FileFilters.listFiles(File folder, Filter fileFilter, Filter folderFilter)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.copyFolder(File srcFolder, File destFolder, Filter fileFilter)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.iterate(File folder, String[] extensions, boolean recursive)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.listFiles(File folder, Filter fileFilter, Filter folderFilter)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.listFiles(File folder, String[] extensions, boolean recursive)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.readBlock(File file, int blockNumber, int blockSize)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.readBytes(File file, Consumer<byte[]> content, Consumer<IOException> exception)",0,1,0,0,3
"sneer.bricks.hardware.io.IO$Files.readString(File file, Consumer<String> content, Consumer<IOException> exception)",0,1,0,0,3
"sneer.bricks.hardware.io.files.atomic.dotpart.DotParts.concludeDotPart(File dotPartFile, File actualFile, long lastModified)",0,1,0,0,3
"sneer.bricks.hardware.io.log.exceptions.ExceptionLogger.log(Throwable throwable, String message, Object... messageInsets)",0,1,0,0,3
"sneer.bricks.hardware.io.log.stacktrace.StackTraceLogger.logStackTrace(Thread thread, String message, Object... insets)",0,1,0,0,3
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFileReceivedByPeer(Contact peer, String relativePath, Hash hashOfFile)",0,1,0,0,3
"sneer.bricks.identity.keys.signatures.Signatures.verifySignature(byte[] message, PublicKey publicKey, byte[] signature)",0,1,0,0,3
"sneer.bricks.network.computers.addresses.keeper.InternetAddressKeeper.put(Contact contact, String host, int port)",0,1,0,0,3
"sneer.bricks.network.computers.http.gateway.HttpGateway.get(String httpUrl, Consumer<byte[]> client, Consumer<IOException> exceptionHandler)",0,1,0,0,3
"sneer.bricks.network.computers.udp.receiver.ReceiverThreads.start(String threadName, UdpSocket socket, Consumer<DatagramPacket> receiver)",0,1,0,0,3
"sneer.bricks.network.social.attributes.Attributes.attributeValueFor(Contact contact, Class<? extends Attribute<T>> attribute, Class<T> valueType)",0,1,0,0,3
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOn(LightType type, String caption, String helpMessage)",0,1,0,0,3
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, FriendlyException e, int timeout)",0,1,0,0,3
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, String caption, String helpMessage)",0,1,0,0,3
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, String caption, Throwable t)",0,1,0,0,3
"sneer.bricks.pulp.reactive.collections.ListChange$Visitor.elementMoved(int index, int newIndex, T newElement)",0,1,0,0,3
"sneer.bricks.pulp.reactive.collections.ListChange$Visitor.elementReplaced(int index, T oldElement, T newElement)",0,1,0,0,3
"sneer.bricks.pulp.reactive.collections.listsorter.ListSorter.sort(CollectionSignal<T> input, Comparator<T> comparator, SignalChooser<T> chooser)",0,1,0,0,3
"sneer.bricks.pulp.streams.sequencer.Sequencers.createSequencerFor(short bufferSize, short maxGap, Consumer<T> consumer)",0,1,0,0,3
"sneer.bricks.skin.filechooser.FileChoosers.choose(int fileSelectionMode, File defaultFileOrDir, Consumer<File> consumer)",0,1,0,0,3
"sneer.bricks.skin.image.ImageFactory.getScaledInstance(Image image, int width, int height)",0,1,0,0,3
"sneer.bricks.skin.menu.MenuGroup.addAction(int positionInMenu, String caption, Runnable action)",0,1,0,0,3
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newCheckBox(Signal<Boolean> source, Consumer<Boolean> setter, Runnable cascadeRefreshOperations)",0,1,0,0,3
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newEditableLabel(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",0,1,0,0,3
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newTextField(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",0,1,0,0,3
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newTextPane(Signal<?> source, PickyConsumer<? super String> setter, NotificationPolicy notificationPolicy)",0,1,0,0,3
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.setBestBounds(Window window, Component baseComponent, int maxWidth)",0,1,0,0,3
"sneer.bricks.snapps.games.go.impl.gui.game.painters.BoardImagePainter.drawBoardAndSurroundings(Graphics graphics, Rectangle boardImageRectangle, final BufferedImage bufferImage)",0,1,0,0,3
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.play(int x, int y, GameStateContext gameStateContext)",0,1,0,0,3
"sneer.bricks.snapps.gis.map.MapRenderer.render(Consumer<Image> receiver, Location location, int zoom)",0,1,0,0,3
"sneer.bricks.software.bricks.interception.InterceptionEnhancer.realize(Class<?> targetBrick, Class<? extends Interceptor> interceptorBrick, ClassDefinition classDef)",0,1,0,0,3
"sneer.bricks.software.code.compilers.LanguageCompiler.compile(Collection<File> sourceFiles, File destination, File... classpath)",0,1,0,0,3
"sneer.bricks.software.code.metaclass.asm.AnnotationVisitor.visit(String typeSignature, boolean visible, AnnotationInfo annotationInfoImpl)",0,1,0,0,3
"sneer.bricks.software.diff.TextComparator.diff(String text1, String text2, int dualThreshold)",0,1,0,0,3
"sneer.snapps.games.drones.units.Units.create(int x, Direction direction, String name)",0,1,0,0,3
"basis.brickness.Nature.realize(Class<?> brick, ClassDefinition classDef)",0,1,0,0,2
"sneer.bricks.expression.files.map.FileMap.putFolder(String path, Hash hash)",0,1,0,0,2
"sneer.bricks.expression.files.map.FileMap.rename(String fromPath, String toPath)",0,1,0,0,2
"sneer.bricks.expression.files.map.visitors.FileMapGuide.guide(FolderStructureVisitor visitor, FolderContents contents)",0,1,0,0,2
"sneer.bricks.expression.files.tests.FileCopyTestBase.copyFolderFromFileMap(Hash hashOfContents, File destination)",0,1,0,0,2
"sneer.bricks.expression.files.transfer.FileTransfer.tryToSend(File file, Seal peer)",0,1,0,0,2
"sneer.bricks.expression.files.writer.folder.FolderContentsWriter.mergeOver(File existingFolder, FolderContents folderContents)",0,1,0,0,2
"sneer.bricks.expression.files.writer.folder.FolderContentsWriter.writeToFolder(File folder, FolderContents contents)",0,1,0,0,2
"sneer.bricks.expression.tuples.TupleSpace.addSubscription(Class<T> tupleType, Consumer<? super T> subscriber)",0,1,0,0,2
"sneer.bricks.expression.tuples.TupleSpace.keepChosen(Class<T> tupleType, Predicate<? super T> filter)",0,1,0,0,2
"sneer.bricks.expression.tuples.TupleSpace.keepNewest(Class<T> tupleType, Functor<? super T,Object> grouping)",0,1,0,0,2
"sneer.bricks.expression.tuples.keeper.TupleKeeper.keepChosen(Class<T> tupleType, Predicate<? super T> filter)",0,1,0,0,2
"sneer.bricks.expression.tuples.keeper.TupleKeeper.keepNewest(Class<T> tupleType, Functor<? super T,Object> grouping)",0,1,0,0,2
"sneer.bricks.hardware.clock.ticker.custom.CustomClockTicker.start(int millisToSleep, long timeIncrement)",0,1,0,0,2
"sneer.bricks.hardware.clock.timer.Timer.wakeUpEvery(long minimumPeriodInMillis, Runnable stepper)",0,1,0,0,2
"sneer.bricks.hardware.clock.timer.Timer.wakeUpInAtLeast(long millisFromNow, Runnable runnable)",0,1,0,0,2
"sneer.bricks.hardware.clock.timer.Timer.wakeUpNoEarlierThan(long timeToWakeUp, Runnable runnable)",0,1,0,0,2
"sneer.bricks.hardware.clock.timer.Timer.wakeUpNowAndEvery(long minimumPeriodInMillis, Runnable stepper)",0,1,0,0,2
"sneer.bricks.hardware.cpu.crypto.Crypto.newAES256Cipher(byte[] encryptKey, byte[] decryptKey)",0,1,0,0,2
"sneer.bricks.hardware.cpu.crypto.ecb.ECBCiphers.newAES256(byte[] encryptKey, byte[] decryptKey)",0,1,0,0,2
"sneer.bricks.hardware.cpu.crypto.ecdh.ECDHKeyAgreement.generateSecret(byte[] peerPublicKey, byte[] sessionKey)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Arrays.concat(byte[] a, byte[] b)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.abbreviate(String str, int maxWidth)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.chomp(String str, String suffix)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.join(Collection<?> collection, String separator)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.remove(String str, String remove)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.removeStart(String str, String remove)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.strip(String str, String stripChars)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.substringAfterLast(String str, String separator)",0,1,0,0,2
"sneer.bricks.hardware.cpu.lang.Lang$Strings.substringBeforeLast(String str, String separator)",0,1,0,0,2
"sneer.bricks.hardware.cpu.threads.Threads.startDaemon(String threadName, Closure closure)",0,1,0,0,2
"sneer.bricks.hardware.cpu.threads.Threads.startStepping(String threadName, Closure steppable)",0,1,0,0,2
"sneer.bricks.hardware.gui.images.Images.isSameImage(BufferedImage image1, BufferedImage image2)",0,1,0,0,2
"sneer.bricks.hardware.gui.trayicon.TrayIcon.messageBalloon(String title, String message)",0,1,0,0,2
"sneer.bricks.hardware.gui.trayicon.TrayIcons.initTrayIcon(URL userIcon, Signal<String> tooltip)",0,1,0,0,2
"sneer.bricks.hardware.gui.trayicon.TrayIcons.messageBalloon(String title, String message)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.assertSameContents(File file1, File file2)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.copyFile(File from, File to)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.copyFileToFolder(File srcFile, File destFolder)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.copyFolder(File srcFolder, File destFolder)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.fileSizeInBlocks(long fileSizeInBytes, int blockSize)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.readBytes(File file, Consumer<byte[]> content)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.readString(File file, Consumer<String> content)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.writeByteArrayToFile(File file, byte[] data)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Files.writeString(File file, String data)",0,1,0,0,2
"sneer.bricks.hardware.io.IO$Filter.accept(File folder, String name)",0,1,0,0,2
"sneer.bricks.hardware.io.files.atomic.dotpart.DotParts.newDotPartFor(File actualFile, String tempName)",0,1,0,0,2
"sneer.bricks.hardware.io.log.Logger.log(String message, Object... messageInsets)",0,1,0,0,2
"sneer.bricks.hardware.io.log.formatter.LogFormatter.format(String message, Object... messageInsets)",0,1,0,0,2
"sneer.bricks.hardware.io.log.worker.LogWorker.log(String message, Object... messageInsets)",0,1,0,0,2
"sneer.bricks.hardware.ram.collections.CollectionUtils.filter(Collection<T> inputCollection, Predicate<T> predicate)",0,1,0,0,2
"sneer.bricks.hardware.ram.collections.CollectionUtils.map(Collection<I> inputCollection, Functor<? super I,? extends O> functor)",0,1,0,0,2
"sneer.bricks.hardware.ram.graphs.DirectedGraph.removeEdge(T vertex, T successor)",0,1,0,0,2
"sneer.bricks.hardware.ram.iterables.Iterables.map(Iterable<A> source, Functor<A,B> functor)",0,1,0,0,2
"sneer.bricks.hardware.ram.reflection.visitation.ReflectionGuide.guide(ReflectionVisitor visitor, Object start)",0,1,0,0,2
"sneer.bricks.hardwaresharing.backup.Snackup.lendSpaceTo(Contact contact, int megaBytes)",0,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.lendSpaceTo(Contact contact, int megaBytes)",0,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFileForgottenByPeer(Contact peer, Hash hashOfFile)",0,1,0,0,2
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFileDeleted(Contact contact, String relativePath)",0,1,0,0,2
"sneer.bricks.hardwaresharing.dataspace.buckets.Bucket.write(long blockNumber, byte[] block)",0,1,0,0,2
"sneer.bricks.identity.seals.contacts.ContactSeals.put(String contactNickname, Seal seal)",0,1,0,0,2
"sneer.bricks.network.computers.channels.Channel.open(Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",0,1,0,0,2
"sneer.bricks.network.computers.channels.Channels.create(Contact contact, Priority priority)",0,1,0,0,2
"sneer.bricks.network.computers.channels.guaranteed.splitter.PacketSplitters.newSplitter(Producer<? extends ByteBuffer> largePacketSender, int maxPieceSize)",0,1,0,0,2
"sneer.bricks.network.computers.connections.ByteConnection.initCommunications(Producer<? extends ByteBuffer> sender, Consumer<? super ByteBuffer> receiver)",0,1,0,0,2
"sneer.bricks.network.computers.http.gateway.HttpGateway.get(String httpUrl, Consumer<byte[]> client)",0,1,0,0,2
"sneer.bricks.network.computers.http.server.HttpServer.start(int port, HttpHandler httpHandler)",0,1,0,0,2
"sneer.bricks.network.computers.tcp.TcpNetwork.openSocket(String remoteAddress, int remotePort)",0,1,0,0,2
"sneer.bricks.network.computers.tcp.connections.TcpConnectionManager.manageOutgoingSocket(ByteArraySocket socket, Contact contact)",0,1,0,0,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.marshalReplyTo(StunReply reply, ByteBuffer out)",0,1,0,0,2
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.marshalRequestTo(StunRequest request, ByteBuffer out)",0,1,0,0,2
"sneer.bricks.network.computers.udp.sightings.SightingKeeper.keep(Contact contact, InetSocketAddress sighting)",0,1,0,0,2
"sneer.bricks.network.social.attributes.Attributes.attributeSetterFor(Contact contact, Class<? extends Attribute<T>> attribute)",0,1,0,0,2
"sneer.bricks.network.social.navigation.ContactNavigator.searchContactsOf(Seal seal, Consumer<ContactOfContact> consumer)",0,1,0,0,2
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOnIfNecessary(Light light, FriendlyException e)",0,1,0,0,2
"sneer.bricks.pulp.datastore.DataStore.set(String key, String value)",0,1,0,0,2
"sneer.bricks.pulp.datastore.DataStore.set(String key, long value)",0,1,0,0,2
"sneer.bricks.pulp.httpclient.HttpClient.get(String url, Pair<String,String>... headers)",0,1,0,0,2
"sneer.bricks.pulp.notifiers.pulsers.PulseSenders.receive(Closure receiver, Pulser... multipleSources)",0,1,0,0,2
"sneer.bricks.pulp.propertystore.PropertyStore.set(String key, String value)",0,1,0,0,2
"sneer.bricks.pulp.reactive.SignalUtils.waitForElement(SetSignal<T> setSignal, Predicate<T> predicate)",0,1,0,0,2
"sneer.bricks.pulp.reactive.SignalUtils.waitForElement(SetSignal<T> setSignal, T expected)",0,1,0,0,2
"sneer.bricks.pulp.reactive.SignalUtils.waitForValue(Signal<T> signal, T expectedValue)",0,1,0,0,2
"sneer.bricks.pulp.reactive.Signals.adapt(Consumer<B> delegate, Functor<A,B> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.Signals.adapt(PickyConsumer<B> delegate, FunctorX<A,B,Refusal> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.Signals.adapt(Signal<A> input, Functor<A,B> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.Signals.adaptSignal(Signal<A> input, Functor<A,Signal<B>> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.CollectionSignals.adapt(CollectionSignal<A> input, Functor<A,B> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.CollectionSignals.adapt(ListSignal<A> input, Functor<A,B> functor)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.ListChange$Visitor.elementAdded(int index, T element)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.ListChange$Visitor.elementRemoved(int index, T element)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.ListRegister.addAt(int index, T element)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.ListRegister.move(int oldIndex, int newIndex)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.ListRegister.replace(int index, T newElement)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.MapRegister.put(K key, V value)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.MapValueChange$Visitor.entryAdded(K key, V value)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.MapValueChange$Visitor.entryRemoved(K key, V value)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.MapValueChange$Visitor.entryReplaced(K key, V value)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.listsorter.ListSorter.sort(CollectionSignal<T> input, Comparator<T> comparator)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.SetFilter.filter(SetSignal<T> input, Predicate<T> predicate)",0,1,0,0,2
"sneer.bricks.pulp.reactive.collections.setfilter.SetFilter.filter(SetSignal<T> input, ReactivePredicate<T> predicate)",0,1,0,0,2
"sneer.bricks.pulp.reactive.gates.buffers.assync.AssynchronousBuffers.createFor(Source<T> input, String threadName)",0,1,0,0,2
"sneer.bricks.pulp.reactive.gates.logic.LogicGates.and(Signal<Boolean> a, Signal<Boolean> b)",0,1,0,0,2
"sneer.bricks.pulp.reactive.gates.numbers.NumberGates.add(Signal<Integer> a, Signal<Integer> b)",0,1,0,0,2
"sneer.bricks.pulp.reactive.gates.strings.StringGates.concat(String separator, Signal<?>... objects)",0,1,0,0,2
"sneer.bricks.pulp.reactive.signalchooser.SignalChoosers.receive(CollectionSignal<T> input, ListOfSignalsReceiver<T> listOfSignalsReceiver)",0,1,0,0,2
"sneer.bricks.pulp.retrier.RetrierManager.startRetrier(int periodBetweenAttempts, Task task)",0,1,0,0,2
"sneer.bricks.pulp.streams.sequencer.Sequencer.produceInSequence(T element, short number)",0,1,0,0,2
"sneer.bricks.skin.filechooser.FileChoosers.choose(int fileSelectionMode, Consumer<File[]> consumer)",0,1,0,0,2
"sneer.bricks.skin.image.ImageFactory.copy(BufferedImage source, BufferedImage target)",0,1,0,0,2
"sneer.bricks.skin.image.ImageFactory.getIcon(Class<?> anchor, String relativeImagePath)",0,1,0,0,2
"sneer.bricks.skin.image.ImageFactory.getScaledInstance(Image image, double scale)",0,1,0,0,2
"sneer.bricks.skin.image.ImageFactory.toCompatibleImage(BufferedImage image, GraphicsConfiguration gc)",0,1,0,0,2
"sneer.bricks.skin.main.icons.Icons.load(Class<?> resourceBase, String resourceName)",0,1,0,0,2
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.setWindowOpacity(Window window, float opacity)",0,1,0,0,2
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.setWindowOpaque(Window window, boolean opaque)",0,1,0,0,2
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.setWindowShape(Window window, Shape shape)",0,1,0,0,2
"sneer.bricks.skin.menu.MenuGroup.addAction(int positionInMenu, Action action)",0,1,0,0,2
"sneer.bricks.skin.menu.MenuGroup.addGroup(int positionInMenu, MenuGroup<JMenu> group)",0,1,0,0,2
"sneer.bricks.skin.popuptrigger.PopupTrigger.listen(Component sorce, Consumer<MouseEvent> receiver)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newCheckBox(Signal<Boolean> source, Consumer<Boolean> setter)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newEditableLabel(Signal<?> source, PickyConsumer<? super String> setter)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newList(ListSignal<T> source, LabelProvider<T> labelProvider)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newListSignalModel(ListSignal<T> input, SignalChooser<T> chooser)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newTextField(Signal<?> source, PickyConsumer<? super String> setter)",0,1,0,0,2
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newTextPane(Signal<?> source, PickyConsumer<? super String> setter)",0,1,0,0,2
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.setBestBounds(Window window, Component baseComponent)",0,1,0,0,2
"sneer.bricks.snapps.chat.gui.panels.ChatPanels.newPanel(ListSignal<Message> messages, Consumer<String> messageSender)",0,1,0,0,2
"sneer.bricks.snapps.contacts.actions.ContactActionManager.addContactAction(ContactAction contactAction, boolean isDefaultAction)",0,1,0,0,2
"sneer.bricks.snapps.diff.text.gui.TextDiffPanel.compare(File file1, File file2)",0,1,0,0,2
"sneer.bricks.snapps.diff.text.gui.TextDiffPanel.compare(String text1, String text2)",0,1,0,0,2
"sneer.bricks.snapps.games.go.impl.TimerFactory.wakeUpEvery(int interval, Runnable scroller)",0,1,0,0,2
"sneer.bricks.snapps.games.go.impl.logic.BoardListener.updateScore(int _blackScore, int _whiteScore)",0,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.areLinked(BoardCell c1, BoardCell c2)",0,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.getCellAtOrNull(int x, int y)",0,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.DiceThrower.throwDiceAndReturnOutcome(int diceCountAttacking, int diceCountDefending)",0,1,0,0,2
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.play(int x, int y)",0,1,0,0,2
"sneer.bricks.snapps.gis.location.Locations.find(String address, Consumer<Location> receiver)",0,1,0,0,2
"sneer.bricks.snapps.gis.map.MapRenderer.render(Consumer<Image> receiver, Location location)",0,1,0,0,2
"sneer.bricks.software.bricks.compiler.Builder.build(File srcFolder, File binFolder)",0,1,0,0,2
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.BrickOfSomeInterceptingNature.add(int i, int j)",0,1,0,0,2
"sneer.bricks.software.bricks.statestore.BrickStateStore.writeObjectFor(Class<?> brick, Object object)",0,1,0,0,2
"sneer.bricks.software.code.compilers.LanguageRegistry.addLanguage(String fileExtension, LanguageCompiler compiler)",0,1,0,0,2
"sneer.bricks.software.code.jar.JarBuilder.add(String fileName, File classFile)",0,1,0,0,2
"sneer.bricks.software.code.jar.Jars.build(File jarFile, File binFolder)",0,1,0,0,2
"sneer.bricks.software.code.java.source.writer.JavaSourceWriter.write(String className, String sourceWithoutPackageDeclaration)",0,1,0,0,2
"sneer.bricks.software.code.metaclass.MetaClasses.metaClass(File rootFolder, File classFile)",0,1,0,0,2
"sneer.bricks.software.diff.TextComparator.diff(String text1, String text2)",0,1,0,0,2
"sneer.bricks.softwaresharing.BrickHistory.setChosenForExecution(BrickVersion version, boolean chosen)",0,1,0,0,2
"sneer.bricks.softwaresharing.demolisher.filestatus.FileStatusCalculator.calculate(byte[] contents, byte[] contentsInCurrentVersion)",0,1,0,0,2
"sneer.bricks.softwaresharing.git.Git.pull(Path fromRepo, Path toRepo)",0,1,0,0,2
"sneer.snapps.games.drones.units.Attributable.set(UnitAttribute attribute, int value)",0,1,0,0,2
"sneer.tests.SovereignCommunity.connect(SovereignParty a, SovereignParty b)",0,1,0,0,2
"sneer.tests.SovereignParty.giveNicknameTo(SovereignParty peer, String nickname)",0,1,0,0,2
"sneer.tests.SovereignParty.lendSpaceTo(String contactNick, int megaBytes)",0,1,0,0,2
"sneer.tests.SovereignParty.navigateAndWaitForName(String nicknamePath, String expectedName)",0,1,0,0,2
"sneer.tests.SovereignParty.waitForAvailableBrick(String brickName, String brickStatus)",0,1,0,0,2
"sneer.tests.adapters.SneerParty.start(String name, int port)",0,1,0,0,2
"basis.brickness.BrickSerializationMapper.classGiven(String serializationHandle)",0,1,0,0,1
"basis.brickness.BrickSerializationMapper.serializationHandleFor(Class<?> klass)",0,1,0,0,1
"basis.brickness.impl.EagerClassLoader.isEagerToLoad(String className)",0,1,0,0,1
"basis.environments.Environment.provide(Class<T> need)",0,1,0,0,1
"basis.lang.ConsumerX.consume(T value)",0,1,0,0,1
"basis.lang.FunctorX.evaluate(A value)",0,1,0,0,1
"basis.lang.Predicate.evaluate(T arg)",0,1,0,0,1
"dfcsantos.music.Music.setOperatingMode(OperatingMode operatingMode)",0,1,0,0,1
"dfcsantos.music.Music.setPlayingFolder(File selectedFolder)",0,1,0,0,1
"dfcsantos.music.Music.setTracksFolder(File selectedFolder)",0,1,0,0,1
"dfcsantos.music.ui.view.MusicView.setListener(MusicViewListener listener)",0,1,0,0,1
"dfcsantos.music.ui.view.MusicViewListener.playingFolderChosen(String folder)",0,1,0,0,1
"dfcsantos.tracks.Tracks.listMp3FilesFromFolder(File folder)",0,1,0,0,1
"dfcsantos.tracks.Tracks.listTracksFromFolder(File folder)",0,1,0,0,1
"dfcsantos.tracks.Tracks.newTrack(File trackFile)",0,1,0,0,1
"dfcsantos.tracks.exchange.TrackExchange.setOnOffSwitch(Signal<Boolean> onOffSwitch)",0,1,0,0,1
"dfcsantos.tracks.exchange.downloads.downloader.TrackDownloader.setOnOffSwitch(Signal<Boolean> onOffSwitch)",0,1,0,0,1
"dfcsantos.tracks.exchange.endorsements.TrackEndorser.setOnOffSwitch(Signal<Boolean> onOffSwitch)",0,1,0,0,1
"dfcsantos.tracks.execution.player.TrackContract.volumePercent(int level)",0,1,0,0,1
"dfcsantos.tracks.execution.playlist.Playlists.newRandomPlaylist(File tracksFolder)",0,1,0,0,1
"dfcsantos.tracks.execution.playlist.Playlists.newSequentialPlaylist(File tracksFolder)",0,1,0,0,1
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.setPlayingFolder(String playingFolder)",0,1,0,0,1
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.setTracksFolder(String sharedTracksFolder)",0,1,0,0,1
"dfcsantos.tracks.storage.rejected.RejectedTracksKeeper.isRejected(Hash hash)",0,1,0,0,1
"dfcsantos.tracks.storage.rejected.RejectedTracksKeeper.isWeakRejected(Hash hash)",0,1,0,0,1
"dfcsantos.tracks.storage.rejected.RejectedTracksKeeper.strongReject(Hash hash)",0,1,0,0,1
"dfcsantos.tracks.storage.rejected.RejectedTracksKeeper.weakReject(Hash hash)",0,1,0,0,1
"sneer.bricks.expression.files.client.downloads.Download.onFinished(Closure action)",0,1,0,0,1
"sneer.bricks.expression.files.client.downloads.gui.DownloadListPanels.produce(SetSignal<Download> downloads)",0,1,0,0,1
"sneer.bricks.expression.files.hasher.FolderContentsHasher.hash(FolderContents contents)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.dir(String path)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.getFiles(Hash hash)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.getFolderContents(Hash hash)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.getFolders(Hash hash)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.getHash(String path)",0,1,0,0,1
"sneer.bricks.expression.files.map.FileMap.getLastModified(String file)",0,1,0,0,1
"sneer.bricks.expression.files.map.visitors.FolderStructureVisitor.visitFileContents(byte[] fileContents)",0,1,0,0,1
"sneer.bricks.expression.files.transfer.FileTransfer.accept(FileTransferSugestion sugestion)",0,1,0,0,1
"sneer.bricks.expression.files.transfer.FileTransfer.registerStatusHandler(Consumer<FileTransferStatus> statusHandler)",0,1,0,0,1
"sneer.bricks.expression.files.transfer.FileTransfer.registerSugestionHandler(Consumer<FileTransferSugestion> sugestionHandler)",0,1,0,0,1
"sneer.bricks.expression.tuples.TupleSpace.add(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.TupleSpace.contains(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.TupleSpace.keep(Class<? extends Tuple> tupleType)",0,1,0,0,1
"sneer.bricks.expression.tuples.floodcache.FloodedTupleCache.add(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.floodcache.FloodedTupleCache.contains(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.keeper.TupleKeeper.contains(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.keeper.TupleKeeper.keepIfNecessary(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.keeper.TupleKeeper.keepType(Class<? extends Tuple> tupleType)",0,1,0,0,1
"sneer.bricks.expression.tuples.kept.KeptTuples.add(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.kept.KeptTuples.contains(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.kept.KeptTuples.remove(Tuple tuple)",0,1,0,0,1
"sneer.bricks.expression.tuples.testsupport.pump.TuplePumps.startPumpingWith(Environment otherEnviroment)",0,1,0,0,1
"sneer.bricks.hardware.clock.Clock.advanceTime(long deltaMillis)",0,1,0,0,1
"sneer.bricks.hardware.clock.Clock.advanceTimeTo(long absoluteTimeMillis)",0,1,0,0,1
"sneer.bricks.hardware.clock.ticker.custom.CustomClockTicker.start(int millisToSleep)",0,1,0,0,1
"sneer.bricks.hardware.clock.timer.Timer.sleepAtLeast(long millis)",0,1,0,0,1
"sneer.bricks.hardware.cpu.codec.Codec$Base64.encode(String text)",0,1,0,0,1
"sneer.bricks.hardware.cpu.codec.Codec$Base64.encode(final byte[] bytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.codec.Codec$Hex.decode(String hexString)",0,1,0,0,1
"sneer.bricks.hardware.cpu.codec.Codec$Hex.encode(byte[] bytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.digest(File file)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.digest(Path file)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.digest(byte[] input)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.newECDSAKeyPair(byte[] seed)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.unmarshalPublicKey(byte[] keyBytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Crypto.unmarshallHash(byte[] bytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Digester.digest(byte[] bytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.Digester.update(byte[] bytes)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.ECBCipher.decrypt(byte[] cipherText)",0,1,0,0,1
"sneer.bricks.hardware.cpu.crypto.ECBCipher.encrypt(byte[] plainText)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Arrays.reverse(Object[] array)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Serialization.serialize(Serializable obj)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Serialization.serialize(byte[] data)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Strings.deleteWhitespace(String str)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Strings.isEmpty(String str)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Strings.readLines(String input)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Strings.toByteArray(String string)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.Lang$Strings.trimToNull(String str)",0,1,0,0,1
"sneer.bricks.hardware.cpu.lang.contracts.Contracts.weakContractFor(Disposable service)",0,1,0,0,1
"sneer.bricks.hardware.cpu.threads.Threads.joinWithoutInterruptions(Thread thread)",0,1,0,0,1
"sneer.bricks.hardware.cpu.threads.Threads.sleepWithoutInterruptions(long milliseconds)",0,1,0,0,1
"sneer.bricks.hardware.cpu.threads.Threads.waitWithoutInterruptions(Object object)",0,1,0,0,1
"sneer.bricks.hardware.cpu.utils.consumers.parsers.integer.IntegerParsers.newIntegerParser(PickyConsumer<Integer> delegate)",0,1,0,0,1
"sneer.bricks.hardware.gui.guithread.GuiThread.invokeAndWait(Closure closure)",0,1,0,0,1
"sneer.bricks.hardware.gui.guithread.GuiThread.invokeAndWaitForWussies(Closure closure)",0,1,0,0,1
"sneer.bricks.hardware.gui.guithread.GuiThread.invokeLater(Closure closure)",0,1,0,0,1
"sneer.bricks.hardware.gui.images.Images.copy(BufferedImage original)",0,1,0,0,1
"sneer.bricks.hardware.gui.images.Images.getImage(URL url)",0,1,0,0,1
"sneer.bricks.hardware.gui.images.Images.pixels(BufferedImage image)",0,1,0,0,1
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.listenerFor(Environment expectedEnvironment)",0,1,0,0,1
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.run(Runnable runnable)",0,1,0,0,1
"sneer.bricks.hardware.gui.timebox.TimeboxedEventQueue.startQueueing(int timeboxDuration)",0,1,0,0,1
"sneer.bricks.hardware.gui.trayicon.TrayIcon.addAction(Action action)",0,1,0,0,1
"sneer.bricks.hardware.gui.trayicon.TrayIcon.setDefaultAction(Action defaultAction)",0,1,0,0,1
"sneer.bricks.hardware.gui.trayicon.TrayIcons.addActionListener(Closure closure)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$FileFilters.foldersAndExtensions(String... acceptedExtensions)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$FileFilters.name(String name)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$FileFilters.not(Filter filter)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$FileFilters.or(Filter[] filters)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$FileFilters.suffix(String sulfix)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Filenames.separatorsToUnix(String path)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.asFriendlySize(long fileSize)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.forceDelete(File fileOrFolder)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.forceDeleteOnExit(File fileOrFolder)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.forceMkdir(File directory)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.readBytes(File file)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.readString(File file)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Files.sizeOfFolder(File Folder)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Streams.readBytesAndClose(InputStream input)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Streams.toByteArray(InputStream input)",0,1,0,0,1
"sneer.bricks.hardware.io.IO$Streams.toString(InputStream input)",0,1,0,0,1
"sneer.bricks.hardware.io.IO.crash(Closeable closeable)",0,1,0,0,1
"sneer.bricks.hardware.io.files.atomic.dotpart.DotParts.deleteAllDotPartsRecursively(File folder)",0,1,0,0,1
"sneer.bricks.hardware.io.log.exceptions.ExceptionLogger.log(Throwable throwable)",0,1,0,0,1
"sneer.bricks.hardware.io.log.filter.LogFilter.isLogEntryAccepted(String message)",0,1,0,0,1
"sneer.bricks.hardware.io.log.stacktrace.StackTraceLogger.stackTrace(Thread thread)",0,1,0,0,1
"sneer.bricks.hardware.io.log.stacktrace.StackTraceLogger.stackTrace(Throwable throwable)",0,1,0,0,1
"sneer.bricks.hardware.io.log.worker.LogWorkerHolder.setWorker(LogWorker worker)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.isRegistered(Object object)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.marshal(Object object)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.marshal(Object[] array)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.register(Object object)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.requiresRegistration(Object object)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.unmarshal(Object[] array)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.map.PrevalenceMap.unmarshal(long id)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.Item.name(String value)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.addItem(String name)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.getItem(String name)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.removeItem(Item item)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.removerFor(Item item)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.set(String string)",0,1,0,0,1
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.PrevalentBrick2.addItemToSomePrevalentBrick(String name)",0,1,0,0,1
"sneer.bricks.hardware.ram.iterables.Iterables.sortByToString(Iterable<T> iterable)",0,1,0,0,1
"sneer.bricks.hardware.ram.iterables.Iterables.toList(Iterable<E> iterable)",0,1,0,0,1
"sneer.bricks.hardware.ram.iterables.Iterables.toList(Iterator<E> iterator)",0,1,0,0,1
"sneer.bricks.hardware.ram.ref.immutable.ImmutableReference.set(T value)",0,1,0,0,1
"sneer.bricks.hardware.ram.reflection.visitation.ReflectionVisitor.visit(Tour tour)",0,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFileDeleted(String relativePath)",0,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFileForgotten(Hash hash)",0,1,0,0,1
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFileReceived(Hash hash)",0,1,0,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.Bucket.read(long blockNumber)",0,1,0,0,1
"sneer.bricks.hardwaresharing.dataspace.buckets.Bucket.setSize(long sizeInBlocks)",0,1,0,0,1
"sneer.bricks.identity.keys.own.OwnKeys.generateKeyPair(byte[] seed)",0,1,0,0,1
"sneer.bricks.identity.seals.codec.SealCodec.formattedHexEncode(Seal seal)",0,1,0,0,1
"sneer.bricks.identity.seals.codec.SealCodec.hexDecode(String seal)",0,1,0,0,1
"sneer.bricks.identity.seals.codec.SealCodec.hexEncode(Seal seal)",0,1,0,0,1
"sneer.bricks.identity.seals.contacts.ContactSeals.contactGiven(Seal peersSeal)",0,1,0,0,1
"sneer.bricks.identity.seals.contacts.ContactSeals.nicknameGiven(Seal peersSeal)",0,1,0,0,1
"sneer.bricks.identity.seals.contacts.ContactSeals.sealGiven(Contact contact)",0,1,0,0,1
"sneer.bricks.identity.seals.contacts.ContactSeals.unmarshal(String seal)",0,1,0,0,1
"sneer.bricks.network.computers.addresses.contacts.ContactAddresses.given(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.addresses.keeper.InternetAddressKeeper.get(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.addresses.keeper.InternetAddressKeeper.remove(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.channels.Channels.accept(long id)",0,1,0,0,1
"sneer.bricks.network.computers.channels.Channels.createControl(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.channels.guaranteed.GuaranteedChannels.guarantee(Channel channel)",0,1,0,0,1
"sneer.bricks.network.computers.channels.guaranteed.splitter.PacketSplitters.newJoiner(Consumer<? super ByteBuffer> largePacketReceiver)",0,1,0,0,1
"sneer.bricks.network.computers.channels.largepackets.LargePacketChannels.enhance(Channel channel)",0,1,0,0,1
"sneer.bricks.network.computers.connections.ConnectionManager$Delegate.closeConnectionFor(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.connections.ConnectionManager$Delegate.connectionFor(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.connections.ConnectionManager.closeConnectionFor(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.connections.ConnectionManager.connectionFor(Contact contact)",0,1,0,0,1
"sneer.bricks.network.computers.http.server.HttpHandler.replyFor(String target)",0,1,0,0,1
"sneer.bricks.network.computers.tcp.ByteArraySocket.write(byte[] array)",0,1,0,0,1
"sneer.bricks.network.computers.tcp.TcpNetwork.openServerSocket(int port)",0,1,0,0,1
"sneer.bricks.network.computers.tcp.TcpNetwork.remoteIpFor(ByteArraySocket socket)",0,1,0,0,1
"sneer.bricks.network.computers.tcp.connections.TcpConnectionManager.manageIncomingSocket(ByteArraySocket socket)",0,1,0,0,1
"sneer.bricks.network.computers.udp.UdpNetwork$UdpSocket.receive(DatagramPacket packet)",0,1,0,0,1
"sneer.bricks.network.computers.udp.UdpNetwork$UdpSocket.send(DatagramPacket packet)",0,1,0,0,1
"sneer.bricks.network.computers.udp.UdpNetwork.openSocket(int portNumber)",0,1,0,0,1
"sneer.bricks.network.computers.udp.connections.UdpConnectionManager.handle(DatagramPacket packet)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.client.StunClient.handle(ByteBuffer stunPacket)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.client.StunClient.initSender(Consumer<DatagramPacket> sender)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.unmarshalReply(ByteBuffer in)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.unmarshalRequest(ByteBuffer in)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.StunServer.repliesFor(DatagramPacket received)",0,1,0,0,1
"sneer.bricks.network.computers.udp.holepuncher.server.StunServer.repliesForAlternate(DatagramPacket packet)",0,1,0,0,1
"sneer.bricks.network.computers.udp.sender.UdpSender.init(Consumer<DatagramPacket> sender)",0,1,0,0,1
"sneer.bricks.network.computers.udp.sender.UdpSender.send(DatagramPacket packet)",0,1,0,0,1
"sneer.bricks.network.computers.udp.sightings.SightingKeeper.sightingsOf(Contact contact)",0,1,0,0,1
"sneer.bricks.network.social.Contacts.contactGiven(String nickname)",0,1,0,0,1
"sneer.bricks.network.social.Contacts.isNicknameAlreadyUsed(String nickname)",0,1,0,0,1
"sneer.bricks.network.social.Contacts.nicknameSetterFor(Contact contact)",0,1,0,0,1
"sneer.bricks.network.social.Contacts.removeContact(Contact contact)",0,1,0,0,1
"sneer.bricks.network.social.attributes.Attributes.myAttributeSetter(Class<? extends Attribute<T>> attribute)",0,1,0,0,1
"sneer.bricks.network.social.attributes.Attributes.myAttributeValue(Class<? extends Attribute<T>> attribute)",0,1,0,0,1
"sneer.bricks.network.social.attributes.Attributes.registerAttribute(Class<? extends Attribute<?>> newAttribute)",0,1,0,0,1
"sneer.bricks.network.social.attributes.gui.AttributeListPanels.produce(CollectionSignal<AttributePanelElement> elements)",0,1,0,0,1
"sneer.bricks.network.social.heartbeat.stethoscope.Stethoscope.isAlive(Contact contact)",0,1,0,0,1
"sneer.bricks.pulp.bandwidth.BandwidthCounter.received(int byteCount)",0,1,0,0,1
"sneer.bricks.pulp.bandwidth.BandwidthCounter.sent(int byteCount)",0,1,0,0,1
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.received(int byteCount)",0,1,0,0,1
"sneer.bricks.pulp.bandwidth.impl.BandwidthCounterImpl.sent(int byteCount)",0,1,0,0,1
"sneer.bricks.pulp.blinkinglights.BlinkingLights.prepare(LightType type)",0,1,0,0,1
"sneer.bricks.pulp.blinkinglights.BlinkingLights.turnOffIfNecessary(Light light)",0,1,0,0,1
"sneer.bricks.pulp.blinkinglights.Light.addAction(Action action)",0,1,0,0,1
"sneer.bricks.pulp.datastore.DataStore.containsKey(String property)",0,1,0,0,1
"sneer.bricks.pulp.datastore.DataStore.get(String key)",0,1,0,0,1
"sneer.bricks.pulp.datastore.DataStore.getLong(String key)",0,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.Cache.contains(T object)",0,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.Cache.getByHandle(int handle)",0,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.Cache.handleFor(T object)",0,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.Cache.keep(T object)",0,1,0,0,1
"sneer.bricks.pulp.datastructures.cache.CacheFactory.createWithCapacity(int capacity)",0,1,0,0,1
"sneer.bricks.pulp.distribution.filtering.TupleFilterManager.block(Class<? extends Tuple> tupleType)",0,1,0,0,1
"sneer.bricks.pulp.distribution.filtering.TupleFilterManager.canBePublished(Tuple tuple)",0,1,0,0,1
"sneer.bricks.pulp.exceptionhandling.ExceptionHandler.shield(Runnable runnable)",0,1,0,0,1
"sneer.bricks.pulp.exceptionhandling.ExceptionHandler.shieldX(ClosureX<?> closure)",0,1,0,0,1
"sneer.bricks.pulp.inspector.BrickInspector.loadBrickInfo(File brickFolder)",0,1,0,0,1
"sneer.bricks.pulp.notifiers.Notifier.notifyReceivers(T something)",0,1,0,0,1
"sneer.bricks.pulp.notifiers.Source.addReceiver(Consumer<? super T> receiver)",0,1,0,0,1
"sneer.bricks.pulp.notifiers.pulsers.Pulser.addPulseReceiver(Closure pulseReceiver)",0,1,0,0,1
"sneer.bricks.pulp.propertystore.PropertyStore.containsKey(String property)",0,1,0,0,1
"sneer.bricks.pulp.propertystore.PropertyStore.get(String key)",0,1,0,0,1
"sneer.bricks.pulp.reactive.ReactivePredicate.evaluate(T value)",0,1,0,0,1
"sneer.bricks.pulp.reactive.Signals.constant(T value)",0,1,0,0,1
"sneer.bricks.pulp.reactive.Signals.newRegister(T initialValue)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListChange.accept(Visitor<T> visitor)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListRegister.add(T element)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListRegister.remove(T element)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListRegister.removeAt(int index)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListSignal.addListReceiver(Consumer<? super ListChange<T>> receiver)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListSignal.currentGet(int index)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.ListSignal.currentIndexOf(T element)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.MapRegister.remove(K key)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.MapSignal.currentGet(K key)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.MapValueChange.accept(Visitor<K,V> visitor)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetRegister.add(T elementAdded)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetRegister.addAll(Collection<? extends T> elements)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetRegister.addAll(U[] elements)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetRegister.change(CollectionChange<T> change)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetRegister.remove(U elementRemoved)",0,1,0,0,1
"sneer.bricks.pulp.reactive.collections.SetSignal.currentContains(T element)",0,1,0,0,1
"sneer.bricks.pulp.reactive.gates.logic.LogicGates.not(Signal<Boolean> b)",0,1,0,0,1
"sneer.bricks.pulp.reactive.gates.strings.StringGates.concat(Signal<?>... objects)",0,1,0,0,1
"sneer.bricks.pulp.reactive.signalchooser.ListOfSignalsReceiver.elementSignalChanged(T element)",0,1,0,0,1
"sneer.bricks.pulp.reactive.signalchooser.SignalChooser.signalsToReceiveFrom(T element)",0,1,0,0,1
"sneer.bricks.pulp.serialization.Serializer.deserialize(byte[] serializedValue)",0,1,0,0,1
"sneer.bricks.pulp.serialization.Serializer.serialize(Object object)",0,1,0,0,1
"sneer.bricks.skin.image.DefaultIcons.getImageUrl(String name)",0,1,0,0,1
"sneer.bricks.skin.image.ImageFactory.createBufferedImage(Image image)",0,1,0,0,1
"sneer.bricks.skin.image.ImageFactory.fromPngData(byte[] data)",0,1,0,0,1
"sneer.bricks.skin.image.ImageFactory.getIcon(File file)",0,1,0,0,1
"sneer.bricks.skin.image.ImageFactory.getIcon(String relativeImagePath)",0,1,0,0,1
"sneer.bricks.skin.image.ImageFactory.toPngData(BufferedImage img)",0,1,0,0,1
"sneer.bricks.skin.imgselector.ImageSelector.open(Consumer<Image> avatarSetter)",0,1,0,0,1
"sneer.bricks.skin.main.instrumentregistry.Instrument.init(InstrumentPanel container)",0,1,0,0,1
"sneer.bricks.skin.main.instrumentregistry.InstrumentRegistry.registerInstrument(Instrument instrument)",0,1,0,0,1
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.isTranslucencyCapable(GraphicsConfiguration gc)",0,1,0,0,1
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.isTranslucencySupported(Object kind)",0,1,0,0,1
"sneer.bricks.skin.menu.MenuFactory.createMenuGroup(String name)",0,1,0,0,1
"sneer.bricks.skin.widgets.autoscroll.AutoScroll.autoscroll(JScrollPane subject)",0,1,0,0,1
"sneer.bricks.skin.widgets.clipboard.Clipboard.setContent(String cotent)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.LabelProvider.imageFor(ELEMENT element)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.LabelProvider.textFor(ELEMENT element)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ListWidget.setSelectedElement(E element)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newFrame(Signal<?> title)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newImage(Signal<Image> source)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newLabel(Signal<?> source)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newList(ListSignal<T> source)",0,1,0,0,1
"sneer.bricks.skin.widgets.reactive.ReactiveWidgetFactory.newProgressBar(Signal<Integer> source)",0,1,0,0,1
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.runWhenBaseContainerIsReady(Runnable runnable)",0,1,0,0,1
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.setBestBounds(Window window)",0,1,0,0,1
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.setDefaultBaseComponent(Component baseComponent)",0,1,0,0,1
"sneer.bricks.snapps.chat.Chat.convert(ChatMessage message)",0,1,0,0,1
"sneer.bricks.snapps.contacts.actions.ContactActionManager.addContactAction(ContactAction action)",0,1,0,0,1
"sneer.bricks.snapps.contacts.actions.ContactActionManager.removeContactAction(String contactActionCaption)",0,1,0,0,1
"sneer.bricks.snapps.contacts.actions.ContactActionManager.setBaseComponent(Component baseComponent)",0,1,0,0,1
"sneer.bricks.snapps.contacts.gui.ContactImageProvider.imageFor(Contact contact)",0,1,0,0,1
"sneer.bricks.snapps.contacts.gui.ContactTextProvider.textFor(Contact contact)",0,1,0,0,1
"sneer.bricks.snapps.contacts.gui.ContactsGui.registerContactTextProvider(ContactTextProvider textProvider)",0,1,0,0,1
"sneer.bricks.snapps.contacts.gui.ContactsGui.setSelectedContact(Contact contact)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.Player.play(Move move)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.Player.setAdversary(Player player)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.increaseXOffset(final float xIncrease)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.increaseYOffset(final float yIncrease)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.setBoardImageSize(float boardImageSize)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.setXOffset(final float newXOffset)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.setYOffset(final float newYOffset)",0,1,0,0,1
"sneer.bricks.snapps.games.go.impl.logic.BoardListener.nextToPlay(StoneColor _nextToPlay)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.RemotePlayListener.play(RemotePlay play)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.gui.drawers.Drawer.draw(Graphics2D g2)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.areaAllCellsFilledByPlayer(Player currentPlaying)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.getBiggestLinkedCellCountForPlayer(Player player)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.remove(BoardCell cell)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.removingCellWillLeaveOrphans(BoardCell cell)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.attack(BoardCell other)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.setCell(Cell attackCellAfterAttack)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.setDiceCount(int newDiceCount)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.setOwner(Player player)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.AttackCallback.attackedWithOutcome(AttackOutcome attackOutcome)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.DiceLeftCallback.diceLeft(int diceLeft)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.pass(GameStateContext gameStateContext)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.addPlayListener(PlayListener playListener)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.setAttackCallback(AttackCallback attackCallback)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.setDiceLeftCallback(DiceLeftCallback diceLeftCallback)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.setSelectedCellCallback(SelectedCallback selectedCellCall)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.setState(GameState state)",0,1,0,0,1
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.SelectedCallback.selectedOrNull(BoardCell selectedCellOrNull)",0,1,0,0,1
"sneer.bricks.snapps.system.log.file.LogToFile.startWritingLogTo(File logFile)",0,1,0,0,1
"sneer.bricks.snapps.web.impl.ContactProvider.getSealForNickOrNull(String nickName)",0,1,0,0,1
"sneer.bricks.software.bricks.interception.Boxing.box(boolean value)",0,1,0,0,1
"sneer.bricks.software.bricks.interception.Boxing.box(int value)",0,1,0,0,1
"sneer.bricks.software.bricks.interception.Interceptor$Continuation.invoke(Object[] args)",0,1,0,0,1
"sneer.bricks.software.bricks.interception.fixtures.voidmethods.onearg.VoidMethodsRefArg.foo(String arg)",0,1,0,0,1
"sneer.bricks.software.bricks.repl.Evaluator.eval(String code)",0,1,0,0,1
"sneer.bricks.software.bricks.repl.Repl.newConsoleFor(Evaluator evaluator)",0,1,0,0,1
"sneer.bricks.software.bricks.repl.Repl.newEvaluatorFor(ReplLang lang)",0,1,0,0,1
"sneer.bricks.software.bricks.repl.ReplConsole.eval(String code)",0,1,0,0,1
"sneer.bricks.software.bricks.statestore.BrickStateStore.readObjectFor(Class<?> brick)",0,1,0,0,1
"sneer.bricks.software.code.classutils.ClassUtils.classFile(Class<?> clazz)",0,1,0,0,1
"sneer.bricks.software.code.classutils.ClassUtils.classpathRootFor(Class<?> clazz)",0,1,0,0,1
"sneer.bricks.software.code.classutils.ClassUtils.relativeClassFileName(Class<?> clazz)",0,1,0,0,1
"sneer.bricks.software.code.classutils.ClassUtils.relativeJavaFileName(Class<?> clazz)",0,1,0,0,1
"sneer.bricks.software.code.compilers.LanguageRegistry.languageByFileExtension(String fileExtension)",0,1,0,0,1
"sneer.bricks.software.code.jar.Jars.builder(File jarFile)",0,1,0,0,1
"sneer.bricks.software.code.java.source.writer.JavaSourceWriters.newInstance(File srcFolder)",0,1,0,0,1
"sneer.bricks.software.code.metaclass.MetaClasses.metaClass(Class<?> clazz)",0,1,0,0,1
"sneer.bricks.software.code.metaclass.asm.ASM.newClassReader(File classFile)",0,1,0,0,1
"sneer.bricks.software.code.metaclass.asm.ClassReader.accept(Visitor classVisitor)",0,1,0,0,1
"sneer.bricks.software.diff.TextComparator.semanticCleanup(List<TextBlock> iterator)",0,1,0,0,1
"sneer.bricks.software.diff.TextComparator.toPrettyHtml(List<TextBlock> blocksIterator)",0,1,0,0,1
"sneer.bricks.software.folderconfig.FolderConfig.storageFolderFor(Class<?> brick)",0,1,0,0,1
"sneer.bricks.software.folderconfig.FolderConfig.tmpFolderFor(Class<?> brick)",0,1,0,0,1
"sneer.bricks.software.timing.Animator.addTarget(TimingTarget target)",0,1,0,0,1
"sneer.bricks.software.timing.Animator.removeTarget(TimingTarget target)",0,1,0,0,1
"sneer.bricks.software.timing.TimingTarget.timingEvent(float fraction)",0,1,0,0,1
"sneer.bricks.softwaresharing.BrickVersion.file(String relativePath)",0,1,0,0,1
"sneer.bricks.softwaresharing.BrickVersion.setRejected(boolean rejected)",0,1,0,0,1
"sneer.bricks.softwaresharing.git.Git.isMergeRequired(Path repository)",0,1,0,0,1
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.wrapChild(int childIndex)",0,1,0,0,1
"sneer.snapps.games.drones.units.Unit.attack(Unit otherUnit)",0,1,0,0,1
"sneer.snapps.games.drones.units.Unit.collidesWith(Unit other)",0,1,0,0,1
"sneer.snapps.games.drones.units.Unit.receiveHit(int strength)",0,1,0,0,1
"sneer.tests.SovereignCommunity.crash(SovereignParty party)",0,1,0,0,1
"sneer.tests.SovereignCommunity.createParty(String name)",0,1,0,0,1
"sneer.tests.SovereignCommunity.newSession(SovereignParty party)",0,1,0,0,1
"sneer.tests.SovereignParty.copyToSourceFolder(File folderWithBricks)",0,1,0,0,1
"sneer.tests.SovereignParty.gitPullFrom(String contactNickname)",0,1,0,0,1
"sneer.tests.SovereignParty.isContact(String nickname)",0,1,0,0,1
"sneer.tests.SovereignParty.isOnline(String nickname)",0,1,0,0,1
"sneer.tests.SovereignParty.loadUnsharedBrick(String brickName)",0,1,0,0,1
"sneer.tests.SovereignParty.recoverFileFromBackup(String fileName)",0,1,0,0,1
"sneer.tests.SovereignParty.setFolderToSync(File folder)",0,1,0,0,1
"sneer.tests.SovereignParty.setOwnName(String newName)",0,1,0,0,1
"sneer.tests.SovereignParty.shout(String string)",0,1,0,0,1
"sneer.tests.SovereignParty.stageBricksForInstallation(String... brickNames)",0,1,0,0,1
"sneer.tests.SovereignParty.startHomePage(int port)",0,1,0,0,1
"sneer.tests.SovereignParty.waitForShouts(String shoutsExpected)",0,1,0,0,1
"sneer.tests.SovereignParty.waitUntilOnline(String nickname)",0,1,0,0,1
"sneer.tests.SovereignParty.wgetOrCry(String string)",0,1,0,0,1
"sneer.tests.adapters.SneerParty.acceptConnectionFrom(String otherName)",0,1,0,0,1
"sneer.tests.adapters.SneerParty.setSneerPort(int port)",0,1,0,0,1
"sneer.tests.adapters.SneerParty.startConnectingTo(SneerParty other)",0,1,0,0,1
"sneer.tests.adapters.SneerParty.waitUntilOnline(SneerParty other)",0,1,0,0,1
"sneer.tests.adapters.SneerPartyApiClassLoader.loadUnsharedBrickClass(String brickName)",0,1,0,0,1
"snype.whisper.skin.audio.kernel.Audio.tryToOpenPlaybackLine(AudioFormat audioFormat)",0,1,0,0,1
"snype.whisper.skin.audio.player.SoundPlayer.play(URL file)",0,1,0,0,1
"snype.whisper.speex.Decoder.decode(byte[][] frames)",0,1,0,0,1
"snype.whisper.speex.Encoder.processData(byte[] pcmBuffer)",0,1,0,0,1
"snype.whisper.speextuples.SpeexTuples2.addTalker(Seal who)",0,1,0,0,1
"snype.whisper.speextuples.SpeexTuples2.removeTalker(Seal who)",0,1,0,0,1
"basis.brickness.impl.BrickClassLoader.brickName()",0,1,0,0,0
"basis.brickness.impl.BrickClassLoader.kind()",0,1,0,0,0
"basis.brickness.impl.tests.fixtures.a.BrickA.classLoader()",0,1,0,0,0
"basis.brickness.impl.tests.fixtures.a.BrickA.instantiationEnvironment()",0,1,0,0,0
"basis.brickness.impl.tests.fixtures.a.BrickA.libsClassLoader()",0,1,0,0,0
"basis.brickness.impl.tests.fixtures.b.BrickB.classLoader()",0,1,0,0,0
"basis.brickness.impl.tests.fixtures.b.BrickB.libsClassLoader()",0,1,0,0,0
"basis.brickness.testsupport.tests.foo.FooBrick.bar()",0,1,0,0,0
"basis.lang.ClosureX.run()",0,1,0,0,0
"basis.lang.ProducerX.produce()",0,1,0,0,0
"dfcsantos.music.Music.activeDownloads()",0,1,0,0,0
"dfcsantos.music.Music.isPlaying()",0,1,0,0,0
"dfcsantos.music.Music.isTrackExchangeActive()",0,1,0,0,0
"dfcsantos.music.Music.meToo()",0,1,0,0,0
"dfcsantos.music.Music.meh()",0,1,0,0,0
"dfcsantos.music.Music.noWay()",0,1,0,0,0
"dfcsantos.music.Music.numberOfOwnTracks()",0,1,0,0,0
"dfcsantos.music.Music.numberOfPeerTracks()",0,1,0,0,0
"dfcsantos.music.Music.operatingMode()",0,1,0,0,0
"dfcsantos.music.Music.pauseResume()",0,1,0,0,0
"dfcsantos.music.Music.playingFolder()",0,1,0,0,0
"dfcsantos.music.Music.playingTrack()",0,1,0,0,0
"dfcsantos.music.Music.playingTrackTime()",0,1,0,0,0
"dfcsantos.music.Music.shuffle()",0,1,0,0,0
"dfcsantos.music.Music.skip()",0,1,0,0,0
"dfcsantos.music.Music.stop()",0,1,0,0,0
"dfcsantos.music.Music.tracksFolder()",0,1,0,0,0
"dfcsantos.music.Music.volumePercent()",0,1,0,0,0
"dfcsantos.music.store.MusicStore.isExchangeTracksOn()",0,1,0,0,0
"dfcsantos.music.store.MusicStore.shuffle()",0,1,0,0,0
"dfcsantos.music.store.MusicStore.volumePercent()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.choiceSelected()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.chooseTracksFolder()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.enableMeToo()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.enableTrackDownloaded()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.isPlaying()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.isTrackExchangeActive()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.meToo()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.meh()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.noWay()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.pauseResume()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.playingFolder()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.playingFolderChoices()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.playingInboxFolder()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.playingTrackName()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.playingTrackTime()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.shuffle()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.skip()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.stop()",0,1,0,0,0
"dfcsantos.music.ui.view.MusicViewListener.volumePercent()",0,1,0,0,0
"dfcsantos.tracks.Track.file()",0,1,0,0,0
"dfcsantos.tracks.Track.name()",0,1,0,0,0
"dfcsantos.tracks.exchange.downloads.counter.TrackDownloadCounter.count()",0,1,0,0,0
"dfcsantos.tracks.exchange.downloads.counter.TrackDownloadCounter.refresh()",0,1,0,0,0
"dfcsantos.tracks.exchange.downloads.downloader.TrackDownloader.runningDownloads()",0,1,0,0,0
"dfcsantos.tracks.execution.player.TrackContract.trackElapsedTime()",0,1,0,0,0
"dfcsantos.tracks.execution.playlist.Playlist.nextTrack()",0,1,0,0,0
"dfcsantos.tracks.execution.playlist.Playlist.numberOfTracks()",0,1,0,0,0
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.inboxFolder()",0,1,0,0,0
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.noveltiesFolder()",0,1,0,0,0
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.playingFolder()",0,1,0,0,0
"dfcsantos.tracks.storage.folder.TracksFolderKeeper.tracksFolder()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.file()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.finished()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.hasFinishedSuccessfully()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.hash()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.progress()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.source()",0,1,0,0,0
"sneer.bricks.expression.files.client.downloads.Download.waitTillFinished()",0,1,0,0,0
"sneer.bricks.expression.files.map.visitors.FolderStructureVisitor.enterFolder()",0,1,0,0,0
"sneer.bricks.expression.files.map.visitors.FolderStructureVisitor.leaveFolder()",0,1,0,0,0
"sneer.bricks.expression.tuples.dispatcher.TupleDispatcher.dispatchCounterDecrement()",0,1,0,0,0
"sneer.bricks.expression.tuples.dispatcher.TupleDispatcher.dispatchCounterIncrement()",0,1,0,0,0
"sneer.bricks.expression.tuples.dispatcher.TupleDispatcher.waitForAllDispatchingToFinish()",0,1,0,0,0
"sneer.bricks.expression.tuples.floodcache.FloodedTupleCache.maxSize()",0,1,0,0,0
"sneer.bricks.expression.tuples.keeper.TupleKeeper.garbageCollect()",0,1,0,0,0
"sneer.bricks.expression.tuples.keeper.TupleKeeper.keptTuples()",0,1,0,0,0
"sneer.bricks.expression.tuples.kept.KeptTuples.all()",0,1,0,0,0
"sneer.bricks.expression.tuples.testsupport.pump.TuplePump.waitForAllDispatchingToFinish()",0,1,0,0,0
"sneer.bricks.hardware.clock.Clock.time()",0,1,0,0,0
"sneer.bricks.hardware.cpu.codec.Codec.base64()",0,1,0,0,0
"sneer.bricks.hardware.cpu.codec.Codec.hex()",0,1,0,0,0
"sneer.bricks.hardware.cpu.codec.impl.CodecImpl.base64()",0,1,0,0,0
"sneer.bricks.hardware.cpu.codec.impl.CodecImpl.hex()",0,1,0,0,0
"sneer.bricks.hardware.cpu.crypto.Crypto.getSHA512WithECDSA()",0,1,0,0,0
"sneer.bricks.hardware.cpu.crypto.Crypto.newDigester()",0,1,0,0,0
"sneer.bricks.hardware.cpu.crypto.Digester.digest()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.Lang$SystemUtils.isOsLinux()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.Lang.arrays()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.Lang.serialization()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.Lang.strings()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.Lang.system()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.contracts.Disposable.dispose()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.impl.LangImpl.arrays()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.impl.LangImpl.serialization()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.impl.LangImpl.strings()",0,1,0,0,0
"sneer.bricks.hardware.cpu.lang.impl.LangImpl.system()",0,1,0,0,0
"sneer.bricks.hardware.cpu.threads.Threads.crashAllThreads()",0,1,0,0,0
"sneer.bricks.hardware.cpu.threads.Threads.crashed()",0,1,0,0,0
"sneer.bricks.hardware.cpu.threads.throttle.CpuThrottle.maxCpuUsage()",0,1,0,0,0
"sneer.bricks.hardware.gui.actions.Action.caption()",0,1,0,0,0
"sneer.bricks.hardware.gui.actions.Action.run()",0,1,0,0,0
"sneer.bricks.hardware.gui.guithread.GuiThread.assertInGuiThread()",0,1,0,0,0
"sneer.bricks.hardware.gui.guithread.GuiThread.assertNotInGuiThread()",0,1,0,0,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.complexMethodWithVariablesAndFinallyBlock()",0,1,0,0,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.constructorThread()",0,1,0,0,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.currentEnvironment()",0,1,0,0,0
"sneer.bricks.hardware.gui.nature.tests.fixtures.SomeGuiBrick.currentThread()",0,1,0,0,0
"sneer.bricks.hardware.gui.timebox.TimeboxedEventQueue.stopQueueing()",0,1,0,0,0
"sneer.bricks.hardware.gui.trayicon.TrayIcon.clearActions()",0,1,0,0,0
"sneer.bricks.hardware.gui.trayicon.TrayIcon.dispose()",0,1,0,0,0
"sneer.bricks.hardware.io.IO$FileFilters.any()",0,1,0,0,0
"sneer.bricks.hardware.io.IO$FileFilters.none()",0,1,0,0,0
"sneer.bricks.hardware.io.IO.fileFilters()",0,1,0,0,0
"sneer.bricks.hardware.io.IO.filenames()",0,1,0,0,0
"sneer.bricks.hardware.io.IO.files()",0,1,0,0,0
"sneer.bricks.hardware.io.IO.streams()",0,1,0,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.DotParts.dotPartExclusionFilter()",0,1,0,0,0
"sneer.bricks.hardware.io.files.atomic.dotpart.DotParts.dotPartExtention()",0,1,0,0,0
"sneer.bricks.hardware.io.log.exceptions.robust.RobustExceptionLogging.isOn()",0,1,0,0,0
"sneer.bricks.hardware.io.log.exceptions.robust.RobustExceptionLogging.turnOn()",0,1,0,0,0
"sneer.bricks.hardware.io.log.filter.LogFilter.whiteListEntries()",0,1,0,0,0
"sneer.bricks.hardware.io.log.notifier.LogNotifier.loggedMessages()",0,1,0,0,0
"sneer.bricks.hardware.io.log.stacktrace.StackTraceLogger.logStackTrace()",0,1,0,0,0
"sneer.bricks.hardware.io.log.stacktrace.StackTraceLogger.stackTrace()",0,1,0,0,0
"sneer.bricks.hardware.io.log.worker.LogWorkerHolder.worker()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.flag.PrevalenceFlag.isInsidePrevalence()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.Item.name()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.get()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.itemAdder_Idempotent()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.itemAdder_Idempotent_Transitive()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.SomePrevalentBrick.itemCount()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.PrevalentBrick2.recallItemCount()",0,1,0,0,0
"sneer.bricks.hardware.io.prevalence.nature.tests.fixtures.brick2.PrevalentBrick2.rememberItemCount()",0,1,0,0,0
"sneer.bricks.hardware.ram.graphs.Graphs.createDirectedGraph()",0,1,0,0,0
"sneer.bricks.hardware.ram.meter.MemoryMeter.availableMBs()",0,1,0,0,0
"sneer.bricks.hardware.ram.meter.MemoryMeter.maxMBs()",0,1,0,0,0
"sneer.bricks.hardware.ram.meter.MemoryMeter.usedMBs()",0,1,0,0,0
"sneer.bricks.hardware.ram.meter.MemoryMeter.usedMBsPeak()",0,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.ImmutableReference.get()",0,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.ImmutableReference.isAlreadySet()",0,1,0,0,0
"sneer.bricks.hardware.ram.ref.immutable.impl.ImmutableReferenceImpl.ImmutableReferenceImpl()",0,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.Tour.direction()",0,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.Tour.target()",0,1,0,0,0
"sneer.bricks.hardware.ram.reflection.visitation.Tour.tillHere()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.Snackup.folderToSync()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.Snackup.folderToSyncSetter()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.Snackup.isSynced()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFilesConsideredImportant()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.ownFilesRedundancy()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFilesToBeDownloaded()",0,1,0,0,0
"sneer.bricks.hardwaresharing.backup.kernel.SnackupKernel.peerFilesToForget()",0,1,0,0,0
"sneer.bricks.hardwaresharing.dataspace.buckets.Bucket.crash()",0,1,0,0,0
"sneer.bricks.identity.keys.own.OwnKeys.ownPrivateKey()",0,1,0,0,0
"sneer.bricks.identity.keys.own.OwnKeys.ownPublicKey()",0,1,0,0,0
"sneer.bricks.identity.seals.OwnSeal.get()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.contacts.tcp.ContactInternetAddresses.addresses()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.InternetAddress.contact()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.InternetAddress.host()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.InternetAddress.port()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.keeper.InternetAddressKeeper.addresses()",0,1,0,0,0
"sneer.bricks.network.computers.addresses.own.ips.OwnIps.get()",0,1,0,0,0
"sneer.bricks.network.computers.channels.Channel.id()",0,1,0,0,0
"sneer.bricks.network.computers.channels.Channel.isUp()",0,1,0,0,0
"sneer.bricks.network.computers.channels.Channel.maxPacketSize()",0,1,0,0,0
"sneer.bricks.network.computers.connections.ByteConnection.isConnected()",0,1,0,0,0
"sneer.bricks.network.computers.connections.Call.callerName()",0,1,0,0,0
"sneer.bricks.network.computers.connections.Call.callerSeal()",0,1,0,0,0
"sneer.bricks.network.computers.connections.ConnectionManager$Delegate.unknownCallers()",0,1,0,0,0
"sneer.bricks.network.computers.connections.ConnectionManager.unknownCallers()",0,1,0,0,0
"sneer.bricks.network.computers.tcp.ByteArrayServerSocket.accept()",0,1,0,0,0
"sneer.bricks.network.computers.tcp.ByteArrayServerSocket.crash()",0,1,0,0,0
"sneer.bricks.network.computers.tcp.ByteArraySocket.close()",0,1,0,0,0
"sneer.bricks.network.computers.tcp.ByteArraySocket.read()",0,1,0,0,0
"sneer.bricks.network.computers.tcp.accepter.SocketAccepter.lastAcceptedSocket()",0,1,0,0,0
"sneer.bricks.network.computers.udp.UdpNetwork$UdpSocket.crash()",0,1,0,0,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.serverHost()",0,1,0,0,0
"sneer.bricks.network.computers.udp.holepuncher.protocol.StunProtocol.serverPort()",0,1,0,0,0
"sneer.bricks.network.computers.udp.server.UdpServer.crash()",0,1,0,0,0
"sneer.bricks.network.social.Contact.nickname()",0,1,0,0,0
"sneer.bricks.network.social.Contacts.contacts()",0,1,0,0,0
"sneer.bricks.network.social.attributes.Attributes.all()",0,1,0,0,0
"sneer.bricks.network.social.attributes.gui.AttributePanelElement.name()",0,1,0,0,0
"sneer.bricks.network.social.attributes.gui.AttributePanelElement.value()",0,1,0,0,0
"sneer.bricks.network.social.attributes.gui.AttributePanelElement.valueSetter()",0,1,0,0,0
"sneer.bricks.pulp.bandwidth.BandwidthCounter.downloadSpeedInKBperSecond()",0,1,0,0,0
"sneer.bricks.pulp.bandwidth.BandwidthCounter.uploadSpeedInKBperSecond()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.BlinkingLights.lights()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.ConfirmationLight.sayNo()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.ConfirmationLight.sayYes()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.actions()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.caption()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.error()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.helpMessage()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.isOn()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.Light.type()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.error()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.helpMessage()",0,1,0,0,0
"sneer.bricks.pulp.blinkinglights.impl.LightImpl.type()",0,1,0,0,0
"sneer.bricks.pulp.dyndns.client.DynDnsClient.dummyMethodSoThisSnappIsntStarted()",0,1,0,0,0
"sneer.bricks.pulp.dyndns.ownaccount.DynDnsAccountKeeper.accountSetter()",0,1,0,0,0
"sneer.bricks.pulp.dyndns.ownaccount.DynDnsAccountKeeper.ownAccount()",0,1,0,0,0
"sneer.bricks.pulp.dyndns.ownip.OwnIpDiscoverer.ownIp()",0,1,0,0,0
"sneer.bricks.pulp.inspector.BrickInfo.impl()",0,1,0,0,0
"sneer.bricks.pulp.inspector.BrickInfo.interfaceName()",0,1,0,0,0
"sneer.bricks.pulp.notifiers.Notifier.output()",0,1,0,0,0
"sneer.bricks.pulp.notifiers.Notifiers.newInstance()",0,1,0,0,0
"sneer.bricks.pulp.notifiers.pulsers.PulseSender.output()",0,1,0,0,0
"sneer.bricks.pulp.notifiers.pulsers.PulseSenders.newInstance()",0,1,0,0,0
"sneer.bricks.pulp.reactive.Register.output()",0,1,0,0,0
"sneer.bricks.pulp.reactive.Register.setter()",0,1,0,0,0
"sneer.bricks.pulp.reactive.Signal.currentValue()",0,1,0,0,0
"sneer.bricks.pulp.reactive.Signals.sink()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionChange.elementsAdded()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionChange.elementsRemoved()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionRegister.output()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionSignal.currentElements()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionSignal.size()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionSignals.newListRegister()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionSignals.newMapRegister()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.CollectionSignals.newSetRegister()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.ListRegister.adder()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.ListRegister.remover()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.MapRegister.output()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.MapSignal.keys()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.SetRegister.clear()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.currentElementsAsCollectionChange()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.impl.AbstractListSignal.currentElementsAsListChange()",0,1,0,0,0
"sneer.bricks.pulp.reactive.collections.listsorter.impl.ReactiveSorter.signalChooser()",0,1,0,0,0
"sneer.bricks.pulp.reactive.signalchooser.ListOfSignalsReceiver.signalChooser()",0,1,0,0,0
"sneer.bricks.pulp.retrier.Retrier.giveUpIfStillTrying()",0,1,0,0,0
"sneer.bricks.pulp.retrier.Task.execute()",0,1,0,0,0
"sneer.bricks.pulp.serialization.fixtures.brickwithlib.BrickToBeSerialized.libClassLoader()",0,1,0,0,0
"sneer.bricks.skin.image.ImageFactory.getDefaultConfiguration()",0,1,0,0,0
"sneer.bricks.skin.imgselector.impl.Picture.Picture()",0,1,0,0,0
"sneer.bricks.skin.main.dashboard.InstrumentPanel.actions()",0,1,0,0,0
"sneer.bricks.skin.main.dashboard.InstrumentPanel.contentPane()",0,1,0,0,0
"sneer.bricks.skin.main.instrumentregistry.Instrument.defaultHeight()",0,1,0,0,0
"sneer.bricks.skin.main.instrumentregistry.Instrument.title()",0,1,0,0,0
"sneer.bricks.skin.main.instrumentregistry.InstrumentRegistry.installedInstruments()",0,1,0,0,0
"sneer.bricks.skin.main.menu.MainMenu.getMenuBarWidget()",0,1,0,0,0
"sneer.bricks.skin.main.menu.MainMenu.menu()",0,1,0,0,0
"sneer.bricks.skin.main.title.ProcessTitle.title()",0,1,0,0,0
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.perpixelTranslucent()",0,1,0,0,0
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.perpixelTransparent()",0,1,0,0,0
"sneer.bricks.skin.main.translucentsupport.TranslucentSupport.translucent()",0,1,0,0,0
"sneer.bricks.skin.menu.MenuFactory.createMenuBar()",0,1,0,0,0
"sneer.bricks.skin.menu.MenuFactory.createPopupMenu()",0,1,0,0,0
"sneer.bricks.skin.menu.MenuGroup.getWidget()",0,1,0,0,0
"sneer.bricks.skin.rooms.ActiveRoomKeeper.room()",0,1,0,0,0
"sneer.bricks.skin.rooms.ActiveRoomKeeper.setter()",0,1,0,0,0
"sneer.bricks.skin.widgets.clipboard.Clipboard.getContent()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ComponentWidget.getComponent()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ImageWidget.output()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ImageWidget.setter()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ListWidget.clearSelection()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ListWidget.selectedElement()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.TextWidget.getWidgets()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.TextWidget.output()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.TextWidget.setter()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ToggleButtonWidget.output()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.ToggleButtonWidget.setter()",0,1,0,0,0
"sneer.bricks.skin.widgets.reactive.Widget.getMainWidget()",0,1,0,0,0
"sneer.bricks.skin.windowboundssetter.WindowBoundsSetter.unusedArea()",0,1,0,0,0
"sneer.bricks.snapps.chat.gui.panels.Message.author()",0,1,0,0,0
"sneer.bricks.snapps.chat.gui.panels.Message.avatar()",0,1,0,0,0
"sneer.bricks.snapps.chat.gui.panels.Message.isByMe()",0,1,0,0,0
"sneer.bricks.snapps.chat.gui.panels.Message.text()",0,1,0,0,0
"sneer.bricks.snapps.chat.gui.panels.Message.time()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactAction.isEnabled()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactAction.isVisible()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactAction.positionInMenu()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactActionManager.actions()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactActionManager.baseComponent()",0,1,0,0,0
"sneer.bricks.snapps.contacts.actions.ContactActionManager.defaultAction()",0,1,0,0,0
"sneer.bricks.snapps.contacts.gui.ContactTextProvider.position()",0,1,0,0,0
"sneer.bricks.snapps.contacts.gui.ContactsGui.selectedContact()",0,1,0,0,0
"sneer.bricks.snapps.contacts.gui.info.ContactInfoWindow.open()",0,1,0,0,0
"sneer.bricks.snapps.diff.text.gui.TextDiffPanel.component()",0,1,0,0,0
"sneer.bricks.snapps.diff.text.gui.TextDiffPanels.newPanel()",0,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.getXOffset()",0,1,0,0,0
"sneer.bricks.snapps.games.go.impl.gui.game.Offset.getYOffset()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.getBoardCells()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.getCellCount()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Board.isFilled()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.addDie()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.canAddDie()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.getCell()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.getDiceCount()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.getOwner()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.BoardCell.getPolygon()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.Dice.roll()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.canPass()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.getPhase()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.getPhaseName()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameState.getWhoIsPlaying()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.canPass()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.getBoardCells()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.getPhase()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.getPhaseName()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.getWhoIsPlaying()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.GameStateContext.pass()",0,1,0,0,0
"sneer.bricks.snapps.games.sliceWars.impl.logic.gameStates.PlayListener.played()",0,1,0,0,0
"sneer.bricks.snapps.gis.location.Location.latitude()",0,1,0,0,0
"sneer.bricks.snapps.gis.location.Location.longitude()",0,1,0,0,0
"sneer.bricks.snapps.web.Web.crash()",0,1,0,0,0
"sneer.bricks.snapps.wind.Wind.megaphone()",0,1,0,0,0
"sneer.bricks.snapps.wind.Wind.shoutsHeard()",0,1,0,0,0
"sneer.bricks.snapps.wind.gui.impl.WindGuiImpl.defaultHeight()",0,1,0,0,0
"sneer.bricks.snapps.wind.gui.impl.WindGuiImpl.title()",0,1,0,0,0
"sneer.bricks.software.bricks.finder.BrickFinder.findBricks()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.brickwithlib.BrickWithLib.fooBar()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.BrickOfSomeInterceptingNature.intraBrickMethod()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.BrickOfSomeInterceptingNature.newGreeter()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.combinedmethods.Greeter.hello()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.primitivemethods.noargs.PrimitiveMethodNoArgs.baz()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.refmethods.noargs.RefMethodsNoArgs.bar()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.staticinitializer.StaticInitializer.foo()",0,1,0,0,0
"sneer.bricks.software.bricks.interception.fixtures.voidmethods.noargs.VoidMethodsNoArgs.foo()",0,1,0,0,0
"sneer.bricks.software.bricks.repl.Evaluator.reset()",0,1,0,0,0
"sneer.bricks.software.bricks.repl.gui.ReplWindow.open()",0,1,0,0,0
"sneer.bricks.software.bricks.snapploader.SnappLoader.loadingFinished()",0,1,0,0,0
"sneer.bricks.software.bricks.snapploader.SnappLoader.wereThrowablesCaughtWhenLoadingSnapps()",0,1,0,0,0
"sneer.bricks.software.code.compilers.CompilationError.fileName()",0,1,0,0,0
"sneer.bricks.software.code.compilers.CompilationError.lineNumber()",0,1,0,0,0
"sneer.bricks.software.code.compilers.CompilationError.message()",0,1,0,0,0
"sneer.bricks.software.code.compilers.Language.compiler()",0,1,0,0,0
"sneer.bricks.software.code.compilers.Language.fileExtension()",0,1,0,0,0
"sneer.bricks.software.code.compilers.LanguageRegistry.languages()",0,1,0,0,0
"sneer.bricks.software.code.compilers.Result.errorString()",0,1,0,0,0
"sneer.bricks.software.code.compilers.Result.errors()",0,1,0,0,0
"sneer.bricks.software.code.compilers.Result.success()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.MetaClass.bytes()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.MetaClass.classFile()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.MetaClass.getName()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.MetaClass.getPackageName()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.MetaClass.isInterface()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.asm.ASM$Opcodes.accInterface()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.asm.ASM.opcodes()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.asm.impl.ASMImpl$OpcodesImpl.accInterface()",0,1,0,0,0
"sneer.bricks.software.code.metaclass.impl.MetaClassSupport.parse()",0,1,0,0,0
"sneer.bricks.software.diff.TextComparator$TextBlock.content()",0,1,0,0,0
"sneer.bricks.software.diff.TextComparator$TextBlock.type()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.binFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.gitFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.ownBinFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.ownSrcFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.srcFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.stageFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.storageFolder()",0,1,0,0,0
"sneer.bricks.software.folderconfig.FolderConfig.tmpFolder()",0,1,0,0,0
"sneer.bricks.software.timing.Animator.pause()",0,1,0,0,0
"sneer.bricks.software.timing.Animator.playBackward()",0,1,0,0,0
"sneer.bricks.software.timing.Animator.playForward()",0,1,0,0,0
"sneer.bricks.software.timing.Animator.resume()",0,1,0,0,0
"sneer.bricks.software.timing.Animator.stop()",0,1,0,0,0
"sneer.bricks.software.timing.TimingFramework.property()",0,1,0,0,0
"sneer.bricks.software.timing.TimingFramework.windowOpacity()",0,1,0,0,0
"sneer.bricks.software.timing.TimingTarget.begin()",0,1,0,0,0
"sneer.bricks.software.timing.TimingTarget.end()",0,1,0,0,0
"sneer.bricks.software.timing.TimingTarget.repeat()",0,1,0,0,0
"sneer.bricks.software.timing.impl.TimingFrameworkImpl.property()",0,1,0,0,0
"sneer.bricks.software.timing.impl.TimingFrameworkImpl.windowOpacity()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickHistory.getVersionChosenForInstallation()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickHistory.isSnapp()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickHistory.name()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickHistory.status()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickHistory.versions()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickSpace.availableBricks()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickSpace.newBuildingFound()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.files()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.hash()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.isChosenForExecution()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.publicationDate()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.status()",0,1,0,0,0
"sneer.bricks.softwaresharing.BrickVersion.users()",0,1,0,0,0
"sneer.bricks.softwaresharing.FileVersion.contents()",0,1,0,0,0
"sneer.bricks.softwaresharing.FileVersion.lastModified()",0,1,0,0,0
"sneer.bricks.softwaresharing.FileVersion.relativePath()",0,1,0,0,0
"sneer.bricks.softwaresharing.FileVersion.status()",0,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.files()",0,1,0,0,0
"sneer.bricks.softwaresharing.demolisher.impl.BrickVersionImpl.isChosenForExecution()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.BrickVersionTreeNode.toString()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.getIcon()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.RootTreeNode.toString()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.getIcon()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.listChildren()",0,1,0,0,0
"sneer.bricks.softwaresharing.gui.impl.StringTreeNode.toString()",0,1,0,0,0
"sneer.bricks.softwaresharing.publisher.BuildingPublisher.publishMyOwnBuilding()",0,1,0,0,0
"sneer.bricks.softwaresharing.stager.BrickStager.stageBricksForInstallation()",0,1,0,0,0
"sneer.snapps.games.drones.matches.Match.isOver()",0,1,0,0,0
"sneer.snapps.games.drones.matches.Match.result()",0,1,0,0,0
"sneer.snapps.games.drones.matches.Match.step()",0,1,0,0,0
"sneer.snapps.games.drones.matches.Match.unit1()",0,1,0,0,0
"sneer.snapps.games.drones.matches.Match.unit2()",0,1,0,0,0
"sneer.snapps.games.drones.units.Attributable.attributes()",0,1,0,0,0
"sneer.snapps.games.drones.units.Unit.hitpoints()",0,1,0,0,0
"sneer.snapps.games.drones.units.Unit.isAlive()",0,1,0,0,0
"sneer.snapps.games.drones.units.Unit.move()",0,1,0,0,0
"sneer.snapps.games.drones.units.Unit.size()",0,1,0,0,0
"sneer.snapps.games.drones.units.Unit.x()",0,1,0,0,0
"sneer.tests.SovereignCommunity.crash()",0,1,0,0,0
"sneer.tests.SovereignParty.contactNicknames()",0,1,0,0,0
"sneer.tests.SovereignParty.enableCodeSharing()",0,1,0,0,0
"sneer.tests.SovereignParty.folderToSync()",0,1,0,0,0
"sneer.tests.SovereignParty.gitHasOneCommit()",0,1,0,0,0
"sneer.tests.SovereignParty.gitPrepareEmptyRepo()",0,1,0,0,0
"sneer.tests.SovereignParty.gitPrepareRepoWithOneCommit()",0,1,0,0,0
"sneer.tests.SovereignParty.ownName()",0,1,0,0,0
"sneer.tests.SovereignParty.seal()",0,1,0,0,0
"sneer.tests.SovereignParty.startHomePage()",0,1,0,0,0
"sneer.tests.SovereignParty.waitForSync()",0,1,0,0,0
"sneer.tests.adapters.SneerParty.crash()",0,1,0,0,0
"sneer.tests.adapters.SneerParty.sneerPort()",0,1,0,0,0
"sneer.tests.adapters.SneerParty.startStunServer()",0,1,0,0,0
"snype.whisper.skin.audio.kernel.Audio.defaultAudioFormat()",0,1,0,0,0
"snype.whisper.skin.audio.kernel.Audio.tryToOpenCaptureLine()",0,1,0,0,0
"snype.whisper.skin.audio.kernel.Audio.tryToOpenPlaybackLine()",0,1,0,0,0
"snype.whisper.skin.audio.loopback.LoopbackTester.start()",0,1,0,0,0
"snype.whisper.skin.audio.loopback.LoopbackTester.stop()",0,1,0,0,0
"snype.whisper.skin.audio.mic.Mic.close()",0,1,0,0,0
"snype.whisper.skin.audio.mic.Mic.isOpen()",0,1,0,0,0
"snype.whisper.skin.screenshotter.Screenshotter.takeScreenshot()",0,1,0,0,0
"snype.whisper.speex.Encoder.getProcessedData()",0,1,0,0,0
"snype.whisper.speex.Speex.createDecoder()",0,1,0,0,0
"snype.whisper.speex.Speex.createEncoder()",0,1,0,0,0
"snype.whisper.speextuples.SpeexTuples2.hasTalkers()",0,1,0,0,0
